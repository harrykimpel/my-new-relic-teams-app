"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _menuButtonBehavior = _interopRequireDefault(require("../MenuButton/menuButtonBehavior"));

/**
 * @description
 * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.
 * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.
 * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.
 * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.
 * Triggers 'closeAndFocusTrigger' action with 'Escape' or 'altKey'+'ArrowUp'.
 * Triggers 'openAndFocusFirst' action with 'altKey'+'ArrowDown' on 'root' slot.
 *
 * @specification
 * Adds attribute 'tabIndex=-1' to 'toggleButton' slot.
 * Adds attribute 'aria-haspopup=true' to 'toggleButton' slot.
 */
var splitButtonBehavior = function splitButtonBehavior(props) {
  var splitButtonMenuButtonBehavior = function splitButtonMenuButtonBehavior() {
    var menuButtonBehaviorData = (0, _menuButtonBehavior.default)(props);
    menuButtonBehaviorData.attributes.trigger['aria-haspopup'] = undefined;
    return (0, _merge2.default)(menuButtonBehaviorData, {
      keyActions: {
        popup: {
          closeAndFocusTrigger: {
            keyCombinations: [{
              keyCode: keyboardKey.Escape
            }, {
              keyCode: keyboardKey.ArrowUp,
              altKey: true
            }]
          }
        },
        root: Object.assign({}, !props.open && {
          openAndFocusFirst: {
            keyCombinations: [{
              keyCode: keyboardKey.ArrowDown,
              altKey: true
            }]
          }
        })
      }
    });
  };

  return {
    attributes: {
      root: {},
      toggleButton: {
        tabIndex: -1,
        'aria-haspopup': true
      }
    },
    childBehaviors: {
      menuButton: splitButtonMenuButtonBehavior
    }
  };
};

var _default = splitButtonBehavior;
exports.default = _default;
//# sourceMappingURL=splitButtonBehavior.js.map
