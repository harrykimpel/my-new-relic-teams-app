"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _types = require("../../focusZone/types");

var _gridRowBehavior = _interopRequireDefault(require("./gridRowBehavior"));

/**
 * @specification
 * Adds role='grid'.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Provides arrow key navigation in vertical direction.
 * Focused active element of the component is reset when TAB from the component.
 * Triggers 'focus' action with 'Escape' on 'root'.
 * Applies 'gridRowBehavior' for 'row' child component.
 */
var gridNestedBehavior = function gridNestedBehavior(props) {
  return {
    attributes: {
      root: {
        role: 'grid'
      }
    },
    focusZone: {
      props: {
        shouldEnterInnerZone: function shouldEnterInnerZone(event) {
          return keyboardKey.getCode(event) === keyboardKey.ArrowRight;
        },
        direction: _types.FocusZoneDirection.vertical,
        shouldResetActiveElementWhenTabFromZone: true
      }
    },
    keyActions: {
      root: {
        focus: {
          keyCombinations: [{
            keyCode: keyboardKey.Escape
          }]
        }
      }
    },
    childBehaviors: {
      row: _gridRowBehavior.default
    }
  };
};

var _default = gridNestedBehavior;
exports.default = _default;
//# sourceMappingURL=gridNestedBehavior.js.map
