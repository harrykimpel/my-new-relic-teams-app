"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _attributes = require("../../attributes");

var _types = require("../../focusZone/types");

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _gridCellBehavior = _interopRequireDefault(require("./gridCellBehavior"));

/**
 * @specification
 * Adds role='row'.
 * Adds attribute 'data-is-focusable=true' to 'root' slot.
 * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Provides arrow key navigation in horizontal direction.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.
 * Applies 'gridCellBehavior' for 'cell' child component.
 */
var gridRowNestedBehavior = function gridRowNestedBehavior(props) {
  var _root;

  return {
    attributes: {
      root: (_root = {}, (0, _defineProperty2.default)(_root, _attributes.IS_FOCUSABLE_ATTRIBUTE, true), (0, _defineProperty2.default)(_root, "role", 'row'), (0, _defineProperty2.default)(_root, 'aria-selected', props.selected), _root)
    },
    focusZone: {
      props: {
        shouldEnterInnerZone: function shouldEnterInnerZone(event) {
          return keyboardKey.getCode(event) === keyboardKey.Enter;
        },
        direction: _types.FocusZoneDirection.horizontal
      }
    },
    keyActions: {
      root: {
        unsetRowTabbable: {
          keyCombinations: [{
            keyCode: keyboardKey.Tab,
            shiftKey: true
          }]
        },
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Enter
          }, {
            keyCode: keyboardKey.Spacebar
          }]
        }
      }
    },
    childBehaviors: {
      cell: _gridCellBehavior.default
    }
  };
};

var _default = gridRowNestedBehavior;
exports.default = _default;
//# sourceMappingURL=gridRowNestedBehavior.js.map
