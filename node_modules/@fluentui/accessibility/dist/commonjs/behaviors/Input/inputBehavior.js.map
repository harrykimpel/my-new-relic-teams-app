{"version":3,"sources":["behaviors/Input/inputBehavior.ts"],"names":["inputBehavior","props","attributes","root","disabled","keyActions","input","clear","keyCombinations","keyCode","keyboardKey","Escape"],"mappings":";;;;;;;;;AACA;;AAEA;;;;;AAKA,IAAMA,aAAgD,GAAG,SAAnDA,aAAmD,CAAAC,KAAK;AAAA,SAAK;AACjEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJ,yBAAiBF,KAAK,CAACG;AADnB;AADI,KADqD;AAMjEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADZ;AADF;AADG;AANqD,GAAL;AAAA,CAA9D;;eAeeX,a","sourcesContent":["import { Accessibility } from '../../types';\nimport * as keyboardKey from 'keyboard-key';\n\n/**\n * @specification\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'clear' action with 'Escape' on 'input'.\n */\nconst inputBehavior: Accessibility<InputBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      'aria-disabled': props.disabled,\n    },\n  },\n  keyActions: {\n    input: {\n      clear: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n    },\n  },\n});\n\nexport default inputBehavior;\n\ntype InputBehaviorProps = {\n  disabled?: boolean;\n};\n"],"file":"inputBehavior.js"}