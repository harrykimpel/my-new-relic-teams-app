"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _attributes = require("../../attributes");

var _types = require("../../focusZone/types");

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

/**
 * @description
 * Behavior for a card component with multiple focusable child elements.
 * @specification
 * Adds role='group'.
 * Adds attribute 'aria-disabled=true' based on the property 'disabled'.
 * Adds attribute 'tabIndex=0' to 'root' slot.
 * Adds attribute 'data-is-focusable=true' to 'root' slot.
 * Triggers 'focusCard' action with 'Escape' on 'root'.
 */
var cardChildrenFocusableBehavior = function cardChildrenFocusableBehavior(props) {
  var _root;

  return {
    attributes: {
      root: (_root = {
        role: 'group',
        tabIndex: 0
      }, (0, _defineProperty2.default)(_root, _attributes.IS_FOCUSABLE_ATTRIBUTE, true), (0, _defineProperty2.default)(_root, 'aria-disabled', props.disabled), _root)
    },
    focusZone: {
      props: {
        handleTabKey: _types.FocusZoneTabbableElements.all,
        isCircularNavigation: true
      }
    },
    keyActions: {
      root: {
        focusCard: {
          keyCombinations: [{
            keyCode: keyboardKey.Escape
          }]
        }
      }
    }
  };
};

var _default = cardChildrenFocusableBehavior;
exports.default = _default;
//# sourceMappingURL=cardChildrenFocusableBehavior.js.map
