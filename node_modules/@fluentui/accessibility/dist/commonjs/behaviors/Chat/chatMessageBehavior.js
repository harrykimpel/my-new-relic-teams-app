"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _attributes = require("../../attributes");

var _types = require("../../focusZone/types");

/**
 * @description
 * Sets the message to be a focusable element.
 * Adds a vertical circular focus zone navigation where a user navigates using a Tab key.
 * Adds a key action which prevents up and down arrow keys from navigating in FocusZone, we only want a Tab key to navigate.
 * Adds an escape key action which focuses the chat message, i.e., moves key handling from inside a message back to the chat list.
 *
 * @specification
 * Provides arrow key navigation in vertical direction.
 * Keyboard navigation is circular.
 * Focus is moved within the focusable children of the component using TAB key.
 * Does not handle PageDown and PageUp.
 */
var chatMessageBehavior = function chatMessageBehavior() {
  var _root;

  return {
    attributes: {
      root: (_root = {}, (0, _defineProperty2.default)(_root, _attributes.IS_FOCUSABLE_ATTRIBUTE, true), (0, _defineProperty2.default)(_root, "tabIndex", -1), _root)
    },
    focusZone: {
      props: {
        handleTabKey: _types.FocusZoneTabbableElements.all,
        isCircularNavigation: true,
        direction: _types.FocusZoneDirection.vertical,
        pagingSupportDisabled: true
      }
    },
    keyActions: {
      root: {
        // prevents default FocusZone behavior, in this case, prevents using arrow keys as navigation (we only want a Tab key to navigate)
        preventDefault: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowUp
          }, {
            keyCode: keyboardKey.ArrowDown
          }]
        },
        focus: {
          keyCombinations: [{
            keyCode: keyboardKey.Escape
          }]
        }
      }
    }
  };
};

var _default = chatMessageBehavior;
exports.default = _default;
//# sourceMappingURL=chatMessageBehavior.js.map
