"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _attributes = require("../../attributes");

/**
 * @description
 *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.
 *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.
 *  @specification
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Triggers 'performClick' action with 'Spacebar' on 'root'.
 */
var treeTitleBehavior = function treeTitleBehavior(props) {
  var _ref;

  return {
    attributes: {
      root: Object.assign({}, !props.hasSubtree && (_ref = {
        tabIndex: -1
      }, (0, _defineProperty2.default)(_ref, _attributes.IS_FOCUSABLE_ATTRIBUTE, true), (0, _defineProperty2.default)(_ref, "role", 'treeitem'), (0, _defineProperty2.default)(_ref, 'aria-setsize', props.treeSize), (0, _defineProperty2.default)(_ref, 'aria-posinset', props.index), (0, _defineProperty2.default)(_ref, 'aria-level', props.level), (0, _defineProperty2.default)(_ref, 'aria-selected', props.selectable ? props.selected || false : undefined), _ref))
    },
    keyActions: {
      root: {
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Spacebar
          }]
        }
      }
    }
  };
};

var _default = treeTitleBehavior;
exports.default = _default;
//# sourceMappingURL=treeTitleBehavior.js.map
