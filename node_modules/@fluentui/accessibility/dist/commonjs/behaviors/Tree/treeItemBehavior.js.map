{"version":3,"sources":["behaviors/Tree/treeItemBehavior.ts"],"names":["treeItemBehavior","props","attributes","root","role","hasSubtree","expanded","selectable","selected","undefined","tabIndex","IS_FOCUSABLE_ATTRIBUTE","treeSize","index","level","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","Spacebar","isSubtreeExpanded","collapse","ArrowLeft","focusFirstChild","ArrowRight","focusParent","expand","expandSiblings","performSelection","childBehaviors","title","treeTitleBehavior"],"mappings":"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","sourcesContent":["import * as keyboardKey from 'keyboard-key';\nimport { Accessibility } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport treeTitleBehavior from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nconst treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'none',\n      ...(props.hasSubtree && {\n        'aria-expanded': props.expanded,\n        'aria-selected': props.selectable ? props.selected || false : undefined,\n        tabIndex: -1,\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        role: 'treeitem',\n        'aria-setsize': props.treeSize,\n        'aria-posinset': props.index,\n        'aria-level': props.level,\n      }),\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n      ...(isSubtreeExpanded(props) && {\n        collapse: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        focusFirstChild: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n        focusParent: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n      }),\n      ...(!isSubtreeExpanded(props) &&\n        props.hasSubtree && {\n          expand: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n          },\n          focusParent: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n          },\n        }),\n      expandSiblings: {\n        keyCombinations: [{ keyCode: keyboardKey['*'] }],\n      },\n      ...(props.selectable && {\n        performClick: {\n          keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: keyboardKey.Spacebar }],\n        },\n        performSelection: {\n          keyCombinations: [{ keyCode: keyboardKey.Spacebar }],\n        },\n      }),\n    },\n  },\n  childBehaviors: {\n    title: treeTitleBehavior,\n  },\n});\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is expanded */\nconst isSubtreeExpanded = (props: TreeItemBehaviorProps): boolean => {\n  const { hasSubtree, expanded } = props;\n  return !!(hasSubtree && expanded);\n};\n\nexport default treeItemBehavior;\n"],"file":"treeItemBehavior.js"}