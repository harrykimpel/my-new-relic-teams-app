"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

/**
 * @specification
 * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.
 * Adds attribute 'tabIndex=0' if element type is other than 'button'.
 * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.
 * Adds attribute 'aria-disabled=true' based on the property 'loading'.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 */
var buttonBehavior = function buttonBehavior(props) {
  var definition = {
    attributes: {
      root: {
        role: props.as === 'button' ? undefined : 'button',
        tabIndex: props.as === 'button' ? undefined : 0,
        disabled: props.disabled && !props.loading ? props.as === 'button' ? true : undefined : undefined,
        'aria-disabled': props.disabled || props.loading
      }
    },
    keyActions: {
      root: Object.assign({}, props.as !== 'button' && props.as !== 'a' && {
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Enter
          }, {
            keyCode: keyboardKey.Spacebar
          }]
        }
      })
    }
  };

  if (process.env.NODE_ENV !== 'production' && props.loading) {
    // Override the default trigger's accessibility schema class.
    definition.attributes.root['data-aa-class'] = 'LoadingButton';
  }

  return definition;
};

var _default = buttonBehavior;
exports.default = _default;
//# sourceMappingURL=buttonBehavior.js.map
