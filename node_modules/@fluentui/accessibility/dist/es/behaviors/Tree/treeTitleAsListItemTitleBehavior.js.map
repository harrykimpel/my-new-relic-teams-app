{"version":3,"sources":["behaviors/Tree/treeTitleAsListItemTitleBehavior.ts"],"names":["treeTitleBehavior","treeTitleAsListItemTitleBehavior","props","behavior","attributes","root","hasSubtree","role"],"mappings":";AAGA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA;;;;;AAIA,IAAMC,gCAAkE,GAAG,SAArEA,gCAAqE,CAAAC,KAAK,EAAI;AAClF,MAAMC,QAAQ,GAAGH,iBAAiB,CAACE,KAAD,CAAlC;AACA,SAAO,OAAQC,QAAR,EAAkB;AACvBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,oBACE,CAACH,KAAK,CAACI,UAAP,IAAqB;AACvBC,QAAAA,IAAI,EAAE;AADiB,OADvB;AADM;AADW,GAAlB,CAAP;AASD,CAXD;;AAaA,eAAeN,gCAAf","sourcesContent":["import * as _ from 'lodash';\n\nimport { Accessibility } from '../../types';\nimport treeTitleBehavior from './treeTitleBehavior';\n\n/**\n * @description\n * Adds role 'treeitem' if the title is a leaf node inside the tree.\n */\nconst treeTitleAsListItemTitleBehavior: Accessibility<TreeTitleBehavior> = props => {\n  const behavior = treeTitleBehavior(props);\n  return _.merge(behavior, {\n    attributes: {\n      root: {\n        ...(!props.hasSubtree && {\n          role: 'listitem',\n        }),\n      },\n    },\n  });\n};\n\nexport default treeTitleAsListItemTitleBehavior;\n\ntype TreeTitleBehavior = {\n  /** Indicates whether `TreeTitle` has a subtree. */\n  hasSubtree?: boolean;\n};\n"],"file":"treeTitleAsListItemTitleBehavior.js"}