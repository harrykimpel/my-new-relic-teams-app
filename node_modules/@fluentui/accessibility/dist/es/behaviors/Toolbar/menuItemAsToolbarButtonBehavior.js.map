{"version":3,"sources":["behaviors/Toolbar/menuItemAsToolbarButtonBehavior.ts"],"names":["keyboardKey","IS_FOCUSABLE_ATTRIBUTE","menuItemAsToolbarButtonBehavior","props","attributes","wrapper","role","root","tabIndex","menu","undefined","disabled","keyActions","performClick","keyCombinations","keyCode","Enter","Spacebar","closeMenuAndFocusTrigger","Escape","openMenu","vertical","ArrowDown","doNotNavigateNextParentItem","menuOpen","ArrowLeft","ArrowRight"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,cAA7B;AAEA,SAASC,sBAAT,QAAuC,kBAAvC;;AAIA;;;;;;;;;;;;;;;;;;;AAmBA,IAAMC,+BAAqE,GAAG,SAAxEA,+BAAwE,CAAAC,KAAK;AAAA,SAAK;AACtFC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OADC;AAIVC,MAAAA,IAAI;AACFD,QAAAA,IAAI,EAAE,QADJ;AAEFE,QAAAA,QAAQ,EAAE,CAFR;AAGF,yBAAiBL,KAAK,CAACM,IAAN,GAAa,MAAb,GAAsBC,SAHrC;AAIF,yBAAiBP,KAAK,CAAC,UAAD,CAJpB;AAKF,sBAAcA,KAAK,CAAC,YAAD,CALjB;AAMF,2BAAmBA,KAAK,CAAC,iBAAD,CANtB;AAOF,4BAAoBA,KAAK,CAAC,kBAAD;AAPvB,SAQDF,sBARC,EAQwB,CAACE,KAAK,CAACQ,QAR/B;AAJM,KAD0E;AAiBtFC,IAAAA,UAAU,EAAE;AACVP,MAAAA,OAAO,EAAE;AACPQ,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEf,WAAW,CAACgB;AAAvB,WAAD,EAAiC;AAAED,YAAAA,OAAO,EAAEf,WAAW,CAACiB;AAAvB,WAAjC;AADL,SADP;AAIPC,QAAAA,wBAAwB,EAAE;AACxBJ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEf,WAAW,CAACmB;AAAvB,WAAD;AADO,SAJnB;AAOPC,QAAAA,QAAQ,EAAE,CAACjB,KAAK,CAACkB,QAAP,IAAmB;AAC3BP,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEf,WAAW,CAACsB;AAAvB,WAAD;AADU,SAPtB;AAUPC,QAAAA,2BAA2B,EAAE;AAC3BT,UAAAA,eAAe,EACbX,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACqB,QAApB,GACI,CAAC;AAAET,YAAAA,OAAO,EAAEf,WAAW,CAACyB;AAAvB,WAAD,EAAqC;AAAEV,YAAAA,OAAO,EAAEf,WAAW,CAAC0B;AAAvB,WAArC,CADJ,GAEI;AAJqB;AAVtB;AADC;AAjB0E,GAAL;AAAA,CAAnF;;AAsCA,eAAexB,+BAAf","sourcesContent":["import * as keyboardKey from 'keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { MenuItemBehaviorProps } from '../Menu/menuItemBehavior';\n\n/**\n * @description\n * The behavior is designed for particular structure of menu item. The item consists of root element and anchor inside the root element.\n *\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'button' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-haspopup=true' to 'root' slot if 'menu' property is set.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'wrapper'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper'.\n * Triggers 'openMenu' action with 'ArrowDown' on 'wrapper', when orientation is horizontal.\n * Triggers 'doNotNavigateNextParentItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.\n */\nconst menuItemAsToolbarButtonBehavior: Accessibility<MenuItemBehaviorProps> = props => ({\n  attributes: {\n    wrapper: {\n      role: 'presentation',\n    },\n    root: {\n      role: 'button',\n      tabIndex: 0,\n      'aria-haspopup': props.menu ? 'true' : undefined,\n      'aria-disabled': props['disabled'],\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-describedby': props['aria-describedby'],\n      [IS_FOCUSABLE_ATTRIBUTE]: !props.disabled,\n    },\n  },\n\n  keyActions: {\n    wrapper: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n      closeMenuAndFocusTrigger: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n      openMenu: !props.vertical && {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowDown }],\n      },\n      doNotNavigateNextParentItem: {\n        keyCombinations:\n          props.menu && props.menuOpen\n            ? [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }]\n            : null,\n      },\n    },\n  },\n});\n\nexport default menuItemAsToolbarButtonBehavior;\n"],"file":"menuItemAsToolbarButtonBehavior.js"}