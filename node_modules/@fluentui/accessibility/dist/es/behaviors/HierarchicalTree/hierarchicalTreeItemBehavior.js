import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as keyboardKey from 'keyboard-key';
import { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';

/**
 * @description
 * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.
 * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.
 * Adds 'tabIndex' as '-1' if the item is not a leaf.
 *
 * @specification
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var hierarchicalTreeItemBehavior = function hierarchicalTreeItemBehavior(props) {
  var _ref;

  return {
    attributes: {
      root: Object.assign({
        role: 'none'
      }, props.items && props.items.length && (_ref = {
        'aria-expanded': props.open,
        tabIndex: -1
      }, _defineProperty(_ref, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_ref, "role", 'treeitem'), _ref))
    },
    keyActions: {
      root: Object.assign({
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Enter
          }, {
            keyCode: keyboardKey.Spacebar
          }]
        }
      }, isSubtreeOpen(props) && {
        receiveFocus: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowLeft
          }]
        },
        collapse: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowLeft
          }]
        },
        focusSubtree: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowRight
          }]
        }
      }, {}, !isSubtreeOpen(props) && {
        expand: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowRight
          }]
        }
      })
    }
  };
};

/** Checks if current tree item has a subtree and it is opened */
var isSubtreeOpen = function isSubtreeOpen(props) {
  var items = props.items,
      open = props.open;
  return !!(items && items.length && open);
};

export default hierarchicalTreeItemBehavior;
//# sourceMappingURL=hierarchicalTreeItemBehavior.js.map
