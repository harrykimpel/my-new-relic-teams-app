{"version":3,"sources":["behaviors/Table/gridRowNestedBehavior.ts"],"names":["IS_FOCUSABLE_ATTRIBUTE","FocusZoneDirection","keyboardKey","gridCellBehavior","gridRowNestedBehavior","props","attributes","root","selected","focusZone","shouldEnterInnerZone","event","getCode","Enter","direction","horizontal","keyActions","unsetRowTabbable","keyCombinations","keyCode","Tab","shiftKey","performClick","Spacebar","childBehaviors","cell"],"mappings":";AACA,SAASA,sBAAT,QAAuC,kBAAvC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAGA;;;;;;;;;;;AAWA,IAAMC,qBAA0D,GAAG,SAA7DA,qBAA6D,CAAAC,KAAK;AAAA;;AAAA,SAAK;AAC3EC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,sCACDP,sBADC,EACwB,IADxB,kCAEI,KAFJ,0BAGF,eAHE,EAGeK,KAAK,CAACG,QAHrB;AADM,KAD+D;AAQ3EC,IAAAA,SAAS,EAAE;AACTJ,MAAAA,KAAK,EAAE;AACLK,QAAAA,oBAAoB,EAAE,8BAAAC,KAAK;AAAA,iBAAIT,WAAW,CAACU,OAAZ,CAAoBD,KAApB,MAA+BT,WAAW,CAACW,KAA/C;AAAA,SADtB;AAELC,QAAAA,SAAS,EAAEb,kBAAkB,CAACc;AAFzB;AADE,KARgE;AAc3EC,IAAAA,UAAU,EAAE;AACVT,MAAAA,IAAI,EAAE;AACJU,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEjB,WAAW,CAACkB,GAAvB;AAA4BC,YAAAA,QAAQ,EAAE;AAAtC,WAAD;AADD,SADd;AAIJC,QAAAA,YAAY,EAAE;AACZJ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEjB,WAAW,CAACW;AAAvB,WAAD,EAAiC;AAAEM,YAAAA,OAAO,EAAEjB,WAAW,CAACqB;AAAvB,WAAjC;AADL;AAJV;AADI,KAd+D;AAwB3EC,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAEtB;AADQ;AAxB2D,GAAL;AAAA,CAAxE;;AA6BA,eAAeC,qBAAf","sourcesContent":["import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\nimport gridCellBehavior from './gridCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in horizontal direction.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridCellBehavior' for 'cell' child component.\n */\nconst gridRowNestedBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n      'aria-selected': props.selected,\n    },\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => keyboardKey.getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.horizontal,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridCellBehavior,\n  },\n});\n\nexport default gridRowNestedBehavior;\n"],"file":"gridRowNestedBehavior.js"}