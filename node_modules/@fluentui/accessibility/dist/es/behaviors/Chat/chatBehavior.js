import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as keyboardKey from 'keyboard-key';
import { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';
import { FocusZoneDirection } from '../../focusZone/types';
var CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';
/**
 * @description
 * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.
 *
 * @specification
 * Provides arrow key navigation in vertical direction.
 * Focus is set initially on the specified default tabbable element.
 * Focused active element of the component is reset when TAB from the component.
 * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.
 * Does not handle PageDown and PageUp.
 */

var ChatBehavior = function ChatBehavior() {
  var _props;

  return {
    attributes: {
      root: {}
    },
    focusZone: {
      props: (_props = {
        shouldEnterInnerZone: function shouldEnterInnerZone(event) {
          return keyboardKey.getCode(event) === keyboardKey.Enter;
        },
        direction: FocusZoneDirection.vertical,
        shouldResetActiveElementWhenTabFromZone: true,
        defaultTabbableElement: getLastTabbableElement
      }, _defineProperty(_props, CHAT_FOCUSZONE_ATTRIBUTE, ''), _defineProperty(_props, "pagingSupportDisabled", true), _props)
    }
  };
};

var getLastTabbableElement = function getLastTabbableElement(root) {
  var lastVisibleMessage = root.querySelector('[data-last-visible="true"]');
  if (lastVisibleMessage) return lastVisibleMessage;
  var chatItemsElements = root.querySelectorAll("[".concat(CHAT_FOCUSZONE_ATTRIBUTE, "] .ui-chat__message[").concat(IS_FOCUSABLE_ATTRIBUTE, "=\"true\"]"));
  return chatItemsElements.length > 0 ? chatItemsElements[chatItemsElements.length - 1] : null;
};

export default ChatBehavior;
//# sourceMappingURL=chatBehavior.js.map
