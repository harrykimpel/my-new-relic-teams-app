{"version":3,"sources":["behaviors/Tab/tabBehavior.ts"],"names":["keyboardKey","IS_FOCUSABLE_ATTRIBUTE","tabBehavior","props","attributes","wrapper","role","root","tabIndex","active","disabled","keyActions","performClick","keyCombinations","keyCode","Enter","Spacebar"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,cAA7B;AAEA,SAASC,sBAAT,QAAuC,kBAAvC;;AAGA;;;;;;;;;;;;;;AAcA,IAAMC,WAA4C,GAAG,SAA/CA,WAA+C,CAAAC,KAAK;AAAA,SAAK;AAC7DC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OADC;AAIVC,MAAAA,IAAI;AACFD,QAAAA,IAAI,EAAE,KADJ;AAEFE,QAAAA,QAAQ,EAAE,CAFR;AAGF,yBAAiB,CAAC,CAACL,KAAK,CAACM,MAHvB;AAIF,sBAAcN,KAAK,CAAC,YAAD,CAJjB;AAKF,2BAAmBA,KAAK,CAAC,iBAAD,CALtB;AAMF,4BAAoBA,KAAK,CAAC,kBAAD,CANvB;AAOF,yBAAiBA,KAAK,CAAC,eAAD,CAPpB;AAQF,yBAAiBA,KAAK,CAAC,UAAD;AARpB,SASDF,sBATC,EASwB,CAACE,KAAK,CAACO,QAT/B;AAJM,KADiD;AAkB7DC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAE;AACJK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEd,WAAW,CAACe;AAAvB,WAAD,EAAiC;AAAED,YAAAA,OAAO,EAAEd,WAAW,CAACgB;AAAvB,WAAjC;AADL;AADV;AADI;AAlBiD,GAAL;AAAA,CAA1D;;AA2BA,eAAed,WAAf","sourcesContent":["import * as keyboardKey from 'keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'tab' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-selected=true' based on the property 'active'. This can be overriden by providing 'aria-selected' property directly to the component.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-controls' based on the property 'aria-controls' to 'root' slot.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nconst tabBehavior: Accessibility<TabBehaviorProps> = props => ({\n  attributes: {\n    wrapper: {\n      role: 'presentation',\n    },\n    root: {\n      role: 'tab',\n      tabIndex: 0,\n      'aria-selected': !!props.active,\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-describedby': props['aria-describedby'],\n      'aria-controls': props['aria-controls'],\n      'aria-disabled': props['disabled'],\n      [IS_FOCUSABLE_ATTRIBUTE]: !props.disabled,\n    },\n  },\n\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n    },\n  },\n});\n\nexport default tabBehavior;\n\ntype TabBehaviorProps = {\n  /** Indicates if tab is selected. */\n  active?: boolean;\n  /** Indicates if tab is disabled. */\n  disabled?: boolean;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'aria-controls'>;\n"],"file":"tabBehavior.js"}