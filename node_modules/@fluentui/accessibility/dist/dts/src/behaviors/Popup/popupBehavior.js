"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var keyboardKey = require("keyboard-key");
var _ = require("lodash");
/**
 * @description
 * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.
 *
 * @specification
 * Adds attribute 'aria-disabled=true' to 'trigger' slot if 'disabled' property is true. Does not set the attribute otherwise.
 * Adds attribute 'role=dialog' to 'popup' slot if 'trapFocus' property is true. Sets the attribute to 'complementary' otherwise.
 * Adds attribute 'aria-modal=true' to 'popup' slot if 'trapFocus' property is true. Does not set the attribute otherwise.
 */
var popupBehavior = function (props) {
    var onAsArray = _.isArray(props.on) ? props.on : [props.on];
    var tabbableTriggerProps = props.tabbableTrigger
        ? { tabIndex: getAriaAttributeFromProps('tabIndex', props, 0) }
        : undefined;
    if (tabbableTriggerProps) {
        tabbableTriggerProps['aria-haspopup'] = 'true';
        if (process.env.NODE_ENV !== 'production') {
            // Override the default trigger's accessibility schema class.
            tabbableTriggerProps['data-aa-class'] = 'PopupButton';
        }
    }
    return {
        attributes: {
            trigger: tslib_1.__assign(tslib_1.__assign({}, tabbableTriggerProps), { 'aria-disabled': props.disabled }),
            popup: {
                role: props.trapFocus ? 'dialog' : 'complementary',
                'aria-modal': props.trapFocus ? true : undefined,
            },
        },
        keyActions: {
            popup: {
                closeAndFocusTrigger: {
                    keyCombinations: [{ keyCode: keyboardKey.Escape }],
                },
                preventScroll: {
                    keyCombinations: props.isOpenedByRightClick &&
                        _.includes(onAsArray, 'context') && [
                        { keyCode: keyboardKey.ArrowDown },
                        { keyCode: keyboardKey.ArrowUp },
                        { keyCode: keyboardKey.PageDown },
                        { keyCode: keyboardKey.PageUp },
                        { keyCode: keyboardKey.Home },
                        { keyCode: keyboardKey.End },
                    ],
                },
            },
            trigger: {
                close: {
                    keyCombinations: [{ keyCode: keyboardKey.Escape }],
                },
                toggle: {
                    keyCombinations: _.includes(onAsArray, 'click') && [
                        { keyCode: keyboardKey.Enter },
                        { keyCode: keyboardKey.Spacebar },
                    ],
                },
                open: {
                    keyCombinations: _.includes(onAsArray, 'hover') &&
                        !_.includes(onAsArray, 'context') && [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],
                },
            },
        },
    };
};
var isFocusable = function (propsData) {
    try {
        var as = propsData.as, href = propsData.href, type = propsData.type;
        return type === 'button' || type === 'input' || (type === 'a' && href !== undefined) || as === 'button';
    }
    catch (_a) {
        return false;
    }
};
var getAriaAttributeFromProps = function (attributeName, props, defaultValue) {
    if (!props.trigger)
        return undefined;
    if (props.trigger.props[attributeName]) {
        return props.trigger.props[attributeName];
    }
    var _a = props.trigger.props, as = _a.as, href = _a.href;
    var type = props.trigger.type;
    if (isFocusable({ as: as, href: href, type: type })) {
        return undefined;
    }
    return defaultValue;
};
exports.default = popupBehavior;
