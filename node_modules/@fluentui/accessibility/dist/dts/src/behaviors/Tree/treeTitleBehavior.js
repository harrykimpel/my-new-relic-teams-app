"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var keyboardKey = require("keyboard-key");
var attributes_1 = require("../../attributes");
/**
 * @description
 *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.
 *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.
 *  @specification
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Triggers 'performClick' action with 'Spacebar' on 'root'.
 */
var treeTitleBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: tslib_1.__assign({}, (!props.hasSubtree && (_a = {
                    tabIndex: -1
                },
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true,
                _a.role = 'treeitem',
                _a['aria-setsize'] = props.treeSize,
                _a['aria-posinset'] = props.index,
                _a['aria-level'] = props.level,
                _a['aria-selected'] = props.selectable ? props.selected || false : undefined,
                _a))),
        },
        keyActions: {
            root: {
                performClick: {
                    keyCombinations: [{ keyCode: keyboardKey.Spacebar }],
                },
            },
        },
    });
};
exports.default = treeTitleBehavior;
