"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var keyboardKey = require("keyboard-key");
var attributes_1 = require("../../attributes");
/**
 * @description
 * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.
 * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.
 * Adds 'tabIndex' as '-1' if the item is not a leaf.
 *
 * @specification
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var hierarchicalTreeItemBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: tslib_1.__assign({ role: 'none' }, (props.items &&
                props.items.length && (_a = {
                    'aria-expanded': props.open,
                    tabIndex: -1
                },
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true,
                _a.role = 'treeitem',
                _a))),
        },
        keyActions: {
            root: tslib_1.__assign(tslib_1.__assign({ performClick: {
                    keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],
                } }, (isSubtreeOpen(props) && {
                receiveFocus: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],
                },
                collapse: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],
                },
                focusSubtree: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],
                },
            })), (!isSubtreeOpen(props) && {
                expand: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],
                },
            })),
        },
    });
};
/** Checks if current tree item has a subtree and it is opened */
var isSubtreeOpen = function (props) {
    var items = props.items, open = props.open;
    return !!(items && items.length && open);
};
exports.default = hierarchicalTreeItemBehavior;
