"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var accessibility_1 = require("@fluentui/accessibility");
var keyboardKey = require("keyboard-key");
var _ = require("lodash");
function verifyKeys(supportedKeys, keysFromBehavior) {
    keysFromBehavior.forEach(function (keyCombination) {
        var keyCombinationFound = _.find(supportedKeys, keyCombination);
        expect(keyCombinationFound).toEqual(keyCombination);
    });
}
describe('SplitButtonBehavior.ts', function () {
    test('aria-haspopup is not defined for splitButton', function () {
        var property = {
            contextMenu: false,
        };
        var expectedResult = accessibility_1.splitButtonBehavior(property);
        expect(expectedResult['childBehaviors']['menuButton'](property).attributes.trigger['aria-haspopup']).toBe(undefined);
    });
    test('close menu with different keys', function () {
        var property = {};
        var supportedKeys = [
            { keyCode: keyboardKey.Escape },
            { altKey: true, keyCode: keyboardKey.ArrowUp },
            { keyCode: keyboardKey.Tab, shiftKey: false },
            { keyCode: keyboardKey.Tab, shiftKey: true },
        ];
        var keysFromBehavior = accessibility_1.splitButtonBehavior(property)['childBehaviors']['menuButton'](property).keyActions.popup
            .closeAndFocusTrigger.keyCombinations;
        verifyKeys(supportedKeys, keysFromBehavior);
    });
    test('open menu with alt + arrow down ', function () {
        var property = {};
        var supportedKeys = [{ altKey: true, keyCode: keyboardKey.ArrowDown }];
        var keysFromBehavior = accessibility_1.splitButtonBehavior(property)['childBehaviors']['menuButton'](property).keyActions.root
            .openAndFocusFirst.keyCombinations;
        verifyKeys(supportedKeys, keysFromBehavior);
    });
});
