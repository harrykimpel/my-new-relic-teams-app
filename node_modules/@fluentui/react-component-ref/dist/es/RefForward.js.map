{"version":3,"sources":["RefForward.tsx"],"names":["PropTypes","React","handleRef","refPropType","RefForward","node","props","children","innerRef","ref","currentNode","prevProps","cloneElement","handleRefOverride","Component","process","env","NODE_ENV","element","isRequired"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAmBC,WAAnB,QAAsC,SAAtC;;IAEqBC,U;;;;;;;;;;;;;;;;;;kEAYQ,I;;wEAEP,UAACC,IAAD,EAAuB;AAAA,wBACV,MAAKC,KADK;AAAA,UACjCC,QADiC,eACjCA,QADiC;AAAA,UACvBC,QADuB,eACvBA,QADuB;AAGzCN,MAAAA,SAAS,CAAEK,QAAD,CAA2DE,GAA5D,EAAiEJ,IAAjE,CAAT;AACAH,MAAAA,SAAS,CAACM,QAAD,EAAWH,IAAX,CAAT;AAEA,YAAKK,WAAL,GAAmBL,IAAnB;AACD,K;;;;;;;uCAEkBM,S,EAAqB;AACtC,UAAIA,SAAS,CAACH,QAAV,KAAuB,KAAKF,KAAL,CAAWE,QAAtC,EAAgD;AAC9CN,QAAAA,SAAS,CAAC,KAAKI,KAAL,CAAWE,QAAZ,EAAsB,KAAKE,WAA3B,CAAT;AACD;AACF;;;2CAEsB;AACrB,aAAO,KAAKA,WAAZ;AACD;;;6BAEQ;AAAA,UACCH,QADD,GACc,KAAKD,KADnB,CACCC,QADD;AAGP,aAAON,KAAK,CAACW,YAAN,CAAmBL,QAAnB,EAA6B;AAClCE,QAAAA,GAAG,EAAE,KAAKI;AADwB,OAA7B,CAAP;AAGD;;;;EAvCqCZ,KAAK,CAACa,S;;gBAAzBV,U,iBACE,Y;;gBADFA,U,eAKjBW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI;AACEV,EAAAA,QAAQ,EAAEP,SAAS,CAACkB,OAAV,CAAkBC,UAD9B;AAEEX,EAAAA,QAAQ,EAAEL,WAAW,CAACgB;AAFxB,CADJ,GAKI,E;;SAVaf,U","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport handleRef from './handleRef';\nimport { RefProps, refPropType } from './types';\n\nexport default class RefForward extends React.Component<RefProps> {\n  static displayName = 'RefForward';\n\n  // TODO: use Babel plugin for this\n  static propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          children: PropTypes.element.isRequired,\n          innerRef: refPropType.isRequired,\n        }\n      : {};\n\n  currentNode: Node | null = null;\n\n  handleRefOverride = (node: HTMLElement) => {\n    const { children, innerRef } = this.props;\n\n    handleRef((children as React.ReactElement & { ref: React.Ref<any> }).ref, node);\n    handleRef(innerRef, node);\n\n    this.currentNode = node;\n  };\n\n  componentDidUpdate(prevProps: RefProps) {\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, this.currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    delete this.currentNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return React.cloneElement(children, {\n      ref: this.handleRefOverride,\n    });\n  }\n}\n"],"file":"RefForward.js"}