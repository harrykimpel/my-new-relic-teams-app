{"version":3,"sources":["RefFindNode.tsx"],"names":["PropTypes","React","ReactDOM","handleRef","refPropType","RefFindNode","prevNode","findDOMNode","props","innerRef","prevProps","currentNode","children","Component","process","env","NODE_ENV","element","isRequired"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAmBC,WAAnB,QAAsC,SAAtC;;IAEqBC,W;;;;;;;;;;;;;;;;;;+DAYK,I;;;;;;;wCAEJ;AAClB,WAAKC,QAAL,GAAgBJ,QAAQ,CAACK,WAAT,CAAqB,IAArB,CAAhB;AAEAJ,MAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsB,KAAKH,QAA3B,CAAT;AACD;;;uCAEkBI,S,EAAqB;AACtC,UAAMC,WAAW,GAAGT,QAAQ,CAACK,WAAT,CAAqB,IAArB,CAApB;;AAEA,UAAI,KAAKD,QAAL,KAAkBK,WAAtB,EAAmC;AACjC,aAAKL,QAAL,GAAgBK,WAAhB;AACAR,QAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsBE,WAAtB,CAAT;AACD;;AAED,UAAID,SAAS,CAACD,QAAV,KAAuB,KAAKD,KAAL,CAAWC,QAAtC,EAAgD;AAC9CN,QAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsBE,WAAtB,CAAT;AACD;AACF;;;2CAEsB;AACrBR,MAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWC,QAAZ,EAAsB,IAAtB,CAAT;AAEA,aAAO,KAAKH,QAAZ;AACD;;;6BAEQ;AAAA,UACCM,QADD,GACc,KAAKJ,KADnB,CACCI,QADD;AAGP,aAAOA,QAAP;AACD;;;;EA3CsCX,KAAK,CAACY,S;;gBAA1BR,W,iBACE,a;;gBADFA,W,eAKjBS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI;AACEJ,EAAAA,QAAQ,EAAEZ,SAAS,CAACiB,OAAV,CAAkBC,UAD9B;AAEET,EAAAA,QAAQ,EAAEL,WAAW,CAACc;AAFxB,CADJ,GAKI,E;;SAVab,W","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport handleRef from './handleRef';\nimport { RefProps, refPropType } from './types';\n\nexport default class RefFindNode extends React.Component<RefProps> {\n  static displayName = 'RefFindNode';\n\n  // TODO: use Babel plugin for this\n  static propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          children: PropTypes.element.isRequired,\n          innerRef: refPropType.isRequired,\n        }\n      : {};\n\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n\n    handleRef(this.props.innerRef, this.prevNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    const currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"],"file":"RefFindNode.js"}