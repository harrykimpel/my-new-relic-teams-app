{"version":3,"sources":["Ref.tsx"],"names":["PropTypes","React","ReactIs","RefFindNode","RefForward","refPropType","Ref","props","children","innerRef","rest","child","Children","only","ElementType","isForwardRef","childWithProps","Object","keys","length","cloneElement","displayName","process","env","NODE_ENV","propTypes","element","isRequired"],"mappings":";AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAmBC,WAAnB,QAAsC,SAAtC;;AAEA,IAAMC,GAAsC,GAAG,SAAzCA,GAAyC,CAAAC,KAAK,EAAI;AAAA,MAC9CC,QAD8C,GACdD,KADc,CAC9CC,QAD8C;AAAA,MACpCC,QADoC,GACdF,KADc,CACpCE,QADoC;AAAA,MACvBC,IADuB,4BACdH,KADc;;AAGtD,MAAMI,KAAK,GAAGV,KAAK,CAACW,QAAN,CAAeC,IAAf,CAAoBL,QAApB,CAAd;AACA,MAAMM,WAAW,GAAGZ,OAAO,CAACa,YAAR,CAAqBJ,KAArB,IAA8BP,UAA9B,GAA2CD,WAA/D;AACA,MAAMa,cAAc,GAAGL,KAAK,IAAID,IAAT,IAAiBO,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,MAAlB,GAA2B,CAA5C,GAAgDlB,KAAK,CAACmB,YAAN,CAAmBT,KAAnB,EAA0BD,IAA1B,CAAhD,GAAkFC,KAAzG;AAEA,SAAO,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEF;AAAvB,KAAkCO,cAAlC,CAAP;AACD,CARD;;AAUAV,GAAG,CAACe,WAAJ,GAAkB,KAAlB,C,CACA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzClB,EAAAA,GAAG,CAACmB,SAAJ,GAAgB;AACdjB,IAAAA,QAAQ,EAAER,SAAS,CAAC0B,OAAV,CAAkBC,UADd;AAEdlB,IAAAA,QAAQ,EAAEJ,WAAW,CAACsB;AAFR,GAAhB;AAID;;AAED,eAAerB,GAAf","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport RefFindNode from './RefFindNode';\nimport RefForward from './RefForward';\nimport { RefProps, refPropType } from './types';\n\nconst Ref: React.FunctionComponent<RefProps> = props => {\n  const { children, innerRef, ...rest } = props;\n\n  const child = React.Children.only(children);\n  const ElementType = ReactIs.isForwardRef(child) ? RefForward : RefFindNode;\n  const childWithProps = child && rest && Object.keys(rest).length > 0 ? React.cloneElement(child, rest) : child;\n\n  return <ElementType innerRef={innerRef}>{childWithProps}</ElementType>;\n};\n\nRef.displayName = 'Ref';\n// TODO: use Babel plugin for this\nif (process.env.NODE_ENV !== 'production') {\n  Ref.propTypes = {\n    children: PropTypes.element.isRequired,\n    innerRef: refPropType.isRequired,\n  };\n}\n\nexport default Ref;\n"],"file":"Ref.js"}