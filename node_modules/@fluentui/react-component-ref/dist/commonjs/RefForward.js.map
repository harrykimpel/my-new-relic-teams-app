{"version":3,"sources":["RefForward.tsx"],"names":["RefForward","node","props","children","innerRef","ref","currentNode","prevProps","React","cloneElement","handleRefOverride","Component","process","env","NODE_ENV","PropTypes","element","isRequired","refPropType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;IAEqBA,U;;;;;;;;;;;;;;;;;8FAYQ,I;oGAEP,UAACC,IAAD,EAAuB;AAAA,wBACV,MAAKC,KADK;AAAA,UACjCC,QADiC,eACjCA,QADiC;AAAA,UACvBC,QADuB,eACvBA,QADuB;AAGzC,8BAAWD,QAAD,CAA2DE,GAArE,EAA0EJ,IAA1E;AACA,8BAAUG,QAAV,EAAoBH,IAApB;AAEA,YAAKK,WAAL,GAAmBL,IAAnB;AACD,K;;;;;;uCAEkBM,S,EAAqB;AACtC,UAAIA,SAAS,CAACH,QAAV,KAAuB,KAAKF,KAAL,CAAWE,QAAtC,EAAgD;AAC9C,gCAAU,KAAKF,KAAL,CAAWE,QAArB,EAA+B,KAAKE,WAApC;AACD;AACF;;;2CAEsB;AACrB,aAAO,KAAKA,WAAZ;AACD;;;6BAEQ;AAAA,UACCH,QADD,GACc,KAAKD,KADnB,CACCC,QADD;AAGP,aAAOK,KAAK,CAACC,YAAN,CAAmBN,QAAnB,EAA6B;AAClCE,QAAAA,GAAG,EAAE,KAAKK;AADwB,OAA7B,CAAP;AAGD;;;EAvCqCF,KAAK,CAACG,S;;;8BAAzBX,U,iBACE,Y;8BADFA,U,eAKjBY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI;AACEX,EAAAA,QAAQ,EAAEY,SAAS,CAACC,OAAV,CAAkBC,UAD9B;AAEEb,EAAAA,QAAQ,EAAEc,mBAAYD;AAFxB,CADJ,GAKI,E","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport handleRef from './handleRef';\nimport { RefProps, refPropType } from './types';\n\nexport default class RefForward extends React.Component<RefProps> {\n  static displayName = 'RefForward';\n\n  // TODO: use Babel plugin for this\n  static propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          children: PropTypes.element.isRequired,\n          innerRef: refPropType.isRequired,\n        }\n      : {};\n\n  currentNode: Node | null = null;\n\n  handleRefOverride = (node: HTMLElement) => {\n    const { children, innerRef } = this.props;\n\n    handleRef((children as React.ReactElement & { ref: React.Ref<any> }).ref, node);\n    handleRef(innerRef, node);\n\n    this.currentNode = node;\n  };\n\n  componentDidUpdate(prevProps: RefProps) {\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, this.currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    delete this.currentNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return React.cloneElement(children, {\n      ref: this.handleRefOverride,\n    });\n  }\n}\n"],"file":"RefForward.js"}