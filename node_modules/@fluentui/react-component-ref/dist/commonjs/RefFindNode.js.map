{"version":3,"sources":["RefFindNode.tsx"],"names":["RefFindNode","prevNode","ReactDOM","findDOMNode","props","innerRef","prevProps","currentNode","children","React","Component","process","env","NODE_ENV","PropTypes","element","isRequired","refPropType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;IAEqBA,W;;;;;;;;;;;;;;;;;2FAYK,I;;;;;;wCAEJ;AAClB,WAAKC,QAAL,GAAgBC,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAAhB;AAEA,8BAAU,KAAKC,KAAL,CAAWC,QAArB,EAA+B,KAAKJ,QAApC;AACD;;;uCAEkBK,S,EAAqB;AACtC,UAAMC,WAAW,GAAGL,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAApB;;AAEA,UAAI,KAAKF,QAAL,KAAkBM,WAAtB,EAAmC;AACjC,aAAKN,QAAL,GAAgBM,WAAhB;AACA,gCAAU,KAAKH,KAAL,CAAWC,QAArB,EAA+BE,WAA/B;AACD;;AAED,UAAID,SAAS,CAACD,QAAV,KAAuB,KAAKD,KAAL,CAAWC,QAAtC,EAAgD;AAC9C,gCAAU,KAAKD,KAAL,CAAWC,QAArB,EAA+BE,WAA/B;AACD;AACF;;;2CAEsB;AACrB,8BAAU,KAAKH,KAAL,CAAWC,QAArB,EAA+B,IAA/B;AAEA,aAAO,KAAKJ,QAAZ;AACD;;;6BAEQ;AAAA,UACCO,QADD,GACc,KAAKJ,KADnB,CACCI,QADD;AAGP,aAAOA,QAAP;AACD;;;EA3CsCC,KAAK,CAACC,S;;;8BAA1BV,W,iBACE,a;8BADFA,W,eAKjBW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI;AACEL,EAAAA,QAAQ,EAAEM,SAAS,CAACC,OAAV,CAAkBC,UAD9B;AAEEX,EAAAA,QAAQ,EAAEY,mBAAYD;AAFxB,CADJ,GAKI,E","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport handleRef from './handleRef';\nimport { RefProps, refPropType } from './types';\n\nexport default class RefFindNode extends React.Component<RefProps> {\n  static displayName = 'RefFindNode';\n\n  // TODO: use Babel plugin for this\n  static propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          children: PropTypes.element.isRequired,\n          innerRef: refPropType.isRequired,\n        }\n      : {};\n\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n\n    handleRef(this.props.innerRef, this.prevNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    const currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"],"file":"RefFindNode.js"}