"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PropTypes = require("prop-types");
var React = require("react");
var ReactDOM = require("react-dom");
var handleRef_1 = require("./handleRef");
var types_1 = require("./types");
var RefFindNode = /** @class */ (function (_super) {
    tslib_1.__extends(RefFindNode, _super);
    function RefFindNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.prevNode = null;
        return _this;
    }
    RefFindNode.prototype.componentDidMount = function () {
        this.prevNode = ReactDOM.findDOMNode(this);
        handleRef_1.default(this.props.innerRef, this.prevNode);
    };
    RefFindNode.prototype.componentDidUpdate = function (prevProps) {
        var currentNode = ReactDOM.findDOMNode(this);
        if (this.prevNode !== currentNode) {
            this.prevNode = currentNode;
            handleRef_1.default(this.props.innerRef, currentNode);
        }
        if (prevProps.innerRef !== this.props.innerRef) {
            handleRef_1.default(this.props.innerRef, currentNode);
        }
    };
    RefFindNode.prototype.componentWillUnmount = function () {
        handleRef_1.default(this.props.innerRef, null);
        delete this.prevNode;
    };
    RefFindNode.prototype.render = function () {
        var children = this.props.children;
        return children;
    };
    RefFindNode.displayName = 'RefFindNode';
    // TODO: use Babel plugin for this
    RefFindNode.propTypes = process.env.NODE_ENV !== 'production'
        ? {
            children: PropTypes.element.isRequired,
            innerRef: types_1.refPropType.isRequired,
        }
        : {};
    return RefFindNode;
}(React.Component));
exports.default = RefFindNode;
