"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.svgIconHandledProps = exports.svgIconDisplayName = exports.svgIconClassName = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _reactBindings = require("@fluentui/react-bindings");

// @ts-ignore
var svgIconClassName = 'ui-icon';
exports.svgIconClassName = svgIconClassName;
var svgIconDisplayName = 'SvgIcon';
exports.svgIconDisplayName = svgIconDisplayName;
var svgIconHandledProps = ['bordered', 'className', 'circular', 'design', 'disabled', 'outline', 'size', 'rotate', 'styles', 'variables', 'xSpacing'];
exports.svgIconHandledProps = svgIconHandledProps;

var createSvgIcon = function createSvgIcon(_ref) {
  var svg = _ref.svg,
      displayName = _ref.displayName,
      _ref$handledProps = _ref.handledProps,
      handledProps = _ref$handledProps === void 0 ? [] : _ref$handledProps;

  var Component = function Component(props) {
    var context = React.useContext(_reactFela.ThemeContext);
    var alt = props.alt,
        ariaLabel = props['aria-label'],
        bordered = props.bordered,
        circular = props.circular,
        className = props.className,
        design = props.design,
        disabled = props.disabled,
        outline = props.outline,
        _props$rotate = props.rotate,
        rotate = _props$rotate === void 0 ? 0 : _props$rotate,
        _props$size = props.size,
        size = _props$size === void 0 ? 'medium' : _props$size,
        styles = props.styles,
        variables = props.variables,
        xSpacing = props.xSpacing;

    var _useStyles = (0, _reactBindings.useStyles)(svgIconDisplayName, {
      className: svgIconClassName,
      mapPropsToStyles: function mapPropsToStyles() {
        return {
          bordered: bordered,
          circular: circular,
          disabled: disabled,
          outline: outline,
          rotate: rotate,
          size: size,
          xSpacing: xSpacing
        };
      },
      mapPropsToInlineStyles: function mapPropsToInlineStyles() {
        return {
          className: className,
          design: design,
          styles: styles,
          variables: variables
        };
      },
      rtl: context.rtl
    }),
        classes = _useStyles.classes;

    var unhandledProps = (0, _reactBindings.getUnhandledProps)([].concat(svgIconHandledProps, (0, _toConsumableArray2.default)(handledProps)), props);
    return React.createElement('span', Object.assign({
      role: 'img',
      'aria-hidden': alt || ariaLabel ? undefined : 'true',
      'aria-label': ariaLabel,
      className: classes.root
    }, unhandledProps), svg({
      classes: classes,
      rtl: context.rtl,
      props: props
    }));
  };

  Component.displayName = displayName;
  Component.handledProps = [].concat(svgIconHandledProps, (0, _toConsumableArray2.default)(handledProps));
  return Component;
};

var _default = createSvgIcon;
exports.default = _default;
//# sourceMappingURL=createSvgIcon.js.map
