{"version":3,"sources":["themes/teams/components/Dropdown/dropdownItemStyles.ts"],"names":["dropdownItemSlotClassNames","getBorderFocusStyles","pxToRem","checkableIndicatorUrl","dropdownItemStyles","root","p","props","v","variables","siteVariables","theme","display","alignItems","minHeight","padding","whiteSpace","border","listItemFocusBorderWidth","backgroundColor","listItemBackgroundColor","selected","fontWeight","listItemSelectedFontWeight","color","listItemSelectedColor","position","active","isFromKeyboard","borderRadius","listItemColorHover","listItemBackgroundColorHover","hasHeader","header","hasContent","content","image","margin","flexGrow","lineHeight","listItemHeaderLineHeight","fontSize","listItemHeaderFontSize","listItemContentColor","marginBottom","listItemHeaderColor","listItemContentLineHeight","listItemContentFontSize","checkableIndicator","backgroundImage","backgroundPosition","backgroundRepeat","width","height","right","top","endMedia","flexShrink","main","flexDirection","minWidth"],"mappings":"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","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { DropdownVariables } from './dropdownVariables';\nimport { DropdownItemProps, dropdownItemSlotClassNames } from '../../../../components/Dropdown/DropdownItem';\nimport getBorderFocusStyles from '../../getBorderFocusStyles';\nimport { pxToRem } from '../../../../utils';\nimport checkableIndicatorUrl from './checkableIndicatorUrl';\n\nexport type DropdownItemStylesProps = Pick<DropdownItemProps, 'selected' | 'active' | 'isFromKeyboard'> & {\n  hasContent?: boolean;\n  hasHeader?: boolean;\n};\n\nconst dropdownItemStyles: ComponentSlotStylesPrepared<DropdownItemStylesProps, DropdownVariables> = {\n  root: ({ props: p, variables: v, theme: { siteVariables } }): ICSSInJSStyle => ({\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: 0,\n    padding: `${pxToRem(4)} ${pxToRem(11)}`,\n    whiteSpace: 'nowrap',\n    border: `${v.listItemFocusBorderWidth} solid transparent`,\n    backgroundColor: v.listItemBackgroundColor,\n    ...(p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor,\n    }),\n    position: 'relative',\n    ...(p.active && {\n      ...(p.isFromKeyboard && getBorderFocusStyles({ variables: siteVariables, borderRadius: 0 })[':focus-visible']),\n      ...(!p.isFromKeyboard && {\n        color: v.listItemColorHover,\n        backgroundColor: v.listItemBackgroundColorHover,\n        ...(p.hasHeader && {\n          [`& .${dropdownItemSlotClassNames.header}`]: {\n            color: v.listItemColorHover,\n          },\n        }),\n        ...(p.hasContent && {\n          [`& .${dropdownItemSlotClassNames.content}`]: {\n            color: v.listItemColorHover,\n          },\n        }),\n      }),\n    }),\n  }),\n  image: (): ICSSInJSStyle => ({\n    margin: `${pxToRem(3)} ${pxToRem(12)} ${pxToRem(3)} ${pxToRem(4)}`,\n  }),\n  header: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    flexGrow: 1,\n    lineHeight: v.listItemHeaderLineHeight,\n\n    fontSize: v.listItemHeaderFontSize,\n    // if the item doesn't have content - i.e. it is header only - then it should use the content color\n    color: v.listItemContentColor,\n    ...(p.hasContent && {\n      // if there is content it needs to be \"tightened up\" to the header\n      marginBottom: pxToRem(-1),\n      color: v.listItemHeaderColor,\n    }),\n    ...(p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor,\n    }),\n    whiteSpace: 'normal',\n  }),\n  content: ({ variables: v }): ICSSInJSStyle => ({\n    flexGrow: 1,\n    lineHeight: v.listItemContentLineHeight,\n    fontSize: v.listItemContentFontSize,\n    color: v.listItemContentColor,\n  }),\n  checkableIndicator: ({ variables: v }) => ({\n    backgroundImage: checkableIndicatorUrl(v.listItemSelectedColor),\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    position: 'absolute',\n    width: pxToRem(24),\n    height: pxToRem(24),\n    right: pxToRem(7),\n    top: pxToRem(-3),\n  }),\n  endMedia: () => ({\n    flexShrink: 0,\n    lineHeight: pxToRem(16),\n  }),\n  main: () => ({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    minWidth: 0, // needed for the truncate styles to work\n  }),\n};\n\nexport default dropdownItemStyles;\n"],"file":"dropdownItemStyles.js"}