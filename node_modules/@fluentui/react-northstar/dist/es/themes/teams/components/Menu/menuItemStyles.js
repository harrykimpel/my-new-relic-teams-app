import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { pxToRem } from '../../../../utils';
import { menuItemClassName, menuItemSlotClassNames } from '../../../../components/Menu/MenuItem';
import { getColorScheme } from '../../colors';
import getIconFillOrOutlineStyles from '../../getIconFillOrOutlineStyles';
import submenuIndicatorUrl from './submenuIndicatorUrl';
export var verticalPillsBottomMargin = pxToRem(5);
export var horizontalPillsRightMargin = pxToRem(8);
export var verticalPointingBottomMargin = pxToRem(12);
export var underlinedItem = function underlinedItem(color) {
  return {
    paddingBottom: 0,
    borderBottom: "solid ".concat(pxToRem(4), " ").concat(color),
    transition: 'color .1s ease'
  };
};

var getFocusedStyles = function getFocusedStyles(_ref) {
  var props = _ref.props,
      v = _ref.variables,
      colors = _ref.colors;
  var primary = props.primary,
      underlined = props.underlined,
      active = props.active,
      vertical = props.vertical;
  if (active && !underlined && !vertical) return {};
  return Object.assign({
    color: v.colorActive || colors.foregroundActive,
    background: v.backgroundColorFocus || colors.backgroundFocus
  }, primary && {
    color: colors.foregroundFocus,
    background: colors.backgroundFocus
  }, {}, vertical && Object.assign({
    border: "solid 1px ".concat(v.borderColorFocus),
    outline: "solid 1px ".concat(v.outlineColorFocus),
    margin: pxToRem(1),
    background: v.verticalBackgroundColorFocus,
    color: v.colorFocus || colors.foregroundFocus
  }, primary && {
    color: v.color
  }, {}, active && Object.assign({
    color: v.colorActive,
    background: v.backgroundColorActive || colors.backgroundActive
  }, primary && {
    color: colors.foregroundFocus
  })));
};

var pointingBeak = function pointingBeak(_ref2) {
  var props = _ref2.props,
      v = _ref2.variables,
      colors = _ref2.colors;
  var pointing = props.pointing,
      primary = props.primary;
  var top;
  var borders;
  var backgroundColor = v.backgroundColorActive || colors.backgroundActive;
  var borderColor = v.borderColor || primary ? v.primaryBorderColor : colors.border;

  if (pointing === 'start') {
    borders = {
      borderTop: "1px solid ".concat(borderColor),
      borderLeft: "1px solid ".concat(borderColor)
    };
    top = '-1px'; // 1px for the border
  } else {
    borders = {
      borderBottom: "1px solid ".concat(borderColor),
      borderRight: "1px solid ".concat(borderColor)
    };
    top = '100%';
  }

  return {
    '::after': Object.assign({
      visibility: 'visible',
      background: backgroundColor,
      position: 'absolute',
      content: '""',
      top: top,
      left: '50%',
      transform: 'translateX(-50%) translateY(-50%) rotate(45deg)',
      margin: '.5px 0 0',
      width: pxToRem(10),
      height: pxToRem(10),
      border: 'none'
    }, borders, {
      zIndex: v.beakZIndex,
      transition: 'background .1s ease'
    })
  };
};

var menuItemStyles = {
  wrapper: function wrapper(_ref3) {
    var props = _ref3.props,
        v = _ref3.variables;
    var active = props.active,
        disabled = props.disabled,
        iconOnly = props.iconOnly,
        isFromKeyboard = props.isFromKeyboard,
        pills = props.pills,
        pointing = props.pointing,
        secondary = props.secondary,
        underlined = props.underlined,
        vertical = props.vertical,
        primary = props.primary;
    var colors = getColorScheme(v.colorScheme, null, primary);
    return Object.assign({
      color: 'inherit',
      lineHeight: 1,
      position: 'relative',
      verticalAlign: 'middle',
      display: 'block'
    }, secondary && {
      background: 'salmon'
    }, {}, vertical && {
      border: "solid ".concat(v.verticalItemBorderWidth, " ").concat(v.verticalItemBorderColor)
    }, {}, pills && Object.assign({}, vertical ? {
      margin: "0 0 ".concat(verticalPillsBottomMargin, " 0")
    } : {
      margin: "0 ".concat(horizontalPillsRightMargin, " 0 0")
    }, {
      borderRadius: pxToRem(5)
    }), {}, underlined && {
      display: 'flex',
      alignItems: 'center',
      height: pxToRem(29),
      lineHeight: v.lineHeightBase,
      padding: "0 ".concat(pxToRem(4)),
      margin: "0 ".concat(pxToRem(4), " 0 0"),
      ':nth-child(n+2)': {
        marginLeft: "".concat(pxToRem(4))
      },
      boxShadow: 'none'
    }, {}, !vertical && !pills && !underlined && !iconOnly && {
      boxShadow: "-1px 0 0 0 ".concat(primary ? v.primaryBorderColor : v.borderColor || colors.border, " inset")
    }, {}, active && Object.assign({
      color: v.wrapperColorActive
    }, !underlined && Object.assign({
      background: v.backgroundColorActive || colors.backgroundActive
    }, iconOnly && {
      background: v.activeIconOnlyWrapperBackgroundColor
    }, {}, !iconOnly && primary && {
      color: colors.foregroundActive
    }), {}, underlined && {
      color: v.activeUnderlinedWrapperColor
    }, {}, pointing && vertical && {
      '::before': Object.assign({
        content: "''",
        position: 'absolute',
        width: pxToRem(3),
        height: "calc(100% + ".concat(pxToRem(4), ")"),
        top: pxToRem(-2),
        backgroundColor: v.pointingIndicatorBackgroundColor
      }, isFromKeyboard && {
        display: 'none'
      }, {}, pointing === 'end' ? {
        right: pxToRem(-2)
      } : {
        left: pxToRem(-2)
      })
    }, {}, pointing && !vertical && Object.assign({}, pointingBeak({
      props: props,
      variables: v,
      colors: colors
    }))), {}, isFromKeyboard && Object.assign({
      color: v.wrapperColorFocus
    }, !underlined && Object.assign({
      background: v.wrapperBackgroundColorFocus
    }, primary && {
      background: v.primaryWrapperBackgroundColorFocus,
      color: v.primaryWrapperColorFocus
    }), {}, !iconOnly && getFocusedStyles({
      props: props,
      variables: v,
      colors: colors
    }), {}, iconOnly && {
      background: v.iconOnlyWrapperBackgroundColorFocus,
      color: v.iconOnlyColorActive
    }), {
      // hover styles
      ':hover': Object.assign({
        color: v.wrapperColorHover,
        background: v.backgroundColorHover || colors.backgroundHover
      }, active && {
        background: v.activeWrapperBackgroundColorHover
      }, {}, vertical && {
        color: v.wrapperColorHover,
        background: v.backgroundColorHover || colors.backgroundHover
      }, {}, primary && {
        color: v.primaryWrapperColorHover
      }, {}, underlined && {
        color: v.underlinedWrapperColorHover,
        background: v.underlinedWrapperBackgroundHover
      }, {}, iconOnly && {
        background: v.iconOnlyBackgroundColorHover,
        color: v.iconOnlyColorHover
      }, _defineProperty({}, "&>.".concat(menuItemClassName, ">.").concat(menuItemSlotClassNames.indicator), Object.assign({
        backgroundImage: submenuIndicatorUrl(v.indicatorColorHover, vertical)
      }, primary && {
        backgroundImage: submenuIndicatorUrl(v.primaryIndicatorColorHover, vertical)
      })))
    }, iconOnly && {
      display: 'flex'
    }, {
      ':first-child': Object.assign({}, !pills && !iconOnly && !(pointing && vertical) && !underlined && Object.assign({}, vertical && {
        '::before': {
          display: 'none'
        }
      }, {}, !vertical && {
        borderBottomLeftRadius: pxToRem(3),
        borderTopLeftRadius: pxToRem(3)
      }))
    }, disabled && {
      color: v.colorDisabled || colors.foregroundDisabled,
      cursor: 'default',
      ':hover': {// empty - overwrite all existing hover styles
      }
    });
  },
  root: function root(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    var active = p.active,
        iconOnly = p.iconOnly,
        isFromKeyboard = p.isFromKeyboard,
        pointing = p.pointing,
        primary = p.primary,
        underlined = p.underlined,
        vertical = p.vertical,
        disabled = p.disabled;
    var colors = getColorScheme(v.colorScheme, null, primary);
    return Object.assign({
      color: 'inherit',
      display: 'block',
      cursor: 'pointer',
      whiteSpace: 'nowrap'
    }, pointing && vertical && {
      border: '1px solid transparent'
    }, {}, iconOnly && {
      border: "".concat(pxToRem(2), " solid transparent")
    }, {
      padding: v.horizontalPadding
    }, vertical && {
      padding: v.verticalItemPadding
    }, {}, pointing && vertical && {
      padding: "".concat(pxToRem(8), " ").concat(pxToRem(18))
    }, {}, underlined && {
      padding: "".concat(pxToRem(4), " 0")
    }, {}, iconOnly && {
      margin: pxToRem(1),
      padding: pxToRem(5),
      // padding works this way to get the border to only be 30x30px on focus which is the current design
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }, {}, active && Object.assign({}, iconOnly && Object.assign({
      color: v.iconOnlyColorActive
    }, getIconFillOrOutlineStyles({
      outline: false
    })), {}, underlined && Object.assign({
      color: v.activeUnderlinedColor
    }, underlinedItem(v.activeUnderlinedBorderBottomColor), {}, primary && Object.assign({
      color: v.activeUnderlinedPrimaryColor
    }, underlinedItem(v.borderColorActive || colors.borderActive)), {}, !primary && {
      fontWeight: 700
    })), {}, isFromKeyboard && Object.assign({
      color: 'inherit'
    }, iconOnly && Object.assign({
      borderRadius: '50%',
      borderColor: v.iconOnlyColorFocus
    }, getIconFillOrOutlineStyles({
      outline: false
    })), {}, primary ? Object.assign({}, iconOnly && {
      borderColor: v.borderColorActive || colors.borderActive
    }, {}, underlined && active && underlinedItem(colors.foregroundActive)) : Object.assign({}, underlined && {
      fontWeight: 700
    }, {}, underlined && active && underlinedItem(v.colorActive))), {
      ':focus': {
        outline: 0
      },
      // hover styles
      ':hover': Object.assign({
        color: v.colorHover
      }, underlined && {
        color: v.underlinedColorHover
      }, {}, !disabled && Object.assign({}, iconOnly && getIconFillOrOutlineStyles({
        outline: false
      }), {}, primary ? Object.assign({}, iconOnly && {
        color: 'inherit'
      }, {}, !active && underlined && underlinedItem(v.underlinedBorderColor || colors.backgroundActive)) : !active && underlined && underlinedItem(v.backgroundColorActive || colors.backgroundActive)))
    }, disabled && {
      cursor: 'default'
    });
  },
  content: function content(_ref5) {
    var p = _ref5.props;
    var widthAdjust = (p.icon ? 26 : 0) + (p.menu ? 16 : 0);
    return Object.assign({
      whiteSpace: 'normal',
      lineHeight: 1.5,
      marginTop: pxToRem(-4),
      marginBottom: pxToRem(-4),
      display: 'inline-block'
    }, (p.inSubmenu || p.vertical) && {
      width: 'max-content',
      minWidth: pxToRem(46 - widthAdjust),
      maxWidth: pxToRem(262 - widthAdjust),
      marginRight: pxToRem(16)
    });
  },
  icon: function icon(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return Object.assign({
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: v.iconSize,
      height: v.iconSize,
      '& > :first-child': {
        height: '100%',
        width: '100%',
        '& svg': {
          height: '100%',
          width: '100%'
        }
      }
    }, !!p.content && {
      marginRight: pxToRem(10)
    }, {}, !p.iconOnly && {
      // reduce margins so text has the dominant influence on the vertical height
      marginTop: 0,
      marginBottom: pxToRem(-8),
      verticalAlign: 'top'
    });
  },
  menu: function menu(_ref7) {
    var v = _ref7.variables;
    return {
      zIndex: v.menuZIndex
    };
  },
  indicator: function indicator(_ref8) {
    var p = _ref8.props,
        v = _ref8.variables,
        rtl = _ref8.rtl;
    return Object.assign({
      position: 'relative',
      float: 'right',
      left: pxToRem(12),
      userSelect: 'none',
      marginRight: pxToRem(4)
    }, p.inSubmenu && {
      position: 'absolute',
      top: pxToRem(6),
      right: pxToRem(2),
      left: 'unset'
    }, {}, rtl && {
      transform: "scaleX(-1)"
    }, {
      content: '" "',
      display: 'block',
      overflow: 'hidden',
      height: pxToRem(16),
      width: pxToRem(16),
      backgroundImage: submenuIndicatorUrl(v.indicatorColor, p.vertical)
    }, p.active && Object.assign({
      backgroundImage: submenuIndicatorUrl(v.activeIndicatorColor, p.vertical)
    }, p.primary && Object.assign({
      backgroundImage: submenuIndicatorUrl(v.activePrimaryIndicatorColor, p.vertical)
    }, p.vertical && {
      backgroundImage: submenuIndicatorUrl(v.activePrimaryVerticalIndicatorColor, p.vertical)
    })), {}, p.underlined && {
      backgroundImage: submenuIndicatorUrl(v.indicatorColor, p.vertical)
    }, {}, p.iconOnly && {
      backgroundImage: submenuIndicatorUrl(v.indicatorColor, p.vertical)
    });
  }
};
export default menuItemStyles;
//# sourceMappingURL=menuItemStyles.js.map
