import { pxToRem } from '../../../../utils';
import { verticalPillsBottomMargin, horizontalPillsRightMargin, verticalPointingBottomMargin } from './menuItemStyles';
import { getColorScheme } from '../../colors';
export default {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables;
    var iconOnly = p.iconOnly,
        fluid = p.fluid,
        pointing = p.pointing,
        pills = p.pills,
        primary = p.primary,
        underlined = p.underlined,
        vertical = p.vertical,
        submenu = p.submenu;
    var colors = getColorScheme(v.colorScheme, null, primary);
    return Object.assign({
      display: 'flex',
      minHeight: pxToRem(24),
      margin: 0,
      padding: 0,
      color: v.color,
      backgroundColor: v.backgroundColor || 'inherit',
      listStyleType: 'none'
    }, iconOnly && {
      alignItems: 'center'
    }, {}, vertical && Object.assign({
      flexDirection: 'column',
      backgroundColor: v.verticalBackgroundColor,
      padding: "".concat(pxToRem(8), " 0")
    }, submenu && {
      boxShadow: v.verticalBoxShadow
    }, {}, !fluid && !submenu && {
      width: 'fit-content'
    }, {}, iconOnly && {
      display: 'inline-block',
      width: 'auto'
    }), {}, !pills && !iconOnly && !(pointing && vertical) && !underlined && {
      // primary has hardcoded grey border color
      border: "".concat(v.borderWidth, " solid ").concat(primary ? v.primaryBorderColor : v.borderColor || colors.border),
      borderRadius: pxToRem(4)
    }, {}, underlined && {
      borderBottom: "".concat(v.underlinedBottomBorderWidth, " solid ").concat(v.underlinedBorderColor)
    });
  },
  divider: function divider(_ref2) {
    var _ref2$props = _ref2.props,
        pointing = _ref2$props.pointing,
        vertical = _ref2$props.vertical,
        pills = _ref2$props.pills;
    return Object.assign({}, pointing && vertical && {
      marginBottom: verticalPointingBottomMargin
    }, {}, pills && Object.assign({}, vertical ? {
      margin: "0 0 ".concat(verticalPillsBottomMargin, " 0")
    } : {
      margin: "0 ".concat(horizontalPillsRightMargin, " 0 0")
    }));
  }
};
//# sourceMappingURL=menuStyles.js.map
