import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { unstable_createAnimationStyles as createAnimationStyles } from '@fluentui/react-bindings';
import { alertDismissActionSlotClassNames } from '../../../../components/Alert/AlertDismissAction';
import getBorderFocusStyles from '../../getBorderFocusStyles';
import getIconFillOrOutlineStyles from '../../getIconFillOrOutlineStyles';
import dismissIndicatorUrl from './dismissIndicatorUrl';
import { getIntentColorsFromProps } from './alertStyles';

var getIndicatorStyles = function getIndicatorStyles(color, outline, size) {
  return {
    width: size,
    height: size,
    backgroundImage: dismissIndicatorUrl(color, outline),
    backgroundRepeat: 'no-repeat'
  };
};

var alertDismissActionStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        theme = _ref.theme;
    var siteVariables = theme.siteVariables;
    var borderWidth = siteVariables.borderWidth;

    var _getIntentColorsFromP = getIntentColorsFromProps(p, v, siteVariables),
        dismissActionIndicatorColor = _getIntentColorsFromP.color;

    var borderFocusStyles = getBorderFocusStyles({
      variables: {
        borderRadius: v.focusBorderRadius,
        borderWidth: v.focusBorderWidth,
        focusInnerBorderColor: v.focusInnerBorderColor,
        focusOuterBorderColor: v.focusOuterBorderColor,
        zIndexes: {
          foreground: v.focusBorderZIndex
        }
      },
      borderPadding: borderWidth
    });
    return Object.assign({
      height: v.dismissActionSize,
      minWidth: v.dismissActionSize,
      color: v.dismissActionColor || 'currentColor',
      outline: 0,
      padding: 0,
      border: 0,
      backgroundColor: v.dismissActionBackgroundColor,
      borderRadius: v.borderRadius,
      display: 'inline-flex',
      justifyContent: 'center',
      alignItems: 'center',
      position: 'relative',
      verticalAlign: 'middle',
      cursor: 'pointer'
    }, getIconFillOrOutlineStyles({
      outline: true
    }), {}, !p.hasContent && _defineProperty({}, "& .".concat(alertDismissActionSlotClassNames.content), Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, true, v.dismissActionIndicatorSize))), {
      ':hover': Object.assign({
        backgroundColor: v.hoverBackgroundColor,
        color: 'currentColor'
      }, getIconFillOrOutlineStyles({
        outline: false
      }), {}, !p.hasContent && _defineProperty({}, "& .".concat(alertDismissActionSlotClassNames.content), Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize))), {}, getBorderFocusStyles({
        variables: {
          borderRadius: v.dismissActionHoverBorderRadius,
          borderWidth: v.dismissActionHoverBorderWidth,
          focusInnerBorderColor: v.dismissActionHoverInnerBorderColor,
          focusOuterBorderColor: v.dismissActionHoverOuterBorderColor,
          zIndexes: {
            foreground: v.dismissActionHoverZIndex
          }
        }
      })[':focus-visible']),
      ':active': Object.assign({}, createAnimationStyles('scaleDownSoft', theme), {
        color: v.dismissActionColorActive,
        backgroundColor: v.dismissActionBackgroundColorActive,
        borderColor: v.dismissActionBorderColorActive,
        boxShadow: 'none'
      }),
      ':focus': borderFocusStyles[':focus'],
      ':focus-visible': Object.assign({
        backgroundColor: v.focusBackgroundColor,
        borderColor: v.dismissActionBorderColorFocus,
        color: v.dismissActionColorFocus,
        borderWidth: borderWidth
      }, borderFocusStyles[':focus-visible'], {}, getIconFillOrOutlineStyles({
        outline: false
      }), {}, !p.hasContent && _defineProperty({}, "& .".concat(alertDismissActionSlotClassNames.content), Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize))), {
        ':hover': {
          borderColor: v.dismissActionBorderColorHover
        }
      })
    }, p.disabled && {
      cursor: 'default',
      color: v.dismissActionColorDisabled,
      boxShadow: 'none',
      pointerEvents: 'none',
      ':hover': {
        color: v.dismissActionColorDisabled
      },
      backgroundColor: v.dismissActionBackgroundColorDisabled,
      borderColor: v.dismissActionBorderColorDisabled
    });
  },
  content: function content(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables,
        theme = _ref5.theme;
    var siteVariables = theme.siteVariables;

    var _getIntentColorsFromP2 = getIntentColorsFromProps(p, v, siteVariables),
        dismissActionIndicatorColor = _getIntentColorsFromP2.color;

    return Object.assign({
      fontWeight: v.dismissActionContentFontWeight
    }, !p.hasContent && Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v.dismissActionIndicatorSize)));
  }
};
export default alertDismissActionStyles;
//# sourceMappingURL=alertDismissActionStyles.js.map
