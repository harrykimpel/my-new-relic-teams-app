{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupBehavior","toolbarRadioGroupItemBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","Ref","customPropTypes","mergeComponentVariables","PropTypes","React","ThemeContext","createShorthandFactory","childrenExist","commonPropTypes","withSafeTypeForAs","ToolbarDivider","ToolbarItem","ToolbarVariablesContext","ToolbarVariablesProvider","toolbarRadioGroupClassName","ToolbarRadioGroup","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","activeIndex","children","className","design","items","variables","styles","itemRefs","parentVariables","mergedVariables","getA11yProps","debugName","actionHandlers","nextItem","event","setFocusedItem","prevItem","rtl","mapPropsToInlineStyles","classes","direction","filteredRadioItems","item","index","currentItem","disabled","currentFocusedIndex","current","tabIndex","itemsLength","length","nextIndex","nextItemToFocus","focus","target","activeElement","stopPropagation","preventDefault","renderItems","kind","ref","createRef","create","toolbarItem","defaultProps","active","key","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","number","collectionShorthandWithKindProp","Object","keys","Component","mappedProp"],"mappings":";;;;AAAA,SAEEA,yBAFF,EAGEC,6BAHF,QAKO,yBALP;AAMA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,EAA8DC,SAA9D,EAAyEC,YAAzE,QAA6F,0BAA7F;AACA,SAASC,GAAT,QAAoB,+BAApB;AACA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,SAGEC,sBAHF,EAKEC,aALF,EAMEC,eANF,QAOO,aAPP;AAQA,SAKEC,iBALF,QAMO,aANP;AAOA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAA8C,eAA9C;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,QAAkE,2BAAlE;AAkBA,OAAO,IAAMC,0BAA0B,GAAG,aAAnC,C,CAAkD;;AAEzD,IAAMC,iBAC8C,GAAG,SADjDA,iBACiD,CAAAC,KAAK,EAAI;AAC9D,MAAMC,OAAgC,GAAGb,KAAK,CAACc,UAAN,CAAiBb,YAAjB,CAAzC;;AAD8D,sBAEjCN,YAAY,CAACgB,iBAAiB,CAACI,WAAnB,EAAgCF,OAAO,CAACG,SAAxC,CAFqB;AAAA,MAEtDC,QAFsD,iBAEtDA,QAFsD;AAAA,MAE5CC,MAF4C,iBAE5CA,MAF4C;;AAG9DD,EAAAA,QAAQ;AAHsD,MAKtDE,aALsD,GAKgCP,KALhC,CAKtDO,aALsD;AAAA,MAKvCC,WALuC,GAKgCR,KALhC,CAKvCQ,WALuC;AAAA,MAK1BC,QAL0B,GAKgCT,KALhC,CAK1BS,QAL0B;AAAA,MAKhBC,SALgB,GAKgCV,KALhC,CAKhBU,SALgB;AAAA,MAKLC,MALK,GAKgCX,KALhC,CAKLW,MALK;AAAA,MAKGC,KALH,GAKgCZ,KALhC,CAKGY,KALH;AAAA,MAKUC,SALV,GAKgCb,KALhC,CAKUa,SALV;AAAA,MAKqBC,MALrB,GAKgCd,KALhC,CAKqBc,MALrB;AAM9D,MAAMC,QAAwC,GAAG,EAAjD;AAEA,MAAMC,eAAe,GAAG5B,KAAK,CAACc,UAAN,CAAiBN,uBAAjB,CAAxB;AACA,MAAMqB,eAAe,GAAG/B,uBAAuB,CAAC8B,eAAD,EAAkBH,SAAlB,CAA/C;AAEA,MAAMK,YAAY,GAAGrC,gBAAgB,CAAC0B,aAAD,EAAgB;AACnDY,IAAAA,SAAS,EAAEpB,iBAAiB,CAACI,WADsB;AAEnDiB,IAAAA,cAAc,EAAE;AACdC,MAAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,eAAIC,cAAc,CAACD,KAAD,EAAQ,CAAR,CAAlB;AAAA,OADD;AAEdE,MAAAA,QAAQ,EAAE,kBAAAF,KAAK;AAAA,eAAIC,cAAc,CAACD,KAAD,EAAQ,CAAC,CAAT,CAAlB;AAAA;AAFD,KAFmC;AAMnDG,IAAAA,GAAG,EAAExB,OAAO,CAACwB;AANsC,GAAhB,CAArC;;AAX8D,mBAmB1C3C,SAAS,CAA+BiB,iBAAiB,CAACI,WAAjD,EAA8D;AACzFO,IAAAA,SAAS,EAAEZ,0BAD8E;AAEzF4B,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAAEhB,QAAAA,SAAS,EAATA,SAAF;AAAaC,QAAAA,MAAM,EAANA,MAAb;AAAqBG,QAAAA,MAAM,EAANA,MAArB;AAA6BD,QAAAA,SAAS,EAAEI;AAAxC,OAAP;AAAA,KAFiE;AAGzFQ,IAAAA,GAAG,EAAExB,OAAO,CAACwB;AAH4E,GAA9D,CAnBiC;AAAA,MAmBtDE,OAnBsD,cAmBtDA,OAnBsD;;AAyB9D,MAAMJ,cAAc,GAAG,SAAjBA,cAAiB,CAACD,KAAD,EAA6BM,SAA7B,EAA2C;AAChE;AACA,QAAMC,kBAAkD,GAAG,QAASd,QAAT,EAAmB,UAACe,IAAD,EAAOC,KAAP,EAAiB;AAC7F,UAAMC,WAAW,GAAGpB,KAAK,CAACmB,KAAD,CAAzB;AACA,aAAOC,WAAW,IAAI,CAACA,WAAW,CAACC,QAAnC;AACD,KAH0D,CAA3D,CAFgE,CAOhE;;;AACA,QAAMC,mBAAmB,GACvB,WAAYL,kBAAZ,EAAgC,UAACC,IAAD,EAAwC;AACtE,aAAOA,IAAI,CAACK,OAAL,CAAaC,QAAb,KAA0B,CAAjC;AACD,KAFD,KAEM,CAHR;AAKA,QAAMC,WAAW,GAAGR,kBAAkB,CAACS,MAAvC;AACA,QAAIC,SAAS,GAAGL,mBAAmB,GAAGN,SAAtC;;AAEA,QAAIW,SAAS,IAAIF,WAAjB,EAA8B;AAC5BE,MAAAA,SAAS,GAAG,CAAZ;AACD;;AAED,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjBA,MAAAA,SAAS,GAAGF,WAAW,GAAG,CAA1B;AACD;;AAED,QAAMG,eAAe,GAAGX,kBAAkB,CAACU,SAAD,CAAlB,CAA8BJ,OAAtD;;AACA,QAAIK,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACC,KAAhB;AACD;;AAED,QAAIxC,OAAO,CAACyC,MAAR,CAAeC,aAAf,KAAiCH,eAArC,EAAsD;AACpDlB,MAAAA,KAAK,CAACsB,eAAN;AACD;;AACDtB,IAAAA,KAAK,CAACuB,cAAN;AACD,GAjCD;;AAmCA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,WAAO,KAAMlC,KAAN,EAAa,UAACkB,IAAD,EAAOC,KAAP,EAAiB;AACnC,UAAMgB,IAAI,GAAG,KAAMjB,IAAN,EAAY,MAAZ,EAAoB,MAApB,CAAb;;AAEA,UAAMkB,GAAG,GAAG5D,KAAK,CAAC6D,SAAN,EAAZ;AACAlC,MAAAA,QAAQ,CAACgB,KAAD,CAAR,GAAkBiB,GAAlB;;AAEA,UAAID,IAAI,KAAK,SAAb,EAAwB;AACtB,eAAOrD,cAAc,CAACwD,MAAf,CAAsBpB,IAAtB,CAAP;AACD;;AAED,UAAMqB,WAAW,GAAGxD,WAAW,CAACuD,MAAZ,CAAmBpB,IAAnB,EAAyB;AAC3CsB,QAAAA,YAAY,EAAE;AAAA,iBAAO;AACnB7C,YAAAA,aAAa,EAAE7B,6BADI;AAEnB2E,YAAAA,MAAM,EAAE7C,WAAW,KAAKuB;AAFL,WAAP;AAAA;AAD6B,OAAzB,CAApB;AAOA,aACE,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAEiB,GAAf;AAAoB,QAAA,GAAG,EAAEG,WAAW,CAACG;AAArC,SACGH,WADH,CADF;AAKD,KAtBM,CAAP;AAuBD,GAxBD;;AA0BA,MAAMI,WAAW,GAAG5E,cAAc,CAACqB,KAAD,CAAlC;AACA,MAAMwD,cAAc,GAAG5E,iBAAiB,CAACmB,iBAAiB,CAAC0D,YAAnB,EAAiCzD,KAAjC,CAAxC;AAEA,MAAM0D,OAAO,GACX,oBAAC,WAAD,EACMxC,YAAY,CAAC,MAAD,oBACXsC,cADW;AAEd9C,IAAAA,SAAS,EAAEiB,OAAO,CAACgC;AAFL,KADlB,EAME,oBAAC,wBAAD;AAA0B,IAAA,KAAK,EAAE1C;AAAjC,KACG1B,aAAa,CAACkB,QAAD,CAAb,GAA0BA,QAA1B,GAAqCqC,WAAW,EADnD,CANF,CADF;AAYAxC,EAAAA,MAAM;AAEN,SAAOoD,OAAP;AACD,CAzGD;;AA2GA3D,iBAAiB,CAACI,WAAlB,GAAgC,mBAAhC;AAEAJ,iBAAiB,CAAC6D,SAAlB,qBACKpE,eAAe,CAACqE,YAAhB,EADL;AAEErD,EAAAA,WAAW,EAAErB,SAAS,CAAC2E,MAFzB;AAGElD,EAAAA,KAAK,EAAE3B,eAAe,CAAC8E,+BAAhB,CAAgD,CAAC,SAAD,EAAY,MAAZ,CAAhD;AAHT;AAKAhE,iBAAiB,CAAC0D,YAAlB,GAAiCO,MAAM,CAACC,IAAP,CAAYlE,iBAAiB,CAAC6D,SAA9B,CAAjC;AAEA7D,iBAAiB,CAACqD,YAAlB,GAAiC;AAC/B7C,EAAAA,aAAa,EAAE9B;AADgB,CAAjC;AAIAsB,iBAAiB,CAACmD,MAAlB,GAA2B5D,sBAAsB,CAAC;AAChD4E,EAAAA,SAAS,EAAEnE,iBADqC;AAEhDoE,EAAAA,UAAU,EAAE;AAFoC,CAAD,CAAjD;AAKA;;;;;;;;AAOA,eAAe1E,iBAAiB,CAAmDM,iBAAnD,CAAhC","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport {\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport ToolbarDivider from './ToolbarDivider';\nimport ToolbarItem, { ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = 'divider' | 'item';\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\nconst ToolbarRadioGroup: React.FC<WithAsProp<ToolbarRadioGroupProps>> &\n  FluentComponentStaticProps<ToolbarRadioGroupProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarRadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n  const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarRadioGroup.displayName,\n    actionHandlers: {\n      nextItem: event => setFocusedItem(event, 1),\n      prevItem: event => setFocusedItem(event, -1),\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarRadioGroupStylesProps>(ToolbarRadioGroup.displayName, {\n    className: toolbarRadioGroupClassName,\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n    rtl: context.rtl,\n  });\n\n  const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n    // filter items which are not disabled\n    const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n      const currentItem = items[index] as ToolbarItemProps;\n      return currentItem && !currentItem.disabled;\n    });\n\n    // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n    const currentFocusedIndex =\n      _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n        return item.current.tabIndex === 0;\n      }) || 0;\n\n    const itemsLength = filteredRadioItems.length;\n    let nextIndex = currentFocusedIndex + direction;\n\n    if (nextIndex >= itemsLength) {\n      nextIndex = 0;\n    }\n\n    if (nextIndex < 0) {\n      nextIndex = itemsLength - 1;\n    }\n\n    const nextItemToFocus = filteredRadioItems[nextIndex].current;\n    if (nextItemToFocus) {\n      nextItemToFocus.focus();\n    }\n\n    if (context.target.activeElement === nextItemToFocus) {\n      event.stopPropagation();\n    }\n    event.preventDefault();\n  };\n\n  const renderItems = () => {\n    return _.map(items, (item, index) => {\n      const kind = _.get(item, 'kind', 'item');\n\n      const ref = React.createRef<HTMLElement>();\n      itemRefs[index] = ref;\n\n      if (kind === 'divider') {\n        return ToolbarDivider.create(item);\n      }\n\n      const toolbarItem = ToolbarItem.create(item, {\n        defaultProps: () => ({\n          accessibility: toolbarRadioGroupItemBehavior,\n          active: activeIndex === index,\n        }),\n      });\n\n      return (\n        <Ref innerRef={ref} key={toolbarItem.key}>\n          {toolbarItem}\n        </Ref>\n      );\n    });\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarRadioGroup.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        className: classes.root,\n      })}\n    >\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {childrenExist(children) ? children : renderItems()}\n      </ToolbarVariablesProvider>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarRadioGroup.displayName = 'ToolbarRadioGroup';\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.handledProps = Object.keys(ToolbarRadioGroup.propTypes) as any;\n\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n\nToolbarRadioGroup.create = createShorthandFactory({\n  Component: ToolbarRadioGroup,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport default withSafeTypeForAs<typeof ToolbarRadioGroup, ToolbarRadioGroupProps>(ToolbarRadioGroup);\n"],"file":"ToolbarRadioGroup.js"}