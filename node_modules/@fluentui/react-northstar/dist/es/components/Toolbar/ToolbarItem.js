import _extends from "@babel/runtime/helpers/esm/extends";
import _some from "lodash/some";
import _invoke from "lodash/invoke";
import { toolbarItemBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { Ref } from '@fluentui/react-component-ref';
import { EventListener } from '@fluentui/react-component-event-listener';
import { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';
import * as customPropTypes from '@fluentui/react-proptypes';
import { mergeComponentVariables } from '@fluentui/styles';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { createShorthandFactory, doesNodeContainClick, commonPropTypes, childrenExist } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import { getPopperPropsFromShorthand, Popper } from '../../utils/positioner';
import ToolbarMenu from './ToolbarMenu';
import Box from '../Box/Box';
import Popup from '../Popup/Popup';
import { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';
export var toolbarItemClassName = 'ui-toolbar__item';
export var toolbarItemSlotClassNames = {
  wrapper: "".concat(toolbarItemClassName, "__wrapper")
};

var ToolbarItem = function ToolbarItem(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ToolbarItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      active = props.active,
      className = props.className,
      design = props.design,
      icon = props.icon,
      children = props.children,
      disabled = props.disabled,
      popup = props.popup,
      menu = props.menu,
      menuOpen = props.menuOpen,
      wrapper = props.wrapper,
      styles = props.styles,
      variables = props.variables;
  var itemRef = React.useRef();
  var menuRef = React.useRef();
  var parentVariables = React.useContext(ToolbarVariablesContext);
  var mergedVariables = mergeComponentVariables(parentVariables, variables);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: ToolbarItem.displayName,
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      },
      performWrapperClick: function performWrapperClick(event) {
        handleWrapperClick(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        trySetMenuOpen(false, event);

        _invoke(itemRef.current, 'focus');
      },
      doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {
        event.stopPropagation();
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        as: String(props.as),
        disabled: disabled,
        hasMenu: !!menu,
        hasPopup: !!popup,
        menuOpen: menuOpen,
        active: active
      };
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(ToolbarItem.displayName, {
    className: toolbarItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        active: active,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleBlur = function handleBlur(e) {
    _invoke(props, 'onBlur', e, props);
  };

  var handleFocus = function handleFocus(e) {
    _invoke(props, 'onFocus', e, props);
  };

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    if (menu) {
      trySetMenuOpen(!menuOpen, e);
    }

    _invoke(props, 'onClick', e, props);
  };

  var handleWrapperClick = function handleWrapperClick(e) {
    if (menu) {
      if (doesNodeContainClick(menuRef.current, e.nativeEvent, context.target)) {
        trySetMenuOpen(false, e);
      }
    }
  };

  var handleOutsideClick = function handleOutsideClick(getRefs) {
    return function (e) {
      var isItemClick = doesNodeContainClick(itemRef.current, e, context.target);

      var isNestedClick = _some(getRefs(), function (childRef) {
        return doesNodeContainClick(childRef.current, e, context.target);
      });

      var isInside = isItemClick || isNestedClick;

      if (!isInside) {
        trySetMenuOpen(false, e);
      }
    };
  };

  var trySetMenuOpen = function trySetMenuOpen(newValue, e) {
    _invoke(props, 'onMenuOpenChange', e, Object.assign({}, props, {
      menuOpen: newValue
    }));
  };

  var handleMenuOverrides = function handleMenuOverrides(getRefs) {
    return function (predefinedProps) {
      return {
        onBlur: function onBlur(e) {
          var isInsideOrMenuTrigger = _some(getRefs(), function (childRef) {
            return childRef.current.contains(e.relatedTarget) || itemRef.current.contains(e.relatedTarget);
          });

          if (!isInsideOrMenuTrigger) {
            trySetMenuOpen(false, e);
          }
        },
        onItemClick: function onItemClick(e, itemProps) {
          var popup = itemProps.popup,
              menuOpen = itemProps.menuOpen;

          _invoke(predefinedProps, 'onItemClick', e, itemProps);

          if (popup) {
            return;
          } // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?


          trySetMenuOpen(menuOpen, e);
        }
      };
    };
  };

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ToolbarItem.handledProps, props);
  var itemElement = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    disabled: disabled,
    className: classes.root,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onClick: handleClick
  })), childrenExist(children) ? children : Box.create(icon));
  var submenuElement = menuOpen ? React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {
    return React.createElement(React.Fragment, null, React.createElement(Ref, {
      innerRef: function innerRef(node) {
        nestingRef.current = node;
        menuRef.current = node;
      }
    }, React.createElement(Popper, _extends({
      align: "start",
      position: "above",
      targetRef: itemRef
    }, getPopperPropsFromShorthand(menu)), React.createElement(ToolbarVariablesProvider, {
      value: mergedVariables
    }, ToolbarMenu.create(menu, {
      overrideProps: handleMenuOverrides(getRefs)
    })))), React.createElement(EventListener, {
      listener: handleOutsideClick(getRefs),
      target: context.target,
      type: "click",
      capture: true
    }));
  }) : null;

  if (popup) {
    var popupElement = Popup.create(popup, {
      defaultProps: function defaultProps() {
        return {
          trapFocus: true
        };
      },
      overrideProps: {
        trigger: itemElement,
        children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`

      }
    });
    setEnd();
    return popupElement;
  } // wrap the item if it has menu (even if it is closed = not rendered)


  if (menu) {
    var contentElement = React.createElement(React.Fragment, null, React.createElement(Ref, {
      innerRef: itemRef
    }, itemElement), submenuElement);

    if (wrapper) {
      var wrapperElement = Box.create(wrapper, {
        defaultProps: function defaultProps() {
          return getA11yProps('wrapper', {
            className: cx(toolbarItemSlotClassNames.wrapper, classes.wrapper)
          });
        },
        overrideProps: function overrideProps(predefinedProps) {
          return {
            children: contentElement,
            onClick: function onClick(e) {
              handleWrapperClick(e);

              _invoke(predefinedProps, 'onClick', e);
            }
          };
        }
      });
      setEnd();
      return wrapperElement;
    }

    setEnd();
    return contentElement;
  }

  var refElement = React.createElement(Ref, {
    innerRef: itemRef
  }, itemElement);
  setEnd();
  return refElement;
};

ToolbarItem.displayName = 'ToolbarItem';
ToolbarItem.defaultProps = {
  as: 'button',
  accessibility: toolbarItemBehavior,
  wrapper: {}
};
ToolbarItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  menu: PropTypes.oneOfType([customPropTypes.shorthandAllowingChildren, PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren)]),
  menuOpen: PropTypes.bool,
  onMenuOpenChange: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.shorthandAllowingChildren
});
ToolbarItem.handledProps = Object.keys(ToolbarItem.propTypes);
ToolbarItem.create = createShorthandFactory({
  Component: ToolbarItem,
  mappedProp: 'content'
});
/**
 * A ToolbarItem renders Toolbar item as a button with an icon.
 */

export default withSafeTypeForAs(ToolbarItem);
//# sourceMappingURL=ToolbarItem.js.map
