{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","compose","mergeComponentVariables","ThemeContext","React","createShorthandFactory","commonPropTypes","ToolbarVariablesContext","toolbarDividerClassName","ToolbarDivider","props","ref","composeOptions","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","create","Component","mappedProp","shorthandConfig"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { ProviderContextPrepared } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n  ShorthandConfig,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\nexport const toolbarDividerClassName = 'ui-toolbar__divider';\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nconst ToolbarDivider = compose<'div', ToolbarDividerProps, ToolbarDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeComponentVariables(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ref, ...unhandledProps, className: classes.root })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    displayName: 'ToolbarDivider',\n    className: toolbarDividerClassName,\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],\n  },\n) as ComponentWithAs<'div', ToolbarDividerProps> & {\n  create: ShorthandFactory<ToolbarDividerProps>;\n  shorthandConfig: ShorthandConfig<ToolbarDividerProps>;\n};\nToolbarDivider.propTypes = commonPropTypes.createCommon();\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\nToolbarDivider.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nexport default ToolbarDivider;\n"],"file":"ToolbarDivider.js"}