import _map from "lodash/map";
import _invoke from "lodash/invoke";
import { toolbarMenuRadioGroupBehavior, toolbarMenuItemRadioBehavior } from '@fluentui/accessibility';
import { mergeComponentVariables } from '@fluentui/styles';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { createShorthandFactory, commonPropTypes } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import ToolbarMenuItem from './ToolbarMenuItem';
import Box from '../Box/Box';
import { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';
export var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars

export var toolbarMenuRadioGroupSlotClassNames = {
  wrapper: "".concat(toolbarMenuRadioGroupClassName, "__wrapper")
};

var ToolbarMenuRadioGroup = function ToolbarMenuRadioGroup(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ToolbarMenuRadioGroup.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      activeIndex = props.activeIndex,
      className = props.className,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables,
      wrapper = props.wrapper;
  var parentVariables = React.useContext(ToolbarVariablesContext);
  var mergedVariables = mergeComponentVariables(parentVariables, variables);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: ToolbarMenuRadioGroup.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(ToolbarMenuRadioGroup.displayName, {
    className: toolbarMenuRadioGroupClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        _invoke(predefinedProps, 'onClick', e, itemProps);

        _invoke(props, 'onItemClick', e, itemProps);
      },
      wrapper: null
    };
  };

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ToolbarMenuRadioGroup.handledProps, props);
  var content = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })), React.createElement(ToolbarVariablesProvider, {
    value: mergedVariables
  }, _map(items, function (item, index) {
    return ToolbarMenuItem.create(item, {
      defaultProps: function defaultProps() {
        return {
          accessibility: toolbarMenuItemRadioBehavior,
          as: 'li',
          active: activeIndex === index,
          index: index
        };
      },
      overrideProps: handleItemOverrides
    });
  })));
  var element = Box.create(wrapper, {
    defaultProps: function defaultProps() {
      return getA11yProps('wrapper', {
        as: 'li',
        className: toolbarMenuRadioGroupSlotClassNames.wrapper,
        styles: resolvedStyles.wrapper
      });
    },
    overrideProps: {
      children: content
    }
  });
  setEnd();
  return element;
};

ToolbarMenuRadioGroup.displayName = 'ToolbarMenuRadioGroup';
ToolbarMenuRadioGroup.defaultProps = {
  as: 'ul',
  accessibility: toolbarMenuRadioGroupBehavior,
  wrapper: {}
};
ToolbarMenuRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthand,
  onItemClick: PropTypes.func,
  wrapper: customPropTypes.itemShorthand
});
ToolbarMenuRadioGroup.handledProps = Object.keys(ToolbarMenuRadioGroup.propTypes);
ToolbarMenuRadioGroup.create = createShorthandFactory({
  Component: ToolbarMenuRadioGroup
});
/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */

export default withSafeTypeForAs(ToolbarMenuRadioGroup);
//# sourceMappingURL=ToolbarMenuRadioGroup.js.map
