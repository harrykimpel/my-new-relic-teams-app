import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, compose } from '@fluentui/react-bindings';
import { mergeComponentVariables } from '@fluentui/styles'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import * as React from 'react';
import { createShorthandFactory, commonPropTypes } from '../../utils';
import { ToolbarVariablesContext } from './toolbarVariablesContext';
export var toolbarDividerClassName = 'ui-toolbar__divider';
/**
 * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.
 */

var ToolbarDivider = compose(function (props, ref, composeOptions) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(ToolbarVariablesContext);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: composeOptions.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(composeOptions.displayName, {
    className: composeOptions.className,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergeComponentVariables(parentVariables, variables)
      };
    },
    rtl: context.rtl,
    composeOptions: composeOptions,
    unstable_props: props
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);
  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    ref: ref
  }, unhandledProps, {
    className: classes.root
  })));
  setEnd();
  return element;
}, {
  displayName: 'ToolbarDivider',
  className: toolbarDividerClassName,
  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design']
});
ToolbarDivider.propTypes = commonPropTypes.createCommon();
ToolbarDivider.create = createShorthandFactory({
  Component: ToolbarDivider,
  mappedProp: 'content'
});
ToolbarDivider.shorthandConfig = {
  mappedProp: 'content'
};
export default ToolbarDivider;
//# sourceMappingURL=ToolbarDivider.js.map
