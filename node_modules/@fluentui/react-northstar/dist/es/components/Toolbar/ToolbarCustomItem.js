import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import { mergeComponentVariables } from '@fluentui/styles';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { createShorthandFactory, childrenExist, commonPropTypes } from '../../utils';
import { ToolbarVariablesContext } from './toolbarVariablesContext';
export var toolbarCustomItemClassName = 'ui-toolbar__customitem';

var ToolbarCustomItem = function ToolbarCustomItem(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ToolbarCustomItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      fitted = props.fitted,
      focusable = props.focusable,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(ToolbarVariablesContext);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: ToolbarCustomItem.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(ToolbarCustomItem.displayName, {
    className: toolbarCustomItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        fitted: fitted
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergeComponentVariables(parentVariables, variables)
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ToolbarCustomItem.handledProps, props);

  var handleBlur = function handleBlur(e) {
    if (focusable) {
      _invoke(props, 'onBlur', e, props);
    }
  };

  var handleFocus = function handleFocus(e) {
    if (focusable) {
      _invoke(props, 'onFocus', e, props);
    }
  };

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign(_defineProperty({}, IS_FOCUSABLE_ATTRIBUTE, focusable), unhandledProps, {
    className: classes.root,
    onBlur: handleBlur,
    onFocus: handleFocus
  })), childrenExist(children) ? children : content);
  setEnd();
  return element;
};

ToolbarCustomItem.displayName = 'ToolbarCustomItem';
ToolbarCustomItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  fitted: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),
  focusable: PropTypes.bool,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
});
ToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes);
ToolbarCustomItem.create = createShorthandFactory({
  Component: ToolbarCustomItem,
  mappedProp: 'content'
});
/**
 * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.
 */

export default withSafeTypeForAs(ToolbarCustomItem);
//# sourceMappingURL=ToolbarCustomItem.js.map
