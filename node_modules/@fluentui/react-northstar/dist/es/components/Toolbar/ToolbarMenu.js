import _get from "lodash/get";
import _map from "lodash/map";
import _invoke from "lodash/invoke";
import { toolbarMenuBehavior, toolbarMenuItemCheckboxBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import { mergeComponentVariables } from '@fluentui/styles';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { createShorthandFactory, commonPropTypes, childrenExist } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import ToolbarMenuRadioGroup from './ToolbarMenuRadioGroup';
import ToolbarMenuDivider from './ToolbarMenuDivider';
import ToolbarMenuItem from './ToolbarMenuItem';
import { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';
export var toolbarMenuClassName = 'ui-toolbar__menu';

var ToolbarMenu = function ToolbarMenu(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ToolbarMenu.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      children = props.children,
      design = props.design,
      items = props.items,
      submenu = props.submenu,
      submenuIndicator = props.submenuIndicator,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(ToolbarVariablesContext);
  var mergedVariables = mergeComponentVariables(parentVariables, variables);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: ToolbarMenu.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        _invoke(props, 'onClick', e, props);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(ToolbarMenu.displayName, {
    className: toolbarMenuClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        _invoke(predefinedProps, 'onClick', e, itemProps);

        _invoke(props, 'onItemClick', e, Object.assign({}, itemProps, {
          menuOpen: !!itemProps.menu
        }));
      }
    };
  };

  var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {
    return {
      onItemClick: function onItemClick(e, itemProps) {
        _invoke(predefinedProps, 'onItemClick', e, itemProps);

        _invoke(props, 'onItemClick', e, itemProps);
      }
    };
  };

  var renderItems = function renderItems() {
    return _map(items, function (item) {
      var kind = _get(item, 'kind', 'item');

      switch (kind) {
        case 'divider':
          return ToolbarMenuDivider.create(item);

        case 'group':
          return ToolbarMenuRadioGroup.create(item, {
            overrideProps: handleRadioGroupOverrides
          });

        case 'toggle':
          return ToolbarMenuItem.create(item, {
            defaultProps: function defaultProps() {
              return {
                accessibility: toolbarMenuItemCheckboxBehavior
              };
            },
            overrideProps: handleItemOverrides
          });

        default:
          return ToolbarMenuItem.create(item, {
            defaultProps: function defaultProps() {
              return {
                submenuIndicator: submenuIndicator,
                inSubmenu: submenu
              };
            },
            overrideProps: handleItemOverrides
          });
      }
    });
  };

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ToolbarMenu.handledProps, props);
  var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })), React.createElement(ToolbarVariablesProvider, {
    value: mergedVariables
  }, childrenExist(children) ? children : renderItems())));
  setEnd();
  return element;
};

ToolbarMenu.displayName = 'ToolbarMenu';
ToolbarMenu.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
  onItemClick: PropTypes.func,
  submenu: PropTypes.bool,
  submenuIndicator: customPropTypes.shorthandAllowingChildren
});
ToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes);
ToolbarMenu.defaultProps = {
  accessibility: toolbarMenuBehavior,
  as: 'ul'
};
ToolbarMenu.create = createShorthandFactory({
  Component: ToolbarMenu,
  mappedArrayProp: 'items'
});
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */

export default withSafeTypeForAs(ToolbarMenu);
//# sourceMappingURL=ToolbarMenu.js.map
