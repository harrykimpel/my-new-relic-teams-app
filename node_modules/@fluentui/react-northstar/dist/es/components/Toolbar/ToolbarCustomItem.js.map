{"version":3,"sources":["components/Toolbar/ToolbarCustomItem.tsx"],"names":["IS_FOCUSABLE_ATTRIBUTE","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","mergeComponentVariables","PropTypes","React","ThemeContext","withSafeTypeForAs","createShorthandFactory","childrenExist","commonPropTypes","ToolbarVariablesContext","toolbarCustomItemClassName","ToolbarCustomItem","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","fitted","focusable","styles","variables","parentVariables","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","handleBlur","e","handleFocus","element","root","onBlur","onFocus","propTypes","createCommon","oneOfType","bool","oneOf","func","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A custom item can remove element padding, vertically or horizontally. */\n  fitted?: boolean | 'horizontally' | 'vertically';\n\n  /** A custom item can be focused. */\n  focusable?: boolean;\n\n  /** A custom item can't be actionable. */\n  onClick?: never;\n\n  /**\n   * Called after user's focus. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;\n\n  /**\n   * Called after item blur. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;\n}\n\nexport type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;\nexport const toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\nconst ToolbarCustomItem: React.FC<WithAsProp<ToolbarCustomItemProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarCustomItem.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, fitted, focusable, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarCustomItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarCustomItemStylesProps>(ToolbarCustomItem.displayName, {\n    className: toolbarCustomItemClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarCustomItem.handledProps, props);\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onFocus', e, props);\n    }\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        [IS_FOCUSABLE_ATTRIBUTE]: focusable,\n        ...unhandledProps,\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarCustomItem.displayName = 'ToolbarCustomItem';\n\nToolbarCustomItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'horizontally' | 'vertically'>(['horizontally', 'vertically']),\n  ]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n};\nToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes) as any;\n\nToolbarCustomItem.create = createShorthandFactory({\n  Component: ToolbarCustomItem,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\nexport default withSafeTypeForAs<typeof ToolbarCustomItem, ToolbarCustomItemProps>(ToolbarCustomItem);\n"],"file":"ToolbarCustomItem.js"}