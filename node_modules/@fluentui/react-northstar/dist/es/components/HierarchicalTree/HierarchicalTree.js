import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _map from "lodash/map";
import _without from "lodash/without";
import _includes from "lodash/includes";
import _isArray from "lodash/isArray";
import _invoke from "lodash/invoke";
import { hierarchicalTreeBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import HierarchicalTreeItem from './HierarchicalTreeItem';
import { AutoControlledComponent, childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';
import { withSafeTypeForAs } from '../../types';
export var hierarchicalTreeClassName = 'ui-hierarchicaltree';

var HierarchicalTree =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(HierarchicalTree, _AutoControlledCompon);

  function HierarchicalTree() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, HierarchicalTree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HierarchicalTree)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      expandSiblings: function expandSiblings(e) {
        var _this$props = _this.props,
            items = _this$props.items,
            exclusive = _this$props.exclusive;
        e.preventDefault();
        e.stopPropagation();

        if (exclusive) {
          return;
        }

        var activeIndex = items ? items.reduce(function (acc, item, index) {
          if (item['items']) {
            return [].concat(_toConsumableArray(acc), [index]);
          }

          return acc;
        }, []) : [];

        _this.trySetActiveIndexAndTriggerEvent(e, activeIndex);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "trySetActiveIndexAndTriggerEvent", function (e, activeIndex) {
      _this.setState({
        activeIndex: activeIndex
      });

      _invoke(_this.props, 'onActiveIndexChange', e, Object.assign({}, _this.props, {
        activeIndex: activeIndex
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "computeNewIndex", function (treeItemProps) {
      var index = treeItemProps.index,
          items = treeItemProps.items;

      var activeIndexes = _this.getActiveIndexes();

      var exclusive = _this.props.exclusive;

      if (!items) {
        return activeIndexes;
      }

      if (exclusive) return index; // check to see if index is in array, and remove it, if not then add it

      return _includes(activeIndexes, index) ? _without(activeIndexes, index) : [].concat(_toConsumableArray(activeIndexes), [index]);
    });

    _defineProperty(_assertThisInitialized(_this), "handleTreeItemOverrides", function (predefinedProps) {
      return {
        onTitleClick: function onTitleClick(e, treeItemProps) {
          _this.trySetActiveIndexAndTriggerEvent(e, _this.computeNewIndex(treeItemProps));

          _invoke(predefinedProps, 'onTitleClick', e, treeItemProps);
        }
      };
    });

    return _this;
  }

  _createClass(HierarchicalTree, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState(_ref) {
      var exclusive = _ref.exclusive;
      return {
        activeIndex: exclusive ? -1 : []
      };
    }
  }, {
    key: "getActiveIndexes",
    value: function getActiveIndexes() {
      var activeIndex = this.state.activeIndex;
      return _isArray(activeIndex) ? activeIndex : [activeIndex];
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this2 = this;

      var _this$props2 = this.props,
          items = _this$props2.items,
          renderItemTitle = _this$props2.renderItemTitle,
          exclusive = _this$props2.exclusive;
      var activeIndex = this.state.activeIndex;
      var activeIndexes = this.getActiveIndexes();
      return _map(items, function (item, index) {
        return HierarchicalTreeItem.create(item, {
          defaultProps: function defaultProps() {
            return {
              index: index,
              exclusive: exclusive,
              renderItemTitle: renderItemTitle,
              open: exclusive ? index === activeIndex : _includes(activeIndexes, index)
            };
          },
          overrideProps: _this2.handleTreeItemOverrides
        });
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref2) {
      var ElementType = _ref2.ElementType,
          classes = _ref2.classes,
          accessibility = _ref2.accessibility,
          unhandledProps = _ref2.unhandledProps,
          styles = _ref2.styles,
          variables = _ref2.variables;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderContent());
    }
  }]);

  return HierarchicalTree;
}(AutoControlledComponent);

_defineProperty(HierarchicalTree, "create", void 0);

_defineProperty(HierarchicalTree, "displayName", 'HierarchicalTree');

_defineProperty(HierarchicalTree, "deprecated_className", hierarchicalTreeClassName);

_defineProperty(HierarchicalTree, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  exclusive: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  renderItemTitle: PropTypes.func,
  onActiveIndexChange: PropTypes.func
}));

_defineProperty(HierarchicalTree, "defaultProps", {
  as: 'ul',
  accessibility: hierarchicalTreeBehavior
});

_defineProperty(HierarchicalTree, "autoControlledProps", ['activeIndex']);

HierarchicalTree.create = createShorthandFactory({
  Component: HierarchicalTree,
  mappedArrayProp: 'items'
});
/**
 * (DEPRECATED) A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

export default withSafeTypeForAs(HierarchicalTree);
//# sourceMappingURL=HierarchicalTree.js.map
