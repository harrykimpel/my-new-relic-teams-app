import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _isNil from "lodash/isNil";
import _invoke from "lodash/invoke";
import { hierarchicalTreeItemBehavior, hierarchicalSubtreeBehavior } from '@fluentui/accessibility';
import { getFirstFocusable } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import { Ref } from '@fluentui/react-component-ref';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import HierarchicalTree from './HierarchicalTree';
import HierarchicalTreeTitle from './HierarchicalTreeTitle';
import { UIComponent, childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';
import { withSafeTypeForAs } from '../../types';
export var hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
export var hierarchicalTreeItemSlotClassNames = {
  subtree: "".concat(hierarchicalTreeItemClassName, "__subtree")
};

var HierarchicalTreeItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(HierarchicalTreeItem, _UIComponent);

  function HierarchicalTreeItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, HierarchicalTreeItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HierarchicalTreeItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "itemRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "treeRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();

        _invoke(_this.props, 'onTitleClick', e, _this.props);
      },
      receiveFocus: function receiveFocus(e) {
        e.preventDefault();
        e.stopPropagation(); // Focuses the title if the event comes from a child item.

        if (_this.eventComesFromChildItem(e)) {
          _this.itemRef.current.focus();
        }
      },
      collapse: function collapse(e) {
        e.preventDefault();
        e.stopPropagation(); // Handle click on title if the keyboard event was dispatched on that title

        if (!_this.eventComesFromChildItem(e)) {
          _this.handleTitleClick(e);
        }
      },
      expand: function expand(e) {
        e.preventDefault();
        e.stopPropagation();

        _this.handleTitleClick(e);
      },
      focusSubtree: function focusSubtree(e) {
        e.preventDefault();
        e.stopPropagation();
        var element = getFirstFocusable(_this.treeRef.current, _this.treeRef.current, true);

        if (element) {
          element.focus();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "eventComesFromChildItem", function (e) {
      return e.currentTarget !== e.target;
    });

    _defineProperty(_assertThisInitialized(_this), "handleTitleClick", function (e) {
      _invoke(_this.props, 'onTitleClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleTitleOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          _this.handleTitleClick(e);

          _invoke(predefinedProps, 'onClick', e, titleProps);
        }
      };
    });

    return _this;
  }

  _createClass(HierarchicalTreeItem, [{
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          items = _this$props.items,
          title = _this$props.title,
          renderItemTitle = _this$props.renderItemTitle,
          open = _this$props.open,
          exclusive = _this$props.exclusive;
      var hasSubtree = !_isNil(items);
      return React.createElement(React.Fragment, null, HierarchicalTreeTitle.create(title, {
        defaultProps: function defaultProps() {
          return {
            open: open,
            hasSubtree: hasSubtree,
            as: hasSubtree ? 'span' : 'a'
          };
        },
        render: renderItemTitle,
        overrideProps: this.handleTitleOverrides
      }), hasSubtree && open && React.createElement(Ref, {
        innerRef: this.treeRef
      }, HierarchicalTree.create(items, {
        defaultProps: function defaultProps() {
          return {
            accessibility: hierarchicalSubtreeBehavior,
            className: hierarchicalTreeItemSlotClassNames.subtree,
            exclusive: exclusive,
            renderItemTitle: renderItemTitle
          };
        }
      })));
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          accessibility = _ref.accessibility,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables;
      var children = this.props.children;
      return React.createElement(Ref, {
        innerRef: this.itemRef
      }, React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderContent()));
    }
  }]);

  return HierarchicalTreeItem;
}(UIComponent);

_defineProperty(HierarchicalTreeItem, "create", void 0);

_defineProperty(HierarchicalTreeItem, "displayName", 'HierarchicalTreeItem');

_defineProperty(HierarchicalTreeItem, "deprecated_className", hierarchicalTreeItemClassName);

_defineProperty(HierarchicalTreeItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  items: customPropTypes.collectionShorthand,
  index: PropTypes.number,
  exclusive: PropTypes.bool,
  onTitleClick: PropTypes.func,
  open: PropTypes.bool,
  renderItemTitle: PropTypes.func,
  title: customPropTypes.itemShorthand
}));

_defineProperty(HierarchicalTreeItem, "defaultProps", {
  as: 'li',
  accessibility: hierarchicalTreeItemBehavior
});

HierarchicalTreeItem.create = createShorthandFactory({
  Component: HierarchicalTreeItem,
  mappedProp: 'title'
});
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

export default withSafeTypeForAs(HierarchicalTreeItem);
//# sourceMappingURL=HierarchicalTreeItem.js.map
