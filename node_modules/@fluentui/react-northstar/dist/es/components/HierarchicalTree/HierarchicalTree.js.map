{"version":3,"sources":["components/HierarchicalTree/HierarchicalTree.tsx"],"names":["hierarchicalTreeBehavior","customPropTypes","PropTypes","React","HierarchicalTreeItem","AutoControlledComponent","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","applyAccessibilityKeyHandlers","withSafeTypeForAs","hierarchicalTreeClassName","HierarchicalTree","expandSiblings","e","props","items","exclusive","preventDefault","stopPropagation","activeIndex","reduce","acc","item","index","trySetActiveIndexAndTriggerEvent","setState","treeItemProps","activeIndexes","getActiveIndexes","predefinedProps","onTitleClick","computeNewIndex","state","renderItemTitle","create","defaultProps","open","overrideProps","handleTreeItemOverrides","ElementType","classes","accessibility","unhandledProps","styles","variables","children","root","attributes","getAttributes","forElements","keyHandlers","renderContent","createCommon","content","every","disallow","oneOfType","arrayOf","number","defaultActiveIndex","bool","collectionShorthand","func","onActiveIndexChange","as","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, hierarchicalTreeBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport HierarchicalTreeItem, { HierarchicalTreeItemProps } from './HierarchicalTreeItem';\nimport { HierarchicalTreeTitleProps } from './HierarchicalTreeTitle';\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandValue,\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ComponentEventHandler,\n} from '../../types';\n\nexport interface HierarchicalTreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active subtree. */\n  activeIndex?: number[] | number;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one subtree to be open at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ShorthandCollection<HierarchicalTreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<HierarchicalTreeTitleProps>;\n\n  /** Called when activeIndex changes.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveIndexChange?: ComponentEventHandler<HierarchicalTreeProps>;\n}\n\nexport interface HierarchicalTreeState {\n  activeIndex: number[] | number;\n}\n\nexport const hierarchicalTreeClassName = 'ui-hierarchicaltree';\n\nclass HierarchicalTree extends AutoControlledComponent<WithAsProp<HierarchicalTreeProps>, HierarchicalTreeState> {\n  static create: ShorthandFactory<HierarchicalTreeProps>;\n\n  static displayName = 'HierarchicalTree';\n\n  static deprecated_className = hierarchicalTreeClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    defaultActiveIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    exclusive: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    renderItemTitle: PropTypes.func,\n    onActiveIndexChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'ul',\n    accessibility: hierarchicalTreeBehavior,\n  };\n\n  static autoControlledProps = ['activeIndex'];\n\n  actionHandlers = {\n    expandSiblings: e => {\n      const { items, exclusive } = this.props;\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (exclusive) {\n        return;\n      }\n      const activeIndex = items\n        ? items.reduce<number[]>((acc, item, index) => {\n            if (item['items']) {\n              return [...acc, index];\n            }\n            return acc;\n          }, [])\n        : [];\n      this.trySetActiveIndexAndTriggerEvent(e, activeIndex);\n    },\n  };\n\n  trySetActiveIndexAndTriggerEvent = (e, activeIndex) => {\n    this.setState({ activeIndex });\n    _.invoke(this.props, 'onActiveIndexChange', e, { ...this.props, activeIndex });\n  };\n\n  getInitialAutoControlledState({ exclusive }): HierarchicalTreeState {\n    return {\n      activeIndex: exclusive ? -1 : [],\n    };\n  }\n\n  getActiveIndexes(): number[] {\n    const { activeIndex } = this.state;\n    return _.isArray(activeIndex) ? activeIndex : [activeIndex];\n  }\n\n  computeNewIndex = (treeItemProps: HierarchicalTreeItemProps) => {\n    const { index, items } = treeItemProps;\n    const activeIndexes = this.getActiveIndexes();\n    const { exclusive } = this.props;\n    if (!items) {\n      return activeIndexes;\n    }\n\n    if (exclusive) return index;\n\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndexes, index) ? _.without(activeIndexes, index) : [...activeIndexes, index];\n  };\n\n  handleTreeItemOverrides = (predefinedProps: HierarchicalTreeItemProps) => ({\n    onTitleClick: (e: React.SyntheticEvent, treeItemProps: HierarchicalTreeItemProps) => {\n      this.trySetActiveIndexAndTriggerEvent(e, this.computeNewIndex(treeItemProps));\n      _.invoke(predefinedProps, 'onTitleClick', e, treeItemProps);\n    },\n  });\n\n  renderContent() {\n    const { items, renderItemTitle, exclusive } = this.props;\n    const { activeIndex } = this.state;\n    const activeIndexes = this.getActiveIndexes();\n\n    return _.map(items, (item: ShorthandValue<HierarchicalTreeItemProps>, index: number) =>\n      HierarchicalTreeItem.create(item, {\n        defaultProps: () => ({\n          index,\n          exclusive,\n          renderItemTitle,\n          open: exclusive ? index === activeIndex : _.includes(activeIndexes, index),\n        }),\n        overrideProps: this.handleTreeItemOverrides,\n      }),\n    );\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, variables }) {\n    const { children } = this.props;\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : this.renderContent()}\n      </ElementType>\n    );\n  }\n}\n\nHierarchicalTree.create = createShorthandFactory({\n  Component: HierarchicalTree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * (DEPRECATED) A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport default withSafeTypeForAs<typeof HierarchicalTree, HierarchicalTreeProps, 'ul'>(HierarchicalTree);\n"],"file":"HierarchicalTree.js"}