{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleBehavior","Ref","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","withSafeTypeForAs","Box","getElementType","useTelemetry","useUnhandledProps","useAccessibility","useStyles","ThemeContext","accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","props","context","useContext","displayName","telemetry","setStart","setEnd","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","mapPropsToBehavior","hasContent","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleFocus","handleWrapperOverrides","predefinedProps","onFocus","onClick","contentWrapperElement","create","defaultProps","overrideProps","element","getAttributes","forElements","root","shorthandConfig","mappedProp","propTypes","createCommon","string","bool","ref","wrapperShorthand","index","number","func","shorthandAllowingChildren","Object","keys","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\nexport const AccordionTitle: React.FC<WithAsProp<AccordionTitleProps>> &\n  FluentComponentStaticProps<AccordionTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n  setStart();\n  const {\n    contentRef,\n    children,\n    content,\n    indicator,\n    contentWrapper,\n    disabled,\n    accessibility,\n    canBeCollapsed,\n    as,\n    active,\n    accordionContentId,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasContent: !!content,\n      canBeCollapsed,\n      as,\n      active,\n      disabled,\n      accordionContentId,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      content: !!content,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (!disabled) {\n      _.invoke(props, 'onClick', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, props);\n    },\n  });\n\n  const contentWrapperElement = (\n    <Ref innerRef={contentRef}>\n      {Box.create(contentWrapper, {\n        defaultProps: () =>\n          getA11yProps('content', {\n            className: accordionTitleSlotClassNames.contentWrapper,\n            styles: resolvedStyles.contentWrapper,\n          }),\n        overrideProps: predefinedProps => ({\n          children: (\n            <>\n              {Box.create(indicator, {\n                defaultProps: () =>\n                  getA11yProps('indicator', {\n                    styles: resolvedStyles.indicator,\n                  }),\n              })}\n              {Box.create(content, {\n                defaultProps: () => ({\n                  styles: resolvedStyles.content,\n                }),\n              })}\n            </>\n          ),\n          ...handleWrapperOverrides(predefinedProps),\n        }),\n      })}\n    </Ref>\n  );\n\n  const element = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : contentWrapperElement}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport default withSafeTypeForAs<typeof AccordionTitle, AccordionTitleProps>(AccordionTitle);\n"],"file":"AccordionTitle.js"}