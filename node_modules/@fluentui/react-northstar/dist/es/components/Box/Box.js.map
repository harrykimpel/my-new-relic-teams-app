{"version":3,"sources":["components/Box/Box.tsx"],"names":["compose","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","React","ThemeContext","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","boxClassName","Box","props","ref","composeOptions","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","children","content","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","unhandledProps","handledProps","ElementType","result","getAttributes","forElements","root","propTypes","createCommon","create","Component"],"mappings":"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","sourcesContent":["import {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  UIComponentProps,\n  ShorthandFactory,\n} from '../../utils';\nimport { ProviderContextPrepared } from '../../types';\n\nexport interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\nexport type BoxStylesProps = never;\n\nexport const boxClassName = 'ui-box';\n\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\nconst Box = compose<'div', BoxProps, BoxStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables, children, content } = props;\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<BoxStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const result = (\n      <ElementType\n        {...getA11yProps('root', {\n          ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: boxClassName,\n    displayName: 'Box',\n    handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'div', BoxProps> & { create: ShorthandFactory<BoxProps> };\n\nBox.propTypes = commonPropTypes.createCommon();\nBox.create = createShorthandFactory({ Component: Box });\n\nexport default Box;\n"],"file":"Box.js"}