import _map from "lodash/map";
import _isNil from "lodash/isNil";
import { buttonGroupBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { withSafeTypeForAs } from '../../types';
import { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory, createShorthand } from '../../utils';
import Button from './Button';
import { getElementType, useAccessibility, useUnhandledProps, useTelemetry, useStyles } from '@fluentui/react-bindings'; // @ts-ignore

import { ThemeContext } from 'react-fela';
export var buttonGroupClassName = 'ui-buttons';
export var ButtonGroup = function ButtonGroup(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ButtonGroup.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      buttons = props.buttons,
      circular = props.circular,
      content = props.content,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ButtonGroup.handledProps, props);

  var _useStyles = useStyles(ButtonGroup.displayName, {
    className: buttonGroupClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        circular: circular
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      ResolvedStyles = _useStyles.styles;

  var getA11yProps = useAccessibility(props.accessibility, {
    debugName: ButtonGroup.displayName,
    rtl: context.rtl
  });

  var getStyleForButtonIndex = function getStyleForButtonIndex(styles, isFirst, isLast) {
    var resultStyles = {};

    if (isFirst) {
      resultStyles = styles.firstButton;
    }

    if (isLast) {
      resultStyles = Object.assign({}, resultStyles, {}, styles.lastButton);
    }

    if (!isFirst && !isLast) {
      resultStyles = styles.middleButton;
    }

    return resultStyles;
  };

  var emptyButtons = _isNil(buttons);

  var element = React.createElement(ElementType, Object.assign({}, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), {}, emptyButtons && Object.assign({}, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }))), emptyButtons ? childrenExist(children) ? children : content : _map(buttons, function (button, idx) {
    return createShorthand(Button, button, {
      defaultProps: function defaultProps() {
        return {
          circular: circular,
          styles: getStyleForButtonIndex(ResolvedStyles, idx === 0, idx === buttons.length - 1)
        };
      }
    });
  }));
  setEnd();
  return element;
};
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  buttons: customPropTypes.collectionShorthand,
  circular: PropTypes.bool
});
ButtonGroup.defaultProps = {
  accessibility: buttonGroupBehavior,
  as: 'div'
};
ButtonGroup.handledProps = Object.keys(ButtonGroup.propTypes);
ButtonGroup.create = createShorthandFactory({
  Component: ButtonGroup,
  mappedProp: 'content',
  mappedArrayProp: 'buttons'
});
/**
 * A ButtonGroup represents multiple related actions as a group.
 */

export default withSafeTypeForAs(ButtonGroup);
//# sourceMappingURL=ButtonGroup.js.map
