{"version":3,"sources":["components/Embed/Embed.tsx"],"names":["embedBehavior","PropTypes","React","customPropTypes","createShorthandFactory","commonPropTypes","Image","Video","Box","withSafeTypeForAs","Ref","getElementType","useUnhandledProps","useAutoControlled","useAccessibility","useTelemetry","useStyles","ThemeContext","embedClassName","embedSlotClassNames","control","Embed","props","context","useContext","displayName","telemetry","setStart","setEnd","alt","title","iframe","placeholder","video","variables","styles","className","design","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","performClick","event","handleClick","mapPropsToBehavior","rtl","defaultValue","defaultActive","value","active","initialValue","setACtive","useState","iframeLoaded","setIframeLoaded","frameRef","useRef","e","stopPropagation","preventDefault","iframeNil","newActive","handleFrameOverrides","predefinedProps","onLoad","current","contentWindow","focus","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","placeholderElement","image","width","height","hasIframe","hasVideo","controlVisible","placeholderVisible","element","root","onClick","create","defaultProps","autoPlay","controls","loop","muted","poster","as","overrideProps","propTypes","createCommon","children","content","bool","itemShorthand","every","disallow","onActiveChange","func","string","Object","keys","Component"],"mappings":"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","sourcesContent":["import { Accessibility, embedBehavior, EmbedBehaviorProps } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport Image from '../Image/Image';\nimport Video, { VideoProps } from '../Video/Video';\nimport Box, { BoxProps } from '../Box/Box';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useStyles,\n} from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface EmbedSlotClassNames {\n  control: string;\n}\n\nexport interface EmbedProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<EmbedBehaviorProps>;\n\n  /** Alternative text. */\n  alt?: string;\n\n  /** Corresponds to HTML title attribute. */\n  title?: string;\n\n  /** Whether the embedded object should be active. */\n  active?: boolean;\n\n  /** Whether the embedded object should start active. */\n  defaultActive?: boolean;\n\n  /** Shorthand for an control. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for an embedded iframe. */\n  iframe?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'active' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveChange?: ComponentEventHandler<EmbedProps>;\n\n  /**\n   * Called when is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onClick?: ComponentEventHandler<EmbedProps>;\n\n  /** Image source URL for when video isn't playing. */\n  placeholder?: string;\n\n  /** Shorthand for an embedded video. */\n  video?: ShorthandValue<VideoProps>;\n}\n\nexport const embedClassName = 'ui-embed';\nexport const embedSlotClassNames: EmbedSlotClassNames = {\n  control: `${embedClassName}__control`,\n};\n\nexport type EmbedStylesProps = Required<Pick<EmbedProps, 'active'>> & { iframeLoaded: boolean };\n\nexport const Embed: React.FC<WithAsProp<EmbedProps>> & FluentComponentStaticProps<EmbedProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Embed.displayName, context.telemetry);\n  setStart();\n  const { alt, title, control, iframe, placeholder, video, variables, styles, className, design } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Embed.handledProps, props);\n\n  const getA11yProps = useAccessibility<EmbedBehaviorProps>(props.accessibility, {\n    debugName: Embed.displayName,\n    actionHandlers: {\n      performClick: event => handleClick(event),\n    },\n    mapPropsToBehavior: () => ({\n      alt,\n      title,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [active, setACtive] = useAutoControlled({\n    defaultValue: props.defaultActive,\n    value: props.active,\n    initialValue: false,\n  });\n\n  const [iframeLoaded, setIframeLoaded] = React.useState(false);\n  const frameRef = React.useRef<HTMLFrameElement>();\n\n  const handleClick = e => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const iframeNil = _.isNil(props.iframe);\n    const newActive = !active;\n\n    if (iframeNil || (!iframeNil && newActive)) {\n      setACtive(newActive);\n      _.invoke(props, 'onActiveChange', e, { ...props, active: newActive });\n    }\n\n    _.invoke(props, 'onClick', e, { ...props, active: newActive });\n  };\n\n  const handleFrameOverrides = predefinedProps => ({\n    onLoad: (e: React.SyntheticEvent) => {\n      _.invoke(predefinedProps, 'onLoad', e);\n      setIframeLoaded(true);\n      frameRef.current.contentWindow.focus();\n    },\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<EmbedStylesProps>(Embed.displayName, {\n    className: embedClassName,\n    mapPropsToStyles: () => ({\n      iframeLoaded,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const placeholderElement = placeholder ? (\n    <Image\n      src={placeholder}\n      styles={resolvedStyles.image}\n      variables={{ width: variables.width, height: variables.height }}\n    />\n  ) : null;\n\n  const hasIframe = !_.isNil(iframe);\n  const hasVideo = !_.isNil(video);\n  const controlVisible = !active || hasVideo;\n  const placeholderVisible = !active || (hasIframe && active && !iframeLoaded);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n    >\n      {active && (\n        <>\n          {Video.create(video, {\n            defaultProps: () =>\n              getA11yProps('video', {\n                autoPlay: true,\n                controls: false,\n                loop: true,\n                muted: true,\n                poster: placeholder,\n                styles: resolvedStyles.video,\n                variables: {\n                  width: variables.width,\n                  height: variables.height,\n                },\n              }),\n          })}\n          {iframe && (\n            <Ref innerRef={frameRef}>\n              {Box.create(iframe, {\n                defaultProps: () =>\n                  getA11yProps('iframe', {\n                    as: 'iframe',\n                    styles: resolvedStyles.iframe,\n                  }),\n                overrideProps: handleFrameOverrides,\n              })}\n            </Ref>\n          )}\n        </>\n      )}\n\n      {placeholderVisible && placeholderElement}\n      {controlVisible &&\n        Box.create(control, {\n          defaultProps: () =>\n            getA11yProps('control', {\n              className: embedSlotClassNames.control,\n              styles: resolvedStyles.control,\n            }),\n        })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nEmbed.displayName = 'Embed';\n\nEmbed.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  active: PropTypes.bool,\n  defaultActive: PropTypes.bool,\n  control: customPropTypes.itemShorthand,\n  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n  onActiveChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]),\n};\n\nEmbed.defaultProps = {\n  as: 'span',\n  accessibility: embedBehavior,\n  control: {},\n};\n\nEmbed.handledProps = Object.keys(Embed.propTypes) as any;\n\nEmbed.create = createShorthandFactory({ Component: Embed });\n\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\nexport default withSafeTypeForAs<typeof Embed, EmbedProps, 'span'>(Embed);\n"],"file":"Embed.js"}