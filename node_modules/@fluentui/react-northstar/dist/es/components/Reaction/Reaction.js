import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as customPropTypes from '@fluentui/react-proptypes';
import * as React from 'react';
import { UIComponent, childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';
import ReactionGroup from './ReactionGroup';
export var reactionClassName = 'ui-reaction';
export var reactionSlotClassNames = {
  icon: "".concat(reactionClassName, "__icon"),
  content: "".concat(reactionClassName, "__content")
};

var Reaction =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Reaction, _UIComponent);

  function Reaction() {
    _classCallCheck(this, Reaction);

    return _possibleConstructorReturn(this, _getPrototypeOf(Reaction).apply(this, arguments));
  }

  _createClass(Reaction, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          icon = _this$props.icon,
          content = _this$props.content;
      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
        forElements: [children]
      }), accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), childrenExist(children) ? children : React.createElement(React.Fragment, null, Box.create(icon, {
        defaultProps: function defaultProps() {
          return {
            className: reactionSlotClassNames.icon,
            styles: styles.icon
          };
        }
      }), Box.create(content, {
        defaultProps: function defaultProps() {
          return {
            className: reactionSlotClassNames.content,
            styles: styles.content
          };
        }
      })));
    }
  }]);

  return Reaction;
}(UIComponent);

_defineProperty(Reaction, "create", void 0);

_defineProperty(Reaction, "deprecated_className", reactionClassName);

_defineProperty(Reaction, "displayName", 'Reaction');

_defineProperty(Reaction, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  icon: customPropTypes.shorthandAllowingChildren
}));

_defineProperty(Reaction, "defaultProps", {
  as: 'span'
});

_defineProperty(Reaction, "Group", ReactionGroup);

Reaction.create = createShorthandFactory({
  Component: Reaction,
  mappedProp: 'content'
});
/**
 * A Reaction indicates user's emotion or perception.
 * Used to display user's reaction for entity in Chat (e.g. message).
 */

export default withSafeTypeForAs(Reaction);
//# sourceMappingURL=Reaction.js.map
