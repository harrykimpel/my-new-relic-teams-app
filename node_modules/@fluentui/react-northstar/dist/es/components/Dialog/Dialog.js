import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { dialogBehavior } from '@fluentui/accessibility';
import { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';
import { EventListener } from '@fluentui/react-component-event-listener';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import * as keyboardKey from 'keyboard-key';
import { disableBodyScroll, enableBodyScroll } from './utils';
import { commonPropTypes, AutoControlledComponent, doesNodeContainClick, applyAccessibilityKeyHandlers, getOrGenerateIdFromShorthand, createShorthand } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Button from '../Button/Button';
import ButtonGroup from '../Button/ButtonGroup';
import Box from '../Box/Box';
import Header from '../Header/Header';
import Portal from '../Portal/Portal';
import Flex from '../Flex/Flex';
import DialogFooter from './DialogFooter';
var dialogsCounterAttribute = 'fluent-dialogs-count';
export var dialogClassName = 'ui-dialog';
export var dialogSlotClassNames = {
  header: "".concat(dialogClassName, "__header"),
  headerAction: "".concat(dialogClassName, "__headerAction"),
  content: "".concat(dialogClassName, "__content"),
  overlay: "".concat(dialogClassName, "__overlay"),
  footer: "".concat(dialogClassName, "__footer")
};

var Dialog =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Dialog, _AutoControlledCompon);

  function Dialog() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      closeAndFocusTrigger: function closeAndFocusTrigger(e) {
        _this.handleDialogCancel(e);

        e.stopPropagation();

        _invoke(_this.triggerRef, 'current.focus');
      },
      close: function close(e) {
        return _this.handleDialogCancel(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "contentRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "overlayRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "triggerRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleDialogCancel", function (e) {
      _invoke(_this.props, 'onCancel', e, Object.assign({}, _this.props, {
        open: false
      }));

      _this.setState({
        open: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleDialogConfirm", function (e) {
      _invoke(_this.props, 'onConfirm', e, Object.assign({}, _this.props, {
        open: false
      }));

      _this.setState({
        open: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleDialogOpen", function (e) {
      _invoke(_this.props, 'onOpen', e, Object.assign({}, _this.props, {
        open: true
      }));

      _this.setState({
        open: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancelButtonOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          _invoke(predefinedProps, 'onClick', e, buttonProps);

          _this.handleDialogCancel(e);
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleConfirmButtonOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          _invoke(predefinedProps, 'onClick', e, buttonProps);

          _this.handleDialogConfirm(e);
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleOverlayClick", function (e) {
      // Dialog has different conditions to close than Popup, so we don't need to iterate across all
      // refs
      var isInsideContentClick = doesNodeContainClick(_this.contentRef.current, e, _this.context.target);
      var isInsideOverlayClick = doesNodeContainClick(_this.overlayRef.current, e, _this.context.target);
      var shouldClose = !isInsideContentClick && isInsideOverlayClick;

      if (shouldClose) {
        _this.handleDialogCancel(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentKeydown", function (getRefs) {
      return function (e) {
        // if focus was lost from Dialog, for e.g. when click on Dialog's content
        // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus
        var lastOverlayRef = getRefs().pop();
        var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === _this.overlayRef.current;

        if (keyboardKey.getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {
          _this.handleDialogCancel(e);

          _invoke(_this.triggerRef, 'current.focus');
        }
      };
    });

    return _this;
  }

  _createClass(Dialog, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        open: false
      };
    }
  }, {
    key: "lockBodyScroll",
    value: function lockBodyScroll() {
      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;
      this.context.target.body.setAttribute(dialogsCounterAttribute, "".concat(openDialogs)); // Avoid to block scroll in nested dialogs

      if (openDialogs === 1) {
        disableBodyScroll(this.context.target.body);
      }
    }
  }, {
    key: "unlockBodyScroll",
    value: function unlockBodyScroll() {
      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;
      this.context.target.body.setAttribute(dialogsCounterAttribute, "".concat(openDialogs)); // Only enables scroll if all dialogs are closed

      if (openDialogs === 0) {
        enableBodyScroll(this.context.target.body);
        this.context.target.body.removeAttribute(dialogsCounterAttribute);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      // Open -> Closed
      if (prevState.open && !this.state.open) {
        this.unlockBodyScroll();
      } // Closed -> Open


      if (!prevState.open && this.state.open) {
        this.lockBodyScroll();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.state.open) {
        this.lockBodyScroll();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.state.open) {
        this.unlockBodyScroll();
      }
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var accessibility = _ref.accessibility,
          classes = _ref.classes,
          ElementType = _ref.ElementType,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps,
          rtl = _ref.rtl;
      var _this$props = this.props,
          actions = _this$props.actions,
          cancelButton = _this$props.cancelButton,
          closeOnOutsideClick = _this$props.closeOnOutsideClick,
          confirmButton = _this$props.confirmButton,
          content = _this$props.content,
          header = _this$props.header,
          headerAction = _this$props.headerAction,
          overlay = _this$props.overlay,
          trapFocus = _this$props.trapFocus,
          trigger = _this$props.trigger,
          footer = _this$props.footer;
      var open = this.state.open;
      var cancelElement = createShorthand(Button, cancelButton, {
        overrideProps: this.handleCancelButtonOverrides
      });
      var confirmElement = createShorthand(Button, confirmButton, {
        defaultProps: function defaultProps() {
          return {
            primary: true
          };
        },
        overrideProps: this.handleConfirmButtonOverrides
      });
      var dialogActions = (cancelElement || confirmElement) && ButtonGroup.create(actions, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.actions
          };
        },
        overrideProps: {
          content: React.createElement(Flex, {
            gap: "gap.smaller"
          }, cancelElement, confirmElement)
        }
      });
      var dialogContent = React.createElement(Ref, {
        innerRef: this.contentRef
      }, React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.popup, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.popup, unhandledProps)), Header.create(header, {
        defaultProps: function defaultProps() {
          return Object.assign({
            as: 'h2',
            className: dialogSlotClassNames.header,
            styles: styles.header
          }, accessibility.attributes.header);
        }
      }), createShorthand(Button, headerAction, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: dialogSlotClassNames.headerAction,
            styles: styles.headerAction,
            text: true,
            iconOnly: true
          }, accessibility.attributes.headerAction);
        }
      }), Box.create(content, {
        defaultProps: function defaultProps() {
          return Object.assign({
            styles: styles.content,
            className: dialogSlotClassNames.content
          }, accessibility.attributes.content);
        }
      }), DialogFooter.create(footer, {
        overrideProps: {
          content: dialogActions,
          className: dialogSlotClassNames.footer,
          styles: styles.footer
        }
      })));
      var triggerAccessibility = {
        attributes: accessibility.attributes.trigger,
        keyHandlers: accessibility.keyHandlers.trigger
      };
      return React.createElement(Portal, {
        onTriggerClick: this.handleDialogOpen,
        open: open,
        trapFocus: trapFocus,
        trigger: trigger,
        triggerAccessibility: triggerAccessibility,
        triggerRef: this.triggerRef
      }, React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {
        return React.createElement(React.Fragment, null, React.createElement(Ref, {
          innerRef: function innerRef(contentNode) {
            _this2.overlayRef.current = contentNode;
            nestingRef.current = contentNode;
          }
        }, Box.create(overlay, {
          defaultProps: function defaultProps() {
            return {
              className: dialogSlotClassNames.overlay,
              styles: styles.overlay
            };
          },
          overrideProps: {
            content: dialogContent
          }
        })), closeOnOutsideClick && React.createElement(EventListener, {
          listener: _this2.handleOverlayClick,
          target: _this2.context.target,
          type: "click",
          capture: true
        }), React.createElement(EventListener, {
          listener: _this2.handleDocumentKeydown(getRefs),
          target: _this2.context.target,
          type: "keydown",
          capture: true
        }));
      }));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(props, state) {
      return {
        contentId: getOrGenerateIdFromShorthand('dialog-content-', props.content, state.contentId),
        headerId: getOrGenerateIdFromShorthand('dialog-header-', props.header, state.headerId)
      };
    }
  }]);

  return Dialog;
}(AutoControlledComponent);
/**
 * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.
 * Dialogs are purposefully interruptive, so they should be used sparingly.
 *
 * @accessibility
 * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.
 * @accessibilityIssues
 * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)
 * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)
 * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)
 * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)
 */


_defineProperty(Dialog, "displayName", 'Dialog');

_defineProperty(Dialog, "deprecated_className", dialogClassName);

_defineProperty(Dialog, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: 'shorthand'
}), {
  actions: customPropTypes.itemShorthand,
  backdrop: PropTypes.bool,
  headerAction: customPropTypes.itemShorthand,
  cancelButton: customPropTypes.itemShorthand,
  closeOnOutsideClick: PropTypes.bool,
  confirmButton: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  header: customPropTypes.itemShorthand,
  onCancel: PropTypes.func,
  onConfirm: PropTypes.func,
  onOpen: PropTypes.func,
  open: PropTypes.bool,
  overlay: customPropTypes.itemShorthand,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  trigger: PropTypes.any
}));

_defineProperty(Dialog, "defaultProps", {
  accessibility: dialogBehavior,
  actions: {},
  backdrop: true,
  closeOnOutsideClick: true,
  overlay: {},
  footer: {},
  trapFocus: true
});

_defineProperty(Dialog, "autoControlledProps", ['open']);

_defineProperty(Dialog, "Footer", DialogFooter);

export default withSafeTypeForAs(Dialog);
//# sourceMappingURL=Dialog.js.map
