{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["buttonBehavior","customPropTypes","PropTypes","React","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","withSafeTypeForAs","getElementType","useAccessibility","useStyles","useTelemetry","useUnhandledProps","ThemeContext","splitButtonToggleClassName","SplitButtonToggle","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","as","children","content","disabled","primary","className","size","styles","variables","design","hasChildren","getA11Props","debugName","mapPropsToBehavior","actionHandlers","performClick","event","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","unhandledProps","handledProps","ElementType","e","result","getAttributes","forElements","onClick","root","defaultProps","propTypes","createCommon","bool","func","every","disallow","secondary","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\nconst SplitButtonToggle: React.FC<WithAsProp<SplitButtonToggleProps>> &\n  FluentComponentStaticProps<SplitButtonToggleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, as, children, content, disabled, primary, className, size, styles, variables, design } = props;\n\n  const hasChildren = childrenExist(children);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: () => ({\n      as,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: () => ({\n      primary,\n      disabled,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport default withSafeTypeForAs<typeof SplitButtonToggle, SplitButtonToggleProps, 'button'>(SplitButtonToggle);\n"],"file":"SplitButtonToggle.js"}