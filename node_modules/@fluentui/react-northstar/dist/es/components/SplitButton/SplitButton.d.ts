import { Accessibility, SplitButtonBehaviorProps } from '@fluentui/accessibility';
import * as React from 'react';
import { WithAsProp, ComponentEventHandler, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps, SizeValue } from '../../utils';
import SplitButtonToggle, { SplitButtonToggleProps } from './SplitButtonToggle';
import { ButtonProps } from '../Button/Button';
import { MenuProps } from '../Menu/Menu';
import { MenuItemProps } from '../Menu/MenuItem';
import { PositioningProps } from '../../utils/positioner/types';
export interface SplitButtonProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps, PositioningProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility<SplitButtonBehaviorProps>;
    /** Shorthand for the main button. */
    button?: ShorthandValue<ButtonProps>;
    /** Initial value for 'open'. */
    defaultOpen?: boolean;
    /** A split button can be disabled. */
    disabled?: boolean;
    /** Shorthand for the menu. */
    menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;
    /**
     * Called after user's click on the main button.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onMainButtonClick?: ComponentEventHandler<ButtonProps>;
    /**
     * Called after user's click on a menu item.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onMenuItemClick?: ComponentEventHandler<MenuItemProps>;
    /**
     * Event for request to change 'open' value.
     * @param event - React's original SyntheticEvent.
     * @param data - All props and proposed value.
     */
    onOpenChange?: ComponentEventHandler<SplitButtonProps>;
    /** Defines whether menu is displayed. */
    open?: boolean;
    /** A split button can be formatted to show different levels of emphasis. */
    primary?: boolean;
    /** A split button can be formatted to show different levels of emphasis. */
    secondary?: boolean;
    /** A split button can be sized */
    size?: SizeValue;
    /** Shorthand for the toggle button. */
    toggleButton?: ShorthandValue<SplitButtonToggleProps>;
}
export declare const splitButtonClassName = "ui-splitbutton";
export declare type SplitButtonStylesProps = Required<Pick<SplitButtonProps, 'size'>> & {
    isFromKeyboard: boolean;
};
export declare const SplitButton: React.FC<WithAsProp<SplitButtonProps>> & FluentComponentStaticProps<SplitButtonProps> & {
    Toggle: typeof SplitButtonToggle;
};
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & SplitButtonProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<Pick<import("@fluentui/accessibility/dist/es/behaviors/MenuButton/menuButtonBehavior").MenuButtonBehaviorProps, "open">>;
        button?: ShorthandValue<ButtonProps>;
        defaultOpen?: boolean;
        disabled?: boolean;
        menu?: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | import("../../types").ObjectShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps, never>;
        onMainButtonClick?: ComponentEventHandler<ButtonProps>;
        onMenuItemClick?: ComponentEventHandler<MenuItemProps>;
        onOpenChange?: ComponentEventHandler<SplitButtonProps>;
        open?: boolean;
        primary?: boolean;
        secondary?: boolean;
        size?: "medium" | "large" | "small" | "larger" | "smaller" | "smallest" | "largest";
        toggleButton?: ShorthandValue<SplitButtonToggleProps>;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        children?: React.ReactNode;
        content?: React.ReactNode;
        align?: import("../../utils/positioner").Alignment;
        flipBoundary?: import("../../utils/positioner").Boundary;
        overflowBoundary?: import("../../utils/positioner").Boundary;
        position?: import("../../utils/positioner").Position;
        positionFixed?: boolean;
        offset?: import("../../utils/positioner").Offset;
        unstable_pinned?: boolean;
        ref?: React.LegacyRef<HTMLDivElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
    }): JSX.Element;
} & {
    displayName: string;
    handledProps: ("button" | "content" | "size" | "open" | "menu" | "disabled" | "position" | "offset" | "children" | "className" | "variables" | "styles" | "accessibility" | "primary" | "secondary" | "design" | "align" | "flipBoundary" | "overflowBoundary" | "positionFixed" | "unstable_pinned" | "defaultOpen" | "onOpenChange" | "onMenuItemClick" | "onMainButtonClick" | "toggleButton")[];
    create: import("../../utils").ShorthandFactory<SplitButtonProps>;
    shorthandConfig: import("../../utils").ShorthandConfig<SplitButtonProps>;
    Toggle: {
        <Tag_1>(x: {
            as: Tag_1;
        } & SplitButtonToggleProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<import("@fluentui/accessibility").ButtonBehaviorProps>;
            disabled?: boolean;
            onClick?: ComponentEventHandler<SplitButtonToggleProps>;
            primary?: boolean;
            secondary?: boolean;
            size?: "medium" | "large" | "small" | "larger" | "smaller" | "smallest" | "largest";
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            content?: React.ReactNode;
            children?: React.ReactNode;
            ref?: React.LegacyRef<HTMLButtonElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            autoFocus?: boolean;
            form?: string;
            formAction?: string;
            formEncType?: string;
            formMethod?: string;
            formNoValidate?: boolean;
            formTarget?: string;
            name?: string;
            type?: "button" | "reset" | "submit";
            value?: string | number | string[];
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onChange?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInput?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onReset?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLButtonElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLButtonElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLButtonElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLButtonElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLButtonElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLButtonElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("content" | "size" | "disabled" | "children" | "className" | "onClick" | "variables" | "styles" | "accessibility" | "primary" | "secondary" | "design")[];
        create: import("../../utils").ShorthandFactory<SplitButtonToggleProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<SplitButtonToggleProps>;
    };
};
/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */
export default _default;
