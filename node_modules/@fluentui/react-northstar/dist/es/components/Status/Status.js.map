{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","customPropTypes","PropTypes","React","ThemeContext","createShorthandFactory","commonPropTypes","withSafeTypeForAs","Box","statusClassName","Status","props","context","useContext","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","create","defaultProps","as","element","root","propTypes","createCommon","children","content","string","shorthandAllowingChildren","oneOf","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\nconst Status: React.FC<WithAsProp<StatusProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport default withSafeTypeForAs<typeof Status, StatusProps, 'span'>(Status);\n"],"file":"Status.js"}