import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { getBasePlacement } from '../../utils/positioner';
import { withSafeTypeForAs } from '../../types';
export var tooltipContentClassName = 'ui-tooltip__content';

var TooltipContent = function TooltipContent(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(TooltipContent.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      open = props.open,
      placement = props.placement,
      pointing = props.pointing,
      pointerRef = props.pointerRef,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = useAccessibility(accessibility, {
    debugName: TooltipContent.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(TooltipContent.displayName, {
    className: tooltipContentClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        basePlacement: getBasePlacement(placement, context.rtl),
        open: open,
        pointing: pointing
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);
  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), open && pointing && React.createElement("div", {
    className: classes.pointer,
    ref: pointerRef
  }), React.createElement("div", getA11Props('content', {
    className: classes.content
  }), childrenExist(children) ? children : content));
  setEnd();
  return element;
};

TooltipContent.displayName = 'TooltipContent';
TooltipContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),
  pointing: PropTypes.bool,
  pointerRef: customPropTypes.ref
});
TooltipContent.handledProps = Object.keys(TooltipContent.propTypes);
TooltipContent.create = createShorthandFactory({
  Component: TooltipContent,
  mappedProp: 'content'
});
/**
 * A TooltipContent contains the content of a Tooltip component.
 */

export default withSafeTypeForAs(TooltipContent);
//# sourceMappingURL=TooltipContent.js.map
