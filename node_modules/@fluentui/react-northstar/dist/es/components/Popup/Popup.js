import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _includes from "lodash/includes";
import _isArray from "lodash/isArray";
import _some from "lodash/some";
import _invoke from "lodash/invoke";
import { popupBehavior } from '@fluentui/accessibility';
import { useAccessibility, useAutoControlled, useTelemetry } from '@fluentui/react-bindings';
import { EventListener } from '@fluentui/react-component-event-listener';
import { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';
import { handleRef, Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as keyboardKey from 'keyboard-key';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, commonPropTypes, isFromKeyboard, doesNodeContainClick, setWhatInputSource } from '../../utils';
import { ALIGNMENTS, POSITIONS, Popper } from '../../utils/positioner';
import PopupContent from './PopupContent';
import { createShorthandFactory } from '../../utils/factories';
import createReferenceFromContextClick from './createReferenceFromContextClick';
import isRightClick from '../../utils/isRightClick';
import PortalInner from '../Portal/PortalInner';
export var popupClassName = 'ui-popup';
/**
 * A Popup displays a non-modal, often rich content, on top of its target element.
 */

var Popup = function Popup(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Popup.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      align = props.align,
      autoFocus = props.autoFocus,
      inline = props.inline,
      children = props.children,
      contentRef = props.contentRef,
      flipBoundary = props.flipBoundary,
      on = props.on,
      mountNode = props.mountNode,
      mouseLeaveDelay = props.mouseLeaveDelay,
      offset = props.offset,
      overflowBoundary = props.overflowBoundary,
      pointing = props.pointing,
      position = props.position,
      positionFixed = props.positionFixed,
      renderContent = props.renderContent,
      tabbableTrigger = props.tabbableTrigger,
      target = props.target,
      trapFocus = props.trapFocus,
      trigger = props.trigger,
      unstable_pinned = props.unstable_pinned;

  var _useAutoControlled = useAutoControlled({
    initialValue: false,
    defaultValue: props.defaultOpen,
    value: props.open
  }),
      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),
      open = _useAutoControlled2[0],
      setOpen = _useAutoControlled2[1];

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isOpenedByRightClick = _React$useState2[0],
      setIsOpenedByRightClick = _React$useState2[1];

  var closeTimeoutId = React.useRef();
  var popupContentRef = React.useRef();
  var pointerTargetRef = React.useRef();
  var triggerRef = React.useRef(); // focusable element which has triggered Popup, can be either triggerDomElement or the element inside it

  var triggerFocusableRef = React.useRef();
  var rightClickReferenceObject = React.useRef();
  var getA11yProps = useAccessibility(accessibility, {
    debugName: Popup.displayName,
    actionHandlers: {
      closeAndFocusTrigger: function closeAndFocusTrigger(e) {
        e.preventDefault();

        _close(e, function () {
          return _invoke(triggerFocusableRef.current, 'focus');
        });
      },
      close: function close(e) {
        _close(e);
      },
      toggle: function toggle(e) {
        e.preventDefault();
        trySetOpen(!open, e);
      },
      open: function open(e) {
        e.preventDefault();
        setPopupOpen(true, e);
      },
      preventScroll: function preventScroll(e) {
        e.preventDefault();
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        disabled: false,
        // definition has this prop, but `Popup` doesn't support it
        isOpenedByRightClick: isOpenedByRightClick,
        on: on,
        trapFocus: trapFocus,
        tabbableTrigger: tabbableTrigger,
        trigger: trigger
      };
    },
    rtl: context.rtl
  });

  var handleDocumentClick = function handleDocumentClick(getRefs) {
    return function (e) {
      if (isOpenedByRightClick && isOutsidePopupElement(getRefs(), e)) {
        trySetOpen(false, e);
        return;
      }

      if (isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {
        trySetOpen(false, e);
      }
    };
  };

  var handleDocumentKeyDown = function handleDocumentKeyDown(getRefs) {
    return function (e) {
      var keyCode = keyboardKey.getCode(e);
      var isMatchingKey = keyCode === keyboardKey.Enter || keyCode === keyboardKey.Spacebar;

      if (isMatchingKey && isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {
        trySetOpen(false, e);
      } // if focus was lost from Popup and moved to body, for e.g. when click on popup content
      // and ESC is pressed, the last opened Popup should get closed and the trigger should get focus


      var lastContentRef = getRefs().pop();
      var isLastOpenedPopup = lastContentRef && lastContentRef.current === popupContentRef.current;
      var activeDocument = context.target;
      var bodyHasFocus = activeDocument.activeElement === activeDocument.body;

      if (keyCode === keyboardKey.Escape && bodyHasFocus && isLastOpenedPopup) {
        _close(e, function () {
          return _invoke(triggerFocusableRef.current, 'focus');
        });
      }
    };
  };

  var isOutsidePopupElementAndOutsideTriggerElement = function isOutsidePopupElementAndOutsideTriggerElement(refs, e) {
    var isOutsidePopup = isOutsidePopupElement(refs, e);
    var isInsideTrigger = triggerRef.current && doesNodeContainClick(triggerRef.current, e, context.target);
    return isOutsidePopup && !isInsideTrigger;
  };

  var isOutsidePopupElement = function isOutsidePopupElement(refs, e) {
    var isInsideNested = _some(refs, function (childRef) {
      return doesNodeContainClick(childRef.current, e, context.target);
    });

    var isOutsidePopup = popupContentRef.current && !isInsideNested;
    return isOutsidePopup;
  };

  var getTriggerProps = function getTriggerProps(triggerElement) {
    var triggerProps = {};
    var normalizedOn = _isArray(on) ? on : [on];
    /**
     * The focus is adding the focus, blur and click event (always opening on click)
     * If focus and context are provided, there is no need to add onClick
     */

    if (_includes(normalizedOn, 'focus')) {
      triggerProps.onFocus = function (e) {
        if (isFromKeyboard()) {
          trySetOpen(true, e);
        }

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onFocus', e].concat(args));
      };

      triggerProps.onBlur = function (e) {
        if (shouldBlurClose(e)) {
          trySetOpen(false, e);
        }

        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));
      };

      if (!_includes(normalizedOn, 'context')) {
        triggerProps.onClick = function (e) {
          setPopupOpen(true, e);

          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }

          _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));
        };
      }
    }
    /**
     * The click is toggling the open state of the popup
     */


    if (_includes(normalizedOn, 'click')) {
      triggerProps.onClick = function (e) {
        trySetOpen(!open, e);

        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));
      };
    }
    /**
     * The context is opening the popup
     */


    if (_includes(normalizedOn, 'context')) {
      triggerProps.onContextMenu = function (e) {
        setPopupOpen(!open, e);

        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          args[_key5 - 1] = arguments[_key5];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onContextMenu', e].concat(args));

        e.preventDefault();
      };
    }
    /**
     * The hover is adding the mouseEnter, mouseLeave, blur and click event (always opening on click)
     * If hover and context are provided, there is no need to add onClick
     */


    if (_includes(normalizedOn, 'hover')) {
      triggerProps.onMouseEnter = function (e) {
        setPopupOpen(true, e);
        setWhatInputSource(context.target, 'mouse');

        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          args[_key6 - 1] = arguments[_key6];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onMouseEnter', e].concat(args));
      };

      triggerProps.onMouseLeave = function (e) {
        setPopupOpen(false, e);

        for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          args[_key7 - 1] = arguments[_key7];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onMouseLeave', e].concat(args));
      };

      if (!_includes(normalizedOn, 'context')) {
        triggerProps.onClick = function (e) {
          setPopupOpen(true, e);

          for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
            args[_key8 - 1] = arguments[_key8];
          }

          _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));
        };
      }

      triggerProps.onBlur = function (e) {
        if (shouldBlurClose(e)) {
          trySetOpen(false, e);
        }

        for (var _len9 = arguments.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
          args[_key9 - 1] = arguments[_key9];
        }

        _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));
      };
    }

    return triggerProps;
  };

  var getContentProps = function getContentProps(predefinedProps) {
    var contentHandlerProps = {};
    var normalizedOn = _isArray(on) ? on : [on];
    /**
     * The focus is adding the focus and blur events on the content
     */

    if (_includes(normalizedOn, 'focus')) {
      contentHandlerProps.onFocus = function (e, contentProps) {
        trySetOpen(true, e);
        predefinedProps && _invoke(predefinedProps, 'onFocus', e, contentProps);
      };

      contentHandlerProps.onBlur = function (e, contentProps) {
        if (shouldBlurClose(e)) {
          trySetOpen(false, e);
        }

        predefinedProps && _invoke(predefinedProps, 'onBlur', e, contentProps);
      };
    }
    /**
     * The hover is adding the mouseEnter, mouseLeave and click event (always opening on click)
     */


    if (_includes(normalizedOn, 'hover')) {
      contentHandlerProps.onMouseEnter = function (e, contentProps) {
        setPopupOpen(true, e);
        predefinedProps && _invoke(predefinedProps, 'onMouseEnter', e, contentProps);
      };

      contentHandlerProps.onMouseLeave = function (e, contentProps) {
        setPopupOpen(false, e);
        predefinedProps && _invoke(predefinedProps, 'onMouseLeave', e, contentProps);
      };

      contentHandlerProps.onClick = function (e, contentProps) {
        setPopupOpen(true, e);
        predefinedProps && _invoke(predefinedProps, 'onClick', e, contentProps);
      };
    }

    return contentHandlerProps;
  };

  var shouldBlurClose = function shouldBlurClose(e) {
    return !e.currentTarget || !popupContentRef.current || !e.currentTarget.contains(e.relatedTarget) && !popupContentRef.current.contains(e.relatedTarget);
  };

  var renderPopperChildren = function renderPopperChildren(_ref) {
    var placement = _ref.placement,
        scheduleUpdate = _ref.scheduleUpdate;
    var content = renderContent ? renderContent(scheduleUpdate) : props.content;
    var popupContent = Popup.Content.create(content || {}, {
      defaultProps: function defaultProps() {
        return getA11yProps('popup', Object.assign({}, getContentProps(), {
          placement: placement,
          pointing: pointing,
          pointerRef: pointerTargetRef,
          trapFocus: trapFocus,
          autoFocus: autoFocus
        }));
      },
      overrideProps: getContentProps
    });
    return React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {
      return React.createElement(React.Fragment, null, React.createElement(Ref, {
        innerRef: function innerRef(domElement) {
          popupContentRef.current = domElement;
          handleRef(contentRef, domElement);
          nestingRef.current = domElement;
        }
      }, popupContent), React.createElement(EventListener, {
        listener: handleDocumentClick(getRefs),
        target: context.target,
        type: "click",
        capture: true
      }), React.createElement(EventListener, {
        listener: handleDocumentClick(getRefs),
        target: context.target,
        type: "contextmenu",
        capture: true
      }), React.createElement(EventListener, {
        listener: handleDocumentKeyDown(getRefs),
        target: context.target,
        type: "keydown",
        capture: true
      }), isOpenedByRightClick && React.createElement(React.Fragment, null, React.createElement(EventListener, {
        listener: dismissOnScroll,
        target: context.target,
        type: "wheel",
        capture: true
      }), React.createElement(EventListener, {
        listener: dismissOnScroll,
        target: context.target,
        type: "touchmove",
        capture: true
      })));
    });
  };

  var dismissOnScroll = function dismissOnScroll(e) {
    trySetOpen(false, e);
  };

  var trySetOpen = function trySetOpen(newValue, event) {
    var isOpenedByRightClick = newValue && isRightClick(event); // when new state 'open' === 'true', save the last focused element

    if (newValue) {
      updateTriggerFocusableRef();
      updateContextPosition(isOpenedByRightClick && event.nativeEvent);
    }

    setOpen(newValue);
    setIsOpenedByRightClick(isOpenedByRightClick);

    _invoke(props, 'onOpenChange', event, Object.assign({}, props, {}, {
      open: newValue
    }));
  };

  var setPopupOpen = function setPopupOpen(newOpen, e) {
    clearTimeout(closeTimeoutId.current);
    newOpen ? trySetOpen(true, e) : schedulePopupClose(e);
  };

  var schedulePopupClose = function schedulePopupClose(e) {
    closeTimeoutId.current = setTimeout(function () {
      trySetOpen(false, e);
    }, mouseLeaveDelay);
  };

  var _close = function _close(e, onClose) {
    if (open) {
      trySetOpen(false, e);
      onClose && onClose();
      e.stopPropagation();
    }
  };
  /**
   * Save DOM element which had focus before Popup opens.
   * Can be either trigger DOM element itself or the element inside it.
   */


  var updateTriggerFocusableRef = function updateTriggerFocusableRef() {
    var activeDocument = context.target;
    var activeElement = activeDocument.activeElement;
    triggerFocusableRef.current = triggerRef.current && triggerRef.current.contains(activeElement) ? activeElement : triggerRef.current;
  };

  var updateContextPosition = function updateContextPosition(nativeEvent) {
    rightClickReferenceObject.current = nativeEvent ? createReferenceFromContextClick(nativeEvent) : null;
  };

  if (process.env.NODE_ENV !== 'production') {
    React.useEffect(function () {
      if (inline && trapFocus) {
        // eslint-disable-next-line no-console
        console.warn('Using "trapFocus" in inline popup leads to broken behavior for screen reader users.');
      }

      if (!inline && autoFocus) {
        // eslint-disable-next-line no-console
        console.warn('Beware, "autoFocus" prop will just grab focus at the moment of mount and will not trap it. As user is able to TAB out from popup, better use "inline" prop to keep correct tab order.');
      }
    }, [autoFocus, inline, trapFocus]);
  }

  React.useEffect(function () {
    if (open) {
      // when new state 'open' === 'true', save the last focused element
      updateTriggerFocusableRef();
    }
  });
  var triggerNode = childrenExist(children) ? children : trigger;
  var triggerProps = getTriggerProps(triggerNode);
  var contentElement = open && React.createElement(Popper, {
    pointerTargetRef: pointerTargetRef,
    align: align,
    flipBoundary: flipBoundary,
    position: position,
    positionFixed: positionFixed,
    offset: offset,
    overflowBoundary: overflowBoundary,
    rtl: context.rtl,
    unstable_pinned: unstable_pinned,
    targetRef: rightClickReferenceObject.current || target || triggerRef,
    children: renderPopperChildren
  });
  var triggerElement = triggerNode && React.createElement(Ref, {
    innerRef: triggerRef
  }, React.cloneElement(triggerNode, getA11yProps('trigger', triggerProps)));
  var element = React.createElement(React.Fragment, null, triggerElement, open && (inline ? contentElement : React.createElement(PortalInner, {
    mountNode: mountNode
  }, contentElement)));
  setEnd();
  return element;
};

Popup.displayName = 'Popup';
Popup.propTypes = Object.assign({}, commonPropTypes.createCommon({
  as: false,
  content: false
}), {
  align: PropTypes.oneOf(ALIGNMENTS),
  defaultOpen: PropTypes.bool,
  inline: PropTypes.bool,
  mountNode: customPropTypes.domNode,
  mouseLeaveDelay: PropTypes.number,
  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),
  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  on: PropTypes.oneOfType([PropTypes.oneOf(['hover', 'click', 'focus', 'context']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'focus', 'context'])), PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'context']))]),
  open: PropTypes.bool,
  onOpenChange: PropTypes.func,
  pointing: PropTypes.bool,
  position: PropTypes.oneOf(POSITIONS),
  positionFixed: PropTypes.bool,
  renderContent: PropTypes.func,
  target: PropTypes.any,
  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.any]),
  tabbableTrigger: PropTypes.bool,
  unstable_pinned: PropTypes.bool,
  content: customPropTypes.shorthandAllowingChildren,
  contentRef: customPropTypes.ref,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
});
Popup.defaultProps = {
  accessibility: popupBehavior,
  align: 'start',
  position: 'above',
  on: 'click',
  mouseLeaveDelay: 500,
  tabbableTrigger: true
};
Popup.handledProps = Object.keys(Popup.propTypes);
Popup.Content = PopupContent;
Popup.create = createShorthandFactory({
  Component: Popup,
  mappedProp: 'content'
});
export default Popup;
//# sourceMappingURL=Popup.js.map
