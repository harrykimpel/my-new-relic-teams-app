import _keys from "lodash/keys";
import _invoke from "lodash/invoke";
import { AutoFocusZone, FocusTrapZone, getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { getBasePlacement } from '../../utils/positioner';
export var popupContentClassName = 'ui-popup__content';
export var popupContentSlotClassNames = {
  content: "".concat(popupContentClassName, "__content")
};

var PopupContent = function PopupContent(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(PopupContent.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      autoFocus = props.autoFocus,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      placement = props.placement,
      pointing = props.pointing,
      pointerRef = props.pointerRef,
      styles = props.styles,
      trapFocus = props.trapFocus,
      variables = props.variables;
  var getA11yProps = useAccessibility(accessibility, {
    debugName: PopupContent.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(PopupContent.displayName, {
    className: popupContentClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        basePlacement: getBasePlacement(placement, context.rtl),
        pointing: pointing
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(PopupContent.handledProps, props);

  var handleMouseEnter = function handleMouseEnter(e) {
    _invoke(props, 'onMouseEnter', e, props);
  };

  var handleMouseLeave = function handleMouseLeave(e) {
    _invoke(props, 'onMouseLeave', e, props);
  };

  var popupContentProps = getA11yProps('root', Object.assign({
    className: classes.root
  }, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps, {
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }));
  var popupContent = React.createElement(React.Fragment, null, pointing && React.createElement("div", {
    className: classes.pointer,
    ref: pointerRef
  }), React.createElement("div", {
    className: cx(popupContentSlotClassNames.content, classes.content)
  }, childrenExist(children) ? children : content));
  var element;

  if (trapFocus) {
    var focusTrapZoneProps = Object.assign({}, popupContentProps, {}, _keys(trapFocus).length && trapFocus, {
      as: ElementType
    });
    element = React.createElement(FocusTrapZone, focusTrapZoneProps, popupContent);
  } else if (autoFocus) {
    var autoFocusZoneProps = Object.assign({}, popupContentProps, {}, _keys(autoFocus).length && autoFocus, {
      as: ElementType
    });
    element = React.createElement(AutoFocusZone, autoFocusZoneProps, popupContent);
  } else {
    element = React.createElement(ElementType, popupContentProps, popupContent);
  }

  setEnd();
  return element;
};

PopupContent.displayName = 'PopupContent';
PopupContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),
  pointing: PropTypes.bool,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  pointerRef: customPropTypes.ref,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
});
PopupContent.handledProps = Object.keys(PopupContent.propTypes);
PopupContent.create = createShorthandFactory({
  Component: PopupContent,
  mappedProp: 'content'
});
/**
 * A PopupContent displays the content of a Popup component.
 */

export default withSafeTypeForAs(PopupContent);
//# sourceMappingURL=PopupContent.js.map
