import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { menuItemBehavior, submenuBehavior, indicatorBehavior } from '@fluentui/accessibility';
import { focusAsync } from '@fluentui/react-bindings';
import { EventListener } from '@fluentui/react-component-event-listener';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { AutoControlledComponent, childrenExist, createShorthandFactory, doesNodeContainClick, commonPropTypes, isFromKeyboard, applyAccessibilityKeyHandlers } from '../../utils';
import Menu from './Menu';
import Box from '../Box/Box';
import { withSafeTypeForAs } from '../../types';
import { Popper, getPopperPropsFromShorthand } from '../../utils/positioner';
export var menuItemClassName = 'ui-menu__item';
export var menuItemSlotClassNames = {
  submenu: "".concat(menuItemClassName, "__submenu"),
  wrapper: "".concat(menuItemClassName, "__wrapper"),
  indicator: "".concat(menuItemClassName, "__indicator")
};

var MenuItem =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(MenuItem, _AutoControlledCompon);

  function MenuItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "menuRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "itemRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleWrapperBlur", function (e) {
      if (!_this.props.inSubmenu && !e.currentTarget.contains(e.relatedTarget)) {
        _this.trySetMenuOpen(false, e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        return !event.defaultPrevented && _this.handleClick(event);
      },
      openMenu: function openMenu(event) {
        return _this.openMenu(event);
      },
      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {
        return _this.closeAllMenus(event);
      },
      closeMenu: function closeMenu(event) {
        return _this.closeMenu(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        return _this.closeMenu(event, true);
      },
      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {
        event.stopPropagation();
      },
      closeAllMenus: function closeAllMenus(event) {
        return _this.closeAllMenus(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "outsideClickHandler", function (e) {
      if (!_this.isSubmenuOpen()) return;

      if (!doesNodeContainClick(_this.itemRef.current, e, _this.context.target) && !doesNodeContainClick(_this.menuRef.current, e, _this.context.target)) {
        _this.trySetMenuOpen(false, e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "performClick", function (e) {
      var _this$props = _this.props,
          active = _this$props.active,
          menu = _this$props.menu;

      if (menu) {
        if (doesNodeContainClick(_this.menuRef.current, e, _this.context.target)) {
          // submenu was clicked => close it and propagate
          _this.trySetMenuOpen(false, e, function () {
            return focusAsync(_this.itemRef.current);
          });
        } else {
          // the menuItem element was clicked => toggle the open/close and stop propagation
          _this.trySetMenuOpen(active ? !_this.state.menuOpen : true, e);

          e.stopPropagation();
          e.preventDefault();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;

      if (disabled) {
        e.preventDefault();
        return;
      }

      _this.performClick(e);

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      _this.setState({
        isFromKeyboard: false
      });

      _invoke(_this.props, 'onBlur', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _this.setState({
        isFromKeyboard: isFromKeyboard()
      });

      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "isSubmenuOpen", function () {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;
      return !!(menu && menuOpen);
    });

    _defineProperty(_assertThisInitialized(_this), "closeAllMenus", function (e) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      var inSubmenu = _this.props.inSubmenu;

      _this.trySetMenuOpen(false, e, function () {
        if (!inSubmenu) {
          focusAsync(_this.itemRef.current);
        }
      }); // avoid spacebar scrolling the page


      if (!inSubmenu) {
        e.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeMenu", function (e, forceTriggerFocus) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      var inSubmenu = _this.props.inSubmenu;
      var shouldStopPropagation = inSubmenu || _this.props.vertical;

      _this.trySetMenuOpen(false, e, function () {
        if (forceTriggerFocus || shouldStopPropagation) {
          focusAsync(_this.itemRef.current);
        }
      });

      if (forceTriggerFocus || shouldStopPropagation) {
        e.stopPropagation();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openMenu", function (e) {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;

      if (menu && !menuOpen) {
        _this.trySetMenuOpen(true, e);

        _invoke(_this.props, 'onActiveChanged', e, Object.assign({}, _this.props, {
          active: true
        }));

        e.stopPropagation();
        e.preventDefault();
      }
    });

    return _this;
  }

  _createClass(MenuItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          rtl = _ref.rtl;
      var _this$props2 = this.props,
          children = _this$props2.children,
          content = _this$props2.content,
          icon = _this$props2.icon,
          wrapper = _this$props2.wrapper,
          menu = _this$props2.menu,
          primary = _this$props2.primary,
          secondary = _this$props2.secondary,
          active = _this$props2.active,
          vertical = _this$props2.vertical,
          indicator = _this$props2.indicator,
          disabled = _this$props2.disabled;
      var menuOpen = this.state.menuOpen;
      var menuItemInner = childrenExist(children) ? children : React.createElement(Ref, {
        innerRef: this.itemRef
      }, React.createElement(ElementType, _extends({
        className: classes.root,
        disabled: disabled,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }, accessibility.attributes.root, accessibility.keyHandlers.root, unhandledProps, !wrapper && {
        onClick: this.handleClick
      }, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), Box.create(icon, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.icon,
            as: 'span'
          };
        }
      }), Box.create(content, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            styles: styles.content
          };
        }
      }), menu && Box.create(indicator, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            className: menuItemSlotClassNames.indicator,
            styles: styles.indicator,
            accessibility: indicatorBehavior
          };
        }
      })));
      var maybeSubmenu = menu && active && menuOpen ? React.createElement(React.Fragment, null, React.createElement(Ref, {
        innerRef: this.menuRef
      }, React.createElement(Popper, _extends({
        align: vertical ? 'top' : rtl ? 'end' : 'start',
        position: vertical ? rtl ? 'before' : 'after' : 'below',
        targetRef: this.itemRef
      }, getPopperPropsFromShorthand(menu)), Menu.create(menu, {
        defaultProps: function defaultProps() {
          return {
            accessibility: submenuBehavior,
            className: menuItemSlotClassNames.submenu,
            vertical: true,
            primary: primary,
            secondary: secondary,
            styles: styles.menu,
            submenu: true,
            indicator: indicator
          };
        }
      }))), React.createElement(EventListener, {
        listener: this.outsideClickHandler,
        target: this.context.target,
        type: "click"
      })) : null;

      if (wrapper) {
        return Box.create(wrapper, {
          defaultProps: function defaultProps() {
            return Object.assign({
              className: cx(menuItemSlotClassNames.wrapper, classes.wrapper)
            }, accessibility.attributes.wrapper, {}, applyAccessibilityKeyHandlers(accessibility.keyHandlers.wrapper, wrapper));
          },
          overrideProps: function overrideProps() {
            return {
              children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu),
              onClick: _this2.handleClick,
              onBlur: _this2.handleWrapperBlur
            };
          }
        });
      }

      return menuItemInner;
    }
  }, {
    key: "trySetMenuOpen",
    value: function trySetMenuOpen(newValue, e, onStateChanged) {
      this.setState({
        menuOpen: newValue
      }); // The reason why post-effect is not passed as callback to trySetState method
      // is that in 'controlled' mode the post-effect is applied before final re-rendering
      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.
      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.

      onStateChanged && onStateChanged();

      _invoke(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {
        menuOpen: newValue
      }));
    }
  }]);

  return MenuItem;
}(AutoControlledComponent);

_defineProperty(MenuItem, "displayName", 'MenuItem');

_defineProperty(MenuItem, "deprecated_className", menuItemClassName);

_defineProperty(MenuItem, "create", void 0);

_defineProperty(MenuItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  index: PropTypes.number,
  itemPosition: PropTypes.number,
  itemsCount: PropTypes.number,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  pills: PropTypes.bool,
  pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  underlined: PropTypes.bool,
  vertical: PropTypes.bool,
  wrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  menuOpen: PropTypes.bool,
  defaultMenuOpen: PropTypes.bool,
  onActiveChanged: PropTypes.func,
  inSubmenu: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  onMenuOpenChange: PropTypes.func
}));

_defineProperty(MenuItem, "defaultProps", {
  as: 'a',
  accessibility: menuItemBehavior,
  wrapper: {
    as: 'li'
  },
  indicator: {}
});

_defineProperty(MenuItem, "autoControlledProps", ['menuOpen']);

MenuItem.create = createShorthandFactory({
  Component: MenuItem,
  mappedProp: 'content'
});
/**
 * A MenuItem is an actionable item within a Menu.
 */

export default withSafeTypeForAs(MenuItem);
//# sourceMappingURL=MenuItem.js.map
