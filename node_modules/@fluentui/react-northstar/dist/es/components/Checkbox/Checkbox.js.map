{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxBehavior","getElementType","useUnhandledProps","useAccessibility","useStateManager","useStyles","useTelemetry","customPropTypes","createCheckboxManager","PropTypes","React","ThemeContext","createShorthandFactory","commonPropTypes","withSafeTypeForAs","Box","Text","checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","props","context","useContext","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","create","defaultProps","element","root","onClick","onChange","checkbox","propTypes","createCommon","content","bool","shorthandAllowingChildren","itemShorthand","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\nconst Checkbox: React.FC<WithAsProp<CheckboxProps>> & FluentComponentStaticProps<CheckboxProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof Checkbox, CheckboxProps>(Checkbox);\n"],"file":"Checkbox.js"}