{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["React","PropTypes","carouselItemBehavior","commonPropTypes","childrenExist","createShorthandFactory","ThemeContext","screenReaderContainerStyles","withSafeTypeForAs","useAccessibility","useTelemetry","getElementType","useUnhandledProps","useStyles","carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","props","context","useContext","displayName","telemetry","setStart","setEnd","unhandledProps","handledProps","accessibility","navigation","active","children","content","className","design","styles","variables","ElementType","getA11yProps","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","mapPropsToBehavior","mapPropsToInlineStyles","rtl","classes","element","root","propTypes","createCommon","bool","string","defaultProps","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { useAccessibility, useTelemetry, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\nexport const CarouselItem: React.FC<WithAsProp<CarouselItemProps>> &\n  FluentComponentStaticProps<CarouselItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport default withSafeTypeForAs<typeof CarouselItem, CarouselItemProps, 'div'>(CarouselItem);\n"],"file":"CarouselItem.js"}