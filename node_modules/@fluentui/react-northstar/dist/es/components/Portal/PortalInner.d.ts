import * as PropTypes from 'prop-types';
import * as React from 'react';
import { ChildrenComponentProps } from '../../utils';
export interface PortalInnerProps extends ChildrenComponentProps {
    /** Existing element the portal should be bound to. */
    mountNode?: HTMLElement;
    /**
     * Called when the portal is mounted on the DOM
     *
     * @param data - All props.
     */
    onMount?: (props: PortalInnerProps) => void;
    /**
     * Called when the portal is unmounted from the DOM
     *
     * @param data - All props.
     */
    onUnmount?: (props: PortalInnerProps) => void;
}
/**
 * A PortalInner is a container for Portal's content.
 */
declare class PortalInner extends React.Component<PortalInnerProps> {
    static contextType: React.Context<HTMLDivElement>;
    static propTypes: {
        mountNode: PropTypes.Requireable<object>;
        onMount: PropTypes.Requireable<(...args: any[]) => any>;
        onUnmount: PropTypes.Requireable<(...args: any[]) => any>;
        styles: PropTypes.Requireable<object>;
        variables: PropTypes.Requireable<object>;
        design: PropTypes.Requireable<PropTypes.InferProps<{
            position: PropTypes.Requireable<string>;
            display: PropTypes.Requireable<string>;
            top: PropTypes.Requireable<string>;
            right: PropTypes.Requireable<string>;
            bottom: PropTypes.Requireable<string>;
            left: PropTypes.Requireable<string>;
            padding: PropTypes.Requireable<string>;
            paddingTop: PropTypes.Requireable<string>;
            paddingRight: PropTypes.Requireable<string>;
            paddingBottom: PropTypes.Requireable<string>;
            paddingLeft: PropTypes.Requireable<string>;
            margin: PropTypes.Requireable<string>;
            marginTop: PropTypes.Requireable<string>;
            marginRight: PropTypes.Requireable<string>;
            marginBottom: PropTypes.Requireable<string>;
            marginLeft: PropTypes.Requireable<string>;
            width: PropTypes.Requireable<string>;
            height: PropTypes.Requireable<string>;
            minWidth: PropTypes.Requireable<string>;
            maxWidth: PropTypes.Requireable<string>;
            minHeight: PropTypes.Requireable<string>;
            maxHeight: PropTypes.Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        accessibility: PropTypes.Requireable<(...args: any[]) => any>;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): React.ReactPortal;
}
export default PortalInner;
