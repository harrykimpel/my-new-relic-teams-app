{"version":3,"sources":["components/Portal/Portal.tsx"],"names":["FocusTrapZone","EventListener","handleRef","Ref","customPropTypes","PropTypes","React","childrenExist","AutoControlledComponent","doesNodeContainClick","commonPropTypes","rtlTextContainer","PortalInner","Portal","props","portalNode","triggerNode","triggerRef","e","trigger","unhandledProps","setState","open","state","context","target","renderPortal","renderTrigger","children","content","trapFocus","contentToRender","focusTrapZoneProps","length","handlePortalRef","handleMount","handleUnmount","getAttributes","forElements","handleDocumentClick","triggerAccessibility","handleTriggerRef","cloneElement","onClick","handleTriggerClick","attributes","keyHandlers","createCommon","accessibility","as","className","styled","defaultOpen","bool","onMount","func","onUnmount","node","ref","object","onTriggerClick","onOutsideClick","oneOfType"],"mappings":"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","sourcesContent":["import { AccessibilityAttributes } from '@fluentui/accessibility';\nimport { AccessibilityHandlerProps, FocusTrapZone, FocusTrapZoneProps } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  AutoControlledComponent,\n  doesNodeContainClick,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport PortalInner from './PortalInner';\n\nexport type TriggerAccessibility = {\n  attributes?: AccessibilityAttributes;\n  keyHandlers?: AccessibilityHandlerProps;\n};\n\nexport interface PortalProps extends ChildrenComponentProps, ContentComponentProps {\n  /** Initial value of open. */\n  defaultOpen?: boolean;\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalProps) => void;\n\n  /** Controls whether or not the portal is displayed. */\n  open?: boolean;\n\n  /** Element to be rendered in-place where the portal is defined. */\n  trigger?: JSX.Element;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value */\n  trapFocus?: FocusTrapZoneProps | boolean;\n\n  /** Accessibility behavior object to apply on trigger node. */\n  triggerAccessibility?: TriggerAccessibility;\n\n  /** Sets trigger node to passed ref. */\n  triggerRef?: React.Ref<any>;\n\n  /**\n   * Called when trigger node was clicked.\n   *\n   * @param data - All props.\n   */\n  onTriggerClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Called when `click` event was invoked outside portal or trigger nodes.\n   *\n   * @param data - All props.\n   */\n  onOutsideClick?: (e: React.MouseEvent) => void;\n}\n\nexport interface PortalState {\n  open?: boolean;\n}\n\n/**\n * A Portal allows to render children outside of their parent.\n */\nclass Portal extends AutoControlledComponent<PortalProps, PortalState> {\n  portalNode: HTMLElement;\n  triggerNode: HTMLElement;\n\n  static autoControlledProps = ['open'];\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      as: false,\n      className: false,\n      styled: false,\n    }),\n    defaultOpen: PropTypes.bool,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    open: PropTypes.bool,\n    trigger: PropTypes.node,\n    triggerRef: customPropTypes.ref,\n    triggerAccessibility: PropTypes.object,\n    onTriggerClick: PropTypes.func,\n    onOutsideClick: PropTypes.func,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  };\n\n  static defaultProps: PortalProps = {\n    triggerAccessibility: {},\n  };\n\n  renderComponent(): React.ReactNode {\n    return (\n      <React.Fragment>\n        {this.renderPortal()}\n        {this.renderTrigger()}\n      </React.Fragment>\n    );\n  }\n\n  renderPortal(): JSX.Element | undefined {\n    const { children, content, trapFocus } = this.props;\n    const { open } = this.state;\n\n    const contentToRender = childrenExist(children) ? children : content;\n    const focusTrapZoneProps = (_.keys(trapFocus).length && trapFocus) || {};\n\n    return (\n      open && (\n        <Ref innerRef={this.handlePortalRef}>\n          <PortalInner\n            onMount={this.handleMount}\n            onUnmount={this.handleUnmount}\n            {...rtlTextContainer.getAttributes({ forElements: [contentToRender] })}\n          >\n            {trapFocus ? <FocusTrapZone {...focusTrapZoneProps}>{contentToRender}</FocusTrapZone> : contentToRender}\n            <EventListener listener={this.handleDocumentClick} target={this.context.target} type=\"click\" />\n          </PortalInner>\n        </Ref>\n      )\n    );\n  }\n\n  renderTrigger(): JSX.Element | undefined {\n    const { trigger, triggerAccessibility } = this.props;\n\n    return (\n      trigger && (\n        <Ref innerRef={this.handleTriggerRef}>\n          {React.cloneElement(trigger, {\n            onClick: this.handleTriggerClick,\n            ...triggerAccessibility.attributes,\n            ...triggerAccessibility.keyHandlers,\n          })}\n        </Ref>\n      )\n    );\n  }\n  handleMount = () => {\n    _.invoke(this.props, 'onMount', this.props);\n  };\n\n  handleUnmount = () => {\n    _.invoke(this.props, 'onUnmount', this.props);\n  };\n\n  handlePortalRef = (portalNode: HTMLElement) => {\n    this.portalNode = portalNode;\n  };\n\n  handleTriggerRef = (triggerNode: HTMLElement) => {\n    this.triggerNode = triggerNode;\n    handleRef(this.props.triggerRef, triggerNode);\n  };\n\n  handleTriggerClick = (e: React.MouseEvent, ...unhandledProps) => {\n    const { trigger } = this.props;\n\n    _.invoke(this.props, 'onTriggerClick', e); // Call handler from parent component\n    _.invoke(trigger, 'props.onClick', e, ...unhandledProps); // Call original event handler\n    this.setState({ open: !this.state.open });\n  };\n\n  handleDocumentClick = (e: MouseEvent) => {\n    if (\n      !this.portalNode || // no portal\n      doesNodeContainClick(this.triggerNode, e, this.context.target) || // event happened in trigger (delegate to trigger handlers)\n      doesNodeContainClick(this.portalNode, e, this.context.target) // event happened in the portal\n    ) {\n      return; // ignore the click\n    }\n    _.invoke(this.props, 'onOutsideClick', e);\n    this.setState({ open: false });\n  };\n}\n\nexport default Portal;\n"],"file":"Portal.js"}