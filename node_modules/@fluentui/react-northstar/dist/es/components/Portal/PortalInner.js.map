{"version":3,"sources":["components/Portal/PortalInner.tsx"],"names":["PropTypes","React","ReactDOM","isBrowser","commonPropTypes","PortalBoxContext","PortalInner","props","children","mountNode","target","context","document","body","container","createPortal","Component","createCommon","accessibility","as","className","content","styled","object","onMount","func","onUnmount"],"mappings":";;;;;;;AACA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AAEA,SAASC,SAAT,EAA4CC,eAA5C,QAAmE,aAAnE;AACA,SAASC,gBAAT,QAAiC,0BAAjC;;AAqBA;;;IAGMC,W;;;;;;;;;;;;;wCAgBgB;AAClB,cAAS,KAAKC,KAAd,EAAqB,SAArB,EAAgC,KAAKA,KAArC;AACD;;;2CAEsB;AACrB,cAAS,KAAKA,KAAd,EAAqB,WAArB,EAAkC,KAAKA,KAAvC;AACD;;;6BAEQ;AAAA,wBACyB,KAAKA,KAD9B;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,SADX,eACWA,SADX,EAGP;AACA;;AACA,UAAMC,MAA6B,GAAGP,SAAS,KAAK,KAAKQ,OAAL,IAAgBC,QAAQ,CAACC,IAA9B,GAAqC,IAApF;AACA,UAAMC,SAA6B,GAAGL,SAAS,IAAIC,MAAnD;AAEA,aAAOI,SAAS,IAAIZ,QAAQ,CAACa,YAAT,CAAsBP,QAAtB,EAAgCM,SAAhC,CAApB;AACD;;;;EAjCuBb,KAAK,CAACe,S;;gBAA1BV,W,iBACiBD,gB;;gBADjBC,W,iCAICF,eAAe,CAACa,YAAhB,CAA6B;AAC9BC,EAAAA,aAAa,EAAE,KADe;AAE9BC,EAAAA,EAAE,EAAE,KAF0B;AAG9BC,EAAAA,SAAS,EAAE,KAHmB;AAI9BC,EAAAA,OAAO,EAAE,KAJqB;AAK9BC,EAAAA,MAAM,EAAE;AALsB,CAA7B,C;AAOHb,EAAAA,SAAS,EAAET,SAAS,CAACuB,M;AACrBC,EAAAA,OAAO,EAAExB,SAAS,CAACyB,I;AACnBC,EAAAA,SAAS,EAAE1B,SAAS,CAACyB;;;AAuBzB,eAAenB,WAAf","sourcesContent":["import * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { isBrowser, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\n\nexport interface PortalInnerProps extends ChildrenComponentProps {\n  /** Existing element the portal should be bound to. */\n  mountNode?: HTMLElement;\n\n  /**\n   * Called when the portal is mounted on the DOM\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalInnerProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalInnerProps) => void;\n}\n\n/**\n * A PortalInner is a container for Portal's content.\n */\nclass PortalInner extends React.Component<PortalInnerProps> {\n  static contextType = PortalBoxContext;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      as: false,\n      className: false,\n      content: false,\n      styled: false,\n    }),\n    mountNode: PropTypes.object,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n  };\n\n  componentDidMount() {\n    _.invoke(this.props, 'onMount', this.props);\n  }\n\n  componentWillUnmount() {\n    _.invoke(this.props, 'onUnmount', this.props);\n  }\n\n  render() {\n    const { children, mountNode } = this.props;\n\n    // PortalInner should render elements even without a context\n    // eslint-disable-next-line\n    const target: HTMLDivElement | null = isBrowser() ? this.context || document.body : null;\n    const container: HTMLElement | null = mountNode || target;\n\n    return container && ReactDOM.createPortal(children, container);\n  }\n}\n\nexport default PortalInner;\n"],"file":"PortalInner.js"}