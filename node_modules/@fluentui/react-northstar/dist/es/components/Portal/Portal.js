import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _keys from "lodash/keys";
import { FocusTrapZone } from '@fluentui/react-bindings';
import { EventListener } from '@fluentui/react-component-event-listener';
import { handleRef, Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, AutoControlledComponent, doesNodeContainClick, commonPropTypes, rtlTextContainer } from '../../utils';
import PortalInner from './PortalInner';

/**
 * A Portal allows to render children outside of their parent.
 */
var Portal =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Portal, _AutoControlledCompon);

  function Portal() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Portal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "portalNode", void 0);

    _defineProperty(_assertThisInitialized(_this), "triggerNode", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleMount", function () {
      _invoke(_this.props, 'onMount', _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleUnmount", function () {
      _invoke(_this.props, 'onUnmount', _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handlePortalRef", function (portalNode) {
      _this.portalNode = portalNode;
    });

    _defineProperty(_assertThisInitialized(_this), "handleTriggerRef", function (triggerNode) {
      _this.triggerNode = triggerNode;
      handleRef(_this.props.triggerRef, triggerNode);
    });

    _defineProperty(_assertThisInitialized(_this), "handleTriggerClick", function (e) {
      var trigger = _this.props.trigger;

      _invoke(_this.props, 'onTriggerClick', e); // Call handler from parent component


      for (var _len2 = arguments.length, unhandledProps = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        unhandledProps[_key2 - 1] = arguments[_key2];
      }

      _invoke.apply(void 0, [trigger, 'props.onClick', e].concat(unhandledProps)); // Call original event handler


      _this.setState({
        open: !_this.state.open
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleDocumentClick", function (e) {
      if (!_this.portalNode || // no portal
      doesNodeContainClick(_this.triggerNode, e, _this.context.target) || // event happened in trigger (delegate to trigger handlers)
      doesNodeContainClick(_this.portalNode, e, _this.context.target) // event happened in the portal
      ) {
          return; // ignore the click
        }

      _invoke(_this.props, 'onOutsideClick', e);

      _this.setState({
        open: false
      });
    });

    return _this;
  }

  _createClass(Portal, [{
    key: "renderComponent",
    value: function renderComponent() {
      return React.createElement(React.Fragment, null, this.renderPortal(), this.renderTrigger());
    }
  }, {
    key: "renderPortal",
    value: function renderPortal() {
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          trapFocus = _this$props.trapFocus;
      var open = this.state.open;
      var contentToRender = childrenExist(children) ? children : content;
      var focusTrapZoneProps = _keys(trapFocus).length && trapFocus || {};
      return open && React.createElement(Ref, {
        innerRef: this.handlePortalRef
      }, React.createElement(PortalInner, _extends({
        onMount: this.handleMount,
        onUnmount: this.handleUnmount
      }, rtlTextContainer.getAttributes({
        forElements: [contentToRender]
      })), trapFocus ? React.createElement(FocusTrapZone, focusTrapZoneProps, contentToRender) : contentToRender, React.createElement(EventListener, {
        listener: this.handleDocumentClick,
        target: this.context.target,
        type: "click"
      })));
    }
  }, {
    key: "renderTrigger",
    value: function renderTrigger() {
      var _this$props2 = this.props,
          trigger = _this$props2.trigger,
          triggerAccessibility = _this$props2.triggerAccessibility;
      return trigger && React.createElement(Ref, {
        innerRef: this.handleTriggerRef
      }, React.cloneElement(trigger, Object.assign({
        onClick: this.handleTriggerClick
      }, triggerAccessibility.attributes, {}, triggerAccessibility.keyHandlers)));
    }
  }]);

  return Portal;
}(AutoControlledComponent);

_defineProperty(Portal, "autoControlledProps", ['open']);

_defineProperty(Portal, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  as: false,
  className: false,
  styled: false
}), {
  defaultOpen: PropTypes.bool,
  onMount: PropTypes.func,
  onUnmount: PropTypes.func,
  open: PropTypes.bool,
  trigger: PropTypes.node,
  triggerRef: customPropTypes.ref,
  triggerAccessibility: PropTypes.object,
  onTriggerClick: PropTypes.func,
  onOutsideClick: PropTypes.func,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
}));

_defineProperty(Portal, "defaultProps", {
  triggerAccessibility: {}
});

export default Portal;
//# sourceMappingURL=Portal.js.map
