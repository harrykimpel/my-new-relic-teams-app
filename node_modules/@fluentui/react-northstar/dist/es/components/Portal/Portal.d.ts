import { AccessibilityAttributes } from '@fluentui/accessibility';
import { AccessibilityHandlerProps, FocusTrapZoneProps } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { AutoControlledComponent, ChildrenComponentProps, ContentComponentProps } from '../../utils';
export declare type TriggerAccessibility = {
    attributes?: AccessibilityAttributes;
    keyHandlers?: AccessibilityHandlerProps;
};
export interface PortalProps extends ChildrenComponentProps, ContentComponentProps {
    /** Initial value of open. */
    defaultOpen?: boolean;
    /**
     * Called when the portal is mounted on the DOM.
     *
     * @param data - All props.
     */
    onMount?: (props: PortalProps) => void;
    /**
     * Called when the portal is unmounted from the DOM.
     *
     * @param data - All props.
     */
    onUnmount?: (props: PortalProps) => void;
    /** Controls whether or not the portal is displayed. */
    open?: boolean;
    /** Element to be rendered in-place where the portal is defined. */
    trigger?: JSX.Element;
    /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value */
    trapFocus?: FocusTrapZoneProps | boolean;
    /** Accessibility behavior object to apply on trigger node. */
    triggerAccessibility?: TriggerAccessibility;
    /** Sets trigger node to passed ref. */
    triggerRef?: React.Ref<any>;
    /**
     * Called when trigger node was clicked.
     *
     * @param data - All props.
     */
    onTriggerClick?: (e: React.MouseEvent) => void;
    /**
     * Called when `click` event was invoked outside portal or trigger nodes.
     *
     * @param data - All props.
     */
    onOutsideClick?: (e: React.MouseEvent) => void;
}
export interface PortalState {
    open?: boolean;
}
/**
 * A Portal allows to render children outside of their parent.
 */
declare class Portal extends AutoControlledComponent<PortalProps, PortalState> {
    portalNode: HTMLElement;
    triggerNode: HTMLElement;
    static autoControlledProps: string[];
    static propTypes: {
        defaultOpen: PropTypes.Requireable<boolean>;
        onMount: PropTypes.Requireable<(...args: any[]) => any>;
        onUnmount: PropTypes.Requireable<(...args: any[]) => any>;
        open: PropTypes.Requireable<boolean>;
        trigger: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        triggerRef: PropTypes.Requireable<{
            current: any;
        } | ((...args: any[]) => any)>;
        triggerAccessibility: PropTypes.Requireable<object>;
        onTriggerClick: PropTypes.Requireable<(...args: any[]) => any>;
        onOutsideClick: PropTypes.Requireable<(...args: any[]) => any>;
        trapFocus: PropTypes.Requireable<boolean | object>;
        styles: PropTypes.Requireable<object>;
        variables: PropTypes.Requireable<object>;
        design: PropTypes.Requireable<PropTypes.InferProps<{
            position: PropTypes.Requireable<string>;
            display: PropTypes.Requireable<string>;
            top: PropTypes.Requireable<string>;
            right: PropTypes.Requireable<string>;
            bottom: PropTypes.Requireable<string>;
            left: PropTypes.Requireable<string>;
            padding: PropTypes.Requireable<string>;
            paddingTop: PropTypes.Requireable<string>;
            paddingRight: PropTypes.Requireable<string>;
            paddingBottom: PropTypes.Requireable<string>;
            paddingLeft: PropTypes.Requireable<string>;
            margin: PropTypes.Requireable<string>;
            marginTop: PropTypes.Requireable<string>;
            marginRight: PropTypes.Requireable<string>;
            marginBottom: PropTypes.Requireable<string>;
            marginLeft: PropTypes.Requireable<string>;
            width: PropTypes.Requireable<string>;
            height: PropTypes.Requireable<string>;
            minWidth: PropTypes.Requireable<string>;
            maxWidth: PropTypes.Requireable<string>;
            minHeight: PropTypes.Requireable<string>;
            maxHeight: PropTypes.Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        accessibility: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: PortalProps;
    renderComponent(): React.ReactNode;
    renderPortal(): JSX.Element | undefined;
    renderTrigger(): JSX.Element | undefined;
    handleMount: () => void;
    handleUnmount: () => void;
    handlePortalRef: (portalNode: HTMLElement) => void;
    handleTriggerRef: (triggerNode: HTMLElement) => void;
    handleTriggerClick: (e: React.MouseEvent<Element, MouseEvent>, ...unhandledProps: any[]) => void;
    handleDocumentClick: (e: MouseEvent) => void;
}
export default Portal;
