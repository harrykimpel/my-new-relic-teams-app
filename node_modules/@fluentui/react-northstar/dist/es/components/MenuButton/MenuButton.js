import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { menuButtonBehavior } from '@fluentui/accessibility';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import { AutoControlledComponent, applyAccessibilityKeyHandlers, getOrGenerateIdFromShorthand, commonPropTypes } from '../../utils';
import { createShorthandFactory } from '../../utils/factories';
import Popup from '../Popup/Popup';
import Menu from '../Menu/Menu';
import { focusMenuItem } from './focusUtils';
import { ALIGNMENTS, POSITIONS } from '../../utils/positioner';
export var menuButtonClassName = 'ui-menubutton';
export var menuButtonSlotClassNames = {
  menu: "".concat(menuButtonClassName, "__menu")
};
/**
 * A MenuButton displays a menu connected to trigger element.
 * @accessibility
 */

var MenuButton =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(MenuButton, _AutoControlledCompon);

  function MenuButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MenuButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "triggerRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "menuRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      closeMenu: function closeMenu(e) {
        return _this.closeMenu(e);
      },
      openAndFocusFirst: function openAndFocusFirst(e) {
        return _this.openAndFocus(e, 'first');
      },
      openAndFocusLast: function openAndFocusLast(e) {
        return _this.openAndFocus(e, 'last');
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOpenChange", function (e, open, callback) {
      _invoke(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {
        open: open
      }));

      _this.setState({
        open: open
      }, callback);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuOverrides", function (predefinedProps) {
      return {
        onItemClick: function onItemClick(e, itemProps) {
          _invoke(predefinedProps, 'onItemClick', e, itemProps);

          _invoke(_this.props, 'onMenuItemClick', e, itemProps);

          if (!itemProps || !itemProps.menu) {
            // do not close if clicked on item with submenu
            _this.handleOpenChange(e, false);
          }
        }
      };
    });

    return _this;
  }

  _createClass(MenuButton, [{
    key: "closeMenu",
    value: function closeMenu(e) {
      this.handleOpenChange(e, false);
    }
  }, {
    key: "openAndFocus",
    value: function openAndFocus(e, which) {
      var _this2 = this;

      e.preventDefault();
      this.handleOpenChange(e, true, function () {
        return focusMenuItem(_this2.menuRef.current, which);
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this3 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          _accessibility = _ref.accessibility,
          styles = _ref.styles;
      var _this$props = this.props,
          contextMenu = _this$props.contextMenu,
          menu = _this$props.menu,
          accessibilityProp = _this$props.accessibility,
          align = _this$props.align,
          className = _this$props.className,
          defaultOpen = _this$props.defaultOpen,
          flipBoundary = _this$props.flipBoundary,
          mountNode = _this$props.mountNode,
          mouseLeaveDelay = _this$props.mouseLeaveDelay,
          offset = _this$props.offset,
          on = _this$props.on,
          onOpenChange = _this$props.onOpenChange,
          open = _this$props.open,
          overflowBoundary = _this$props.overflowBoundary,
          pointing = _this$props.pointing,
          position = _this$props.position,
          positionFixed = _this$props.positionFixed,
          tabbableTrigger = _this$props.tabbableTrigger,
          stylesProp = _this$props.styles,
          target = _this$props.target,
          trigger = _this$props.trigger,
          unstable_pinned = _this$props.unstable_pinned,
          variables = _this$props.variables;
      var popupProps = {
        accessibility: accessibilityProp,
        align: align,
        className: className,
        defaultOpen: defaultOpen,
        mountNode: mountNode,
        mouseLeaveDelay: mouseLeaveDelay,
        flipBoundary: flipBoundary,
        offset: offset,
        on: on,
        onOpenChange: onOpenChange,
        open: open,
        overflowBoundary: overflowBoundary,
        pointing: pointing,
        position: position,
        positionFixed: positionFixed,
        tabbableTrigger: tabbableTrigger,
        styles: stylesProp,
        target: target,
        trigger: trigger,
        unstable_pinned: unstable_pinned,
        variables: variables
      };
      var content = Menu.create(menu, {
        defaultProps: function defaultProps() {
          return Object.assign({}, _accessibility.attributes.menu, {
            vertical: true,
            className: menuButtonSlotClassNames.menu
          });
        },
        overrideProps: this.handleMenuOverrides
      });
      var overrideProps = Object.assign({
        accessibility: function accessibility() {
          return _accessibility;
        },
        open: this.state.open,
        onOpenChange: function onOpenChange(e, _ref2) {
          var open = _ref2.open;

          _this3.handleOpenChange(e, open);
        },
        content: {
          styles: styles.popupContent,
          content: content && React.createElement(Ref, {
            innerRef: this.menuRef
          }, content)
        },
        children: undefined
      }, contextMenu ? {
        on: 'context',
        trapFocus: true,
        tabbableTrigger: false
      } : {
        inline: true,
        autoFocus: true
      });
      var popup = Popup.create(popupProps, {
        overrideProps: overrideProps
      });

      if (contextMenu) {
        return popup;
      }

      return React.createElement(ElementType, _extends({
        className: classes.root
      }, _accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(_accessibility.keyHandlers.root, unhandledProps)), React.createElement(Ref, {
        innerRef: this.triggerRef
      }, popup));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(props, state) {
      return {
        menuId: getOrGenerateIdFromShorthand('menubutton-menu-', props.menu, state.menuId),
        triggerId: getOrGenerateIdFromShorthand('menubutton-trigger-', props.trigger, state.triggerId)
      };
    }
  }]);

  return MenuButton;
}(AutoControlledComponent);

_defineProperty(MenuButton, "displayName", 'MenuButton');

_defineProperty(MenuButton, "deprecated_className", menuButtonClassName);

_defineProperty(MenuButton, "create", void 0);

_defineProperty(MenuButton, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  as: true,
  content: false
}), {
  align: PropTypes.oneOf(ALIGNMENTS),
  defaultOpen: PropTypes.bool,
  mountNode: customPropTypes.domNode,
  mouseLeaveDelay: PropTypes.number,
  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),
  on: PropTypes.oneOfType([PropTypes.oneOf(['hover', 'click', 'focus', 'context']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'focus', 'context'])), PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'context']))]),
  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),
  open: PropTypes.bool,
  onMenuItemClick: PropTypes.func,
  onOpenChange: PropTypes.func,
  position: PropTypes.oneOf(POSITIONS),
  positionFixed: PropTypes.bool,
  target: PropTypes.any,
  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.any]),
  tabbableTrigger: PropTypes.bool,
  unstable_pinned: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthandWithoutJSX, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),
  contextMenu: PropTypes.bool
}));

_defineProperty(MenuButton, "defaultProps", {
  accessibility: menuButtonBehavior,
  align: 'start',
  position: 'below'
});

_defineProperty(MenuButton, "autoControlledProps", ['open']);

export { MenuButton as default };
MenuButton.create = createShorthandFactory({
  Component: MenuButton,
  mappedProp: 'menu'
});
//# sourceMappingURL=MenuButton.js.map
