import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import keyboardKey from 'keyboard-key';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { EventListener } from '@fluentui/react-component-event-listener';
import { isBrowser } from '../../utils';
import { isDebugEnabled } from '@fluentui/styles';
import DebugPanel from './DebugPanel';
import FiberNavigator from './FiberNavigator';
import DebugRect from './DebugRect';
/* eslint-disable no-console */

var INITIAL_STATE = {
  fiberNav: null,
  selectedFiberNav: null,
  isSelecting: false
};

var Debug =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Debug, _React$Component);

  function Debug(p, s) {
    var _this;

    _classCallCheck(this, Debug);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Debug).call(this, p, s));

    _defineProperty(_assertThisInitialized(_this), "state", INITIAL_STATE);

    _defineProperty(_assertThisInitialized(_this), "debugReactComponent", function (r) {
      if (!r) {
        console.error("No React component selected. Please select a Fluent UI component from the React's Component panel.");
        return;
      }

      if (!r._reactInternalFiber) {
        console.error('React does not provide data for debugging for this component. Try selecting some Fluent UI component.');
        return;
      }

      if (!r.fluentUIDebug) {
        console.error('Not a debuggable component. Try selecting some Fluent UI component.');
        return;
      }

      var fiberNav = FiberNavigator.fromFiber(r._reactInternalFiber);

      _this.setState({
        fiberNav: fiberNav,
        isSelecting: false,
        selectedFiberNav: null
      });
    });

    _defineProperty(_assertThisInitialized(_this), "debugDOMNode", function (domNode) {
      var fiberNav = FiberNavigator.fromDOMNode(domNode);

      if (!fiberNav) {
        console.error('No fiber for dom node', domNode);
        return;
      }

      fiberNav = fiberNav.findOwner(function (fiber) {
        return fiber.fluentUIDebug;
      });

      if (fiberNav !== _this.state.fiberNav) {
        _this.setState({
          fiberNav: fiberNav
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      var code = keyboardKey.getCode(e);

      switch (code) {
        case keyboardKey.Escape:
          _this.stopSelecting();

          break;

        case keyboardKey.d:
          if (e.altKey && e.shiftKey) {
            _this.startSelecting();
          }

          break;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (e) {
      _this.debugDOMNode(e.target);
    });

    _defineProperty(_assertThisInitialized(_this), "handleDOMNodeClick", function (e) {
      e.preventDefault();
      e.stopPropagation();

      _this.setState({
        isSelecting: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "startSelecting", function () {
      var isSelecting = !_this.state.isSelecting;

      _this.setState(Object.assign({}, !isSelecting && INITIAL_STATE, {
        isSelecting: isSelecting
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "stopSelecting", function () {
      _this.setState(INITIAL_STATE);
    });

    _defineProperty(_assertThisInitialized(_this), "selectFiber", function (selectedFiberNav) {
      return _this.setState({
        selectedFiberNav: selectedFiberNav
      });
    });

    _defineProperty(_assertThisInitialized(_this), "changeFiber", function (fiberNav) {
      return _this.setState({
        fiberNav: fiberNav
      });
    });

    _defineProperty(_assertThisInitialized(_this), "positionRight", function () {
      return _this.setState({
        debugPanelPosition: 'right'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "positionLeft", function () {
      return _this.setState({
        debugPanelPosition: 'left'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "close", function () {
      return _this.setState(INITIAL_STATE);
    });

    if (process.env.NODE_ENV !== 'production' && isDebugEnabled && isBrowser()) {
      // eslint-disable-next-line no-undef
      window.openDebugPanel = function () {
        // eslint-disable-next-line no-undef
        _this.debugReactComponent(window.$r);
      };
    }

    return _this;
  }

  _createClass(Debug, [{
    key: "render",
    value: function render() {
      var mountDocument = this.props.mountDocument;
      var _this$state = this.state,
          fiberNav = _this$state.fiberNav,
          selectedFiberNav = _this$state.selectedFiberNav,
          isSelecting = _this$state.isSelecting,
          debugPanelPosition = _this$state.debugPanelPosition;

      if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {
        return React.createElement(React.Fragment, null, React.createElement(EventListener, {
          listener: this.handleKeyDown,
          target: mountDocument.body,
          type: "keydown"
        }), isSelecting && React.createElement(EventListener, {
          listener: this.handleMouseMove,
          target: mountDocument.body,
          type: "mousemove"
        }), isSelecting && fiberNav && fiberNav.domNode && React.createElement(EventListener, {
          listener: this.handleDOMNodeClick,
          target: fiberNav.domNode,
          type: "click"
        }), isSelecting && fiberNav && React.createElement(DebugRect, {
          fiberNav: fiberNav
        }), selectedFiberNav && React.createElement(DebugRect, {
          fiberNav: selectedFiberNav
        }), !isSelecting && fiberNav && fiberNav.instance && React.createElement(DebugPanel, {
          fiberNav: fiberNav,
          onActivateDebugSelectorClick: this.startSelecting,
          onClose: this.close // TODO: Integrate CSS in JS Styles for Host Components (DOM nodes)
          // cssStyles={stylesForNode(domNode)}
          ,
          debugData: fiberNav.fluentUIDebug,
          position: debugPanelPosition || 'right',
          onPositionLeft: this.positionLeft,
          onPositionRight: this.positionRight,
          onFiberChanged: this.changeFiber,
          onFiberSelected: this.selectFiber
        }));
      }

      return null;
    }
  }]);

  return Debug;
}(React.Component);

_defineProperty(Debug, "defaultProps", {
  // eslint-disable-next-line no-undef
  mountDocument: isBrowser() ? window.document : null
});

_defineProperty(Debug, "propTypes", {
  mountDocument: PropTypes.object.isRequired
});

export default Debug;
//# sourceMappingURL=Debug.js.map
