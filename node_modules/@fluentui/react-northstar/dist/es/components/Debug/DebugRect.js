import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';

var DebugRect =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DebugRect, _React$Component);

  function DebugRect() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DebugRect);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DebugRect)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "selectorRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "setDebugSelectorPosition", function () {
      var fiberNav = _this.props.fiberNav;

      if (fiberNav && fiberNav.domNode && fiberNav.domNode.getBoundingClientRect && typeof fiberNav.domNode.getBoundingClientRect === 'function' && _this.selectorRef.current) {
        var rect = fiberNav.domNode.getBoundingClientRect();
        _this.selectorRef.current.style.top = "".concat(rect.top, "px");
        _this.selectorRef.current.style.left = "".concat(rect.left, "px");
        _this.selectorRef.current.style.width = "".concat(rect.width, "px");
        _this.selectorRef.current.style.height = "".concat(rect.height, "px");
        requestAnimationFrame(_this.setDebugSelectorPosition);
      }
    });

    return _this;
  }

  _createClass(DebugRect, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setDebugSelectorPosition();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      this.setDebugSelectorPosition();
    }
  }, {
    key: "render",
    value: function render() {
      var fiberNav = this.props.fiberNav;

      if (!fiberNav) {
        return null;
      }

      return React.createElement("pre", {
        ref: this.selectorRef,
        style: {
          position: 'fixed',
          padding: 0,
          margin: 0,
          background: '#6495ed22',
          border: '1px solid #6495edcc',
          zIndex: 99999999,
          pointerEvents: 'none',
          userSelect: 'none'
        }
      }, React.createElement("div", {
        style: {
          position: 'absolute',
          padding: '2px 4px',
          margin: '-1px 0 0 -1px',
          bottom: '100%',
          left: 0,
          color: '#fff',
          background: '#6495ed'
        }
      }, React.createElement("span", {
        style: {
          fontWeight: 'bold'
        }
      }, "<".concat(fiberNav.name, " />"))), fiberNav.domNode && React.createElement("div", {
        style: {
          fontSize: '0.9em',
          position: 'absolute',
          padding: '2px 4px',
          margin: '0 0 1px -1px',
          top: '100%',
          left: 0,
          background: '#6495ed'
        }
      }, React.createElement("strong", {
        style: {
          fontWeight: 'bold',
          color: 'hsl(160, 100%, 80%)'
        }
      }, fiberNav.domNode.tagName && fiberNav.domNode.tagName.toLowerCase()), fiberNav.domNode.hasAttribute && typeof fiberNav.domNode.hasAttribute === 'function' && fiberNav.domNode.hasAttribute('class') && React.createElement("span", {
        style: {
          color: 'rgba(255, 255, 255, 0.75)'
        }
      }, ".", (fiberNav.domNode.getAttribute('class') || '').replace(/ +/g, '.'))));
    }
  }]);

  return DebugRect;
}(React.Component);

export default DebugRect;
//# sourceMappingURL=DebugRect.js.map
