{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","customPropTypes","PropTypes","React","ThemeContext","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","withSafeTypeForAs","ChatItem","ChatMessage","chatClassName","chatSlotClassNames","item","Chat","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","getAttributes","forElements","create","defaultProps","as","propTypes","createCommon","content","arrayOf","itemShorthand","Object","keys","Item","Message","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport ChatItem, { ChatItemProps } from './ChatItem';\nimport ChatMessage from './ChatMessage';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\nconst Chat: React.FC<WithAsProp<ChatProps>> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: chatSlotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\n\nChat.create = createShorthandFactory({ Component: Chat });\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport default withSafeTypeForAs<typeof Chat, ChatProps, 'ul'>(Chat);\n"],"file":"Chat.js"}