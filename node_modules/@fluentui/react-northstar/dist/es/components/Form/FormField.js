import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, childrenExist, createShorthandFactory, commonPropTypes } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Text from '../Text/Text';
import Input from '../Input/Input';
import Box from '../Box/Box';
export var formFieldClassName = 'ui-form__field';

var FormField =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(FormField, _UIComponent);

  function FormField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FormField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "shouldControlAppearFirst", function () {
      var type = _this.props.type;
      return type && (type === 'checkbox' || type === 'radio');
    });

    return _this;
  }

  _createClass(FormField, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          control = _this$props.control,
          id = _this$props.id,
          label = _this$props.label,
          message = _this$props.message,
          name = _this$props.name,
          required = _this$props.required,
          type = _this$props.type;
      var labelElement = Text.create(label, {
        defaultProps: function defaultProps() {
          return {
            as: 'label',
            htmlFor: id,
            styles: styles.label
          };
        }
      });
      var messageElement = Text.create(message, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.message
          };
        }
      });
      var controlElement = Box.create(control || {}, {
        defaultProps: function defaultProps() {
          return {
            required: required,
            id: id,
            name: name,
            type: type,
            styles: styles.control
          };
        }
      });
      var content = React.createElement(React.Fragment, null, this.shouldControlAppearFirst() && controlElement, labelElement, !this.shouldControlAppearFirst() && controlElement, messageElement);
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), childrenExist(children) ? children : content);
    }
  }]);

  return FormField;
}(UIComponent);

_defineProperty(FormField, "displayName", 'FormField');

_defineProperty(FormField, "deprecated_className", formFieldClassName);

_defineProperty(FormField, "create", void 0);

_defineProperty(FormField, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  control: customPropTypes.itemShorthand,
  id: PropTypes.string,
  inline: PropTypes.bool,
  label: customPropTypes.itemShorthand,
  message: customPropTypes.itemShorthand,
  name: PropTypes.string,
  required: PropTypes.bool,
  type: PropTypes.string
}));

_defineProperty(FormField, "defaultProps", {
  as: 'div',
  control: {
    as: Input
  }
});

FormField.create = createShorthandFactory({
  Component: FormField,
  mappedProp: 'label'
});
/**
 * A FormField represents a Form element containing a label and an input.
 */

export default withSafeTypeForAs(FormField);
//# sourceMappingURL=FormField.js.map
