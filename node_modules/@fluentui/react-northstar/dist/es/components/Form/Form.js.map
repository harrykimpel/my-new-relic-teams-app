{"version":3,"sources":["components/Form/Form.tsx"],"names":["customPropTypes","PropTypes","React","UIComponent","childrenExist","commonPropTypes","rtlTextContainer","withSafeTypeForAs","FormField","formClassName","Form","e","action","props","args","fields","field","create","accessibility","ElementType","classes","unhandledProps","children","root","handleSubmit","getAttributes","forElements","attributes","renderFields","createCommon","content","string","collectionShorthand","onSubmit","func","as"],"mappings":";;;;;;;;;;AACA,OAAO,KAAKA,eAAZ,MAAiC,2BAAjC;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,SACEC,WADF,EAEEC,aAFF,EAKEC,eALF,EAMEC,gBANF,QAQO,aARP;AASA,SAAiEC,iBAAjE,QAA0F,aAA1F;AACA,OAAOC,SAAP,MAA0C,aAA1C;AAsBA,OAAO,IAAMC,aAAa,GAAG,SAAtB;;IAEDC,I;;;;;;;;;;;;;;;;;;mEAsCW,UAACC,CAAD,EAAgB;AAAA,UACrBC,MADqB,GACV,MAAKC,KADK,CACrBD,MADqB,EAG7B;AACA;;AACA,UAAI,CAACA,MAAL,EAAa,QAASD,CAAT,EAAY,gBAAZ;;AALgB,yCAATG,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAM7B,6BAAS,MAAKD,KAAd,EAAqB,UAArB,EAAiCF,CAAjC,EAAoC,MAAKE,KAAzC,SAAmDC,IAAnD;AACD,K;;mEAEc,YAAM;AAAA,UACXC,MADW,GACA,MAAKF,KADL,CACXE,MADW;AAEnB,aAAO,KAAMA,MAAN,EAAc,UAAAC,KAAK;AAAA,eAAIR,SAAS,CAACS,MAAV,CAAiBD,KAAjB,CAAJ;AAAA,OAAnB,CAAP;AACD,K;;;;;;;0CA5ByF;AAAA,UAAxEE,aAAwE,QAAxEA,aAAwE;AAAA,UAAzDC,WAAyD,QAAzDA,WAAyD;AAAA,UAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,UAAnCC,cAAmC,QAAnCA,cAAmC;AAAA,wBAC3D,KAAKR,KADsD;AAAA,UAChFD,MADgF,eAChFA,MADgF;AAAA,UACxEU,QADwE,eACxEA,QADwE;AAExF,aACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAEF,OAAO,CAACG,IADrB;AAEE,QAAA,MAAM,EAAEX,MAFV;AAGE,QAAA,QAAQ,EAAE,KAAKY;AAHjB,SAIMlB,gBAAgB,CAACmB,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACJ,QAAD;AAAf,OAA/B,CAJN,EAKMJ,aAAa,CAACS,UAAd,CAAyBJ,IAL/B,EAMMF,cANN,GAQGjB,aAAa,CAACkB,QAAD,CAAb,GAA0BA,QAA1B,GAAqC,KAAKM,YAAL,EARxC,CADF;AAYD;;;;EApCgBzB,W;AAqDnB;;;;;gBArDMO,I;;gBAAAA,I,iBAGiB,M;;gBAHjBA,I,0BAK0BD,a;;gBAL1BC,I,iCAQCL,eAAe,CAACwB,YAAhB,CAA6B;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHlB,EAAAA,MAAM,EAAEX,SAAS,CAAC8B,M;AAClBhB,EAAAA,MAAM,EAAEf,eAAe,CAACgC,mB;AACxBC,EAAAA,QAAQ,EAAEhC,SAAS,CAACiC;;;gBAblBxB,I,kBAgBkB;AACpByB,EAAAA,EAAE,EAAE;AADgB,C;;gBAhBlBzB,I,WAoBWF,S;;AAoCjB,eAAeD,iBAAiB,CAAiCG,IAAjC,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, WithAsProp, ShorthandCollection, withSafeTypeForAs } from '../../types';\nimport FormField, { FormFieldProps } from './FormField';\n\nexport interface FormProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** The HTML form action. */\n  action?: string;\n\n  /** Shorthand array of props for the Form.Fields inside the Form. */\n  fields?: ShorthandCollection<FormFieldProps>;\n\n  /**\n   * The HTML form submit handler.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSubmit?: ComponentEventHandler<FormProps>;\n}\n\nexport const formClassName = 'ui-form';\n\nclass Form extends UIComponent<WithAsProp<FormProps>, any> {\n  static create: ShorthandFactory<FormProps>;\n\n  static displayName = 'Form';\n\n  static deprecated_className = formClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    action: PropTypes.string,\n    fields: customPropTypes.collectionShorthand,\n    onSubmit: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'form',\n  };\n\n  static Field = FormField;\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }): React.ReactNode {\n    const { action, children } = this.props;\n    return (\n      <ElementType\n        className={classes.root}\n        action={action}\n        onSubmit={this.handleSubmit}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n      >\n        {childrenExist(children) ? children : this.renderFields()}\n      </ElementType>\n    );\n  }\n\n  handleSubmit = (e, ...args) => {\n    const { action } = this.props;\n\n    // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()\n    // method.\n    if (!action) _.invoke(e, 'preventDefault');\n    _.invoke(this.props, 'onSubmit', e, this.props, ...args);\n  };\n\n  renderFields = () => {\n    const { fields } = this.props;\n    return _.map(fields, field => FormField.create(field));\n  };\n}\n\n/**\n * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.\n */\nexport default withSafeTypeForAs<typeof Form, FormProps, 'form'>(Form);\n"],"file":"Form.js"}