{"version":3,"sources":["components/Form/FormField.tsx"],"names":["customPropTypes","PropTypes","React","UIComponent","childrenExist","createShorthandFactory","commonPropTypes","withSafeTypeForAs","Text","Input","Box","formFieldClassName","FormField","type","props","ElementType","classes","accessibility","styles","unhandledProps","children","control","id","label","message","name","required","labelElement","create","defaultProps","as","htmlFor","messageElement","controlElement","content","shouldControlAppearFirst","root","attributes","createCommon","itemShorthand","string","inline","bool","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Text, { TextProps } from '../Text/Text';\nimport Input from '../Input/Input';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldClassName = 'ui-form__field';\n\nclass FormField extends UIComponent<WithAsProp<FormFieldProps>, any> {\n  static displayName = 'FormField';\n\n  static deprecated_className = formFieldClassName;\n\n  static create: ShorthandFactory<FormFieldProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    control: customPropTypes.itemShorthand,\n    id: PropTypes.string,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    message: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.string,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    control: { as: Input },\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, unhandledProps }): React.ReactNode {\n    const { children, control, id, label, message, name, required, type } = this.props;\n\n    const labelElement = Text.create(label, {\n      defaultProps: () => ({\n        as: 'label',\n        htmlFor: id,\n        styles: styles.label,\n      }),\n    });\n\n    const messageElement = Text.create(message, {\n      defaultProps: () => ({\n        styles: styles.message,\n      }),\n    });\n\n    const controlElement = Box.create(control || {}, {\n      defaultProps: () => ({ required, id, name, type, styles: styles.control }),\n    });\n\n    const content = (\n      <>\n        {this.shouldControlAppearFirst() && controlElement}\n        {labelElement}\n        {!this.shouldControlAppearFirst() && controlElement}\n        {messageElement}\n      </>\n    );\n\n    return (\n      <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n\n  shouldControlAppearFirst = () => {\n    const { type } = this.props;\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n}\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport default withSafeTypeForAs<typeof FormField, FormFieldProps>(FormField);\n"],"file":"FormField.js"}