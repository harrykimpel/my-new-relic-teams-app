import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DebounceResultFn, ShorthandRenderFunction, ShorthandValue, ShorthandCollection, WithAsProp } from '../../types';
import { ComponentSlotStylesInput, ComponentVariablesInput } from '@fluentui/styles';
import { DownshiftState, StateChangeOptions, A11yStatusMessageOptions, GetMenuPropsOptions, GetPropsCommonOptions, GetInputPropsOptions, GetToggleButtonPropsOptions, GetItemPropsOptions } from 'downshift';
import { AutoControlledComponent, RenderResultConfig, UIComponentProps } from '../../utils';
import { ListProps } from '../List/List';
import { DropdownItemProps } from './DropdownItem';
import { DropdownSelectedItemProps } from './DropdownSelectedItem';
import { DropdownSearchInputProps } from './DropdownSearchInput';
import { ButtonProps } from '../Button/Button';
import { BoxProps } from '../Box/Box';
import { PositioningProps, PopperShorthandProps } from '../../utils/positioner';
export interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {
}
export interface DropdownSlotClassNames {
    clearIndicator: string;
    container: string;
    toggleIndicator: string;
    item: string;
    itemsList: string;
    searchInput: string;
    selectedItem: string;
    selectedItems: string;
    triggerButton: string;
}
export interface DropdownProps extends UIComponentProps<DropdownProps, DropdownState>, PositioningProps {
    /** The index of the currently selected item, if the dropdown supports multiple selection. */
    activeSelectedIndex?: number;
    /** A dropdown item can show a check indicator if it is selected. */
    checkable?: boolean;
    /** A slot for a selected indicator in the dropdown list. */
    checkableIndicator?: ShorthandValue<BoxProps>;
    /** A dropdown can be clearable to let users remove their selection. */
    clearable?: boolean;
    /** A slot for the clearing indicator. */
    clearIndicator?: ShorthandValue<BoxProps>;
    /** The initial value for the index of the currently selected item in a multiple selection. */
    defaultActiveSelectedIndex?: number;
    /** The initial value for 'open' in uncontrolled mode. */
    defaultOpen?: boolean;
    /** The initial list item index to highlight. */
    defaultHighlightedIndex?: number;
    /** The initial value for the search query if the dropdown has `search` enabled. */
    defaultSearchQuery?: string;
    /** The initial value (or value array if the array has multiple selection). */
    defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;
    /** A dropdown can show that it cannot be interacted with. */
    disabled?: boolean;
    /** A dropdown can fill the width of its container. */
    fluid?: boolean;
    /** Object with callbacks for generating announcements for item selection and removal. */
    getA11ySelectionMessage?: {
        /**
         * Callback that creates custom accessibility message a screen reader narrates on item added to selection.
         * @param item - Dropdown added element.
         */
        onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;
        /**
         * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.
         * @param item - Dropdown removed element.
         */
        onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;
    };
    /**
     * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.
     * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.
     */
    getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;
    /** A dropdown can highlight the first option when it opens. */
    highlightFirstItemOnOpen?: boolean;
    /** The index of the list item to highlight. */
    highlightedIndex?: number;
    /** A dropdown can be formatted to appear inline next to other elements. */
    inline?: boolean;
    /** A dropdown can have inverted colors. */
    inverted?: boolean;
    /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */
    items?: ShorthandCollection<DropdownItemProps>;
    /**
     * A function that converts an item to string. Used when dropdown has `search` enabled.
     * By default, it:
     * - returns the `header` property if it exists on an item
     * - stringifies the item if it is a primitive type
     */
    itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;
    /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */
    itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;
    /** A message to be displayed in the list header. */
    headerMessage?: ShorthandValue<DropdownItemProps>;
    /** A slot for dropdown list. */
    list?: ShorthandValue<ListProps & {
        popper?: PopperShorthandProps;
    }>;
    /** A dropdown can show that it is currently loading data. */
    loading?: boolean;
    /** A message to be displayed in the list when the dropdown is loading. */
    loadingMessage?: ShorthandValue<DropdownItemProps>;
    /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */
    moveFocusOnTab?: boolean;
    /** A dropdown can allow a user to select multiple items. */
    multiple?: boolean;
    /** A message to be displayed in the list when the dropdown has no items. */
    noResultsMessage?: ShorthandValue<DropdownItemProps>;
    /**
     * Called when the dropdown's selected items index change.
     * @param event - React's original SyntheticEvent.
     * @param data - All props and the new selected value(s).
     */
    onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;
    /**
     * Called when the dropdown's highlighted index change.
     * @param event - React's original SyntheticEvent.
     * @param data - All props and the new selected value(s).
     */
    onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;
    /**
     * Called when the dropdown opens or closes.
     * @param event - React's original SyntheticEvent.
     * @param data - All props, with `open` reflecting the new open state.
     */
    onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;
    /**
     * Called when the dropdown's search query changes.
     * @param event - React's original SyntheticEvent.
     * @param data - All props, with `searchQuery` reflecting its new value.
     */
    onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;
    /**
     * Called when the dropdown's selected item(s) change.
     * @param event - React's original SyntheticEvent.
     * @param data - All props and the new selected value(s).
     */
    onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;
    /** A dropdown's open state can be controlled. */
    open?: boolean;
    /** A placeholder message for the input field. */
    placeholder?: string;
    /**
     * A render function to customize how items are rendered in the dropdown.
     *
     * @param Component - The computed component for this slot.
     * @param props - The computed props for this slot.
     * @param children - The computed children for this slot.
     */
    renderItem?: ShorthandRenderFunction<DropdownItemProps>;
    /**
     * A custom render function for the selected item. Only applicable with the `multiple` prop.
     *
     * @param Component - The computed component for this slot.
     * @param props - The computed props for this slot.
     * @param children - The computed children for this slot.
     */
    renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;
    /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */
    search?: boolean | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);
    /** A search dropdown's input can be customized. */
    searchInput?: ShorthandValue<DropdownSearchInputProps>;
    /** Sets search query value (controlled mode). */
    searchQuery?: string;
    /** Controls the appearance of the indicator that shows/hides the list of items. */
    toggleIndicator?: ShorthandValue<BoxProps>;
    /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */
    triggerButton?: ShorthandValue<ButtonProps>;
    /** Sets the dropdown's currently selected value(s) in controlled mode. */
    value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;
}
export interface DropdownState {
    a11ySelectionStatus: string;
    activeSelectedIndex: number;
    filteredItems: ShorthandCollection<DropdownItemProps>;
    filteredItemStrings: string[];
    focused: boolean;
    startingString: string;
    open: boolean;
    searchQuery: string;
    highlightedIndex: number;
    value: ShorthandCollection<DropdownItemProps>;
    itemIsFromKeyboard: boolean;
    isFromKeyboard: boolean;
}
export declare const dropdownClassName = "ui-dropdown";
export declare const dropdownSlotClassNames: DropdownSlotClassNames;
declare class Dropdown extends AutoControlledComponent<WithAsProp<DropdownProps>, DropdownState> {
    buttonRef: React.RefObject<HTMLElement>;
    inputRef: React.RefObject<HTMLInputElement>;
    listRef: React.RefObject<HTMLElement>;
    selectedItemsRef: React.RefObject<HTMLDivElement>;
    containerRef: React.RefObject<HTMLDivElement>;
    static displayName: string;
    static deprecated_className: string;
    static a11yStatusCleanupTime: number;
    static charKeyPressedCleanupTime: number;
    static propTypes: {
        activeSelectedIndex: PropTypes.Requireable<number>;
        align: PropTypes.Requireable<import("../../utils/positioner").Alignment>;
        checkable: PropTypes.Requireable<boolean>;
        checkableIndicator: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        clearable: PropTypes.Requireable<boolean>;
        clearIndicator: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        defaultActiveSelectedIndex: PropTypes.Requireable<number>;
        defaultOpen: PropTypes.Requireable<boolean>;
        defaultHighlightedIndex: PropTypes.Requireable<number>;
        defaultSearchQuery: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<unknown>;
        disabled: PropTypes.Requireable<boolean>;
        fluid: PropTypes.Requireable<boolean>;
        getA11ySelectionMessage: PropTypes.Requireable<object>;
        getA11yStatusMessage: PropTypes.Requireable<(...args: any[]) => any>;
        highlightFirstItemOnOpen: PropTypes.Requireable<boolean>;
        highlightedIndex: PropTypes.Requireable<number>;
        inline: PropTypes.Requireable<boolean>;
        inverted: PropTypes.Requireable<boolean>;
        items: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        itemToString: PropTypes.Requireable<(...args: any[]) => any>;
        itemToValue: PropTypes.Requireable<(...args: any[]) => any>;
        headerMessage: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        list: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        loading: PropTypes.Requireable<boolean>;
        loadingMessage: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        moveFocusOnTab: PropTypes.Requireable<boolean>;
        multiple: PropTypes.Requireable<boolean>;
        noResultsMessage: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        offset: PropTypes.Requireable<((...args: any[]) => any) | [number, number]>;
        onOpenChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSearchQueryChange: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onActiveSelectedIndexChange: PropTypes.Requireable<(...args: any[]) => any>;
        onHighlightedIndexChange: PropTypes.Requireable<(...args: any[]) => any>;
        open: PropTypes.Requireable<boolean>;
        placeholder: PropTypes.Requireable<string>;
        position: PropTypes.Requireable<import("../../utils/positioner").Position>;
        renderItem: PropTypes.Requireable<(...args: any[]) => any>;
        renderSelectedItem: PropTypes.Requireable<(...args: any[]) => any>;
        search: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;
        searchQuery: PropTypes.Requireable<string>;
        searchInput: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        toggleIndicator: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        triggerButton: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        unstable_pinned: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<unknown>;
        styles: PropTypes.Requireable<object>;
        variables: PropTypes.Requireable<object>;
        design: PropTypes.Requireable<PropTypes.InferProps<{
            position: PropTypes.Requireable<string>;
            display: PropTypes.Requireable<string>;
            top: PropTypes.Requireable<string>;
            right: PropTypes.Requireable<string>;
            bottom: PropTypes.Requireable<string>;
            left: PropTypes.Requireable<string>;
            padding: PropTypes.Requireable<string>; /** A slot for dropdown list. */
            paddingTop: PropTypes.Requireable<string>;
            paddingRight: PropTypes.Requireable<string>;
            paddingBottom: PropTypes.Requireable<string>;
            paddingLeft: PropTypes.Requireable<string>; /** A message to be displayed in the list when the dropdown is loading. */
            margin: PropTypes.Requireable<string>;
            marginTop: PropTypes.Requireable<string>;
            marginRight: PropTypes.Requireable<string>;
            marginBottom: PropTypes.Requireable<string>;
            marginLeft: PropTypes.Requireable<string>;
            width: PropTypes.Requireable<string>;
            height: PropTypes.Requireable<string>;
            minWidth: PropTypes.Requireable<string>;
            maxWidth: PropTypes.Requireable<string>;
            minHeight: PropTypes.Requireable<string>;
            maxHeight: PropTypes.Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        accessibility: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        align: string;
        as: string;
        clearIndicator: {};
        itemToString: (item: any) => any;
        itemToValue: (item: any) => any;
        list: {};
        position: string;
        toggleIndicator: {};
        triggerButton: {};
    };
    static autoControlledProps: string[];
    static Item: {
        <Tag>(x: {
            as: Tag;
        } & DropdownItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            active?: boolean;
            accessibilityItemProps?: any;
            content?: ShorthandValue<BoxProps>;
            checkable?: boolean;
            checkableIndicator?: ShorthandValue<BoxProps>;
            disabled?: boolean;
            header?: ShorthandValue<BoxProps>;
            image?: ShorthandValue<import("../..").ImageProps>;
            isFromKeyboard?: boolean;
            onClick?: import("../../types").ComponentEventHandler<DropdownItemProps>;
            selected?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownItemProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("content" | "active" | "disabled" | "header" | "image" | "className" | "onClick" | "variables" | "styles" | "selected" | "design" | "isFromKeyboard" | "accessibilityItemProps" | "checkable" | "checkableIndicator")[];
        create: import("../../utils").ShorthandFactory<DropdownItemProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<DropdownItemProps>;
    };
    static SearchInput: {
        <Tag>(x: {
            as: Tag;
        } & DropdownSearchInputProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibilityComboboxProps?: any;
            accessibilityInputProps?: any;
            disabled?: boolean;
            inline?: boolean;
            inputRef?: React.Ref<HTMLElement>;
            onFocus?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onInputBlur?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onInputKeyDown?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onKeyUp?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            placeholder?: string;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownSearchInputProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("inline" | "disabled" | "className" | "placeholder" | "onFocus" | "onKeyUp" | "variables" | "styles" | "design" | "inputRef" | "accessibilityComboboxProps" | "accessibilityInputProps" | "onInputBlur" | "onInputKeyDown")[];
        create: import("../../utils").ShorthandFactory<DropdownSearchInputProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<DropdownSearchInputProps>;
    };
    static SelectedItem: {
        <Tag>(x: {
            as: Tag;
        } & DropdownSelectedItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            active?: boolean;
            header?: ShorthandValue<BoxProps>;
            icon?: ShorthandValue<BoxProps>;
            image?: ShorthandValue<import("../..").ImageProps>;
            onClick?: import("../../types").ComponentEventHandler<DropdownSelectedItemProps>;
            onKeyDown?: import("../../types").ComponentKeyboardEventHandler<DropdownSelectedItemProps>;
            onRemove?: import("../../types").ComponentEventHandler<DropdownSelectedItemProps>;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownSelectedItemProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        contextType: any;
        displayName: string;
        handledProps: string[];
        unhandledProps: string[];
        create: import("../../utils").ShorthandFactory<DropdownSelectedItemProps>;
        deprecated_className: string;
        _handledPropsCache: string[];
    };
    componentWillUnmount(): void;
    getInitialAutoControlledState({ multiple, search }: DropdownProps): DropdownState;
    defaultTriggerButtonId: string;
    /**
     * Used to compute the filtered items (by value and search query) and, if needed,
     * their string equivalents, in order to be used throughout the component.
     */
    static getAutoControlledStateFromProps(props: DropdownProps, state: DropdownState): Partial<DropdownState>;
    handleChange: (e: React.SyntheticEvent<Element, Event>) => void;
    renderComponent({ ElementType, classes, styles, variables, unhandledProps, rtl }: RenderResultConfig<DropdownProps>): JSX.Element;
    renderTriggerButton(styles: ComponentSlotStylesInput, rtl: boolean, getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element;
    renderSearchInput(accessibilityComboboxProps: Object, rtl: boolean, highlightedIndex: number, getInputProps: (options?: GetInputPropsOptions) => any, selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void, toggleMenu: () => void, variables: any): JSX.Element;
    renderItemsList(styles: ComponentSlotStylesInput, variables: ComponentVariablesInput, highlightedIndex: number, toggleMenu: () => void, selectItemAtIndex: (index: number) => void, getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any, getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any, getInputProps: (options?: GetInputPropsOptions) => any, rtl: boolean): JSX.Element;
    renderItems(styles: ComponentSlotStylesInput, variables: ComponentVariablesInput, getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any, highlightedIndex: number): {
        children: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    }[];
    renderItemsListHeader(styles: ComponentSlotStylesInput): {
        children: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    };
    renderItemsListFooter(styles: ComponentSlotStylesInput): {
        children: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    };
    renderSelectedItems(variables: any, rtl: boolean): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>[];
    downshiftStateReducer: (state: DownshiftState<ShorthandValue<DropdownItemProps>>, changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {};
    handleStateChange: (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => void;
    isSelectedItemActive: (index: number) => boolean;
    handleItemOverrides: (item: ShorthandValue<DropdownItemProps>, index: number, getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any, selected: boolean) => (predefinedProps: DropdownItemProps) => {
        accessibilityItemProps: any;
    };
    handleSelectedItemOverrides: (item: ShorthandValue<DropdownItemProps>, rtl: boolean) => (predefinedProps: DropdownSelectedItemProps) => {
        onRemove: (e: React.SyntheticEvent<Element, Event>, dropdownSelectedItemProps: DropdownSelectedItemProps) => void;
        onClick: (e: React.SyntheticEvent<Element, Event>, dropdownSelectedItemProps: DropdownSelectedItemProps) => void;
        onKeyDown: (e: React.SyntheticEvent<Element, Event>, dropdownSelectedItemProps: DropdownSelectedItemProps) => void;
    };
    handleSearchInputOverrides: (highlightedIndex: number, rtl: boolean, selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void, toggleMenu: () => void, accessibilityComboboxProps: Object, getInputProps: (options?: GetInputPropsOptions) => any) => (predefinedProps: DropdownSearchInputProps) => {
        accessibilityInputProps: any;
        accessibilityComboboxProps: Object;
        onFocus: (e: React.SyntheticEvent<Element, Event>, searchInputProps: DropdownSearchInputProps) => void;
        onInputBlur: (e: React.SyntheticEvent<Element, Event>, searchInputProps: DropdownSearchInputProps) => void;
        onInputKeyDown: (e: React.SyntheticEvent<Element, Event>, searchInputProps: DropdownSearchInputProps) => void;
    };
    /**
     * Custom Tab selection logic, at least until Downshift will implement selection on blur.
     * Also keeps focus on multiple selection dropdown when selecting by Tab.
     */
    handleTabSelection: (e: React.SyntheticEvent<Element, Event>, highlightedIndex: number, selectItemAtIndex: (highlightedIndex: number) => void, toggleMenu: () => void) => void;
    trySetLastSelectedItemAsActive: () => void;
    tryRemoveItemFromValue: () => void;
    handleClear: (e: React.SyntheticEvent<HTMLElement, Event>) => void;
    handleContainerClick: () => void;
    handleTriggerButtonKeyDown: (e: React.SyntheticEvent<Element, Event>, rtl: boolean) => void;
    handleListKeyDown: (e: React.SyntheticEvent<Element, Event>, highlightedIndex: number, accessibilityInputPropsKeyDown: (e: any) => any, toggleMenu: () => void, selectItemAtIndex: (index: number) => void) => void;
    handleSelectedItemKeyDown(e: React.SyntheticEvent, item: ShorthandValue<DropdownItemProps>, predefinedProps: DropdownSelectedItemProps, dropdownSelectedItemProps: DropdownSelectedItemProps, rtl: boolean): void;
    handleTriggerButtonOrListFocus: () => void;
    handleTriggerButtonBlur: (e: any) => void;
    handleListBlur: (e: any) => void;
    /**
     * Sets highlightedIndex to be the item that starts with the character keys the
     * user has typed. Only used in non-search dropdowns.
     *
     * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.
     */
    setHighlightedIndexOnCharKeyDown: (keyString: string) => void;
    handleSelectedItemRemove(e: React.SyntheticEvent, item: ShorthandValue<DropdownItemProps>, predefinedProps: DropdownSelectedItemProps, dropdownSelectedItemProps: DropdownSelectedItemProps): void;
    removeItemFromValue(item?: ShorthandValue<DropdownItemProps>): void;
    /**
     * Calls setState and invokes event handler exposed to user.
     * We don't have the event object for most events coming from Downshift se we send an empty event
     * because we want to keep the event handling interface
     */
    setStateAndInvokeHandler: (handlerNames: ("inline" | "open" | "multiple" | "disabled" | "position" | "offset" | "search" | "list" | "className" | "defaultValue" | "placeholder" | "onChange" | "value" | "variables" | "styles" | "inverted" | "fluid" | "design" | "align" | "loading" | "flipBoundary" | "overflowBoundary" | "positionFixed" | "unstable_pinned" | "items" | "defaultOpen" | "highlightedIndex" | "checkable" | "checkableIndicator" | "clearable" | "itemToString" | "activeSelectedIndex" | "searchQuery" | "clearIndicator" | "defaultActiveSelectedIndex" | "defaultHighlightedIndex" | "defaultSearchQuery" | "getA11ySelectionMessage" | "getA11yStatusMessage" | "highlightFirstItemOnOpen" | "itemToValue" | "headerMessage" | "loadingMessage" | "moveFocusOnTab" | "noResultsMessage" | "onActiveSelectedIndexChange" | "onHighlightedIndexChange" | "onOpenChange" | "onSearchQueryChange" | "renderItem" | "renderSelectedItem" | "searchInput" | "toggleIndicator" | "triggerButton")[], event: React.SyntheticEvent<HTMLElement, Event>, newState: Partial<DropdownState>) => void;
    tryFocusTriggerButton: () => void;
    tryFocusSearchInput: () => void;
    /**
     * If there is no value we use the placeholder value
     * otherwise, for single selection we convert the value with itemToString
     * and for multiple selection we return empty string, the values are rendered by renderSelectedItems
     */
    getSelectedItemAsString: (value: ShorthandValue<DropdownItemProps>) => string;
    getHighlightedIndexOnArrowKeyOpen: (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => number;
    /**
     * Function that sets and cleans the selection message after it has been set,
     * so it is not read anymore via virtual cursor.
     */
    setA11ySelectionMessage: (a11ySelectionStatus: string) => void;
    setStartingString: (startingString: string) => void;
    clearA11ySelectionMessage: DebounceResultFn<() => void>;
    clearStartingString: DebounceResultFn<() => void>;
}
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & DropdownProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        activeSelectedIndex?: number;
        checkable?: boolean;
        checkableIndicator?: ShorthandValue<BoxProps>;
        clearable?: boolean;
        clearIndicator?: ShorthandValue<BoxProps>;
        defaultActiveSelectedIndex?: number;
        defaultOpen?: boolean;
        defaultHighlightedIndex?: number;
        defaultSearchQuery?: string;
        defaultValue?: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | import("../../types").ObjectShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps, never>;
        disabled?: boolean;
        fluid?: boolean;
        getA11ySelectionMessage?: {
            /**
             * Callback that creates custom accessibility message a screen reader narrates on item added to selection.
             * @param item - Dropdown added element.
             */
            onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;
            /**
             * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.
             * @param item - Dropdown removed element.
             */
            onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;
        };
        getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;
        highlightFirstItemOnOpen?: boolean;
        highlightedIndex?: number;
        inline?: boolean;
        inverted?: boolean;
        items?: ShorthandCollection<DropdownItemProps, never>;
        itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;
        itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;
        headerMessage?: ShorthandValue<DropdownItemProps>;
        list?: ShorthandValue<ListProps & {
            popper?: PositioningProps;
        }>;
        loading?: boolean;
        loadingMessage?: ShorthandValue<DropdownItemProps>;
        moveFocusOnTab?: boolean;
        multiple?: boolean;
        noResultsMessage?: ShorthandValue<DropdownItemProps>;
        onActiveSelectedIndexChange?: (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>, data: DropdownProps) => void;
        onHighlightedIndexChange?: (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>, data: DropdownProps) => void;
        onOpenChange?: (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>, data: DropdownProps) => void;
        onSearchQueryChange?: (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>, data: DropdownProps) => void;
        onChange?: (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>, data: DropdownProps) => void;
        open?: boolean;
        placeholder?: string;
        renderItem?: ShorthandRenderFunction<DropdownItemProps>;
        renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;
        search?: boolean | ((items: ShorthandCollection<DropdownItemProps, never>, searchQuery: string) => ShorthandCollection<DropdownItemProps, never>);
        searchInput?: ShorthandValue<DropdownSearchInputProps>;
        searchQuery?: string;
        toggleIndicator?: ShorthandValue<BoxProps>;
        triggerButton?: ShorthandValue<ButtonProps>;
        value?: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | import("../../types").ObjectShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps, never>;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownProps, DropdownState>;
        variables?: any;
        align?: import("../../utils/positioner").Alignment;
        flipBoundary?: import("../../utils/positioner").Boundary;
        overflowBoundary?: import("../../utils/positioner").Boundary;
        position?: import("../../utils/positioner").Position;
        positionFixed?: boolean;
        offset?: import("../../utils/positioner").Offset;
        unstable_pinned?: boolean;
        ref?: React.LegacyRef<HTMLDivElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
    }): JSX.Element;
} & {
    contextType: any;
    displayName: string;
    getDerivedStateFromProps: React.GetDerivedStateFromProps<any, any>;
    handledProps: string[];
    autoControlledProps: string[];
    getAutoControlledStateFromProps: typeof Dropdown.getAutoControlledStateFromProps;
    unhandledProps: string[];
    deprecated_className: string;
    _handledPropsCache: string[];
    Item: {
        <Tag_1>(x: {
            as: Tag_1;
        } & DropdownItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            active?: boolean;
            accessibilityItemProps?: any;
            content?: ShorthandValue<BoxProps>;
            checkable?: boolean;
            checkableIndicator?: ShorthandValue<BoxProps>;
            disabled?: boolean;
            header?: ShorthandValue<BoxProps>;
            image?: ShorthandValue<import("../..").ImageProps>;
            isFromKeyboard?: boolean;
            onClick?: import("../../types").ComponentEventHandler<DropdownItemProps>;
            selected?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownItemProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("content" | "active" | "disabled" | "header" | "image" | "className" | "onClick" | "variables" | "styles" | "selected" | "design" | "isFromKeyboard" | "accessibilityItemProps" | "checkable" | "checkableIndicator")[];
        create: import("../../utils").ShorthandFactory<DropdownItemProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<DropdownItemProps>;
    };
    a11yStatusCleanupTime: number;
    charKeyPressedCleanupTime: number;
    SearchInput: {
        <Tag_2>(x: {
            as: Tag_2;
        } & DropdownSearchInputProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibilityComboboxProps?: any;
            accessibilityInputProps?: any;
            disabled?: boolean;
            inline?: boolean;
            inputRef?: React.Ref<HTMLElement>;
            onFocus?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onInputBlur?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onInputKeyDown?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            onKeyUp?: import("../../types").ComponentEventHandler<DropdownSearchInputProps>;
            placeholder?: string;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownSearchInputProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("inline" | "disabled" | "className" | "placeholder" | "onFocus" | "onKeyUp" | "variables" | "styles" | "design" | "inputRef" | "accessibilityComboboxProps" | "accessibilityInputProps" | "onInputBlur" | "onInputKeyDown")[];
        create: import("../../utils").ShorthandFactory<DropdownSearchInputProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<DropdownSearchInputProps>;
    };
    SelectedItem: {
        <Tag_3>(x: {
            as: Tag_3;
        } & DropdownSelectedItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            active?: boolean;
            header?: ShorthandValue<BoxProps>;
            icon?: ShorthandValue<BoxProps>;
            image?: ShorthandValue<import("../..").ImageProps>;
            onClick?: import("../../types").ComponentEventHandler<DropdownSelectedItemProps>;
            onKeyDown?: import("../../types").ComponentKeyboardEventHandler<DropdownSelectedItemProps>;
            onRemove?: import("../../types").ComponentEventHandler<DropdownSelectedItemProps>;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<DropdownSelectedItemProps, any>;
            variables?: any;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        contextType: any;
        displayName: string;
        handledProps: string[];
        unhandledProps: string[];
        create: import("../../utils").ShorthandFactory<DropdownSelectedItemProps>;
        deprecated_className: string;
        _handledPropsCache: string[];
    };
};
/**
 * A Dropdown allows user to select one or more values from a list of options.
 * Can be created with search and multi-selection capabilities.
 *
 * @accessibility
 * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.
 * @accessibilityIssues
 * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)
 */
export default _default;
