{"version":3,"sources":["components/Table/Table.tsx"],"names":["tableBehavior","getElementType","useTelemetry","useUnhandledProps","useAccessibility","useStyles","customPropTypes","PropTypes","React","commonPropTypes","childrenExist","createShorthandFactory","mergeComponentVariables","TableRow","TableCell","ThemeContext","withSafeTypeForAs","handleVariablesOverrides","variables","predefinedProps","tableClassName","tableSlotClassNames","header","Table","props","context","useContext","displayName","telemetry","setStart","setEnd","children","rows","compact","accessibility","className","design","styles","hasChildren","ElementType","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","renderRows","row","index","onClick","e","overrideProps","create","defaultProps","renderHeader","headerRowProps","element","unstable_wrapWithFocusZone","root","Cell","Row","Component","propTypes","createCommon","content","itemShorthand","collectionShorthand","bool","Object","keys","as"],"mappings":"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","sourcesContent":["import { Accessibility, tableBehavior, TableBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  childrenExist,\n  createShorthandFactory,\n} from '../../utils';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport TableRow, { TableRowProps } from './TableRow';\nimport TableCell from './TableCell';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  WithAsProp,\n  ShorthandCollection,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<TableBehaviorProps>;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nexport const tableClassName = 'ui-table';\nexport const tableSlotClassNames: TableSlotClassNames = {\n  header: `${tableClassName}__header`,\n};\n\nexport type TableStylesProps = never;\n\nexport const Table: React.FC<WithAsProp<TableProps>> &\n  FluentComponentStaticProps<TableProps> & {\n    Cell: typeof TableCell;\n    Row: typeof TableRow;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Table.displayName, context.telemetry);\n  setStart();\n  const { children, rows, header, compact, accessibility, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Table.handledProps, props);\n\n  const getA11yProps = useAccessibility<TableBehaviorProps>(accessibility, {\n    debugName: Table.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableStylesProps>(Table.displayName, {\n    className: tableClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderRows = () => {\n    return _.map(rows, (row: TableRowProps, index: number) => {\n      const props = {\n        compact,\n        onClick: (e, props) => {\n          _.invoke(row, 'onClick', e, props);\n        },\n      } as TableRowProps;\n      const overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(row, {\n        defaultProps: () =>\n          getA11yProps('row', {\n            ...props,\n          }),\n        overrideProps,\n      });\n    });\n  };\n\n  const renderHeader = () => {\n    if (!header) {\n      return null;\n    }\n\n    const headerRowProps = {\n      header: true,\n      compact,\n      className: tableSlotClassNames.header,\n    } as TableRowProps;\n\n    const overrideProps = handleVariablesOverrides(variables);\n\n    return TableRow.create(header, {\n      defaultProps: () =>\n        getA11yProps('row', {\n          ...headerRowProps,\n        }),\n      overrideProps,\n    });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren && children}\n      {/* <thead> */}\n      {!hasChildren && renderHeader()}\n      {/* </thead> */}\n      {/* <tbody> */}\n      {!hasChildren && renderRows()}\n      {/* </tbody> */}\n    </ElementType>,\n  );\n  setEnd();\n  return element;\n};\n\nTable.displayName = 'Table';\n\nTable.Cell = TableCell;\n\nTable.Row = TableRow;\n\nTable.create = createShorthandFactory({\n  Component: Table,\n});\n\nTable.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool,\n};\n\nTable.handledProps = Object.keys(Table.propTypes) as any;\n\nTable.defaultProps = {\n  as: 'div',\n  accessibility: tableBehavior as Accessibility,\n};\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport default withSafeTypeForAs<typeof Table, TableProps, 'div'>(Table);\n"],"file":"Table.js"}