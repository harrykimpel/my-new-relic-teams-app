import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _map from "lodash/map";
import _invoke from "lodash/invoke";
import _findIndex from "lodash/findIndex";
// TODO:
// vertical - padding variable?
import { radioGroupBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { AutoControlledComponent, childrenExist, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';
import RadioGroupItem from './RadioGroupItem';
import { withSafeTypeForAs } from '../../types';
export var radioGroupClassName = 'ui-radiogroup';

var RadioGroup =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(RadioGroup, _AutoControlledCompon);

  function RadioGroup() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, RadioGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      nextItem: function nextItem(event) {
        return _this.setCheckedItem(event, 1);
      },
      prevItem: function prevItem(event) {
        return _this.setCheckedItem(event, -1);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getItemProps", function (item) {
      return item.props || item;
    });

    _defineProperty(_assertThisInitialized(_this), "setCheckedItem", function (event, direction) {
      var nextItem = _this.findNextEnabledCheckedItem(direction);

      if (nextItem) {
        _this.setCheckedValue({
          checkedValue: nextItem.value,
          shouldFocus: true,
          event: event,
          props: nextItem
        });
      }

      event.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "findNextEnabledCheckedItem", function (direction) {
      if (!_this.props.items || !_this.props.items.length) {
        return undefined;
      }

      var currentIndex = // if none of the values selected, set current index to the first item
      _this.state.checkedValue !== undefined ? _findIndex(_this.props.items, function (item) {
        return _this.getItemProps(item).value === _this.state.checkedValue;
      }) : 0;

      for (var newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {
        if (newIndex < 0) {
          newIndex = _this.props.items.length - 1;
        } else if (newIndex >= _this.props.items.length) {
          newIndex = 0;
        }

        if (newIndex === currentIndex) {
          return undefined;
        }

        var itemProps = _this.getItemProps(_this.props.items[newIndex]);

        if (!itemProps.disabled) {
          return itemProps;
        }
      }

      return undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "handleItemOverrides", function (predefinedProps) {
      return {
        checked: typeof _this.state.checkedValue !== 'undefined' && _this.state.checkedValue === predefinedProps.value,
        onClick: function onClick(event, itemProps) {
          var value = itemProps.value,
              disabled = itemProps.disabled;

          if (!disabled && value !== _this.state.checkedValue) {
            _this.setCheckedValue({
              checkedValue: value,
              shouldFocus: false,
              event: event,
              props: itemProps
            });
          }

          _invoke(predefinedProps, 'onClick', event, itemProps);
        },
        shouldFocus: _this.state.shouldFocus
      };
    });

    _defineProperty(_assertThisInitialized(_this), "renderItems", function (vertical) {
      var items = _this.props.items;
      var isNoneValueSelected = _this.state.checkedValue === undefined;
      return _map(items, function (item, index) {
        return RadioGroupItem.create(item, {
          defaultProps: function defaultProps() {
            return Object.assign({
              vertical: vertical
            }, index === 0 && isNoneValueSelected && {
              tabIndex: 0
            });
          },
          overrideProps: _this.handleItemOverrides
        });
      });
    });

    return _this;
  }

  _createClass(RadioGroup, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          vertical = _this$props.vertical;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), childrenExist(children) ? children : this.renderItems(vertical));
    }
  }, {
    key: "setCheckedValue",
    value: function setCheckedValue(_ref2) {
      var checkedValue = _ref2.checkedValue,
          shouldFocus = _ref2.shouldFocus,
          event = _ref2.event,
          props = _ref2.props;
      this.setState({
        checkedValue: checkedValue,
        shouldFocus: shouldFocus
      });

      _invoke(this.props, 'onCheckedValueChange', event, props);
    }
  }]);

  return RadioGroup;
}(AutoControlledComponent);
/**
 * A RadioGroup allows user to select a value from a small set of mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.
 */


_defineProperty(RadioGroup, "displayName", 'RadioGroup');

_defineProperty(RadioGroup, "deprecated_className", radioGroupClassName);

_defineProperty(RadioGroup, "create", void 0);

_defineProperty(RadioGroup, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  items: customPropTypes.collectionShorthand,
  onCheckedValueChange: PropTypes.func,
  vertical: PropTypes.bool
}));

_defineProperty(RadioGroup, "defaultProps", {
  as: 'div',
  accessibility: radioGroupBehavior
});

_defineProperty(RadioGroup, "autoControlledProps", ['checkedValue']);

_defineProperty(RadioGroup, "Item", RadioGroupItem);

export default withSafeTypeForAs(RadioGroup);
//# sourceMappingURL=RadioGroup.js.map
