{"version":3,"sources":["components/RadioGroup/RadioGroup.tsx"],"names":["radioGroupBehavior","customPropTypes","PropTypes","React","AutoControlledComponent","childrenExist","commonPropTypes","rtlTextContainer","applyAccessibilityKeyHandlers","RadioGroupItem","withSafeTypeForAs","radioGroupClassName","RadioGroup","nextItem","event","setCheckedItem","prevItem","item","props","direction","findNextEnabledCheckedItem","setCheckedValue","checkedValue","value","shouldFocus","preventDefault","items","length","undefined","currentIndex","state","getItemProps","newIndex","itemProps","disabled","predefinedProps","checked","onClick","vertical","isNoneValueSelected","index","create","defaultProps","tabIndex","overrideProps","handleItemOverrides","ElementType","classes","accessibility","unhandledProps","children","attributes","root","getAttributes","forElements","keyHandlers","renderItems","setState","createCommon","content","oneOfType","number","string","defaultCheckedValue","collectionShorthand","onCheckedValueChange","func","bool","as"],"mappings":"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","sourcesContent":["// TODO:\n// vertical - padding variable?\nimport { Accessibility, radioGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport RadioGroupItem, { RadioGroupItemProps } from './RadioGroupItem';\nimport { WithAsProp, ComponentEventHandler, withSafeTypeForAs, ShorthandCollection } from '../../types';\n\nexport interface RadioGroupProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Value of the currently checked radio item. */\n  checkedValue?: number | string;\n\n  /**\n   * Called after radio group value is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All value props.\n   */\n  onCheckedValueChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Initial checkedValue value. */\n  defaultCheckedValue?: number | string;\n\n  /** Shorthand array of props for RadioGroup. */\n  items?: ShorthandCollection<RadioGroupItemProps>;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupClassName = 'ui-radiogroup';\n\nclass RadioGroup extends AutoControlledComponent<WithAsProp<RadioGroupProps>, any> {\n  static displayName = 'RadioGroup';\n\n  static deprecated_className = radioGroupClassName;\n\n  static create: ShorthandFactory<RadioGroupProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    items: customPropTypes.collectionShorthand,\n    onCheckedValueChange: PropTypes.func,\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: radioGroupBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['checkedValue'];\n\n  static Item = RadioGroupItem;\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, vertical } = this.props;\n    return (\n      <ElementType\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : this.renderItems(vertical)}\n      </ElementType>\n    );\n  }\n\n  actionHandlers = {\n    nextItem: event => this.setCheckedItem(event, 1),\n    prevItem: event => this.setCheckedItem(event, -1),\n  };\n\n  getItemProps = (item): RadioGroupItemProps => {\n    return (item as React.ReactElement<RadioGroupItemProps>).props || item;\n  };\n\n  setCheckedItem = (event, direction) => {\n    const nextItem = this.findNextEnabledCheckedItem(direction);\n\n    if (nextItem) {\n      this.setCheckedValue({\n        checkedValue: nextItem.value,\n        shouldFocus: true,\n        event,\n        props: nextItem,\n      });\n    }\n    event.preventDefault();\n  };\n\n  findNextEnabledCheckedItem = (direction): RadioGroupItemProps => {\n    if (!this.props.items || !this.props.items.length) {\n      return undefined;\n    }\n\n    const currentIndex =\n      // if none of the values selected, set current index to the first item\n      this.state.checkedValue !== undefined\n        ? _.findIndex(this.props.items, item => this.getItemProps(item).value === this.state.checkedValue)\n        : 0;\n\n    for (let newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n      if (newIndex < 0) {\n        newIndex = this.props.items.length - 1;\n      } else if (newIndex >= this.props.items.length) {\n        newIndex = 0;\n      }\n\n      if (newIndex === currentIndex) {\n        return undefined;\n      }\n\n      const itemProps = this.getItemProps(this.props.items[newIndex]);\n      if (!itemProps.disabled) {\n        return itemProps;\n      }\n    }\n    return undefined;\n  };\n\n  handleItemOverrides = predefinedProps => ({\n    checked: typeof this.state.checkedValue !== 'undefined' && this.state.checkedValue === predefinedProps.value,\n    onClick: (event, itemProps) => {\n      const { value, disabled } = itemProps;\n      if (!disabled && value !== this.state.checkedValue) {\n        this.setCheckedValue({ checkedValue: value, shouldFocus: false, event, props: itemProps });\n      }\n      _.invoke(predefinedProps, 'onClick', event, itemProps);\n    },\n    shouldFocus: this.state.shouldFocus,\n  });\n\n  renderItems = (vertical: boolean) => {\n    const { items } = this.props;\n    const isNoneValueSelected = this.state.checkedValue === undefined;\n\n    return _.map(items, (item, index) =>\n      RadioGroupItem.create(item, {\n        defaultProps: () => ({\n          vertical,\n          ...(index === 0 && isNoneValueSelected && { tabIndex: 0 }),\n        }),\n        overrideProps: this.handleItemOverrides,\n      }),\n    );\n  };\n\n  setCheckedValue({\n    checkedValue,\n    shouldFocus,\n    event,\n    props,\n  }: {\n    checkedValue: number | string;\n    shouldFocus: boolean;\n    event: React.SyntheticEvent;\n    props: RadioGroupItemProps;\n  }) {\n    this.setState({ checkedValue, shouldFocus });\n    _.invoke(this.props, 'onCheckedValueChange', event, props);\n  }\n}\n\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n */\nexport default withSafeTypeForAs<typeof RadioGroup, RadioGroupProps>(RadioGroup);\n"],"file":"RadioGroup.js"}