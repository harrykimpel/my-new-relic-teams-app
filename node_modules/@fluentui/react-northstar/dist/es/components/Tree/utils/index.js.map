{"version":3,"sources":["components/Tree/utils/index.ts"],"names":["React","hasSubtree","item","length","removeItemAtIndex","items","itemIndex","slice","getSiblings","itemId","getSiblingsFn","findIndex","id","result","TreeContext","createContext","onFocusFirstChild","onFocusParent","onSiblingsExpand","onTitleClick"],"mappings":";;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAkE;AAC1F,SAAO,CAAC,OAAQA,IAAI,CAAC,OAAD,CAAZ,CAAD,IAA2BA,IAAI,CAAC,OAAD,CAAJ,CAAcC,MAAd,GAAuB,CAAzD;AACD,CAFM;AAIP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAeC,SAAf,EAA4C;AAC3E,sCAAWD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeD,SAAf,CAAX,sBAAyCD,KAAK,CAACE,KAAN,CAAYD,SAAS,GAAG,CAAxB,CAAzC;AACD,CAFM;AAIP;;;;;;;AAMA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACH,KAAD,EAAeI,MAAf,EAAyC;AAClE,WAASC,aAAT,CAAuBL,KAAvB,EAAqC;AACnC,QAAMC,SAAS,GAAGD,KAAK,CAACM,SAAN,CAAgB,UAAAT,IAAI;AAAA,aAAIA,IAAI,CAACU,EAAL,KAAYH,MAAhB;AAAA,KAApB,CAAlB;;AAEA,QAAIH,SAAS,GAAG,CAAC,CAAjB,EAAoB;AAClB,aAAOF,iBAAiB,CAACC,KAAD,EAAQC,SAAR,CAAxB;AACD;;AALkC;AAAA;AAAA;;AAAA;AAOnC,2BAAmBD,KAAnB,8HAA0B;AAAA,YAAfH,IAAe;;AACxB,YAAIA,IAAI,CAACG,KAAT,EAAgB;AACd,cAAMQ,MAAM,GAAGH,aAAa,CAACR,IAAI,CAACG,KAAN,CAA5B;;AAEA,cAAIQ,MAAJ,EAAY;AACV,mBAAOA,MAAP;AACD;AACF;AACF;AAfkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBnC,WAAO,IAAP;AACD;;AAED,SAAOH,aAAa,CAACL,KAAD,CAApB;AACD,CAtBM;AA+BP,OAAO,IAAMS,WAAW,GAAGd,KAAK,CAACe,aAAN,CAA4C;AACrEC,EAAAA,iBAAiB,OADoD;AAErEC,EAAAA,aAAa,OAFwD;AAGrEC,EAAAA,gBAAgB,OAHqD;AAIrEC,EAAAA,YAAY;AAJyD,CAA5C,CAApB","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { TreeItemProps } from '../TreeItem';\nimport { ShorthandValue } from '../../../types';\n\nexport const hasSubtree = (item: TreeItemProps | ShorthandValue<TreeItemProps>): boolean => {\n  return !_.isNil(item['items']) && item['items'].length > 0;\n};\n\nexport const removeItemAtIndex = (items: any[], itemIndex: number): any[] => {\n  return [...items.slice(0, itemIndex), ...items.slice(itemIndex + 1)];\n};\n\n/**\n * Looks for the item inside the nested items array and returns its siblings.\n * @param {any[]} items The nested items array.\n * @param {string} itemId The id of the item to return the children of.\n * @returns {any[]} The item siblings\n */\nexport const getSiblings = (items: any[], itemId: string): any[] => {\n  function getSiblingsFn(items: any[]) {\n    const itemIndex = items.findIndex(item => item.id === itemId);\n\n    if (itemIndex > -1) {\n      return removeItemAtIndex(items, itemIndex);\n    }\n\n    for (const item of items) {\n      if (item.items) {\n        const result = getSiblingsFn(item.items);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  return getSiblingsFn(items);\n};\n\nexport interface TreeRenderContextValue {\n  onFocusFirstChild: (itemId: string) => void;\n  onFocusParent: (itemId: string) => void;\n  onSiblingsExpand: (e: React.SyntheticEvent, itemProps: TreeItemProps) => void;\n  onTitleClick: (e: React.SyntheticEvent, itemProps: TreeItemProps, executeSelection?: boolean) => void;\n}\n\nexport const TreeContext = React.createContext<TreeRenderContextValue>({\n  onFocusFirstChild: _.noop,\n  onFocusParent: _.noop,\n  onSiblingsExpand: _.noop,\n  onTitleClick: _.noop,\n});\n"],"file":"index.js"}