import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _noop from "lodash/noop";
import _isNil from "lodash/isNil";
import * as React from 'react';
export var hasSubtree = function hasSubtree(item) {
  return !_isNil(item['items']) && item['items'].length > 0;
};
export var removeItemAtIndex = function removeItemAtIndex(items, itemIndex) {
  return [].concat(_toConsumableArray(items.slice(0, itemIndex)), _toConsumableArray(items.slice(itemIndex + 1)));
};
/**
 * Looks for the item inside the nested items array and returns its siblings.
 * @param {any[]} items The nested items array.
 * @param {string} itemId The id of the item to return the children of.
 * @returns {any[]} The item siblings
 */

export var getSiblings = function getSiblings(items, itemId) {
  function getSiblingsFn(items) {
    var itemIndex = items.findIndex(function (item) {
      return item.id === itemId;
    });

    if (itemIndex > -1) {
      return removeItemAtIndex(items, itemIndex);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;

        if (item.items) {
          var result = getSiblingsFn(item.items);

          if (result) {
            return result;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return null;
  }

  return getSiblingsFn(items);
};
export var TreeContext = React.createContext({
  onFocusFirstChild: _noop,
  onFocusParent: _noop,
  onSiblingsExpand: _noop,
  onTitleClick: _noop
});
//# sourceMappingURL=index.js.map
