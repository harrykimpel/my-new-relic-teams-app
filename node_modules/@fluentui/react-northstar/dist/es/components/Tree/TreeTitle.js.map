{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","Box","customPropTypes","PropTypes","React","ThemeContext","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","withSafeTypeForAs","treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","selectableParent","expanded","indeterminate","getA11Props","debugName","actionHandlers","performClick","e","preventDefault","stopPropagation","handleClick","performSelection","mapPropsToBehavior","rtl","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","selectIndicator","create","defaultProps","as","element","root","onClick","getAttributes","forElements","propTypes","createCommon","bool","number","func","shorthandAllowingChildren","Object","keys","Component","mappedProp"],"mappings":";;AAAA,SAAwBA,iBAAxB,QAAyE,yBAAzE;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,EAA8DC,SAA9D,EAAyEC,YAAzE,QAA6F,0BAA7F;AACA,OAAOC,GAAP,MAA8B,YAA9B;AAEA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,SACEC,aADF,EAEEC,sBAFF,EAGEC,eAHF,EAOEC,gBAPF,QAQO,aARP;AASA,SAKEC,iBALF,QAOO,aAPP;AAgEA,OAAO,IAAMC,kBAAkB,GAAG,gBAA3B;AAEP,OAAO,IAAMC,uBAAuB,GAAG;AACrCC,EAAAA,SAAS,YAAKF,kBAAL;AAD4B,CAAhC;;AAGP,IAAMG,SAA4F,GAAG,SAA/FA,SAA+F,CAAAC,KAAK,EAAI;AAC5G,MAAMC,OAAgC,GAAGZ,KAAK,CAACa,UAAN,CAAiBZ,YAAjB,CAAzC;;AAD4G,sBAE/EL,YAAY,CAACc,SAAS,CAACI,WAAX,EAAwBF,OAAO,CAACG,SAAhC,CAFmE;AAAA,MAEpGC,QAFoG,iBAEpGA,QAFoG;AAAA,MAE1FC,MAF0F,iBAE1FA,MAF0F;;AAG5GD,EAAAA,QAAQ;AAHoG,MAM1GE,aAN0G,GAwBxGP,KAxBwG,CAM1GO,aAN0G;AAAA,MAO1GC,QAP0G,GAwBxGR,KAxBwG,CAO1GQ,QAP0G;AAAA,MAQ1GC,SAR0G,GAwBxGT,KAxBwG,CAQ1GS,SAR0G;AAAA,MAS1GC,OAT0G,GAwBxGV,KAxBwG,CAS1GU,OAT0G;AAAA,MAU1GC,MAV0G,GAwBxGX,KAxBwG,CAU1GW,MAV0G;AAAA,MAW1GC,UAX0G,GAwBxGZ,KAxBwG,CAW1GY,UAX0G;AAAA,MAY1GC,KAZ0G,GAwBxGb,KAxBwG,CAY1Ga,KAZ0G;AAAA,MAa1GC,KAb0G,GAwBxGd,KAxBwG,CAa1Gc,KAb0G;AAAA,MAc1GC,MAd0G,GAwBxGf,KAxBwG,CAc1Ge,MAd0G;AAAA,MAe1GC,QAf0G,GAwBxGhB,KAxBwG,CAe1GgB,QAf0G;AAAA,MAgB1GC,SAhB0G,GAwBxGjB,KAxBwG,CAgB1GiB,SAhB0G;AAAA,MAiB1GC,kBAjB0G,GAwBxGlB,KAxBwG,CAiB1GkB,kBAjB0G;AAAA,MAkB1GC,QAlB0G,GAwBxGnB,KAxBwG,CAkB1GmB,QAlB0G;AAAA,MAmB1GC,QAnB0G,GAwBxGpB,KAxBwG,CAmB1GoB,QAnB0G;AAAA,MAoB1GC,UApB0G,GAwBxGrB,KAxBwG,CAoB1GqB,UApB0G;AAAA,MAqB1GC,gBArB0G,GAwBxGtB,KAxBwG,CAqB1GsB,gBArB0G;AAAA,MAsB1GC,QAtB0G,GAwBxGvB,KAxBwG,CAsB1GuB,QAtB0G;AAAA,MAuB1GC,aAvB0G,GAwBxGxB,KAxBwG,CAuB1GwB,aAvB0G;AA0B5G,MAAMC,WAAW,GAAG1C,gBAAgB,CAACwB,aAAD,EAAgB;AAClDmB,IAAAA,SAAS,EAAE3B,SAAS,CAACI,WAD6B;AAElDwB,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,sBAAAC,CAAC,EAAI;AACjBA,QAAAA,CAAC,CAACC,cAAF;AACAD,QAAAA,CAAC,CAACE,eAAF;AACAC,QAAAA,WAAW,CAACH,CAAD,CAAX;AACD,OALa;AAMdI,MAAAA,gBAAgB,EAAE,0BAAAJ,CAAC,EAAI;AACrBA,QAAAA,CAAC,CAACC,cAAF;AACAD,QAAAA,CAAC,CAACE,eAAF;AACAC,QAAAA,WAAW,CAACH,CAAD,CAAX;AACD;AAVa,KAFkC;AAclDK,IAAAA,kBAAkB,EAAE;AAAA,aAAO;AACzBtB,QAAAA,UAAU,EAAVA,UADyB;AAEzBC,QAAAA,KAAK,EAALA,KAFyB;AAGzBC,QAAAA,KAAK,EAALA,KAHyB;AAIzBE,QAAAA,QAAQ,EAARA,QAJyB;AAKzBI,QAAAA,QAAQ,EAARA,QALyB;AAMzBC,QAAAA,UAAU,EAAVA,UANyB;AAOzBC,QAAAA,gBAAgB,EAAhBA;AAPyB,OAAP;AAAA,KAd8B;AAuBlDa,IAAAA,GAAG,EAAElC,OAAO,CAACkC;AAvBqC,GAAhB,CAApC;;AA1B4G,mBAmDhEnD,SAAS,CAAuBe,SAAS,CAACI,WAAjC,EAA8C;AACjGM,IAAAA,SAAS,EAAEb,kBADsF;AAEjGwC,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7B3B,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,MAAM,EAANA,MAF6B;AAG7BI,QAAAA,MAAM,EAANA,MAH6B;AAI7BE,QAAAA,SAAS,EAATA,SAJ6B;AAK7BG,QAAAA,QAAQ,EAARA,QAL6B;AAM7BE,QAAAA,gBAAgB,EAAhBA,gBAN6B;AAO7BH,QAAAA,QAAQ,EAARA,QAP6B;AAQ7BE,QAAAA,UAAU,EAAVA,UAR6B;AAS7BG,QAAAA,aAAa,EAAbA;AAT6B,OAAP;AAAA,KAFyE;AAajGW,IAAAA,GAAG,EAAElC,OAAO,CAACkC;AAboF,GAA9C,CAnDuD;AAAA,MAmDpGE,OAnDoG,cAmDpGA,OAnDoG;AAAA,MAmDnFC,cAnDmF,cAmD3FvB,MAnD2F;;AAmE5G,MAAMwB,WAAW,GAAG1D,cAAc,CAACmB,KAAD,CAAlC;AACA,MAAMwC,cAAc,GAAG1D,iBAAiB,CAACiB,SAAS,CAAC0C,YAAX,EAAyBzC,KAAzB,CAAxC;;AACA,MAAMgC,WAAW,GAAG,SAAdA,WAAc,CAAAH,CAAC,EAAI;AACvB,YAAS7B,KAAT,EAAgB,SAAhB,EAA2B6B,CAA3B,EAA8B7B,KAA9B;AACD,GAFD;;AAIA,MAAM0C,eAAe,GAAGxD,GAAG,CAACyD,MAAJ,CAAWzB,kBAAX,EAA+B;AACrD0B,IAAAA,YAAY,EAAE;AAAA;AACZC,QAAAA,EAAE,EAAE,MADQ;AAEZzB,QAAAA,QAAQ,EAARA;AAFY,SAGRE,gBAAgB,IAAI,CAAC,SAAUJ,kBAAV,CAArB,IAAsD;AAAEK,QAAAA,QAAQ,EAARA;AAAF,OAH9C,MAITE,WAAW,CAAC,WAAD;AACZhB,QAAAA,SAAS,EAAEZ,uBAAuB,CAACC;AADvB,SAER,CAAEuB,UAAU,IAAI,CAACT,UAAhB,IAAgCU,gBAAgB,IAAIC,QAArD,KACF,SAAUL,kBAAV,CADE,IAC+B;AAC/BH,QAAAA,MAAM,EAAEuB,cAAc,CAACpB;AADQ,OAHvB,EAJF;AAAA;AADuC,GAA/B,CAAxB;AAeA,MAAM4B,OAAO,GACX,oBAAC,WAAD,EACMrB,WAAW,CAAC,MAAD;AACbhB,IAAAA,SAAS,EAAE4B,OAAO,CAACU,IADN;AAEbC,IAAAA,OAAO,EAAEhB,WAFI;AAGbZ,IAAAA,QAAQ,EAARA;AAHa,KAIV1B,gBAAgB,CAACuD,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAC1C,QAAD,EAAWE,OAAX;AAAf,GAA/B,CAJU,MAKV8B,cALU,EADjB,EASGjD,aAAa,CAACiB,QAAD,CAAb,GAA0BA,QAA1B,GAAqCE,OATxC,EAWGW,UAAU,IAAIqB,eAXjB,CADF;AAeApC,EAAAA,MAAM;AAEN,SAAOwC,OAAP;AACD,CA1GD;;AA4GA/C,SAAS,CAACI,WAAV,GAAwB,WAAxB;AAEAJ,SAAS,CAACoD,SAAV,qBACK1D,eAAe,CAAC2D,YAAhB,EADL;AAEExC,EAAAA,UAAU,EAAExB,SAAS,CAACiE,IAFxB;AAGEvC,EAAAA,KAAK,EAAE1B,SAAS,CAACkE,MAHnB;AAIEzC,EAAAA,KAAK,EAAEzB,SAAS,CAACkE,MAJnB;AAKEN,EAAAA,OAAO,EAAE5D,SAAS,CAACmE,IALrB;AAMEhC,EAAAA,QAAQ,EAAEnC,SAAS,CAACiE,IANtB;AAOEjC,EAAAA,QAAQ,EAAEhC,SAAS,CAACiE,IAPtB;AAQEhC,EAAAA,UAAU,EAAEjC,SAAS,CAACiE,IARxB;AASE/B,EAAAA,gBAAgB,EAAElC,SAAS,CAACiE,IAT9B;AAUErC,EAAAA,QAAQ,EAAE5B,SAAS,CAACkE,MAVtB;AAWEpC,EAAAA,kBAAkB,EAAE/B,eAAe,CAACqE,yBAXtC;AAYEhC,EAAAA,aAAa,EAAEpC,SAAS,CAACiE;AAZ3B;AAcAtD,SAAS,CAAC6C,YAAV,GAAyB;AACvBC,EAAAA,EAAE,EAAE,GADmB;AAEvB3B,EAAAA,kBAAkB,EAAE,EAFG;AAGvBX,EAAAA,aAAa,EAAE3B;AAHQ,CAAzB;AAKAmB,SAAS,CAAC0C,YAAV,GAAyBgB,MAAM,CAACC,IAAP,CAAY3D,SAAS,CAACoD,SAAtB,CAAzB;AAEApD,SAAS,CAAC4C,MAAV,GAAmBnD,sBAAsB,CAAC;AACxCmE,EAAAA,SAAS,EAAE5D,SAD6B;AAExC6D,EAAAA,UAAU,EAAE;AAF4B,CAAD,CAAzC;AAKA;;;;AAGA,eAAejE,iBAAiB,CAAwCI,SAAxC,CAAhC","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport Box, { BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandValue,\n} from '../../types';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** Whether or not tree title is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'selectableParent' | 'indeterminate'\n>;\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\nconst TreeTitle: React.FC<WithAsProp<TreeTitleProps>> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    selectableParent,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n      selected,\n      selectableParent,\n      disabled,\n      selectable,\n      indeterminate,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...(selectableParent && !_.isEmpty(selectionIndicator) && { expanded }),\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        ...(((selectable && !hasSubtree) || (selectableParent && expanded)) &&\n          _.isEmpty(selectionIndicator) && {\n            styles: resolvedStyles.selectionIndicator,\n          }),\n      }),\n    }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n\n      {selectable && selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport default withSafeTypeForAs<typeof TreeTitle, TreeTitleProps, 'a'>(TreeTitle);\n"],"file":"TreeTitle.js"}