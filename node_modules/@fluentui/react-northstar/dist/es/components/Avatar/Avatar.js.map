{"version":3,"sources":["components/Avatar/Avatar.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","customPropTypes","PropTypes","React","ThemeContext","Box","Image","Label","Status","withSafeTypeForAs","createShorthandFactory","commonPropTypes","avatarClassName","Avatar","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","getInitials","label","icon","image","name","square","size","status","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","imageElement","create","defaultProps","fluid","avatar","title","iconElement","labelElement","content","circular","hasGlyph","result","root","reducedName","replace","initials","split","filter","item","map","charAt","reduce","accumulator","currentValue","length","propTypes","createCommon","children","string","shorthandAllowingChildren","itemShorthandWithoutJSX","itemShorthand","bool","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport Box, { BoxProps } from '../Box/Box';\nimport Image, { ImageProps } from '../Image/Image';\nimport Label, { LabelProps } from '../Label/Label';\nimport Status, { StatusProps } from '../Status/Status';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\n\nexport interface AvatarProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Avatar can contain icon. It will be rendered only if the image is not present. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for the image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Shorthand for the label. */\n  label?: ShorthandValue<LabelProps>;\n\n  /** The name used for displaying the initials of the avatar if the image is not provided. */\n  name?: string;\n\n  /** The avatar can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n\n  /** Shorthand for the status of the user. */\n  status?: ShorthandValue<StatusProps>;\n\n  /** Custom method for generating the initials from the name property, which is shown if no image is provided. */\n  getInitials?: (name: string) => string;\n}\n\nexport type AvatarStylesProps = Pick<AvatarProps, 'size' | 'square'>;\nexport const avatarClassName = 'ui-avatar';\n\nconst Avatar: React.FC<WithAsProp<AvatarProps>> & FluentComponentStaticProps<AvatarProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Avatar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    className,\n    design,\n    getInitials,\n    label,\n    icon,\n    image,\n    name,\n    square,\n    size,\n    status,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Avatar.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles(Avatar.displayName, {\n    className: avatarClassName,\n    mapPropsToStyles: () => ({ size, square }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11Props('image', {\n        fluid: true,\n        avatar: !square,\n        title: name,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        title: name,\n        styles: resolvedStyles.icon,\n      }),\n  });\n\n  const labelElement = Label.create(label || {}, {\n    defaultProps: () =>\n      getA11Props('label', {\n        content: getInitials(name),\n        circular: !square,\n        title: name,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const hasGlyph = !!image || !!icon;\n\n  const result = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {hasGlyph && (imageElement || iconElement)}\n      {!hasGlyph && labelElement}\n      {Status.create(status, {\n        defaultProps: () =>\n          getA11Props('status', {\n            size,\n            styles: resolvedStyles.status,\n          }),\n      })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAvatar.displayName = 'Avatar';\n\nAvatar.defaultProps = {\n  size: 'medium',\n  getInitials(name: string) {\n    if (!name) {\n      return '';\n    }\n\n    const reducedName = name\n      .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n      .replace(/\\s*{.*?}\\s*/g, ' ')\n      .replace(/\\s*\\[.*?]\\s*/g, ' ');\n\n    const initials = reducedName\n      .split(' ')\n      .filter(item => item !== '')\n      .map(item => item.charAt(0))\n      .reduce((accumulator, currentValue) => accumulator + currentValue);\n\n    if (initials.length > 2) {\n      return initials.charAt(0) + initials.charAt(initials.length - 1);\n    }\n    return initials;\n  },\n};\n\nAvatar.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  name: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  label: customPropTypes.itemShorthand,\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  status: customPropTypes.itemShorthand,\n  getInitials: PropTypes.func,\n};\nAvatar.handledProps = Object.keys(Avatar.propTypes) as any;\n\nAvatar.create = createShorthandFactory({ Component: Avatar, mappedProp: 'name' });\n\n/**\n * An Avatar is a graphical representation of a user.\n */\nexport default withSafeTypeForAs<typeof Avatar, AvatarProps>(Avatar);\n"],"file":"Avatar.js"}