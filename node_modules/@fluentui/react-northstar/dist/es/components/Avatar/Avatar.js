import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import Box from '../Box/Box';
import Image from '../Image/Image';
import Label from '../Label/Label';
import Status from '../Status/Status';
import { withSafeTypeForAs } from '../../types';
import { createShorthandFactory, commonPropTypes } from '../../utils';
export var avatarClassName = 'ui-avatar';

var Avatar = function Avatar(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Avatar.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      getInitials = props.getInitials,
      label = props.label,
      icon = props.icon,
      image = props.image,
      name = props.name,
      square = props.square,
      size = props.size,
      status = props.status,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = useAccessibility(accessibility, {
    debugName: Avatar.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(Avatar.displayName, {
    className: avatarClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        size: size,
        square: square
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    }
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Avatar.handledProps, props);
  var imageElement = Image.create(image, {
    defaultProps: function defaultProps() {
      return getA11Props('image', {
        fluid: true,
        avatar: !square,
        title: name,
        styles: resolvedStyles.image
      });
    }
  });
  var iconElement = Box.create(icon, {
    defaultProps: function defaultProps() {
      return getA11Props('icon', {
        title: name,
        styles: resolvedStyles.icon
      });
    }
  });
  var labelElement = Label.create(label || {}, {
    defaultProps: function defaultProps() {
      return getA11Props('label', {
        content: getInitials(name),
        circular: !square,
        title: name,
        styles: resolvedStyles.label
      });
    }
  });
  var hasGlyph = !!image || !!icon;
  var result = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, unhandledProps)), hasGlyph && (imageElement || iconElement), !hasGlyph && labelElement, Status.create(status, {
    defaultProps: function defaultProps() {
      return getA11Props('status', {
        size: size,
        styles: resolvedStyles.status
      });
    }
  }));
  setEnd();
  return result;
};

Avatar.displayName = 'Avatar';
Avatar.defaultProps = {
  size: 'medium',
  getInitials: function getInitials(name) {
    if (!name) {
      return '';
    }

    var reducedName = name.replace(/\s*\(.*?\)\s*/g, ' ').replace(/\s*{.*?}\s*/g, ' ').replace(/\s*\[.*?]\s*/g, ' ');
    var initials = reducedName.split(' ').filter(function (item) {
      return item !== '';
    }).map(function (item) {
      return item.charAt(0);
    }).reduce(function (accumulator, currentValue) {
      return accumulator + currentValue;
    });

    if (initials.length > 2) {
      return initials.charAt(0) + initials.charAt(initials.length - 1);
    }

    return initials;
  }
};
Avatar.propTypes = Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  name: PropTypes.string,
  icon: customPropTypes.shorthandAllowingChildren,
  image: customPropTypes.itemShorthandWithoutJSX,
  label: customPropTypes.itemShorthand,
  square: PropTypes.bool,
  size: customPropTypes.size,
  status: customPropTypes.itemShorthand,
  getInitials: PropTypes.func
});
Avatar.handledProps = Object.keys(Avatar.propTypes);
Avatar.create = createShorthandFactory({
  Component: Avatar,
  mappedProp: 'name'
});
/**
 * An Avatar is a graphical representation of a user.
 */

export default withSafeTypeForAs(Avatar);
//# sourceMappingURL=Avatar.js.map
