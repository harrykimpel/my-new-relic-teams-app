import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { loaderBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, createShorthandFactory, commonPropTypes, getOrGenerateIdFromShorthand } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';
import Text from '../Text/Text';
export var loaderClassName = 'ui-loader';
export var loaderSlotClassNames = {
  indicator: "".concat(loaderClassName, "__indicator"),
  label: "".concat(loaderClassName, "__label"),
  svg: "".concat(loaderClassName, "__svg")
};
/**
 * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.
 */

var Loader =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Loader, _UIComponent);

  function Loader(props, context) {
    var _this;

    _classCallCheck(this, Loader);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Loader).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "delayTimer", void 0);

    _this.state = {
      visible: _this.props.delay === 0,
      labelId: ''
    };
    return _this;
  }

  _createClass(Loader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var delay = this.props.delay;

      if (delay > 0) {
        // @ts-ignore We have a collision between types from DOM and @types/node
        this.delayTimer = setTimeout(function () {
          _this2.setState({
            visible: true
          });
        }, delay);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.delayTimer);
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          variables = _ref.variables,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          indicator = _this$props.indicator,
          label = _this$props.label,
          svg = _this$props.svg;
      var _this$state = this.state,
          visible = _this$state.visible,
          labelId = _this$state.labelId;
      var svgElement = Box.create(svg, {
        defaultProps: function defaultProps() {
          return {
            className: loaderSlotClassNames.svg,
            styles: styles.svg
          };
        }
      });
      return visible && React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), Box.create(indicator, {
        defaultProps: function defaultProps() {
          return {
            children: svgElement,
            className: loaderSlotClassNames.indicator,
            styles: styles.indicator
          };
        }
      }), Text.create(label, {
        defaultProps: function defaultProps() {
          return {
            className: loaderSlotClassNames.label,
            styles: styles.label,
            id: labelId
          };
        }
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      return {
        labelId: getOrGenerateIdFromShorthand('loader-label-', props.label, state.labelId)
      };
    }
  }]);

  return Loader;
}(UIComponent);

_defineProperty(Loader, "create", void 0);

_defineProperty(Loader, "displayName", 'Loader');

_defineProperty(Loader, "deprecated_className", loaderClassName);

_defineProperty(Loader, "shorthandConfig", void 0);

_defineProperty(Loader, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  delay: PropTypes.number,
  indicator: customPropTypes.itemShorthand,
  inline: PropTypes.bool,
  label: customPropTypes.itemShorthand,
  labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),
  size: customPropTypes.size,
  svg: customPropTypes.itemShorthand
}));

_defineProperty(Loader, "defaultProps", {
  accessibility: loaderBehavior,
  delay: 0,
  indicator: {},
  labelPosition: 'below',
  svg: '',
  size: 'medium'
});

Loader.create = createShorthandFactory({
  Component: Loader,
  mappedProp: 'label'
});
Loader.shorthandConfig = {
  mappedProp: 'label'
};
/**
 * A Loader alerts a user to wait for an activity to complete.
 *
 * @accessibility
 * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.
 */

export default withSafeTypeForAs(Loader);
//# sourceMappingURL=Loader.js.map
