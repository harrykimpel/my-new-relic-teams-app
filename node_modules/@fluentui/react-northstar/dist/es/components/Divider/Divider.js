import * as React from 'react';
import * as PropTypes from 'prop-types';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { useTelemetry, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';
export var dividerClassName = 'ui-divider';
export var Divider = function Divider(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Divider.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      color = props.color,
      fitted = props.fitted,
      size = props.size,
      important = props.important,
      content = props.content,
      vertical = props.vertical,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      accessibility = props.accessibility;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Divider.handledProps, props);
  var getA11yProps = useAccessibility(accessibility, {
    debugName: Divider.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(Divider.displayName, {
    className: dividerClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasContent: childrenExist(children) || !!content,
        color: color,
        fitted: fitted,
        size: size,
        important: important,
        vertical: vertical
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), childrenExist(children) ? children : content);
  setEnd();
  return element;
};
Divider.displayName = 'Divider';
Divider.propTypes = Object.assign({}, commonPropTypes.createCommon({
  color: true
}), {
  fitted: PropTypes.bool,
  size: PropTypes.number,
  important: PropTypes.bool,
  vertical: PropTypes.bool
});
Divider.defaultProps = {
  size: 0
};
Divider.handledProps = Object.keys(Divider.propTypes);
Divider.create = createShorthandFactory({
  Component: Divider,
  mappedProp: 'content'
});
/**
 * A Divider visually segments content.
 */

export default withSafeTypeForAs(Divider);
//# sourceMappingURL=Divider.js.map
