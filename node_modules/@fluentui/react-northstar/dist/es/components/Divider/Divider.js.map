{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["React","PropTypes","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","ThemeContext","withSafeTypeForAs","useTelemetry","useAccessibility","getElementType","useUnhandledProps","useStyles","dividerClassName","Divider","props","context","useContext","displayName","telemetry","setStart","setEnd","children","color","fitted","size","important","content","vertical","className","design","styles","variables","accessibility","ElementType","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","hasContent","mapPropsToInlineStyles","classes","element","root","getAttributes","forElements","propTypes","createCommon","bool","number","defaultProps","Object","keys","create","Component","mappedProp"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SACEC,aADF,EAEEC,sBAFF,EAOEC,eAPF,EAQEC,gBARF,QASO,aATP,C,CAUA;;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAAqBC,iBAArB,QAAmG,aAAnG;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,SAA5E,QAA6F,0BAA7F;AA+BA,OAAO,IAAMC,gBAAgB,GAAG,YAAzB;AAEP,OAAO,IAAMC,OAAsF,GAAG,SAAzFA,OAAyF,CAAAC,KAAK,EAAI;AAC7G,MAAMC,OAAgC,GAAGhB,KAAK,CAACiB,UAAN,CAAiBX,YAAjB,CAAzC;;AAD6G,sBAEhFE,YAAY,CAACM,OAAO,CAACI,WAAT,EAAsBF,OAAO,CAACG,SAA9B,CAFoE;AAAA,MAErGC,QAFqG,iBAErGA,QAFqG;AAAA,MAE3FC,MAF2F,iBAE3FA,MAF2F;;AAG7GD,EAAAA,QAAQ;AAHqG,MAK3GE,QAL2G,GAiBzGP,KAjByG,CAK3GO,QAL2G;AAAA,MAM3GC,KAN2G,GAiBzGR,KAjByG,CAM3GQ,KAN2G;AAAA,MAO3GC,MAP2G,GAiBzGT,KAjByG,CAO3GS,MAP2G;AAAA,MAQ3GC,IAR2G,GAiBzGV,KAjByG,CAQ3GU,IAR2G;AAAA,MAS3GC,SAT2G,GAiBzGX,KAjByG,CAS3GW,SAT2G;AAAA,MAU3GC,OAV2G,GAiBzGZ,KAjByG,CAU3GY,OAV2G;AAAA,MAW3GC,QAX2G,GAiBzGb,KAjByG,CAW3Ga,QAX2G;AAAA,MAY3GC,SAZ2G,GAiBzGd,KAjByG,CAY3Gc,SAZ2G;AAAA,MAa3GC,MAb2G,GAiBzGf,KAjByG,CAa3Ge,MAb2G;AAAA,MAc3GC,MAd2G,GAiBzGhB,KAjByG,CAc3GgB,MAd2G;AAAA,MAe3GC,SAf2G,GAiBzGjB,KAjByG,CAe3GiB,SAf2G;AAAA,MAgB3GC,aAhB2G,GAiBzGlB,KAjByG,CAgB3GkB,aAhB2G;AAkB7G,MAAMC,WAAW,GAAGxB,cAAc,CAACK,KAAD,CAAlC;AACA,MAAMoB,cAAc,GAAGxB,iBAAiB,CAACG,OAAO,CAACsB,YAAT,EAAuBrB,KAAvB,CAAxC;AACA,MAAMsB,YAAY,GAAG5B,gBAAgB,CAAQwB,aAAR,EAAuB;AAC1DK,IAAAA,SAAS,EAAExB,OAAO,CAACI,WADuC;AAE1DqB,IAAAA,GAAG,EAAEvB,OAAO,CAACuB;AAF6C,GAAvB,CAArC;;AApB6G,mBAwBzF3B,SAAS,CAAqBE,OAAO,CAACI,WAA7B,EAA0C;AACrEW,IAAAA,SAAS,EAAEhB,gBAD0D;AAErE2B,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBC,QAAAA,UAAU,EAAEvC,aAAa,CAACoB,QAAD,CAAb,IAA2B,CAAC,CAACK,OADlB;AAEvBJ,QAAAA,KAAK,EAALA,KAFuB;AAGvBC,QAAAA,MAAM,EAANA,MAHuB;AAIvBC,QAAAA,IAAI,EAAJA,IAJuB;AAKvBC,QAAAA,SAAS,EAATA,SALuB;AAMvBE,QAAAA,QAAQ,EAARA;AANuB,OAAP;AAAA,KAFmD;AAUrEc,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7Bb,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAV6C;AAgBrEO,IAAAA,GAAG,EAAEvB,OAAO,CAACuB;AAhBwD,GAA1C,CAxBgF;AAAA,MAwBrGI,OAxBqG,cAwBrGA,OAxBqG;;AA2C7G,MAAMC,OAAO,GACX,oBAAC,WAAD,EACMP,YAAY,CAAC,MAAD;AACdR,IAAAA,SAAS,EAAEc,OAAO,CAACE;AADL,KAEXxC,gBAAgB,CAACyC,aAAjB,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAACzB,QAAD,EAAWK,OAAX;AAAf,GAA/B,CAFW,MAGXQ,cAHW,EADlB,EAOGjC,aAAa,CAACoB,QAAD,CAAb,GAA0BA,QAA1B,GAAqCK,OAPxC,CADF;AAWAN,EAAAA,MAAM;AACN,SAAOuB,OAAP;AACD,CAxDM;AA0DP9B,OAAO,CAACI,WAAR,GAAsB,SAAtB;AAEAJ,OAAO,CAACkC,SAAR,qBACK5C,eAAe,CAAC6C,YAAhB,CAA6B;AAAE1B,EAAAA,KAAK,EAAE;AAAT,CAA7B,CADL;AAEEC,EAAAA,MAAM,EAAEvB,SAAS,CAACiD,IAFpB;AAGEzB,EAAAA,IAAI,EAAExB,SAAS,CAACkD,MAHlB;AAIEzB,EAAAA,SAAS,EAAEzB,SAAS,CAACiD,IAJvB;AAKEtB,EAAAA,QAAQ,EAAE3B,SAAS,CAACiD;AALtB;AAQApC,OAAO,CAACsC,YAAR,GAAuB;AACrB3B,EAAAA,IAAI,EAAE;AADe,CAAvB;AAIAX,OAAO,CAACsB,YAAR,GAAuBiB,MAAM,CAACC,IAAP,CAAYxC,OAAO,CAACkC,SAApB,CAAvB;AAEAlC,OAAO,CAACyC,MAAR,GAAiBpD,sBAAsB,CAAC;AAAEqD,EAAAA,SAAS,EAAE1C,OAAb;AAAsB2C,EAAAA,UAAU,EAAE;AAAlC,CAAD,CAAvC;AAEA;;;;AAGA,eAAelD,iBAAiB,CAA+BO,OAA/B,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { WithAsProp, withSafeTypeForAs, ProviderContextPrepared, FluentComponentStaticProps } from '../../types';\nimport { useTelemetry, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\nexport const Divider: React.FC<WithAsProp<DividerProps>> & FluentComponentStaticProps<DividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    content,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"],"file":"Divider.js"}