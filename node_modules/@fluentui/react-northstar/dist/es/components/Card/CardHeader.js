import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { commonPropTypes, createShorthandFactory } from '../../utils';
export var cardHeaderClassName = 'ui-card__header';

var CardHeader = function CardHeader(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(CardHeader.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      fitted = props.fitted;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(CardHeader.handledProps, props);
  var getA11yProps = useAccessibility(props.accessibility, {
    debugName: CardHeader.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(CardHeader.displayName, {
    className: cardHeaderClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        fitted: fitted
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), children);
  setEnd();
  return element;
};

CardHeader.displayName = 'CardHeader';
CardHeader.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  fitted: PropTypes.bool
});
CardHeader.handledProps = Object.keys(CardHeader.propTypes);
CardHeader.create = createShorthandFactory({
  Component: CardHeader
});
/**
 * A CardHeader is used to display data in Card header.
 */

export default withSafeTypeForAs(CardHeader);
//# sourceMappingURL=CardHeader.js.map
