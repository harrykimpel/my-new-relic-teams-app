import _invoke from "lodash/invoke";
import { cardBehavior } from '@fluentui/accessibility';
import { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import { Ref } from '@fluentui/react-component-ref';
import * as CustomPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { commonPropTypes, createShorthandFactory } from '../../utils';
import CardBody from './CardBody';
import CardColumn from './CardColumn';
import CardFooter from './CardFooter';
import CardHeader from './CardHeader';
import CardPreview from './CardPreview';
import CardTopControls from './CardTopControls';
export var cardClassName = 'ui-card';

var Card = function Card(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Card.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var cardRef = React.useRef();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      compact = props.compact,
      horizontal = props.horizontal,
      centered = props.centered,
      size = props.size,
      fluid = props.fluid,
      onClick = props.onClick,
      disabled = props.disabled;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Card.handledProps, props);
  var getA11yProps = useAccessibility(props.accessibility, {
    debugName: Card.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        handleClick(e);
      },
      focusCard: function focusCard(e) {
        cardRef.current.focus();
      }
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(Card.displayName, {
    className: cardClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        centered: centered,
        horizontal: horizontal,
        compact: compact,
        size: size,
        fluid: fluid,
        actionable: !!onClick,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    _invoke(props, 'onClick', e, props);
  };

  var element = React.createElement(Ref, {
    innerRef: cardRef
  }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), children)));
  setEnd();
  return element;
};

Card.displayName = 'Card';
Card.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  onClick: PropTypes.func,
  compact: PropTypes.bool,
  horizontal: PropTypes.bool,
  centered: PropTypes.bool,
  size: CustomPropTypes.size,
  fluid: PropTypes.bool
});
Card.defaultProps = {
  accessibility: cardBehavior,
  size: 'medium'
};
Card.handledProps = Object.keys(Card.propTypes);
Card.Header = CardHeader;
Card.Body = CardBody;
Card.Footer = CardFooter;
Card.Preview = CardPreview;
Card.TopControls = CardTopControls;
Card.Column = CardColumn;
Card.create = createShorthandFactory({
  Component: Card
});
/**
 * A Card is used to display data in sematically grouped way.
 * * @accessibility
 * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)
 * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)
 * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).
 *
 */

export default withSafeTypeForAs(Card);
//# sourceMappingURL=Card.js.map
