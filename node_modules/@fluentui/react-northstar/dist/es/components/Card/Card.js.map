{"version":3,"sources":["components/Card/Card.tsx"],"names":["cardBehavior","getElementType","useAccessibility","useStyles","useTelemetry","useUnhandledProps","Ref","CustomPropTypes","PropTypes","React","ThemeContext","withSafeTypeForAs","commonPropTypes","createShorthandFactory","CardBody","CardColumn","CardFooter","CardHeader","CardPreview","CardTopControls","cardClassName","Card","props","context","useContext","displayName","telemetry","setStart","setEnd","cardRef","useRef","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","onClick","disabled","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","performClick","e","handleClick","focusCard","current","focus","rtl","mapPropsToStyles","actionable","mapPropsToInlineStyles","classes","preventDefault","element","unstable_wrapWithFocusZone","root","propTypes","createCommon","func","bool","defaultProps","Object","keys","Header","Body","Footer","Preview","TopControls","Column","create","Component"],"mappings":"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","sourcesContent":["import { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport { commonPropTypes, createShorthandFactory, SizeValue, UIComponentProps } from '../../utils';\nimport CardBody from './CardBody';\nimport CardColumn from './CardColumn';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardPreview from './CardPreview';\nimport CardTopControls from './CardTopControls';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n\n  /** A card can show that it cannot be interacted with. */\n  disabled?: boolean;\n}\n\nexport type CardStylesProps = Pick<CardProps, 'compact' | 'horizontal' | 'centered' | 'size' | 'fluid' | 'disabled'> & {\n  actionable: boolean;\n};\n\nexport const cardClassName = 'ui-card';\n\nconst Card: React.FC<WithAsProp<CardProps>> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n  const cardRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    children,\n    compact,\n    horizontal,\n    centered,\n    size,\n    fluid,\n    onClick,\n    disabled,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        handleClick(e);\n      },\n      focusCard: e => {\n        cardRef.current.focus();\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n      actionable: !!onClick,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <Ref innerRef={cardRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {children}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\n\nCard.create = createShorthandFactory({ Component: Card });\n\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\nexport default withSafeTypeForAs<typeof Card, CardProps, 'div'>(Card);\n"],"file":"Card.js"}