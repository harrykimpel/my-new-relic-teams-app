import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _get from "lodash/get";
import _invoke from "lodash/invoke";
import { inputBehavior } from '@fluentui/accessibility';
import { handleRef, Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import cx from 'classnames';
import { AutoControlledComponent, partitionHTMLProps, commonPropTypes, applyAccessibilityKeyHandlers } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';
export var inputClassName = 'ui-input';
export var inputSlotClassNames = {
  input: "".concat(inputClassName, "__input"),
  icon: "".concat(inputClassName, "__icon")
};

var Input =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Input, _AutoControlledCompon);

  function Input() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "inputRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      clear: function clear(e) {
        if (_this.props.clearable && _this.state.value !== '') {
          e.stopPropagation();
          e.nativeEvent && e.nativeEvent.stopPropagation();

          _this.handleOnClear(e);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleIconOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e) {
          if (!_this.props.disabled) {
            _this.handleOnClear(e);

            _this.inputRef.current.focus();
          }

          _invoke(predefinedProps, 'onClick', e, _this.props);
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.disabled) {
        return;
      }

      var value = _get(e, 'target.value');

      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {
        value: value
      }));

      _this.setState({
        value: value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOnClear", function (e) {
      if (_this.props.clearable) {
        _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {
          value: ''
        }));

        _this.setState({
          value: ''
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "computeIcon", function () {
      var _this$props = _this.props,
          clearable = _this$props.clearable,
          icon = _this$props.icon;
      var value = _this.state.value;

      if (clearable && value.length !== 0) {
        return {};
      }

      return icon || null;
    });

    return _this;
  }

  _createClass(Input, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables;
      var _this$props2 = this.props,
          className = _this$props2.className,
          input = _this$props2.input,
          inputRef = _this$props2.inputRef,
          type = _this$props2.type,
          wrapper = _this$props2.wrapper,
          disabled = _this$props2.disabled;
      var _this$state$value = this.state.value,
          value = _this$state$value === void 0 ? '' : _this$state$value;

      var _partitionHTMLProps = partitionHTMLProps(unhandledProps),
          _partitionHTMLProps2 = _slicedToArray(_partitionHTMLProps, 2),
          htmlInputProps = _partitionHTMLProps2[0],
          restProps = _partitionHTMLProps2[1];

      return Box.create(wrapper, {
        defaultProps: function defaultProps() {
          return Object.assign({}, accessibility.attributes.root, {
            className: cx(inputClassName, className),
            children: React.createElement(React.Fragment, null, React.createElement(Ref, {
              innerRef: function innerRef(inputElement) {
                handleRef(_this2.inputRef, inputElement);
                handleRef(inputRef, inputElement);
              }
            }, Box.create(input || type, {
              defaultProps: function defaultProps() {
                return Object.assign({}, htmlInputProps, {
                  as: 'input',
                  disabled: disabled,
                  type: type,
                  value: value,
                  className: inputSlotClassNames.input,
                  styles: styles.input,
                  onChange: _this2.handleChange
                }, applyAccessibilityKeyHandlers(accessibility.keyHandlers.input, htmlInputProps));
              }
            })), Box.create(_this2.computeIcon(), {
              defaultProps: function defaultProps() {
                return {
                  className: inputSlotClassNames.icon,
                  styles: styles.icon
                };
              },
              overrideProps: _this2.handleIconOverrides
            })),
            styles: styles.root
          }, restProps);
        },
        overrideProps: {
          as: wrapper && wrapper.as || ElementType
        }
      });
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(props, state) {
      var value = state.value;
      return {
        hasValue: !!value && value.length !== 0
      };
    }
  }]);

  return Input;
}(AutoControlledComponent);
/**
 * An Input is a field used to elicit an input from a user.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.
 */


_defineProperty(Input, "deprecated_className", inputClassName);

_defineProperty(Input, "displayName", 'Input');

_defineProperty(Input, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  clearable: PropTypes.bool,
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  disabled: PropTypes.bool,
  fluid: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconPosition: PropTypes.oneOf(['start', 'end']),
  input: customPropTypes.itemShorthand,
  inputRef: customPropTypes.ref,
  inline: PropTypes.bool,
  inverted: PropTypes.bool,
  onChange: PropTypes.func,
  type: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  wrapper: customPropTypes.wrapperShorthand
}));

_defineProperty(Input, "defaultProps", {
  accessibility: inputBehavior,
  type: 'text',
  wrapper: {},
  iconPosition: 'end'
});

_defineProperty(Input, "autoControlledProps", ['value']);

export default withSafeTypeForAs(Input);
//# sourceMappingURL=Input.js.map
