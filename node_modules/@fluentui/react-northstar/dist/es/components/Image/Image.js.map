{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageBehavior","getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","PropTypes","React","ThemeContext","createShorthandFactory","commonPropTypes","withSafeTypeForAs","imageClassName","Image","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","getA11Props","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","result","root","defaultProps","as","propTypes","createCommon","children","content","bool","Object","keys","create","Component","mappedProp","allowsJSX"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\nconst Image: React.FC<WithAsProp<ImageProps>> & FluentComponentStaticProps<ImageProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport default withSafeTypeForAs<typeof Image, ImageProps, 'img'>(Image);\n"],"file":"Image.js"}