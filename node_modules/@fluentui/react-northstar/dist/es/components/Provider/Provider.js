import _extends from "@babel/runtime/helpers/esm/extends";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _noop from "lodash/noop";
import _isBoolean from "lodash/isBoolean";
import _isFunction from "lodash/isFunction";
import _forEach from "lodash/forEach";
import _isPlainObject from "lodash/isPlainObject";
import { getElementType, useUnhandledProps, Telemetry, unstable_getStyles, useIsomorphicLayoutEffect } from '@fluentui/react-bindings';
import { mergeSiteVariables } from '@fluentui/styles';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { RendererProvider, ThemeProvider, ThemeContext } from 'react-fela';
import { setUpWhatInput, tryCleanupWhatInput } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import mergeContexts from '../../utils/mergeProviderContexts';
import ProviderConsumer from './ProviderConsumer';
import usePortalBox, { PortalBoxContext } from './usePortalBox';

var renderFontFaces = function renderFontFaces(renderer, theme) {
  if (!theme.fontFaces) {
    return;
  }

  var renderFontObject = function renderFontObject(font) {
    if (!_isPlainObject(font)) {
      throw new Error("fontFaces must be objects, got: ".concat(_typeof(font)));
    }

    renderer.renderFont(font.name, font.paths, font.props);
  };

  theme.fontFaces.forEach(function (font) {
    renderFontObject(font);
  });
};

var renderStaticStyles = function renderStaticStyles(renderer, theme, siteVariables) {
  if (!theme.staticStyles) {
    return;
  }

  var renderObject = function renderObject(object) {
    _forEach(object, function (style, selector) {
      renderer.renderStatic(style, selector);
    });
  };

  theme.staticStyles.forEach(function (staticStyle) {
    if (typeof staticStyle === 'string') {
      renderer.renderStatic(staticStyle);
    } else if (_isPlainObject(staticStyle)) {
      renderObject(staticStyle);
    } else if (_isFunction(staticStyle)) {
      var preparedSiteVariables = mergeSiteVariables(siteVariables);
      renderObject(staticStyle(preparedSiteVariables));
    } else {
      throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: ".concat(_typeof(staticStyle)));
    }
  });
};

export var providerClassName = 'ui-provider';
/**
 * The Provider passes the CSS-in-JS renderer, theme styles and other settings to Fluent UI components.
 */

var Provider = function Provider(props) {
  var children = props.children,
      className = props.className,
      design = props.design,
      overwrite = props.overwrite,
      styles = props.styles,
      variables = props.variables,
      telemetryRef = props.telemetryRef;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Provider.handledProps, props);
  var telemetry = React.useMemo(function () {
    if (!telemetryRef) {
      return undefined;
    }

    if (!telemetryRef.current) {
      telemetryRef.current = new Telemetry();
    }

    return telemetryRef.current;
  }, [telemetryRef]);
  var inputContext = {
    theme: props.theme,
    rtl: props.rtl,
    disableAnimations: props.disableAnimations,
    performance: props.performance,
    renderer: props.renderer,
    target: props.target,
    telemetry: telemetry
  };
  var consumedContext = React.useContext(ThemeContext);
  var incomingContext = overwrite ? {} : consumedContext;
  var outgoingContext = mergeContexts(incomingContext, inputContext);
  var rtlProps = {}; // only add dir attribute for top level provider or when direction changes from parent to child

  if (!consumedContext || consumedContext.rtl !== outgoingContext.rtl && _isBoolean(outgoingContext.rtl)) {
    rtlProps.dir = outgoingContext.rtl ? 'rtl' : 'ltr';
  }

  var _unstable_getStyles = unstable_getStyles({
    className: providerClassName,
    displayNames: [Provider.displayName],
    props: {
      className: className,
      design: design,
      styles: styles,
      variables: variables
    },
    disableAnimations: outgoingContext.disableAnimations,
    performance: outgoingContext.performance,
    renderer: outgoingContext.renderer,
    rtl: outgoingContext.rtl,
    theme: outgoingContext.theme,
    saveDebug: _noop
  }),
      classes = _unstable_getStyles.classes;

  var element = usePortalBox({
    className: classes.root,
    target: outgoingContext.target,
    rtl: outgoingContext.rtl
  });
  useIsomorphicLayoutEffect(function () {
    renderFontFaces(outgoingContext.renderer, props.theme);
    renderStaticStyles(outgoingContext.renderer, props.theme, outgoingContext.theme.siteVariables);

    if (props.target) {
      setUpWhatInput(props.target);
    }

    return function () {
      if (props.target) {
        tryCleanupWhatInput(props.target);
      }
    };
  }, []); // do not spread anything - React.Fragment can only have `key` and `children` props

  var elementProps = ElementType === React.Fragment ? {} : Object.assign({
    className: classes.root
  }, rtlProps, {}, unhandledProps); // rehydration disabled to avoid leaking styles between renderers
  // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md

  return React.createElement(RendererProvider, _extends({
    renderer: outgoingContext.renderer
  }, {
    rehydrate: false,
    targetDocument: outgoingContext.target
  }), React.createElement(ThemeProvider, {
    theme: outgoingContext,
    overwrite: true
  }, React.createElement(PortalBoxContext.Provider, {
    value: element
  }, React.createElement(ElementType, elementProps, children))));
};

Provider.displayName = 'Provider';
Provider.defaultProps = {
  theme: {}
};
Provider.propTypes = {
  as: PropTypes.elementType,
  design: PropTypes.object,
  variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  theme: PropTypes.shape({
    siteVariables: PropTypes.object,
    componentVariables: PropTypes.object,
    componentStyles: PropTypes.object,
    fontFaces: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string,
      paths: PropTypes.arrayOf(PropTypes.string),
      style: PropTypes.shape({
        fontStretch: PropTypes.string,
        fontStyle: PropTypes.string,
        fontVariant: PropTypes.string,
        fontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        localAlias: PropTypes.string,
        unicodeRange: PropTypes.string
      })
    })),
    staticStyles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])),
    animations: PropTypes.object
  }),
  renderer: PropTypes.object,
  rtl: PropTypes.bool,
  disableAnimations: PropTypes.bool,
  // Heads Up!
  // Keep in sync with packages/react-bindings/src/styles/types.ts
  performance: PropTypes.shape({
    enableSanitizeCssPlugin: PropTypes.bool,
    enableStylesCaching: PropTypes.bool,
    enableVariablesCaching: PropTypes.bool
  }),
  children: PropTypes.node.isRequired,
  overwrite: PropTypes.bool,
  target: PropTypes.object,
  telemetryRef: PropTypes.object
};
Provider.handledProps = Object.keys(Provider.propTypes);
Provider.Consumer = ProviderConsumer;
export default withSafeTypeForAs(Provider);
//# sourceMappingURL=Provider.js.map
