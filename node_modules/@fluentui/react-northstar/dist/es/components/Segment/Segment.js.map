{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["React","PropTypes","UIComponent","childrenExist","commonPropTypes","rtlTextContainer","withSafeTypeForAs","Box","segmentClassName","Segment","accessibility","ElementType","classes","unhandledProps","props","children","content","getAttributes","forElements","attributes","root","create","createCommon","color","disabled","bool","inverted","rtlAttributes","func","as"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,SACEC,WADF,EAEEC,aAFF,EAMEC,eANF,EAOEC,gBAPF,QASO,aATP;AAYA,SAAqCC,iBAArC,QAA8D,aAA9D;AACA,OAAOC,GAAP,MAA8B,YAA9B;AAmBA,OAAO,IAAMC,gBAAgB,GAAG,YAAzB;;IAEDC,O;;;;;;;;;;;;;0CAmBqE;AAAA,UAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBACzC,KAAKC,KADoC;AAAA,UAC/DC,QAD+D,eAC/DA,QAD+D;AAAA,UACrDC,OADqD,eACrDA,OADqD;AAGvE,aACE,oBAAC,WAAD,eACMX,gBAAgB,CAACY,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACH,QAAD;AAAf,OAA/B,CADN,EAEML,aAAa,CAACS,UAAd,CAAyBC,IAF/B,EAGMP,cAHN;AAIE,QAAA,SAAS,EAAED,OAAO,CAACQ;AAJrB,UAMGjB,aAAa,CAACY,QAAD,CAAb,GAA0BA,QAA1B,GAAqCR,GAAG,CAACc,MAAJ,CAAWL,OAAX,CANxC,CADF;AAUD;;;;EAhCmBd,W;AAmCtB;;;;;gBAnCMO,O,0BAC0BD,gB;;gBAD1BC,O,iBAGiB,S;;gBAHjBA,O,iCAMCL,eAAe,CAACkB,YAAhB,CAA6B;AAC9BN,EAAAA,OAAO,EAAE,WADqB;AAE9BO,EAAAA,KAAK,EAAE;AAFuB,CAA7B,C;AAIHC,EAAAA,QAAQ,EAAEvB,SAAS,CAACwB,I;AACpBC,EAAAA,QAAQ,EAAEzB,SAAS,CAACwB,I;AACpBE,EAAAA,aAAa,EAAE1B,SAAS,CAAC2B;;;gBAZvBnB,O,kBAekB;AACpBoB,EAAAA,EAAE,EAAE;AADgB,C;;AAuBxB,eAAevB,iBAAiB,CAA+BG,OAA/B,CAAhC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport const segmentClassName = 'ui-segment';\n\nclass Segment extends UIComponent<WithAsProp<SegmentProps>, any> {\n  static deprecated_className = segmentClassName;\n\n  static displayName = 'Segment';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: 'shorthand',\n      color: true,\n    }),\n    disabled: PropTypes.bool,\n    inverted: PropTypes.bool,\n    rtlAttributes: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : Box.create(content)}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * A Segment visually groups related content.\n */\nexport default withSafeTypeForAs<typeof Segment, SegmentProps>(Segment);\n"],"file":"Segment.js"}