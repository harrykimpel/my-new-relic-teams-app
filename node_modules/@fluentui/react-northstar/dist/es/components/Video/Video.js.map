{"version":3,"sources":["components/Video/Video.tsx"],"names":["Ref","PropTypes","React","videoBehavior","createShorthandFactory","commonPropTypes","withSafeTypeForAs","getElementType","useStyles","useUnhandledProps","useTelemetry","useAccessibility","ThemeContext","videoClassName","Video","props","context","useContext","displayName","telemetry","setStart","setEnd","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","ElementType","videoRef","createRef","unhandledProps","handledProps","getA11yProps","accessibility","debugName","useEffect","current","mapPropsToInlineStyles","classes","element","root","create","Component","mappedProp","propTypes","createCommon","children","content","bool","string","defaultProps","as","Object","keys"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { getElementType, useStyles, useUnhandledProps, useTelemetry, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\nexport const Video: React.FC<WithAsProp<VideoProps>> & FluentComponentStaticProps<VideoProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const ElementType = getElementType(props);\n  const videoRef = React.createRef<HTMLVideoElement>();\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport default withSafeTypeForAs<typeof Video, VideoProps, 'video'>(Video);\n"],"file":"Video.js"}