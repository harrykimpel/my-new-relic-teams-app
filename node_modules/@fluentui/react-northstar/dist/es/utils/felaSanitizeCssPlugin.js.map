{"version":3,"sources":["utils/felaSanitizeCssPlugin.ts"],"names":["isValidCssValue","value","openingBrackets","closingBrackets","openingBracketsStack","i","length","currentCharacter","includes","push","lastOpeningBracket","pop","indexOf","config","cssPropertiesToSkip","skip","sanitizeCssStyleObject","styles","type","renderer","params","sanitizeCss","processedStyles","Array","isArray","Object","keys","forEach","cssPropertyNameOrIndex","cssPropertyValue","isPropertyToSkip","some","propToExclude","process","env","NODE_ENV","console","warn"],"mappings":";;;AAIA;;;AAGA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgB;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,eAAe,GAAG,KAAxB;AAEA,MAAMC,oBAA8B,GAAG,EAAvC;AAEA;;;;;;;AAMA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,QAAME,gBAAgB,GAAGN,KAAK,CAACI,CAAD,CAA9B;;AACA,QAAIH,eAAe,CAACM,QAAhB,CAAyBD,gBAAzB,CAAJ,EAAgD;AAC9CH,MAAAA,oBAAoB,CAACK,IAArB,CAA0BF,gBAA1B;AACD,KAFD,MAEO,IAAIJ,eAAe,CAACK,QAAhB,CAAyBD,gBAAzB,CAAJ,EAAgD;AACrD,UAAMG,kBAAkB,GAAGN,oBAAoB,CAACO,GAArB,EAA3B;;AACA,UACED,kBAAkB,IAClBR,eAAe,CAACU,OAAhB,CAAwBF,kBAAxB,MAAgDP,eAAe,CAACS,OAAhB,CAAwBL,gBAAxB,CAFlD,EAGE;AACA,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAOH,oBAAoB,CAACE,MAArB,KAAgC,CAAvC;AACD,CAhCD;;AAkCA,gBAAe,UAACO,MAAD,EAAkC;AAC/C,MAAMC,mBAAmB,sBAASD,MAAM,IAAIA,MAAM,CAACE,IAAlB,IAA2B,EAAnC,CAAzB;;AAEA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAC7BC,MAD6B,EAE7BC,IAF6B,EAG7BC,QAH6B,EAI7BC,MAJ6B,EAK1B;AACH,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AACvB,aAAOJ,MAAP;AACD;;AAED,QAAMK,eAAe,GAAGC,KAAK,CAACC,OAAN,CAAcP,MAAd,IAAwB,EAAxB,GAA6B,EAArD;AAEAQ,IAAAA,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4B,UAAAC,sBAAsB,EAAI;AACpD,UAAMC,gBAAgB,GAAGZ,MAAM,CAACW,sBAAD,CAA/B;;AAEA,UAAI,QAAOC,gBAAP,MAA4B,QAAhC,EAA0C;AACxCP,QAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CZ,sBAAsB,CAACa,gBAAD,EAAmBX,IAAnB,EAAyBC,QAAzB,EAAmCC,MAAnC,CAAhE;AACA;AACD;;AAED,UAAMU,gBAAgB,GAAGhB,mBAAmB,CAACiB,IAApB,CAAyB,UAAAC,aAAa;AAAA,eAAIA,aAAa,KAAKJ,sBAAtB;AAAA,OAAtC,CAAzB;;AAEA,UAAIE,gBAAJ,EAAsB;AACpBR,QAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CC,gBAA1C;AACA;AACD;;AAED,UAAI7B,eAAe,CAAC6B,gBAAD,CAAnB,EAAuC;AACrCP,QAAAA,eAAe,CAACM,sBAAD,CAAf,GAA0CC,gBAA1C;AACD,OAFD,MAEO,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD;AACAC,QAAAA,OAAO,CAACC,IAAR,iDAC0CR,gBAD1C,yCACuFD,sBADvF;AAGD;AACF,KAvBD;AAyBA,WAAON,eAAP;AACD,GAtCD;;AAwCA,SAAON,sBAAP;AACD,CA5CD","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport { Renderer, RendererParam } from '@fluentui/react-bindings';\nimport { TRuleType } from 'fela-utils';\n\n/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\nconst isValidCssValue = (value: any) => {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  const openingBrackets = '({[';\n  const closingBrackets = ')}]';\n\n  const openingBracketsStack: string[] = [];\n\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n  for (let i = 0; i < value.length; ++i) {\n    const currentCharacter = value[i];\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      const lastOpeningBracket = openingBracketsStack.pop();\n      if (\n        lastOpeningBracket &&\n        openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nexport default (config?: { skip?: string[] }) => {\n  const cssPropertiesToSkip = [...((config && config.skip) || [])];\n\n  const sanitizeCssStyleObject = (\n    styles: ICSSInJSStyle,\n    type: TRuleType,\n    renderer: Renderer,\n    params: RendererParam,\n  ) => {\n    if (!params.sanitizeCss) {\n      return styles;\n    }\n\n    const processedStyles = Array.isArray(styles) ? [] : {};\n\n    Object.keys(styles).forEach(cssPropertyNameOrIndex => {\n      const cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n      if (typeof cssPropertyValue === 'object') {\n        processedStyles[cssPropertyNameOrIndex] = sanitizeCssStyleObject(cssPropertyValue, type, renderer, params);\n        return;\n      }\n\n      const isPropertyToSkip = cssPropertiesToSkip.some(propToExclude => propToExclude === cssPropertyNameOrIndex);\n\n      if (isPropertyToSkip) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n        return;\n      }\n\n      if (isValidCssValue(cssPropertyValue)) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      } else if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `fela-sanitize-css: An invalid value \"${cssPropertyValue}\" was passed to property \"${cssPropertyNameOrIndex}\"`,\n        );\n      }\n    });\n\n    return processedStyles;\n  };\n\n  return sanitizeCssStyleObject;\n};\n"],"file":"felaSanitizeCssPlugin.js"}