export { default as applyAccessibilityKeyHandlers } from './applyAccessibilityKeyHandlers';
export { default as AutoControlledComponent } from './AutoControlledComponent';
export { default as childrenExist } from './childrenExist';
export { default as UIComponent } from './UIComponent';
export { createRenderer, felaRenderer } from './felaRenderer';
export { default as rtlTextContainer } from './rtlTextContainer';
export { default as stringLiteralsArray } from './stringLiteralsArray';
export { default as getOrGenerateIdFromShorthand } from './getOrGenerateIdFromShorthand';
export * from './factories';
export { default as constants } from './constants';
export { default as mergeProviderContexts } from './mergeProviderContexts';
export * from './renderComponent';
export { default as renderComponent } from './renderComponent';
export { htmlImageProps, htmlInputAttrs, htmlInputEvents, htmlInputProps, partitionHTMLProps } from './htmlPropsUtils';
export { default as isBrowser } from './isBrowser';
export { default as doesNodeContainClick } from './doesNodeContainClick';
export { pxToRem } from './fontSizeUtility';
export { default as createComponent } from './createComponent';
export { getKindProp } from './getKindProp';
export * from './whatInput';
export * from './commonPropInterfaces';
export { screenReaderContainerStyles } from './accessibility/Styles/accessibilityStyles';
import { CreateCommonConfig as CreateCommonConfigLocal } from './commonPropTypes';
export declare module commonPropTypes {
    type CreateCommonConfig = CreateCommonConfigLocal;
    const createCommon: (config?: CreateCommonConfigLocal) => {
        styles: import("prop-types").Requireable<object>;
        variables: import("prop-types").Requireable<object>;
        design: import("prop-types").Requireable<import("prop-types").InferProps<{
            position: import("prop-types").Requireable<string>;
            display: import("prop-types").Requireable<string>;
            top: import("prop-types").Requireable<string>;
            right: import("prop-types").Requireable<string>;
            bottom: import("prop-types").Requireable<string>;
            left: import("prop-types").Requireable<string>;
            padding: import("prop-types").Requireable<string>;
            paddingTop: import("prop-types").Requireable<string>;
            paddingRight: import("prop-types").Requireable<string>;
            paddingBottom: import("prop-types").Requireable<string>;
            paddingLeft: import("prop-types").Requireable<string>;
            margin: import("prop-types").Requireable<string>;
            marginTop: import("prop-types").Requireable<string>;
            marginRight: import("prop-types").Requireable<string>;
            marginBottom: import("prop-types").Requireable<string>;
            marginLeft: import("prop-types").Requireable<string>;
            width: import("prop-types").Requireable<string>;
            height: import("prop-types").Requireable<string>;
            minWidth: import("prop-types").Requireable<string>;
            maxWidth: import("prop-types").Requireable<string>;
            minHeight: import("prop-types").Requireable<string>;
            maxHeight: import("prop-types").Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: import("prop-types").Requireable<string>;
        className: import("prop-types").Requireable<string>;
        children: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        as: import("prop-types").Requireable<import("prop-types").ReactComponentLike>;
        accessibility: import("prop-types").Requireable<(...args: any[]) => any>;
    };
}
