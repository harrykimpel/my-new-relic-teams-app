import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
export var ContainerFocusHandler =
/*#__PURE__*/
function () {
  function ContainerFocusHandler(getItemsCount, setFocusAt) {
    var _this = this;

    var circular = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, ContainerFocusHandler);

    this.getItemsCount = getItemsCount;
    this.setFocusAt = setFocusAt;
    this.circular = circular;

    _defineProperty(this, "focusedIndex", 0);

    _defineProperty(this, "noItems", function () {
      return _this.getItemsCount() === 0;
    });
  }

  _createClass(ContainerFocusHandler, [{
    key: "constrainFocusedIndex",
    value: function constrainFocusedIndex() {
      var itemsCount = this.getItemsCount();

      if (this.focusedIndex < 0) {
        this.focusedIndex = this.circular ? itemsCount - 1 : 0;
      }

      if (this.focusedIndex >= itemsCount) {
        this.focusedIndex = this.circular ? 0 : itemsCount - 1;
      }
    }
  }, {
    key: "getFocusedIndex",
    value: function getFocusedIndex() {
      return this.focusedIndex;
    }
  }, {
    key: "syncFocusedIndex",
    value: function syncFocusedIndex(withCurrentIndex) {
      this.focusedIndex = withCurrentIndex;
    }
  }, {
    key: "movePrevious",
    value: function movePrevious() {
      if (this.noItems()) {
        return;
      }

      this.focusedIndex -= 1;
      this.constrainFocusedIndex();
      this.setFocusAt(this.focusedIndex);
    }
  }, {
    key: "moveNext",
    value: function moveNext() {
      if (this.noItems()) {
        return;
      }

      this.focusedIndex += 1;
      this.constrainFocusedIndex();
      this.setFocusAt(this.focusedIndex);
    }
  }, {
    key: "moveFirst",
    value: function moveFirst() {
      if (this.noItems()) {
        return;
      }

      this.focusedIndex = 0;
      this.setFocusAt(this.focusedIndex);
    }
  }, {
    key: "moveLast",
    value: function moveLast() {
      if (this.noItems()) {
        return;
      }

      this.focusedIndex = this.getItemsCount() - 1;
      this.setFocusAt(this.focusedIndex);
    }
  }]);

  return ContainerFocusHandler;
}();
//# sourceMappingURL=FocusContainer.js.map
