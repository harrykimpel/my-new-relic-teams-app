{"version":3,"sources":["utils/accessibility/FocusHandling/FocusContainer.ts"],"names":["ContainerFocusHandler","getItemsCount","setFocusAt","circular","itemsCount","focusedIndex","withCurrentIndex","noItems","constrainFocusedIndex"],"mappings":";;;AAAA,WAAaA,qBAAb;AAAA;AAAA;AAGE,iCACUC,aADV,EAEmBC,UAFnB,EAIE;AAAA;;AAAA,QADQC,QACR,uEADmB,KACnB;;AAAA;;AAAA,SAHQF,aAGR,GAHQA,aAGR;AAAA,SAFiBC,UAEjB,GAFiBA,UAEjB;AAAA,SADQC,QACR,GADQA,QACR;;AAAA,0CANqB,CAMrB;;AAAA,qCAEgB;AAAA,aAAe,KAAI,CAACF,aAAL,OAAyB,CAAxC;AAAA,KAFhB;AAAE;;AAPN;AAAA;AAAA,4CAWwC;AACpC,UAAMG,UAAU,GAAG,KAAKH,aAAL,EAAnB;;AACA,UAAI,KAAKI,YAAL,GAAoB,CAAxB,EAA2B;AACzB,aAAKA,YAAL,GAAoB,KAAKF,QAAL,GAAgBC,UAAU,GAAG,CAA7B,GAAiC,CAArD;AACD;;AAED,UAAI,KAAKC,YAAL,IAAqBD,UAAzB,EAAqC;AACnC,aAAKC,YAAL,GAAoB,KAAKF,QAAL,GAAgB,CAAhB,GAAoBC,UAAU,GAAG,CAArD;AACD;AACF;AApBH;AAAA;AAAA,sCAsBmC;AAC/B,aAAO,KAAKC,YAAZ;AACD;AAxBH;AAAA;AAAA,qCA0B0BC,gBA1B1B,EA0BoD;AAChD,WAAKD,YAAL,GAAoBC,gBAApB;AACD;AA5BH;AAAA;AAAA,mCA8B8B;AAC1B,UAAI,KAAKC,OAAL,EAAJ,EAAoB;AAClB;AACD;;AAED,WAAKF,YAAL,IAAqB,CAArB;AACA,WAAKG,qBAAL;AAEA,WAAKN,UAAL,CAAgB,KAAKG,YAArB;AACD;AAvCH;AAAA;AAAA,+BAyC0B;AACtB,UAAI,KAAKE,OAAL,EAAJ,EAAoB;AAClB;AACD;;AAED,WAAKF,YAAL,IAAqB,CAArB;AACA,WAAKG,qBAAL;AAEA,WAAKN,UAAL,CAAgB,KAAKG,YAArB;AACD;AAlDH;AAAA;AAAA,gCAoD2B;AACvB,UAAI,KAAKE,OAAL,EAAJ,EAAoB;AAClB;AACD;;AAED,WAAKF,YAAL,GAAoB,CAApB;AACA,WAAKH,UAAL,CAAgB,KAAKG,YAArB;AACD;AA3DH;AAAA;AAAA,+BA6D0B;AACtB,UAAI,KAAKE,OAAL,EAAJ,EAAoB;AAClB;AACD;;AAED,WAAKF,YAAL,GAAoB,KAAKJ,aAAL,KAAuB,CAA3C;AACA,WAAKC,UAAL,CAAgB,KAAKG,YAArB;AACD;AApEH;;AAAA;AAAA","sourcesContent":["export class ContainerFocusHandler {\n  private focusedIndex = 0;\n\n  constructor(\n    private getItemsCount: () => number,\n    private readonly setFocusAt: (number) => void,\n    private circular = false,\n  ) {}\n\n  private noItems = (): boolean => this.getItemsCount() === 0;\n\n  private constrainFocusedIndex(): void {\n    const itemsCount = this.getItemsCount();\n    if (this.focusedIndex < 0) {\n      this.focusedIndex = this.circular ? itemsCount - 1 : 0;\n    }\n\n    if (this.focusedIndex >= itemsCount) {\n      this.focusedIndex = this.circular ? 0 : itemsCount - 1;\n    }\n  }\n\n  public getFocusedIndex(): number {\n    return this.focusedIndex;\n  }\n\n  public syncFocusedIndex(withCurrentIndex: number) {\n    this.focusedIndex = withCurrentIndex;\n  }\n\n  public movePrevious(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex -= 1;\n    this.constrainFocusedIndex();\n\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveNext(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex += 1;\n    this.constrainFocusedIndex();\n\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveFirst(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = 0;\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveLast(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = this.getItemsCount() - 1;\n    this.setFocusAt(this.focusedIndex);\n  }\n}\n"],"file":"FocusContainer.js"}