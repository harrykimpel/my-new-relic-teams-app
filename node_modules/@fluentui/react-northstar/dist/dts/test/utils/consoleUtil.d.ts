/// <reference types="node" />
declare const _default: {
    enable: () => Console & {
        memory: any;
        assert(condition?: boolean, message?: string, ...data: any[]): void;
        assert(value: any, message?: string, ...optionalParams: any[]): void;
        clear(): void;
        clear(): void;
        count(label?: string): void;
        count(label?: string): void;
        debug(message?: any, ...optionalParams: any[]): void;
        debug(message?: any, ...optionalParams: any[]): void;
        dir(value?: any, ...optionalParams: any[]): void;
        dir(obj: any, options?: NodeJS.InspectOptions): void;
        dirxml(value: any): void;
        dirxml(...data: any[]): void;
        error(message?: any, ...optionalParams: any[]): void;
        error(message?: any, ...optionalParams: any[]): void;
        exception(message?: string, ...optionalParams: any[]): void;
        group(groupTitle?: string, ...optionalParams: any[]): void;
        group(...label: any[]): void;
        groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;
        groupCollapsed(...label: any[]): void;
        groupEnd(): void;
        groupEnd(): void;
        info(message?: any, ...optionalParams: any[]): void;
        info(message?: any, ...optionalParams: any[]): void;
        log(message?: any, ...optionalParams: any[]): void;
        log(message?: any, ...optionalParams: any[]): void;
        markTimeline(label?: string): void;
        markTimeline(label?: string): void;
        profile(reportName?: string): void;
        profile(label?: string): void;
        profileEnd(reportName?: string): void;
        profileEnd(label?: string): void;
        table(...tabularData: any[]): void;
        table(tabularData: any, properties?: string[]): void;
        time(label?: string): void;
        time(label?: string): void;
        timeEnd(label?: string): void;
        timeEnd(label?: string): void;
        timeStamp(label?: string): void;
        timeStamp(label?: string): void;
        timeline(label?: string): void;
        timeline(label?: string): void;
        timelineEnd(label?: string): void;
        timelineEnd(label?: string): void;
        trace(message?: any, ...optionalParams: any[]): void;
        trace(message?: any, ...optionalParams: any[]): void;
        warn(message?: any, ...optionalParams: any[]): void;
        warn(message?: any, ...optionalParams: any[]): void;
        Console: NodeJS.ConsoleConstructor;
        countReset(label?: string): void;
        timeLog(label?: string, ...data: any[]): void;
    };
    disable: () => Console & {
        log: () => any;
        error: () => any;
        debug: () => any;
        warn: () => any;
        info: () => any;
    };
    disableOnce: () => void;
};
export default _default;
