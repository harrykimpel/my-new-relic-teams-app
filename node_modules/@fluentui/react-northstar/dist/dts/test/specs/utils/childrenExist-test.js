"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var childrenExist_1 = require("src/utils/childrenExist");
describe('childrenExist', function () {
    test('returns false when no children are passed', function () {
        var props = React.createElement("div", null).props;
        expect(childrenExist_1.default(props.children)).toBe(false);
    });
    test('returns true with text child', function () {
        var props = React.createElement("div", null, "text").props;
        expect(childrenExist_1.default(props.children)).toBe(true);
    });
    test('returns true with empty child element', function () {
        var props = (React.createElement("div", null,
            React.createElement("p", null))).props;
        expect(childrenExist_1.default(props.children)).toBe(true);
    });
    test('returns true with child element', function () {
        var props = (React.createElement("div", null,
            React.createElement("p", null, "text"))).props;
        expect(childrenExist_1.default(props.children)).toBe(true);
    });
    test('returns false for null expression', function () {
        var props = React.createElement("div", null, null).props;
        expect(childrenExist_1.default(props.children)).toBe(false);
    });
    test('returns false for void 0 expression', function () {
        var props = React.createElement("div", null, void 0).props; // eslint-disable-line no-void
        expect(childrenExist_1.default(props.children)).toBe(false);
    });
    test('returns false for NaN expression', function () {
        var props = React.createElement("div", null, NaN).props;
        expect(childrenExist_1.default(props.children)).toBe(false);
    });
    test('returns false for undefined expression', function () {
        var props = React.createElement("div", null, undefined).props;
        expect(childrenExist_1.default(props.children)).toBe(false);
    });
});
