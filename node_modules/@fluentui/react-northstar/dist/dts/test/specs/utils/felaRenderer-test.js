"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var jest_react_fela_1 = require("jest-react-fela");
var utils_1 = require("test/utils");
var Box_1 = require("src/components/Box/Box");
var Animation_1 = require("src/components/Animation/Animation");
var Provider_1 = require("src/components/Provider/Provider");
var Text_1 = require("src/components/Text/Text");
var utils_2 = require("src/utils");
describe('felaRenderer', function () {
    test('basic styles are rendered', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(utils_1.EmptyThemeProvider, null,
            React.createElement(Box_1.default, { styles: { color: 'red' } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('CSS fallback values are rendered', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(utils_1.EmptyThemeProvider, null,
            React.createElement(Box_1.default, { styles: { color: ['red', 'blue'] } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('keyframe colors are rendered', function () {
        var colorChanger = {
            keyframe: function (_a) {
                var fromColor = _a.fromColor, toColor = _a.toColor;
                return ({
                    from: {
                        color: fromColor,
                    },
                    to: {
                        color: toColor,
                    },
                });
            },
            keyframeParams: {
                fromColor: 'red',
                toColor: 'blue',
            },
            duration: '5s',
        };
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(Provider_1.default, { theme: {
                animations: { colorChanger: colorChanger },
            } },
            React.createElement(Animation_1.default, { name: "colorChanger" },
                React.createElement(Box_1.default, null))), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('array returned by keyframe results in CSS fallback values', function () {
        var steps = ['0%', '100%'];
        var colorChanger = {
            keyframe: function (_a) {
                var steps = _a.steps;
                var obj = {};
                steps.forEach(function (step, index) {
                    obj[step] = { color: ['blue', 'red', 'yellow'] };
                });
                return obj;
            },
            keyframeParams: { steps: steps },
        };
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(Provider_1.default, { theme: {
                animations: { colorChanger: colorChanger },
            } },
            React.createElement(Animation_1.default, { name: "colorChanger" },
                React.createElement(Box_1.default, null))), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('animations are not applied if animations are disabled', function () {
        var spinner = {
            keyframe: {
                from: {
                    transform: 'rotate(0deg)',
                },
                to: {
                    transform: 'rotate(360deg)',
                },
            },
            duration: '5s',
            iterationCount: 'infinite',
        };
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(Provider_1.default, { disableAnimations: true, theme: {
                animations: { spinner: spinner },
            } },
            React.createElement(Animation_1.default, { name: "spinner" },
                React.createElement(Box_1.default, null))), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('marginLeft is rendered into marginRight due to RTL', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(Provider_1.default, { rtl: true },
            React.createElement(Text_1.default, { content: "Hello", styles: { marginLeft: '10px' } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('marginLeft is rendered into marginLeft due to RTL with `noFlip`', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(Provider_1.default, { rtl: true },
            React.createElement(Text_1.default, { content: "Hello", styles: { marginLeft: '10px /* @noflip */' } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('styles are expanded to longhand values', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(utils_1.EmptyThemeProvider, null,
            React.createElement(Box_1.default, { styles: {
                    borderStyle: 'solid',
                    // spaces in color value are important
                    borderColor: 'rgba(51,204, 51, 1) rgba(51,0,204, 1)',
                } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
    test('prefixes required styles', function () {
        var snapshot = jest_react_fela_1.createSnapshot(React.createElement(utils_1.EmptyThemeProvider, null,
            React.createElement(Box_1.default, { styles: {
                    cursor: 'zoom-in',
                    display: 'flex',
                    filter: 'blur(5px)',
                    height: 'min-content',
                    position: 'sticky',
                    transition: 'width 2s, height 2s, background-color 2s, transform 2s',
                    ':hover': {
                        backgroundImage: 'image-set("cat.png" 1x, "cat-2x.png" 2x)',
                        display: 'inline-flex',
                        height: 'fit-content',
                    },
                } })), {}, utils_2.felaRenderer);
        expect(snapshot).toMatchSnapshot();
    });
});
