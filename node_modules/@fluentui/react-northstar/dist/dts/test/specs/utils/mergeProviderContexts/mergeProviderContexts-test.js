"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeProviderContexts_1 = require("src/utils/mergeProviderContexts");
var felaRenderer_1 = require("src/utils/felaRenderer");
describe('mergeRenderers', function () {
    test("always uses \"next\" renderer", function () {
        var next = jest.fn();
        expect(mergeProviderContexts_1.mergeRenderers(felaRenderer_1.felaRenderer, next)).toBe(next);
    });
    test("always returns pre-created renderer for main document", function () {
        expect(mergeProviderContexts_1.mergeRenderers(jest.fn(), null, document)).toBe(felaRenderer_1.felaRenderer);
    });
    test("creates a new renderer for a new document and keeps it", function () {
        var target = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);
        var renderer = mergeProviderContexts_1.mergeRenderers(jest.fn(), null, target);
        expect(renderer).toHaveProperty('renderRule');
        expect(mergeProviderContexts_1.mergeRenderers(jest.fn(), null, target)).toBe(renderer);
    });
});
describe('mergePerformanceOptions', function () {
    test("options from \"sources\" always override", function () {
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true }, {})).toMatchObject({
            enableVariablesCaching: true,
        });
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true }, undefined)).toMatchObject({
            enableVariablesCaching: true,
        });
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true, enableStylesCaching: true }, { enableStylesCaching: false })).toMatchObject({});
        expect(mergeProviderContexts_1.mergePerformanceOptions({ enableVariablesCaching: true, enableStylesCaching: true }, { enableStylesCaching: undefined })).toMatchObject({});
    });
});
describe('mergeContexts', function () {
    test("always returns an object", function () {
        expect(mergeProviderContexts_1.default({}, {})).toMatchObject({});
        expect(mergeProviderContexts_1.default(null, null)).toMatchObject({});
        expect(mergeProviderContexts_1.default(undefined, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.default(null, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.default(undefined, null)).toMatchObject({});
        expect(mergeProviderContexts_1.default({}, undefined)).toMatchObject({});
        expect(mergeProviderContexts_1.default(undefined, {})).toMatchObject({});
        expect(mergeProviderContexts_1.default({}, null)).toMatchObject({});
        expect(mergeProviderContexts_1.default(null, {})).toMatchObject({});
    });
    test('gracefully handles merging a theme in with undefined values', function () {
        var target = {
            theme: {
                siteVariables: { color: 'black' },
                componentVariables: { Button: { color: 'black' } },
                componentStyles: { Button: { root: { color: 'black' } } },
            },
            rtl: true,
            disableAnimations: false,
        };
        var source = {
            theme: undefined,
            rtl: undefined,
            disableAnimations: undefined,
        };
        expect(function () { return mergeProviderContexts_1.default(target, source); }).not.toThrow();
    });
    test('gracefully handles merging onto a theme with undefined values', function () {
        var target = {
            theme: undefined,
            rtl: undefined,
            disableAnimations: undefined,
        };
        var source = {
            theme: {
                siteVariables: { color: 'black' },
                componentVariables: { Button: { color: 'black' } },
                componentStyles: { Button: { root: { color: 'black' } } },
            },
            rtl: true,
            disableAnimations: false,
        };
        expect(function () { return mergeProviderContexts_1.default(target, source); }).not.toThrow();
    });
});
