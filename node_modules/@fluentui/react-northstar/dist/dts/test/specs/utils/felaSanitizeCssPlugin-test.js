"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var felaSanitizeCssPlugin_1 = require("src/utils/felaSanitizeCssPlugin");
var utils_1 = require("test/utils");
var sanitize = function (styles, options) {
    if (options === void 0) { options = {}; }
    var _a = options.sanitizeCss, sanitizeCss = _a === void 0 ? true : _a, _b = options.skip, skip = _b === void 0 ? [] : _b;
    var felaParam = {
        displayName: 'Test',
        disableAnimations: false,
        theme: {},
        sanitizeCss: sanitizeCss,
    };
    var renderer = (function () { });
    return felaSanitizeCssPlugin_1.default({ skip: skip })(styles, 'RULE', renderer, felaParam);
};
var assertCssPropertyValue = function (value, isValid) {
    test("assert that '" + value + "' is " + (isValid ? 'valid' : 'invalid'), function () {
        var style = { display: value };
        var sanitizedStyle = sanitize(style);
        expect(sanitizedStyle).toEqual(isValid ? style : {});
    });
};
describe('felaSanitizeCssPlugin', function () {
    beforeEach(function () {
        utils_1.consoleUtil.disable();
    });
    afterEach(function () {
        utils_1.consoleUtil.enable();
    });
    test('should ensure there are no non-closed brackets in CSS property value', function () {
        var style = {
            display: 'block',
            backgroundImage: 'url(../../',
        };
        expect(sanitize(style)).toEqual({ display: 'block' });
    });
    test('should skip numeric CSS property values', function () {
        expect(sanitize({ top: 0 })).toEqual({ top: 0 });
    });
    test('should recursively process nested objects', function () {
        var style = {
            display: 'inline',
            '::before': {
                color: 'rgba(',
            },
        };
        expect(sanitize(style)).toEqual({
            display: 'inline',
            '::before': {},
        });
    });
    test('should skip excluded CSS props', function () {
        var style = {
            display: 'block',
            margin: '0 0 0 0',
            propertyWithInvalidValue: 'rgba(',
        };
        expect(sanitize(style, { skip: ['propertyWithInvalidValue'] })).toEqual(style);
    });
    describe('should properly filter invalid bracket sequences', function () {
        assertCssPropertyValue('rgba(', false);
        assertCssPropertyValue('rgba(0,0', false);
        assertCssPropertyValue('rgba(0,0}', false);
        assertCssPropertyValue("url('../../utils')", true);
    });
    describe('if array is passed', function () {
        test('should process the array without conversion to an object', function () {
            var style = {
                color: ['red', 'blue'],
                ':hover': { color: 'red' },
                display: 'block',
            };
            expect(sanitize(style)).toEqual(style);
        });
        test('should sanitize its items and remove invalid ones', function () {
            var style = {
                color: ['red', 'blue', 'rgba('],
                display: 'block',
            };
            expect(sanitize(style)).toEqual({
                color: ['red', 'blue'],
                display: 'block',
            });
        });
    });
    test('warns if is disabled', function () {
        var onWarn = jest.spyOn(console, 'warn').mockImplementation(function () { });
        sanitize({ backgroundImage: 'url(../../' });
        expect(onWarn).toBeCalledWith(expect.stringMatching(/was passed to property/));
    });
});
