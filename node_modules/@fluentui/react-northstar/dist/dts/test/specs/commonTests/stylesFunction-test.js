"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var utils_1 = require("src/utils");
var utils_2 = require("test/utils");
var testClassName = 'ui-test-component';
var testStylesForComponent = function (_a) {
    var _b = _a === void 0 ? {} : _a, props = _b.props, state = _b.state, expected = _b.expected;
    var TestComponent = /** @class */ (function (_super) {
        tslib_1.__extends(TestComponent, _super);
        function TestComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = state;
            return _this;
        }
        TestComponent.prototype.renderComponent = function (_a) {
            var ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps;
            return React.createElement(ElementType, tslib_1.__assign({}, unhandledProps, { className: classes.root }));
        };
        TestComponent.deprecated_className = testClassName;
        TestComponent.propTypes = {
            propsAttr: PropTypes.any,
            commonAttr: PropTypes.any,
            styles: PropTypes.any,
        };
        return TestComponent;
    }(utils_1.UIComponent));
    var TestStylesComponent = function (props) { return (React.createElement(TestComponent, tslib_1.__assign({}, props, { styles: function (_a) {
            var props = _a.props;
            expect(_.mapValues(expected, function (val, key) { return props[key]; })).toEqual(expected);
            return {};
        } }))); };
    utils_2.mountWithProviderAndGetComponent(TestStylesComponent, React.createElement(TestStylesComponent, tslib_1.__assign({}, props)));
};
describe('styles function', function () {
    it('receives as argument only props object if state is not set', function () {
        testStylesForComponent({ expected: {} });
        testStylesForComponent({
            props: { propsAttr: 'props' },
            expected: { propsAttr: 'props' },
        });
        testStylesForComponent({
            props: { propsAttr: 'props', commonAttr: 'props' },
            expected: { propsAttr: 'props', commonAttr: 'props' },
        });
    });
    it('receives as argument a simple merge of props and state objects if both are set but there are no overlapping properties', function () {
        testStylesForComponent({
            props: { propsAttr: 'props' },
            state: { stateAttr: 'state' },
            expected: { propsAttr: 'props', stateAttr: 'state' },
        });
        testStylesForComponent({
            props: { propsAttr: 'props' },
            state: { commonAttr: 'state', stateAttr: 'state' },
            expected: { propsAttr: 'props', commonAttr: 'state', stateAttr: 'state' },
        });
        testStylesForComponent({
            props: { propsAttr: 'props', commonAttr: 'props' },
            state: { stateAttr: 'state' },
            expected: { propsAttr: 'props', commonAttr: 'props', stateAttr: 'state' },
        });
    });
    it('receives as argument a merge of props and state objects where props have priority over state when we have overlapping properties', function () {
        testStylesForComponent({
            props: { commonAttr: 'props' },
            state: { commonAttr: 'state' },
            expected: { commonAttr: 'props' },
        });
        testStylesForComponent({
            props: { propsAttr: 'props', commonAttr: 'props' },
            state: { commonAttr: 'state' },
            expected: { propsAttr: 'props', commonAttr: 'props' },
        });
        testStylesForComponent({
            props: { commonAttr: 'props' },
            state: { commonAttr: 'state', stateAttr: 'state' },
            expected: { commonAttr: 'props', stateAttr: 'state' },
        });
        testStylesForComponent({
            props: { propsAttr: 'props', commonAttr: 'props' },
            state: { commonAttr: 'state', stateAttr: 'state' },
            expected: { propsAttr: 'props', commonAttr: 'props', stateAttr: 'state' },
        });
    });
});
