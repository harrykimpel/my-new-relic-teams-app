"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var ReactTestUtils = require("react-dom/test-utils");
var Popup_1 = require("src/components/Popup/Popup");
var PopupContent_1 = require("src/components/Popup/PopupContent");
var utils_1 = require("../../../utils");
var keyboardKey = require("keyboard-key");
var implementsPopperProps_1 = require("test/specs/commonTests/implementsPopperProps");
describe('Popup', function () {
    implementsPopperProps_1.default(Popup_1.default, {
        requiredProps: { open: true },
    });
    var triggerId = 'triggerElement';
    var contentId = 'contentId';
    var getPopupContent = function (popup) {
        return popup.find("div#" + contentId);
    };
    var expectPopupToOpenAndClose = function (_a) {
        var onProp = _a.onProp, eventToOpen = _a.eventToOpen, eventToClose = _a.eventToClose;
        var openEvent = {
            event: eventToOpen.event || 'keydown',
            keyCode: eventToOpen.event ? undefined : eventToOpen,
        };
        var closeEvent = {
            event: eventToClose.event || 'keydown',
            keyCode: eventToClose.event ? undefined : eventToClose,
        };
        var popup = utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("span", { id: triggerId }, " text to trigger popup "), content: { id: contentId }, on: onProp }));
        // check popup open on key press
        var popupTriggerElement = popup.find("#" + triggerId);
        popupTriggerElement.simulate(openEvent.event, { keyCode: openEvent.keyCode });
        expect(getPopupContent(popup).exists()).toBe(true);
        // check popup closes on Esc
        popupTriggerElement.simulate(closeEvent.event, { keyCode: closeEvent.keyCode });
        expect(getPopupContent(popup).exists()).toBe(false);
    };
    describe('onOpenChange', function () {
        test('is called on click', function () {
            var spy = jest.fn();
            utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("button", null), content: "Hi", onOpenChange: spy }))
                .find('button')
                .simulate('click');
            expect(spy).toHaveBeenCalledTimes(1);
            expect(spy.mock.calls[0][1]).toMatchObject({ open: true });
        });
        // https://github.com/microsoft/fluent-ui-react/pull/619
        test('is called on click when controlled', function () {
            var spy = jest.fn();
            utils_1.mountWithProvider(React.createElement(Popup_1.default, { open: false, trigger: React.createElement("button", null), content: "Hi", onOpenChange: spy }))
                .find('button')
                .simulate('click');
            expect(spy).toHaveBeenCalledTimes(1);
            expect(spy.mock.calls[0][1]).toMatchObject({ open: true });
        });
        test('is called on contextmenu', function () {
            var spy = jest.fn();
            utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("button", null), content: "Hi", onOpenChange: spy, on: "context" }))
                .find('button')
                .simulate('contextmenu');
            expect(spy).toHaveBeenCalledTimes(1);
            expect(spy.mock.calls[0][1]).toMatchObject({ open: true });
        });
        // https://github.com/microsoft/fluent-ui-react/pull/619
        test('is called on contextmenu when controlled', function () {
            var spy = jest.fn();
            utils_1.mountWithProvider(React.createElement(Popup_1.default, { open: false, trigger: React.createElement("button", null), content: "Hi", onOpenChange: spy, on: "context" }))
                .find('button')
                .simulate('contextmenu');
            expect(spy).toHaveBeenCalledTimes(1);
            expect(spy.mock.calls[0][1]).toMatchObject({ open: true });
        });
    });
    describe('context popup', function () {
        test("open popup with Context event and close it with escape key", function () {
            expectPopupToOpenAndClose({
                onProp: 'context',
                eventToOpen: { event: 'contextmenu' },
                eventToClose: keyboardKey.Escape,
            });
        });
        test('click does not open the popup but calls its handler instead', function () {
            var clickSpy = jest.fn();
            var popup = utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("span", { id: triggerId, onClick: clickSpy },
                    ' ',
                    "text to trigger popup",
                    ' '), content: { id: contentId }, on: "context" }));
            var popupTriggerElement = popup.find("#" + triggerId);
            popupTriggerElement.simulate('click');
            expect(getPopupContent(popup).exists()).toBe(false);
            expect(clickSpy).toHaveBeenCalled();
        });
    });
    describe('open/close popup by keyboard', function () {
        test("toggle popup with Enter key", function () {
            expectPopupToOpenAndClose({
                onProp: 'click',
                eventToOpen: keyboardKey.Enter,
                eventToClose: keyboardKey.Enter,
            });
        });
        test("toggle popup with Space key", function () {
            expectPopupToOpenAndClose({
                onProp: 'click',
                eventToOpen: keyboardKey.Spacebar,
                eventToClose: keyboardKey.Spacebar,
            });
        });
        test("open popup with Enter key and close it with escape key", function () {
            expectPopupToOpenAndClose({
                onProp: 'hover',
                eventToOpen: keyboardKey.Enter,
                eventToClose: keyboardKey.Escape,
            });
        });
        test("open popup with Space key and close it with escape key", function () {
            expectPopupToOpenAndClose({
                onProp: 'hover',
                eventToOpen: keyboardKey.Spacebar,
                eventToClose: keyboardKey.Escape,
            });
        });
        test("close previous popup with Enter key", function () {
            var attachTo = document.createElement('div');
            document.body.appendChild(attachTo);
            var triggerId2 = 'triggerElement2';
            var contentId2 = 'contentId2';
            ReactTestUtils.act(function () {
                ReactDOM.render(React.createElement(utils_1.EmptyThemeProvider, null,
                    React.createElement(React.Fragment, null,
                        React.createElement(Popup_1.default, { trigger: React.createElement("span", { id: triggerId }, "text to trigger popup"), content: { id: contentId }, on: "click" }),
                        React.createElement(Popup_1.default, { trigger: React.createElement("span", { id: triggerId2 }, "text to trigger popup"), content: { id: contentId2 }, on: "click" }))), attachTo);
            });
            expect(document.querySelector("#" + contentId)).toBe(null);
            expect(document.querySelector("#" + contentId2)).toBe(null);
            ReactTestUtils.act(function () {
                utils_1.domEvent.keyDown("#" + triggerId, { keyCode: keyboardKey.Enter });
            });
            expect(document.querySelector("#" + contentId)).toBeDefined();
            expect(document.querySelector("#" + contentId2)).toBe(null);
            ReactTestUtils.act(function () {
                utils_1.domEvent.keyDown("#" + triggerId2, { keyCode: keyboardKey.Enter });
            });
            expect(document.querySelector("#" + contentId)).toBe(null);
            expect(document.querySelector("#" + contentId2)).toBeDefined();
            ReactDOM.unmountComponentAtNode(attachTo);
            document.body.removeChild(attachTo);
        });
    });
    describe('inline', function () {
        test('renders the content in the document body the inline prop is not provided', function () {
            utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("button", null), content: "Content", open: true }));
            var contentElement = document.body.firstElementChild;
            expect(contentElement.classList.contains(PopupContent_1.popupContentClassName)).toEqual(true);
        });
        test('renders the content next to the trigger element if the inline prop is provided', function () {
            var attachTo = document.createElement('div');
            document.body.appendChild(attachTo);
            var wrapper = utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("button", { id: triggerId }), inline: true, content: "Content", open: true }), {
                attachTo: attachTo,
            });
            var contentElement = document.querySelector("#" + triggerId).nextSibling;
            expect(contentElement.classList.contains(PopupContent_1.popupContentClassName)).toEqual(true);
            wrapper.unmount();
            document.body.removeChild(attachTo);
        });
    });
    describe('keyboard event propagation', function () {
        var expectPopupToHandleStopPropagation = function (trapFocus, shouldStopPropagation) {
            var popup = utils_1.mountWithProvider(React.createElement(Popup_1.default, { trigger: React.createElement("span", { id: triggerId }, " text to trigger popup "), content: { id: contentId }, trapFocus: trapFocus }));
            // open popup
            var popupTriggerElement = popup.find("#" + triggerId);
            popupTriggerElement.simulate('keydown', { keyCode: keyboardKey.Enter });
            // when popup open, check that stopPropagation is called when keyboard events are invoked
            var stopPropagation = jest.fn();
            var popupContentElement = getPopupContent(popup);
            popupContentElement.simulate('keyDown', { stopPropagation: stopPropagation });
            expect(stopPropagation).toHaveBeenCalledTimes(shouldStopPropagation ? 1 : 0);
        };
        test('stops when focus is trapped', function () {
            expectPopupToHandleStopPropagation(true, true);
        });
        test('does not stop when focus is not trapped', function () {
            expectPopupToHandleStopPropagation(false, false);
        });
    });
});
