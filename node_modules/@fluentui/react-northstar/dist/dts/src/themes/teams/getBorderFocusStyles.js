"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var defaultColor = 'transparent';
var getPseudoElementStyles = function (args) {
    var borderEdgeValue = args.borderEdgeValue, styles = tslib_1.__rest(args, ["borderEdgeValue"]);
    return tslib_1.__assign({ content: '""', position: 'absolute', borderStyle: 'solid', pointerEvents: 'none', top: borderEdgeValue, right: borderEdgeValue, bottom: borderEdgeValue, left: borderEdgeValue }, styles);
};
/**
 * Returns style object that can be used for styling components on focus state.
 * NOTE: the element where this is used needs to have relative positioning so that the
 * pseudo elements created on focus can be properly positioned.
 */
var getBorderFocusStyles = function (args) {
    var sv = args.variables;
    var _a = args.borderWidth, borderWidth = _a === void 0 ? sv.borderWidth : _a, _b = args.borderRadius, borderRadius = _b === void 0 ? sv.borderRadius : _b, _c = args.focusInnerBorderColor, focusInnerBorderColor = _c === void 0 ? sv.focusInnerBorderColor || defaultColor : _c, _d = args.focusOuterBorderColor, focusOuterBorderColor = _d === void 0 ? sv.focusOuterBorderColor || defaultColor : _d, borderPadding = args.borderPadding;
    var defaultBorderStyles = { borderWidth: borderWidth, borderRadius: borderRadius };
    return {
        ':focus': {
            outline: 0,
        },
        ':focus-visible': {
            borderColor: 'transparent',
            ':before': getPseudoElementStyles(tslib_1.__assign({ zIndex: sv.zIndexes.foreground, borderEdgeValue: borderPadding == null ? '0' : "-" + borderPadding, borderColor: focusInnerBorderColor }, defaultBorderStyles)),
            ':after': getPseudoElementStyles(tslib_1.__assign({ zIndex: sv.zIndexes.foreground, borderEdgeValue: borderPadding == null ? "-" + borderWidth : "calc(0px - " + borderPadding + " - " + borderWidth + ")", borderColor: focusOuterBorderColor }, defaultBorderStyles)),
        },
    };
};
exports.default = getBorderFocusStyles;
