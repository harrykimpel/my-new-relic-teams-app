"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var MenuItem_1 = require("../../../../components/Menu/MenuItem");
var colors_1 = require("../../colors");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var submenuIndicatorUrl_1 = require("./submenuIndicatorUrl");
exports.verticalPillsBottomMargin = utils_1.pxToRem(5);
exports.horizontalPillsRightMargin = utils_1.pxToRem(8);
exports.verticalPointingBottomMargin = utils_1.pxToRem(12);
exports.underlinedItem = function (color) { return ({
    paddingBottom: 0,
    borderBottom: "solid " + utils_1.pxToRem(4) + " " + color,
    transition: 'color .1s ease',
}); };
var getFocusedStyles = function (_a) {
    var props = _a.props, v = _a.variables, colors = _a.colors;
    var primary = props.primary, underlined = props.underlined, active = props.active, vertical = props.vertical;
    if (active && !underlined && !vertical)
        return {};
    return tslib_1.__assign(tslib_1.__assign({ color: v.colorActive || colors.foregroundActive, background: v.backgroundColorFocus || colors.backgroundFocus }, (primary && {
        color: colors.foregroundFocus,
        background: colors.backgroundFocus,
    })), (vertical && tslib_1.__assign(tslib_1.__assign({ border: "solid 1px " + v.borderColorFocus, outline: "solid 1px " + v.outlineColorFocus, margin: utils_1.pxToRem(1), background: v.verticalBackgroundColorFocus, color: v.colorFocus || colors.foregroundFocus }, (primary && { color: v.color })), (active && tslib_1.__assign({ color: v.colorActive, background: v.backgroundColorActive || colors.backgroundActive }, (primary && { color: colors.foregroundFocus }))))));
};
var pointingBeak = function (_a) {
    var props = _a.props, v = _a.variables, colors = _a.colors;
    var pointing = props.pointing, primary = props.primary;
    var top;
    var borders;
    var backgroundColor = v.backgroundColorActive || colors.backgroundActive;
    var borderColor = v.borderColor || primary ? v.primaryBorderColor : colors.border;
    if (pointing === 'start') {
        borders = {
            borderTop: "1px solid " + borderColor,
            borderLeft: "1px solid " + borderColor,
        };
        top = '-1px'; // 1px for the border
    }
    else {
        borders = {
            borderBottom: "1px solid " + borderColor,
            borderRight: "1px solid " + borderColor,
        };
        top = '100%';
    }
    return {
        '::after': tslib_1.__assign(tslib_1.__assign({ visibility: 'visible', background: backgroundColor, position: 'absolute', content: '""', top: top, left: '50%', transform: 'translateX(-50%) translateY(-50%) rotate(45deg)', margin: '.5px 0 0', width: utils_1.pxToRem(10), height: utils_1.pxToRem(10), border: 'none' }, borders), { zIndex: v.beakZIndex, transition: 'background .1s ease' }),
    };
};
var menuItemStyles = {
    wrapper: function (_a) {
        var _b;
        var props = _a.props, v = _a.variables;
        var active = props.active, disabled = props.disabled, iconOnly = props.iconOnly, isFromKeyboard = props.isFromKeyboard, pills = props.pills, pointing = props.pointing, secondary = props.secondary, underlined = props.underlined, vertical = props.vertical, primary = props.primary;
        var colors = colors_1.getColorScheme(v.colorScheme, null, primary);
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: 'inherit', lineHeight: 1, position: 'relative', verticalAlign: 'middle', display: 'block' }, (secondary && {
            background: 'salmon',
        })), (vertical && {
            border: "solid " + v.verticalItemBorderWidth + " " + v.verticalItemBorderColor,
        })), (pills && tslib_1.__assign(tslib_1.__assign({}, (vertical
            ? { margin: "0 0 " + exports.verticalPillsBottomMargin + " 0" }
            : { margin: "0 " + exports.horizontalPillsRightMargin + " 0 0" })), { borderRadius: utils_1.pxToRem(5) }))), (underlined && {
            display: 'flex',
            alignItems: 'center',
            height: utils_1.pxToRem(29),
            lineHeight: v.lineHeightBase,
            padding: "0 " + utils_1.pxToRem(4),
            margin: "0 " + utils_1.pxToRem(4) + " 0 0",
            ':nth-child(n+2)': {
                marginLeft: "" + utils_1.pxToRem(4),
            },
            boxShadow: 'none',
        })), (!vertical &&
            !pills &&
            !underlined &&
            !iconOnly && {
            boxShadow: "-1px 0 0 0 " + (primary ? v.primaryBorderColor : v.borderColor || colors.border) + " inset",
        })), (active && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.wrapperColorActive }, (!underlined && tslib_1.__assign(tslib_1.__assign({ background: v.backgroundColorActive || colors.backgroundActive }, (iconOnly && { background: v.activeIconOnlyWrapperBackgroundColor })), (!iconOnly &&
            primary && {
            color: colors.foregroundActive,
        })))), (underlined && {
            color: v.activeUnderlinedWrapperColor,
        })), (pointing &&
            vertical && {
            '::before': tslib_1.__assign(tslib_1.__assign({ content: "''", position: 'absolute', width: utils_1.pxToRem(3), height: "calc(100% + " + utils_1.pxToRem(4) + ")", top: utils_1.pxToRem(-2), backgroundColor: v.pointingIndicatorBackgroundColor }, (isFromKeyboard && { display: 'none' })), (pointing === 'end' ? { right: utils_1.pxToRem(-2) } : { left: utils_1.pxToRem(-2) })),
        })), (pointing &&
            !vertical && tslib_1.__assign({}, pointingBeak({ props: props, variables: v, colors: colors })))))), (isFromKeyboard && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.wrapperColorFocus }, (!underlined && tslib_1.__assign({ background: v.wrapperBackgroundColorFocus }, (primary && {
            background: v.primaryWrapperBackgroundColorFocus,
            color: v.primaryWrapperColorFocus,
        })))), (!iconOnly && getFocusedStyles({ props: props, variables: v, colors: colors }))), (iconOnly && {
            background: v.iconOnlyWrapperBackgroundColorFocus,
            color: v.iconOnlyColorActive,
        })))), { 
            // hover styles
            ':hover': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.wrapperColorHover, background: v.backgroundColorHover || colors.backgroundHover }, (active && {
                background: v.activeWrapperBackgroundColorHover,
            })), (vertical && {
                color: v.wrapperColorHover,
                background: v.backgroundColorHover || colors.backgroundHover,
            })), (primary && {
                color: v.primaryWrapperColorHover,
            })), (underlined && {
                color: v.underlinedWrapperColorHover,
                background: v.underlinedWrapperBackgroundHover,
            })), (iconOnly && {
                background: v.iconOnlyBackgroundColorHover,
                color: v.iconOnlyColorHover,
            })), (_b = {}, _b["&>." + MenuItem_1.menuItemClassName + ">." + MenuItem_1.menuItemSlotClassNames.indicator] = tslib_1.__assign({ backgroundImage: submenuIndicatorUrl_1.default(v.indicatorColorHover, vertical) }, (primary && {
                backgroundImage: submenuIndicatorUrl_1.default(v.primaryIndicatorColorHover, vertical),
            })), _b)) }), (iconOnly && {
            display: 'flex',
        })), { ':first-child': tslib_1.__assign({}, (!pills &&
                !iconOnly &&
                !(pointing && vertical) &&
                !underlined && tslib_1.__assign(tslib_1.__assign({}, (vertical && {
                '::before': {
                    display: 'none',
                },
            })), (!vertical && {
                borderBottomLeftRadius: utils_1.pxToRem(3),
                borderTopLeftRadius: utils_1.pxToRem(3),
            })))) }), (disabled && {
            color: v.colorDisabled || colors.foregroundDisabled,
            cursor: 'default',
            ':hover': {
            // empty - overwrite all existing hover styles
            },
        }));
    },
    root: function (_a) {
        var p = _a.props, v = _a.variables;
        var active = p.active, iconOnly = p.iconOnly, isFromKeyboard = p.isFromKeyboard, pointing = p.pointing, primary = p.primary, underlined = p.underlined, vertical = p.vertical, disabled = p.disabled;
        var colors = colors_1.getColorScheme(v.colorScheme, null, primary);
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: 'inherit', display: 'block', cursor: 'pointer', whiteSpace: 'nowrap' }, (pointing &&
            vertical && {
            border: '1px solid transparent',
        })), (iconOnly && {
            border: utils_1.pxToRem(2) + " solid transparent",
        })), { padding: v.horizontalPadding }), (vertical && { padding: v.verticalItemPadding })), (pointing && vertical && { padding: utils_1.pxToRem(8) + " " + utils_1.pxToRem(18) })), (underlined && { padding: utils_1.pxToRem(4) + " 0" })), (iconOnly && {
            margin: utils_1.pxToRem(1),
            padding: utils_1.pxToRem(5),
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
        })), (active && tslib_1.__assign(tslib_1.__assign({}, (iconOnly && tslib_1.__assign({ color: v.iconOnlyColorActive }, getIconFillOrOutlineStyles_1.default({ outline: false })))), (underlined && tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ color: v.activeUnderlinedColor }, exports.underlinedItem(v.activeUnderlinedBorderBottomColor)), (primary && tslib_1.__assign({ color: v.activeUnderlinedPrimaryColor }, exports.underlinedItem(v.borderColorActive || colors.borderActive)))), (!primary && { fontWeight: 700 })))))), (isFromKeyboard && tslib_1.__assign(tslib_1.__assign({ color: 'inherit' }, (iconOnly && tslib_1.__assign({ borderRadius: '50%', borderColor: v.iconOnlyColorFocus }, getIconFillOrOutlineStyles_1.default({ outline: false })))), (primary
            ? tslib_1.__assign(tslib_1.__assign({}, (iconOnly && {
                borderColor: v.borderColorActive || colors.borderActive,
            })), (underlined && active && exports.underlinedItem(colors.foregroundActive))) : tslib_1.__assign(tslib_1.__assign({}, (underlined && { fontWeight: 700 })), (underlined && active && exports.underlinedItem(v.colorActive))))))), { ':focus': {
                outline: 0,
            }, 
            // hover styles
            ':hover': tslib_1.__assign(tslib_1.__assign({ color: v.colorHover }, (underlined && { color: v.underlinedColorHover })), (!disabled && tslib_1.__assign(tslib_1.__assign({}, (iconOnly && getIconFillOrOutlineStyles_1.default({ outline: false }))), (primary
                ? tslib_1.__assign(tslib_1.__assign({}, (iconOnly && { color: 'inherit' })), (!active && underlined && exports.underlinedItem(v.underlinedBorderColor || colors.backgroundActive))) : !active && underlined && exports.underlinedItem(v.backgroundColorActive || colors.backgroundActive))))) }), (disabled && {
            cursor: 'default',
        }));
    },
    content: function (_a) {
        var p = _a.props;
        var widthAdjust = (p.icon ? 26 : 0) + (p.menu ? 16 : 0);
        return tslib_1.__assign({ whiteSpace: 'normal', lineHeight: 1.5, marginTop: utils_1.pxToRem(-4), marginBottom: utils_1.pxToRem(-4), display: 'inline-block' }, ((p.inSubmenu || p.vertical) && {
            width: 'max-content',
            minWidth: utils_1.pxToRem(46 - widthAdjust),
            maxWidth: utils_1.pxToRem(262 - widthAdjust),
            marginRight: utils_1.pxToRem(16),
        }));
    },
    icon: function (_a) {
        var p = _a.props, v = _a.variables;
        return (tslib_1.__assign(tslib_1.__assign({ display: 'inline-flex', alignItems: 'center', justifyContent: 'center', width: v.iconSize, height: v.iconSize, '& > :first-child': {
                height: '100%',
                width: '100%',
                '& svg': {
                    height: '100%',
                    width: '100%',
                },
            } }, (!!p.content && {
            marginRight: utils_1.pxToRem(10),
        })), (!p.iconOnly && {
            // reduce margins so text has the dominant influence on the vertical height
            marginTop: 0,
            marginBottom: utils_1.pxToRem(-8),
            verticalAlign: 'top',
        })));
    },
    menu: function (_a) {
        var v = _a.variables;
        return ({ zIndex: v.menuZIndex });
    },
    indicator: function (_a) {
        var p = _a.props, v = _a.variables, rtl = _a.rtl;
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', float: 'right', left: utils_1.pxToRem(12), userSelect: 'none', marginRight: utils_1.pxToRem(4) }, (p.inSubmenu && {
            position: 'absolute',
            top: utils_1.pxToRem(6),
            right: utils_1.pxToRem(2),
            left: 'unset',
        })), (rtl && {
            transform: "scaleX(-1)",
        })), { content: '" "', display: 'block', overflow: 'hidden', height: utils_1.pxToRem(16), width: utils_1.pxToRem(16), backgroundImage: submenuIndicatorUrl_1.default(v.indicatorColor, p.vertical) }), (p.active && tslib_1.__assign({ backgroundImage: submenuIndicatorUrl_1.default(v.activeIndicatorColor, p.vertical) }, (p.primary && tslib_1.__assign({ backgroundImage: submenuIndicatorUrl_1.default(v.activePrimaryIndicatorColor, p.vertical) }, (p.vertical && {
            backgroundImage: submenuIndicatorUrl_1.default(v.activePrimaryVerticalIndicatorColor, p.vertical),
        })))))), (p.underlined && { backgroundImage: submenuIndicatorUrl_1.default(v.indicatorColor, p.vertical) })), (p.iconOnly && { backgroundImage: submenuIndicatorUrl_1.default(v.indicatorColor, p.vertical) }));
    },
};
exports.default = menuItemStyles;
