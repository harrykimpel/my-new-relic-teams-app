"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var cardStyles = {
    root: function (_a) {
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var siteVariables = theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.default({
            variables: siteVariables,
            borderRadius: v.borderRadius,
        });
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ display: 'flex', flexDirection: 'column', position: 'relative', padding: v.padding, width: v.width, height: v.height, backgroundColor: v.backgroundColor, boxShadow: v.boxShadow, ':hover': {
                backgroundColor: v.backgroundColorHover,
                borderColor: v.borderColorHover,
                boxShadow: v.boxShadowHover,
            }, borderWidth: v.borderWidth, borderStyle: v.borderStyle, borderColor: v.borderColor, borderRadius: v.borderRadius }, (p.size === 'small' && { width: v.sizeSmallWidth, height: v.sizeSmallHeight, padding: v.sizeSmallPadding })), (p.size === 'large' && { width: v.sizeLargeWidth, height: v.sizeLargeHeight, padding: v.sizeLargePadding })), (p.fluid && { width: v.fluidWidth, height: v.fluidHeight })), (p.horizontal && { flexDirection: 'row' })), (p.compact && { padding: v.compactPadding })), (p.centered && { alignItems: 'center' })), (p.actionable && {
            cursor: 'pointer',
            ':focus-visible': {
                backgroundColor: v.backgroundColorFocus,
                boxShadow: v.boxShadowFocus,
            },
            ':active': {
                backgroundColor: v.backgroundColorPressed,
                borderColor: v.borderColorPressed,
                boxShadow: v.boxShadowPressed,
            },
        })), (p.disabled && {
            cursor: 'not-allowed',
            color: v.colorDisabled,
            backgroundColor: v.backgroundColorDisabled,
            borderColor: v.borderColorDisabled,
            boxShadow: v.boxShadowDisabled,
            ':hover': {
                boxShadow: v.boxShadowDisabled,
            },
            ':focus-visible': {
                boxShadow: v.boxShadowDisabled,
            },
            ':active': {
                boxShadow: v.boxShadowDisabled,
            },
        })), borderFocusStyles);
    },
};
exports.default = cardStyles;
