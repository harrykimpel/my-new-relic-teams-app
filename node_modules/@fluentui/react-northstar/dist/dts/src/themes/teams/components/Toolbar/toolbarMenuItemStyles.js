"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var colors_1 = require("../../colors");
var utils_1 = require("../../../../utils");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var ToolbarMenuItem_1 = require("../../../../components/Toolbar/ToolbarMenuItem");
var submenuIndicatorUrl_1 = require("./submenuIndicatorUrl");
var activeIndicatorUrl_1 = require("./activeIndicatorUrl");
var toolbarMenuItemStyles = {
    root: function (_a) {
        var _b, _c;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var colors = colors_1.getColorScheme(v.colorScheme);
        var borderFocusStyles = getBorderFocusStyles_1.default({
            variables: siteVariables,
            borderRadius: 0,
        });
        return tslib_1.__assign({ position: 'relative', color: v.menuItemForeground || colors.foreground1, borderWidth: v.menuBorderWidth, backgroundColor: 'transparent', borderColor: 'transparent', display: 'flex', alignItems: 'center', textAlign: 'left', width: '100%', maxWidth: '100%', padding: v.menuItemPadding, cursor: 'pointer', ':focus': {
                outline: 0,
            }, ':hover': (_b = {
                    color: v.menuItemForegroundHover || colors.menuItemForegroundHover,
                    backgroundColor: v.menuItemBackgroundHover || colors.menuItemBackgroundHover
                },
                _b["& ." + ToolbarMenuItem_1.toolbarMenuItemSlotClassNames.submenuIndicator] = {
                    backgroundImage: submenuIndicatorUrl_1.default(v.menuItemForegroundHover || colors.menuItemForegroundHover),
                },
                _b["& ." + ToolbarMenuItem_1.toolbarMenuItemSlotClassNames.activeIndicator] = {
                    backgroundImage: activeIndicatorUrl_1.default(v.menuItemForegroundHover || colors.menuItemForegroundHover),
                },
                _b), ':focus-visible': borderFocusStyles[':focus-visible'] }, (p.disabled && (_c = {
                cursor: 'default',
                color: v.menuItemForegroundDisabled || colors.foregroundDisabled1,
                backgroundColor: v.menuItemBackgroundDisabled
            },
            _c["& ." + ToolbarMenuItem_1.toolbarMenuItemSlotClassNames.submenuIndicator] = {
                backgroundImage: submenuIndicatorUrl_1.default(v.menuItemForegroundDisabled || colors.foregroundDisabled1),
            },
            _c["& ." + ToolbarMenuItem_1.toolbarMenuItemSlotClassNames.activeIndicator] = {
                backgroundImage: activeIndicatorUrl_1.default(v.menuItemForegroundDisabled || colors.foregroundDisabled1),
            },
            _c[':hover'] = {
            // empty to overwrite all existing hover styles
            },
            _c)));
    },
    activeIndicator: function (_a) {
        var v = _a.variables;
        var colors = colors_1.getColorScheme(v.colorScheme);
        return {
            backgroundImage: activeIndicatorUrl_1.default(v.menuItemForeground || colors.foreground1),
            backgroundPosition: 'center',
            backgroundRepeat: 'no-repeat',
            width: utils_1.pxToRem(24),
            height: '100%',
            position: 'absolute',
            right: utils_1.pxToRem(7),
        };
    },
    submenuIndicator: function (_a) {
        var v = _a.variables, rtl = _a.rtl;
        var colors = colors_1.getColorScheme(v.colorScheme);
        return tslib_1.__assign(tslib_1.__assign({ backgroundImage: submenuIndicatorUrl_1.default(v.menuItemForeground || colors.foreground1), backgroundPosition: 'center', backgroundRepeat: 'no-repeat' }, (rtl && {
            transform: "scaleX(-1)",
        })), { width: utils_1.pxToRem(16), height: '100%', position: 'absolute', right: utils_1.pxToRem(7) });
    },
    wrapper: function () { return ({
        display: 'block',
    }); },
    icon: function (_a) {
        var p = _a.props;
        return (tslib_1.__assign({}, (p.hasContent && {
            marginRight: utils_1.pxToRem(10),
        })));
    },
};
exports.default = toolbarMenuItemStyles;
