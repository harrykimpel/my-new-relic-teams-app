"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var mergeProviderContexts_1 = require("../../utils/mergeProviderContexts");
var ProviderConsumer_1 = require("./ProviderConsumer");
var usePortalBox_1 = require("./usePortalBox");
var renderFontFaces = function (renderer, theme) {
    if (!theme.fontFaces) {
        return;
    }
    var renderFontObject = function (font) {
        if (!_.isPlainObject(font)) {
            throw new Error("fontFaces must be objects, got: " + typeof font);
        }
        renderer.renderFont(font.name, font.paths, font.props);
    };
    theme.fontFaces.forEach(function (font) {
        renderFontObject(font);
    });
};
var renderStaticStyles = function (renderer, theme, siteVariables) {
    if (!theme.staticStyles) {
        return;
    }
    var renderObject = function (object) {
        _.forEach(object, function (style, selector) {
            renderer.renderStatic(style, selector);
        });
    };
    theme.staticStyles.forEach(function (staticStyle) {
        if (typeof staticStyle === 'string') {
            renderer.renderStatic(staticStyle);
        }
        else if (_.isPlainObject(staticStyle)) {
            renderObject(staticStyle);
        }
        else if (_.isFunction(staticStyle)) {
            var preparedSiteVariables = styles_1.mergeSiteVariables(siteVariables);
            renderObject(staticStyle(preparedSiteVariables));
        }
        else {
            throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: " + typeof staticStyle);
        }
    });
};
exports.providerClassName = 'ui-provider';
/**
 * The Provider passes the CSS-in-JS renderer, theme styles and other settings to Fluent UI components.
 */
var Provider = function (props) {
    var children = props.children, className = props.className, design = props.design, overwrite = props.overwrite, styles = props.styles, variables = props.variables, telemetryRef = props.telemetryRef;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Provider.handledProps, props);
    var telemetry = React.useMemo(function () {
        if (!telemetryRef) {
            return undefined;
        }
        if (!telemetryRef.current) {
            telemetryRef.current = new react_bindings_1.Telemetry();
        }
        return telemetryRef.current;
    }, [telemetryRef]);
    var inputContext = {
        theme: props.theme,
        rtl: props.rtl,
        disableAnimations: props.disableAnimations,
        performance: props.performance,
        renderer: props.renderer,
        target: props.target,
        telemetry: telemetry,
    };
    var consumedContext = React.useContext(react_fela_1.ThemeContext);
    var incomingContext = overwrite ? {} : consumedContext;
    var outgoingContext = mergeProviderContexts_1.default(incomingContext, inputContext);
    var rtlProps = {};
    // only add dir attribute for top level provider or when direction changes from parent to child
    if (!consumedContext || (consumedContext.rtl !== outgoingContext.rtl && _.isBoolean(outgoingContext.rtl))) {
        rtlProps.dir = outgoingContext.rtl ? 'rtl' : 'ltr';
    }
    var classes = react_bindings_1.unstable_getStyles({
        className: exports.providerClassName,
        displayNames: [Provider.displayName],
        props: {
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        },
        disableAnimations: outgoingContext.disableAnimations,
        performance: outgoingContext.performance,
        renderer: outgoingContext.renderer,
        rtl: outgoingContext.rtl,
        theme: outgoingContext.theme,
        saveDebug: _.noop,
    }).classes;
    var element = usePortalBox_1.default({
        className: classes.root,
        target: outgoingContext.target,
        rtl: outgoingContext.rtl,
    });
    react_bindings_1.useIsomorphicLayoutEffect(function () {
        renderFontFaces(outgoingContext.renderer, props.theme);
        renderStaticStyles(outgoingContext.renderer, props.theme, outgoingContext.theme.siteVariables);
        if (props.target) {
            utils_1.setUpWhatInput(props.target);
        }
        return function () {
            if (props.target) {
                utils_1.tryCleanupWhatInput(props.target);
            }
        };
    }, []);
    // do not spread anything - React.Fragment can only have `key` and `children` props
    var elementProps = ElementType === React.Fragment
        ? {}
        : tslib_1.__assign(tslib_1.__assign({ className: classes.root }, rtlProps), unhandledProps);
    // rehydration disabled to avoid leaking styles between renderers
    // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md
    return (React.createElement(react_fela_1.RendererProvider, tslib_1.__assign({ renderer: outgoingContext.renderer }, { rehydrate: false, targetDocument: outgoingContext.target }),
        React.createElement(react_fela_1.ThemeProvider, { theme: outgoingContext, overwrite: true },
            React.createElement(usePortalBox_1.PortalBoxContext.Provider, { value: element },
                React.createElement(ElementType, tslib_1.__assign({}, elementProps), children)))));
};
Provider.displayName = 'Provider';
Provider.defaultProps = {
    theme: {},
};
Provider.propTypes = {
    as: PropTypes.elementType,
    design: PropTypes.object,
    variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
    styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
    theme: PropTypes.shape({
        siteVariables: PropTypes.object,
        componentVariables: PropTypes.object,
        componentStyles: PropTypes.object,
        fontFaces: PropTypes.arrayOf(PropTypes.shape({
            name: PropTypes.string,
            paths: PropTypes.arrayOf(PropTypes.string),
            style: PropTypes.shape({
                fontStretch: PropTypes.string,
                fontStyle: PropTypes.string,
                fontVariant: PropTypes.string,
                fontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
                localAlias: PropTypes.string,
                unicodeRange: PropTypes.string,
            }),
        })),
        staticStyles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])),
        animations: PropTypes.object,
    }),
    renderer: PropTypes.object,
    rtl: PropTypes.bool,
    disableAnimations: PropTypes.bool,
    // Heads Up!
    // Keep in sync with packages/react-bindings/src/styles/types.ts
    performance: PropTypes.shape({
        enableSanitizeCssPlugin: PropTypes.bool,
        enableStylesCaching: PropTypes.bool,
        enableVariablesCaching: PropTypes.bool,
    }),
    children: PropTypes.node.isRequired,
    overwrite: PropTypes.bool,
    target: PropTypes.object,
    telemetryRef: PropTypes.object,
};
Provider.handledProps = Object.keys(Provider.propTypes);
Provider.Consumer = ProviderConsumer_1.default;
exports.default = types_1.withSafeTypeForAs(Provider);
