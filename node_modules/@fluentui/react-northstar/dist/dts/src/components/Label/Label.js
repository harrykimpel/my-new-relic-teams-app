"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var Image_1 = require("../Image/Image");
var Box_1 = require("../Box/Box");
var types_1 = require("../../types");
exports.labelClassName = 'ui-label';
var Label = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Label.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, circular = props.circular, color = props.color, content = props.content, icon = props.icon, iconPosition = props.iconPosition, design = props.design, styles = props.styles, variables = props.variables, image = props.image, imagePosition = props.imagePosition;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: Label.displayName,
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(Label.displayName, {
        className: exports.labelClassName,
        mapPropsToStyles: function () { return ({
            hasActionableIcon: _.has(icon, 'onClick'),
            hasImage: !!image,
            hasIcon: !!icon,
            circular: circular,
            color: color,
            imagePosition: imagePosition,
            iconPosition: iconPosition,
        }); },
        mapPropsToInlineStyles: function () { return ({ className: className, design: design, styles: styles, variables: variables }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Label.handledProps, props);
    if (utils_1.childrenExist(children)) {
        var element_1 = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), children));
        setEnd();
        return element_1;
    }
    var imageElement = Image_1.default.create(image, {
        defaultProps: function () { return ({
            styles: resolvedStyles.image,
        }); },
    });
    var iconElement = Box_1.default.create(icon, {
        defaultProps: function () { return ({
            styles: resolvedStyles.icon,
        }); },
    });
    var contentElement = Box_1.default.create(content, {
        defaultProps: function () { return ({
            styles: resolvedStyles.content,
        }); },
    });
    var startImage = imagePosition === 'start' && imageElement;
    var startIcon = iconPosition === 'start' && iconElement;
    var endIcon = iconPosition === 'end' && iconElement;
    var endImage = imagePosition === 'end' && imageElement;
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root }, unhandledProps))),
        startImage,
        startIcon,
        contentElement,
        endIcon,
        endImage));
    setEnd();
    return element;
};
Label.displayName = 'Label';
Label.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ color: true, content: 'shorthand' })), { circular: PropTypes.bool, icon: customPropTypes.shorthandAllowingChildren, iconPosition: PropTypes.oneOf(['start', 'end']), image: customPropTypes.itemShorthandWithoutJSX, imagePosition: PropTypes.oneOf(['start', 'end']), fluid: PropTypes.bool });
Label.handledProps = Object.keys(Label.propTypes);
Label.defaultProps = {
    as: 'span',
    imagePosition: 'start',
    iconPosition: 'end',
};
Label.create = utils_1.createShorthandFactory({ Component: Label, mappedProp: 'content' });
/**
 * A Label allows user to classify content.
 */
exports.default = types_1.withSafeTypeForAs(Label);
