import { Accessibility } from '@fluentui/accessibility';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps, ContentComponentProps, ColorComponentProps, AlignValue, ShorthandFactory } from '../../utils';
import { HeaderDescriptionProps } from './HeaderDescription';
import { ShorthandValue } from '../../types';
export interface HeaderProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps, ColorComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     */
    accessibility?: Accessibility;
    /** Shorthand for Header.Description. */
    description?: ShorthandValue<HeaderDescriptionProps>;
    /** Align header content. */
    align?: AlignValue;
}
export declare const headerClassName = "ui-header";
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & HeaderProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<any>;
        description?: ShorthandValue<HeaderDescriptionProps>;
        align?: "center" | "end" | "start" | "justify";
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        children?: React.ReactNode;
        content?: React.ReactNode;
        color?: string;
        ref?: React.LegacyRef<HTMLHeadingElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLHeadingElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLHeadingElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLHeadingElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLHeadingElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLHeadingElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLHeadingElement>) => void;
        onChange?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onInput?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onReset?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLHeadingElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLHeadingElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLHeadingElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLHeadingElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLHeadingElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLHeadingElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLHeadingElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLHeadingElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLHeadingElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLHeadingElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLHeadingElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLHeadingElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLHeadingElement>) => void;
    }): JSX.Element;
} & {
    contextType: any;
    displayName: string;
    handledProps: string[];
    unhandledProps: string[];
    create: ShorthandFactory<HeaderProps>;
    deprecated_className: string;
    _handledPropsCache: string[];
    Description: {
        <Tag_1>(x: {
            as: Tag_1;
        } & HeaderDescriptionProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<any>;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            content?: React.ReactNode;
            color?: string;
            ref?: React.LegacyRef<HTMLParagraphElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLParagraphElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLParagraphElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLParagraphElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLParagraphElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLParagraphElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLParagraphElement>) => void;
            onChange?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onInput?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onReset?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLParagraphElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLParagraphElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLParagraphElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLParagraphElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLParagraphElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLParagraphElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLParagraphElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLParagraphElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLParagraphElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLParagraphElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLParagraphElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLParagraphElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLParagraphElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLParagraphElement>) => void;
        }): JSX.Element;
    } & {
        contextType: any;
        displayName: string;
        handledProps: string[];
        unhandledProps: string[];
        create: ShorthandFactory<HeaderDescriptionProps>;
        deprecated_className: string;
        _handledPropsCache: string[];
    };
};
/**
 * A Header organises the content by declaring a content's topic.
 *
 * @accessibility
 * Headings communicate the organization of the content on the page. Web browsers, plug-ins, and assistive technologies can use them to provide in-page navigation.
 * Nest headings by their rank (or level). The most important heading has the rank 1 (<h1>), the least important heading rank 6 (<h6>). Headings with an equal or higher rank start a new section, headings with a lower rank start new subsections that are part of the higher ranked section.
 *
 * Other considerations:
 *  - when the description property is used in header, readers will narrate both header content and description within the element. In addition to that, both will be displayed in the list of headings.
 */
export default _default;
