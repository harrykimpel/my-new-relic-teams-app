"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var HeaderDescription_1 = require("./HeaderDescription");
var types_1 = require("../../types");
exports.headerClassName = 'ui-header';
var Header = /** @class */ (function (_super) {
    tslib_1.__extends(Header, _super);
    function Header() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Header.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, v = _a.variables, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, description = _b.description, content = _b.content;
        var hasChildren = utils_1.childrenExist(children);
        var contentElement = utils_1.childrenExist(children) ? children : content;
        return (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({
            forElements: [children, content],
            condition: !description,
        }), accessibility.attributes.root, unhandledProps, { className: classes.root }),
            utils_1.rtlTextContainer.createFor({ element: contentElement, condition: !!description }),
            !hasChildren &&
                HeaderDescription_1.default.create(description, {
                    defaultProps: function () { return ({
                        variables: tslib_1.__assign({}, (v.descriptionColor && { color: v.descriptionColor })),
                    }); },
                })));
    };
    Header.displayName = 'Header';
    Header.deprecated_className = exports.headerClassName;
    Header.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ color: true })), { description: customPropTypes.itemShorthand, align: customPropTypes.align, rtlAttributes: PropTypes.func });
    Header.defaultProps = {
        as: 'h1',
    };
    Header.Description = HeaderDescription_1.default;
    return Header;
}(utils_1.UIComponent));
Header.create = utils_1.createShorthandFactory({ Component: Header, mappedProp: 'content' });
/**
 * A Header organises the content by declaring a content's topic.
 *
 * @accessibility
 * Headings communicate the organization of the content on the page. Web browsers, plug-ins, and assistive technologies can use them to provide in-page navigation.
 * Nest headings by their rank (or level). The most important heading has the rank 1 (<h1>), the least important heading rank 6 (<h6>). Headings with an equal or higher rank start a new section, headings with a lower rank start new subsections that are part of the higher ranked section.
 *
 * Other considerations:
 *  - when the description property is used in header, readers will narrate both header content and description within the element. In addition to that, both will be displayed in the list of headings.
 */
exports.default = types_1.withSafeTypeForAs(Header);
