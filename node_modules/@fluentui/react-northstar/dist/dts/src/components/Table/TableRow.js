"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
// @ts-ignore
var react_fela_1 = require("react-fela");
var PropTypes = require("prop-types");
var React = require("react");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var TableCell_1 = require("./TableCell");
var handleVariablesOverrides = function (variables) { return function (predefinedProps) { return ({
    variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
}); }; };
exports.tableRowClassName = 'ui-table__row';
var TableRow = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(TableRow.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var rowRef = React.useRef();
    var className = props.className, design = props.design, styles = props.styles, items = props.items, header = props.header, compact = props.compact, children = props.children, accessibility = props.accessibility, variables = props.variables, selected = props.selected;
    var hasChildren = utils_1.childrenExist(children);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(TableRow.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: TableRow.displayName,
        actionHandlers: {
            // https://github.com/microsoft/fluent-ui-react/issues/2150
            unsetRowTabbable: function (e) {
                rowRef.current.setAttribute('tabindex', '-1');
            },
            performClick: function (e) {
                handleClick(e);
            },
        },
        mapPropsToBehavior: function () { return ({
            selected: selected,
            header: header,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(TableRow.displayName, {
        className: exports.tableRowClassName,
        mapPropsToStyles: function () { return ({
            header: header,
            compact: compact,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleClick = function (e) {
        if (e.currentTarget === e.target) {
            _.invoke(props, 'onClick', e, props);
            e.preventDefault();
        }
    };
    var renderCells = function () {
        return _.map(items, function (item, index) {
            var overrideProps = handleVariablesOverrides(variables);
            return TableCell_1.default.create(item, {
                defaultProps: function () {
                    return getA11yProps('cell', tslib_1.__assign({}, overrideProps));
                },
            });
        });
    };
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: rowRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick }, unhandledProps))),
        hasChildren && children,
        !hasChildren && renderCells()))));
    setEnd();
    return element;
};
TableRow.displayName = 'TableRow';
TableRow.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { items: customPropTypes.collectionShorthand, header: PropTypes.bool, compact: PropTypes.bool, selected: PropTypes.bool, onClick: PropTypes.func });
TableRow.handledProps = Object.keys(TableRow.propTypes);
TableRow.defaultProps = {
    accessibility: accessibility_1.tableRowBehavior,
};
TableRow.create = utils_1.createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });
/**
 * Component represents a single row in a tabular structure
 */
exports.default = types_1.withSafeTypeForAs(TableRow);
