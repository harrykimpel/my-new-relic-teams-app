"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Box_1 = require("../Box/Box");
var Text_1 = require("../Text/Text");
exports.loaderClassName = 'ui-loader';
exports.loaderSlotClassNames = {
    indicator: exports.loaderClassName + "__indicator",
    label: exports.loaderClassName + "__label",
    svg: exports.loaderClassName + "__svg",
};
/**
 * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.
 */
var Loader = /** @class */ (function (_super) {
    tslib_1.__extends(Loader, _super);
    function Loader(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            visible: _this.props.delay === 0,
            labelId: '',
        };
        return _this;
    }
    Loader.getDerivedStateFromProps = function (props, state) {
        return {
            labelId: utils_1.getOrGenerateIdFromShorthand('loader-label-', props.label, state.labelId),
        };
    };
    Loader.prototype.componentDidMount = function () {
        var _this = this;
        var delay = this.props.delay;
        if (delay > 0) {
            // @ts-ignore We have a collision between types from DOM and @types/node
            this.delayTimer = setTimeout(function () {
                _this.setState({ visible: true });
            }, delay);
        }
    };
    Loader.prototype.componentWillUnmount = function () {
        clearTimeout(this.delayTimer);
    };
    Loader.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, variables = _a.variables, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var _b = this.props, indicator = _b.indicator, label = _b.label, svg = _b.svg;
        var _c = this.state, visible = _c.visible, labelId = _c.labelId;
        var svgElement = Box_1.default.create(svg, {
            defaultProps: function () { return ({ className: exports.loaderSlotClassNames.svg, styles: styles.svg }); },
        });
        return (visible && (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps),
            Box_1.default.create(indicator, {
                defaultProps: function () { return ({
                    children: svgElement,
                    className: exports.loaderSlotClassNames.indicator,
                    styles: styles.indicator,
                }); },
            }),
            Text_1.default.create(label, {
                defaultProps: function () { return ({
                    className: exports.loaderSlotClassNames.label,
                    styles: styles.label,
                    id: labelId,
                }); },
            }))));
    };
    Loader.displayName = 'Loader';
    Loader.deprecated_className = exports.loaderClassName;
    Loader.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        children: false,
        content: false,
    })), { delay: PropTypes.number, indicator: customPropTypes.itemShorthand, inline: PropTypes.bool, label: customPropTypes.itemShorthand, labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']), size: customPropTypes.size, svg: customPropTypes.itemShorthand });
    Loader.defaultProps = {
        accessibility: accessibility_1.loaderBehavior,
        delay: 0,
        indicator: {},
        labelPosition: 'below',
        svg: '',
        size: 'medium',
    };
    return Loader;
}(utils_1.UIComponent));
Loader.create = utils_1.createShorthandFactory({ Component: Loader, mappedProp: 'label' });
Loader.shorthandConfig = { mappedProp: 'label' };
/**
 * A Loader alerts a user to wait for an activity to complete.
 *
 * @accessibility
 * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.
 */
exports.default = types_1.withSafeTypeForAs(Loader);
