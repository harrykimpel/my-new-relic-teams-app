"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var classnames_1 = require("classnames");
var utils_1 = require("../../utils");
var Layout_1 = require("../Layout/Layout");
var types_1 = require("../../types");
exports.itemLayoutClassName = 'ui-itemlayout';
exports.itemLayoutSlotClassNames = {
    header: exports.itemLayoutClassName + "__header",
    headerMedia: exports.itemLayoutClassName + "__headerMedia",
    main: exports.itemLayoutClassName + "__main",
    content: exports.itemLayoutClassName + "__content",
    contentMedia: exports.itemLayoutClassName + "__contentMedia",
    media: exports.itemLayoutClassName + "__media",
    endMedia: exports.itemLayoutClassName + "__endMedia",
};
var ItemLayout = /** @class */ (function (_super) {
    tslib_1.__extends(ItemLayout, _super);
    function ItemLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemLayout.prototype.renderComponent = function (_a) {
        var classes = _a.classes, unhandledProps = _a.unhandledProps, styles = _a.styles;
        var _b = this.props, as = _b.as, debug = _b.debug, endMedia = _b.endMedia, media = _b.media, renderMainArea = _b.renderMainArea, rootCSS = _b.rootCSS, mediaCSS = _b.mediaCSS, endMediaCSS = _b.endMediaCSS;
        var startArea = media;
        var mainArea = renderMainArea(this.props, this.state, classes);
        var endArea = endMedia;
        var mergedMediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.media, classes.media);
        var mergedEndMediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.endMedia, classes.endMedia);
        return (React.createElement(Layout_1.default, tslib_1.__assign({ as: as, className: classes.root, styles: styles.root, rootCSS: rootCSS, alignItems: "center", gap: utils_1.pxToRem(8), debug: debug, reducing: true, start: startArea && (React.createElement("span", { style: mediaCSS, className: mergedMediaClasses }, utils_1.rtlTextContainer.createFor({ element: startArea }))), main: mainArea, end: endArea && (React.createElement("span", { style: endMediaCSS, className: mergedEndMediaClasses }, utils_1.rtlTextContainer.createFor({ element: endArea }))) }, unhandledProps)));
    };
    ItemLayout.displayName = 'ItemLayout';
    ItemLayout.deprecated_className = exports.itemLayoutClassName;
    ItemLayout.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        accessibility: false,
        children: false,
        content: false,
    })), { contentMedia: PropTypes.any, content: PropTypes.any, debug: PropTypes.bool, header: PropTypes.any, endMedia: PropTypes.any, headerMedia: PropTypes.any, media: PropTypes.any, renderContentArea: PropTypes.func, renderHeaderArea: PropTypes.func, renderMainArea: PropTypes.func, rootCSS: PropTypes.object, mediaCSS: PropTypes.object, headerCSS: PropTypes.object, headerMediaCSS: PropTypes.object, contentCSS: PropTypes.object, contentMediaCSS: PropTypes.object, endMediaCSS: PropTypes.object });
    ItemLayout.defaultProps = {
        as: 'div',
        renderMainArea: function (props, state, classes) {
            var renderHeaderArea = props.renderHeaderArea, renderContentArea = props.renderContentArea;
            var headerArea = renderHeaderArea(props, state, classes);
            var contentArea = renderContentArea(props, state, classes);
            return (React.createElement("div", { className: exports.itemLayoutSlotClassNames.main, style: {
                    gridTemplateRows: '1fr 1fr',
                } },
                headerArea,
                contentArea));
        },
        renderHeaderArea: function (props, state, classes) {
            var debug = props.debug, header = props.header, headerMedia = props.headerMedia, headerCSS = props.headerCSS, headerMediaCSS = props.headerMediaCSS;
            var mergedClasses = classnames_1.default(exports.itemLayoutSlotClassNames.header, classes.header);
            var mediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.headerMedia, classes.headerMedia);
            return !header && !headerMedia ? null : (React.createElement(Layout_1.default, { className: mergedClasses, alignItems: "end", gap: utils_1.pxToRem(8), debug: debug, main: utils_1.rtlTextContainer.createFor({ element: header }), rootCSS: headerCSS, end: headerMedia && (React.createElement("span", { style: headerMediaCSS, className: mediaClasses }, utils_1.rtlTextContainer.createFor({ element: headerMedia }))) }));
        },
        renderContentArea: function (props, state, classes) {
            var debug = props.debug, content = props.content, contentMedia = props.contentMedia, contentCSS = props.contentCSS, contentMediaCSS = props.contentMediaCSS;
            var mergedClasses = classnames_1.default(exports.itemLayoutSlotClassNames.content, classes.content);
            var mediaClasses = classnames_1.default(exports.itemLayoutSlotClassNames.contentMedia, classes.contentMedia);
            return !content && !contentMedia ? null : (React.createElement(Layout_1.default, { className: mergedClasses, alignItems: "start", gap: utils_1.pxToRem(8), debug: debug, rootCSS: contentCSS, main: utils_1.rtlTextContainer.createFor({ element: content }), end: contentMedia && (React.createElement("span", { style: contentMediaCSS, className: mediaClasses }, utils_1.rtlTextContainer.createFor({ element: contentMedia }))) }));
        },
    };
    return ItemLayout;
}(utils_1.UIComponent));
ItemLayout.create = utils_1.createShorthandFactory({ Component: ItemLayout, mappedProp: 'content' });
/**
 * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.
 */
exports.default = types_1.withSafeTypeForAs(ItemLayout);
