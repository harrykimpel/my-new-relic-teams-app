import { Accessibility } from '@fluentui/accessibility';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps, ShorthandFactory } from '../../utils';
import { MenuItemProps } from './MenuItem';
import { ShorthandCollection, ShorthandValue, ComponentEventHandler } from '../../types';
import { BoxProps } from '../Box/Box';
export declare type MenuShorthandKinds = 'divider' | 'item';
export interface MenuProps extends UIComponentProps, ChildrenComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     * @available menuAsToolbarBehavior, tabListBehavior, tabBehavior
     */
    accessibility?: Accessibility;
    /** Index of the currently active item. */
    activeIndex?: number | string;
    /** Initial activeIndex value. */
    defaultActiveIndex?: number | string;
    /** A vertical menu may take the size of its container. */
    fluid?: boolean;
    /** A menu may have just icons. */
    iconOnly?: boolean;
    /** Shorthand array of props for Menu. */
    items?: ShorthandCollection<MenuItemProps, MenuShorthandKinds>;
    /**
     * Called when a panel title is clicked.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All item props.
     */
    onItemClick?: ComponentEventHandler<MenuItemProps>;
    /**
     * Called when the active index of the Menu changes.
     * @param event - React's original SyntheticEvent.
     * @param data - All props, with `activeIndex` reflecting the new state.
     */
    onActiveIndexChange?: ComponentEventHandler<MenuProps>;
    /** A menu can adjust its appearance to de-emphasize its contents. */
    pills?: boolean;
    /**
     * A menu can point to show its relationship to nearby content.
     * For vertical menu, it can point to the start of the item or to the end.
     */
    pointing?: boolean | 'start' | 'end';
    /** The menu can have primary type. */
    primary?: boolean;
    /** The menu can have secondary type. */
    secondary?: boolean;
    /** Menu items can by highlighted using underline. */
    underlined?: boolean;
    /** A vertical menu displays elements vertically. */
    vertical?: boolean;
    /** Indicates whether the menu is submenu. */
    submenu?: boolean;
    /** Shorthand for the submenu indicator. */
    indicator?: ShorthandValue<BoxProps>;
}
export interface MenuState {
    activeIndex?: number | string;
}
export declare const menuClassName = "ui-menu";
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & MenuProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<any>;
        activeIndex?: import("csstype").AnimationIterationCountProperty;
        defaultActiveIndex?: import("csstype").AnimationIterationCountProperty;
        fluid?: boolean;
        iconOnly?: boolean;
        items?: ShorthandCollection<MenuItemProps, MenuShorthandKinds>;
        onItemClick?: ComponentEventHandler<MenuItemProps>;
        onActiveIndexChange?: ComponentEventHandler<MenuProps>;
        pills?: boolean;
        pointing?: boolean | "end" | "start";
        primary?: boolean;
        secondary?: boolean;
        underlined?: boolean;
        vertical?: boolean;
        submenu?: boolean;
        indicator?: ShorthandValue<BoxProps>;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        children?: React.ReactNode;
        ref?: React.LegacyRef<HTMLUListElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onChange?: (event: React.FormEvent<HTMLUListElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLUListElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInput?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onReset?: (event: React.FormEvent<HTMLUListElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLUListElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLUListElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLUListElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLUListElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLUListElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLUListElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLUListElement>) => void;
    }): JSX.Element;
} & {
    contextType: any;
    displayName: string;
    getDerivedStateFromProps: React.GetDerivedStateFromProps<any, any>;
    handledProps: string[];
    autoControlledProps: string[];
    getAutoControlledStateFromProps: React.GetDerivedStateFromProps<any, any>;
    unhandledProps: string[];
    create: ShorthandFactory<MenuProps>;
    deprecated_className: string;
    _handledPropsCache: string[];
    Item: {
        <Tag_1>(x: {
            as: Tag_1;
        } & MenuItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<any>;
            active?: boolean;
            disabled?: boolean;
            icon?: ShorthandValue<BoxProps>;
            iconOnly?: boolean;
            index?: number;
            itemPosition?: number;
            itemsCount?: number;
            onClick?: ComponentEventHandler<MenuItemProps>;
            onFocus?: ComponentEventHandler<MenuItemProps>;
            onBlur?: ComponentEventHandler<MenuItemProps>;
            pills?: boolean;
            pointing?: boolean | "end" | "start";
            primary?: boolean;
            secondary?: boolean;
            underlined?: boolean;
            vertical?: boolean;
            wrapper?: ShorthandValue<BoxProps>;
            menu?: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | import("../../types").ObjectShorthandValue<MenuProps & {
                popper?: import("../..").PositioningProps;
            }> | ShorthandCollection<MenuItemProps, MenuShorthandKinds>;
            menuOpen?: boolean;
            defaultMenuOpen?: boolean;
            onActiveChanged?: ComponentEventHandler<MenuItemProps>;
            inSubmenu?: boolean;
            indicator?: ShorthandValue<BoxProps>;
            onMenuOpenChange?: ComponentEventHandler<MenuItemProps>;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            content?: React.ReactNode;
            ref?: React.LegacyRef<HTMLAnchorElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            download?: any;
            href?: string;
            hrefLang?: string;
            media?: string;
            ping?: string;
            rel?: string;
            target?: string;
            type?: string;
            referrerPolicy?: string;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLAnchorElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLAnchorElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLAnchorElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLAnchorElement>) => void;
            onChange?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onInput?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onReset?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLAnchorElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLAnchorElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLAnchorElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLAnchorElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLAnchorElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLAnchorElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLAnchorElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLAnchorElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLAnchorElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLAnchorElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLAnchorElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLAnchorElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLAnchorElement>) => void;
        }): JSX.Element;
    } & {
        contextType: any;
        displayName: string;
        getDerivedStateFromProps: React.GetDerivedStateFromProps<any, any>;
        handledProps: string[];
        autoControlledProps: string[];
        getAutoControlledStateFromProps: React.GetDerivedStateFromProps<any, any>;
        unhandledProps: string[];
        create: ShorthandFactory<MenuItemProps>;
        deprecated_className: string;
        _handledPropsCache: string[];
    };
    Divider: {
        <Tag_2>(x: {
            as: Tag_2;
        } & import("./MenuDivider").MenuDividerProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<any>;
            vertical?: boolean;
            primary?: boolean;
            secondary?: boolean;
            inSubmenu?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            content?: React.ReactNode;
            ref?: React.LegacyRef<HTMLLIElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            value?: string | number | string[];
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onChange?: (event: React.FormEvent<HTMLLIElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLLIElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInput?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onReset?: (event: React.FormEvent<HTMLLIElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLLIElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLLIElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLLIElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLLIElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLLIElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLLIElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLLIElement>) => void;
        }): JSX.Element;
    } & {
        contextType: any;
        displayName: string;
        handledProps: string[];
        unhandledProps: string[];
        create: ShorthandFactory<import("./MenuDivider").MenuDividerProps>;
        deprecated_className: string;
        _handledPropsCache: string[];
    };
};
/**
 * A Menu is a component that offers a grouped list of choices to the user.
 *
 * @accessibility
 * Implements ARIA [Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu), [Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) or [Tabs](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) design pattern, depending on the behavior used.
 * @accessibilityIssues
 * [JAWS - navigation instruction for menubar](https://github.com/FreedomScientific/VFO-standards-support/issues/203)
 * [JAWS - navigation instruction for menu with aria-orientation="horizontal"](https://github.com/FreedomScientific/VFO-standards-support/issues/204)
 * [JAWS [VC] doesn't narrate menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/324)
 * [JAWS [app mode] focus moves to second menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/325)
 * [Enter into a tablist JAWS narrates: To switch pages, press Control+PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/337)
 * 51114083 VoiceOver+Web narrate wrong position in menu / total count of menu items, when pseudo element ::after or ::before is used
 */
export default _default;
