"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var MenuItem_1 = require("./MenuItem");
var types_1 = require("../../types");
var MenuDivider_1 = require("./MenuDivider");
exports.menuClassName = 'ui-menu';
var Menu = /** @class */ (function (_super) {
    tslib_1.__extends(Menu, _super);
    function Menu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setActiveIndex = function (e, activeIndex) {
            _.invoke(_this.props, 'onActiveIndexChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { activeIndex: activeIndex }));
            _this.setState({ activeIndex: activeIndex });
        };
        _this.handleItemOverrides = function (variables) { return function (predefinedProps) { return ({
            onClick: function (e, itemProps) {
                var index = itemProps.index;
                _this.setActiveIndex(e, index);
                _.invoke(_this.props, 'onItemClick', e, itemProps);
                _.invoke(predefinedProps, 'onClick', e, itemProps);
            },
            onActiveChanged: function (e, props) {
                var index = props.index, active = props.active;
                if (active) {
                    _this.setActiveIndex(e, index);
                }
                else if (_this.state.activeIndex === index) {
                    _this.setActiveIndex(e, null);
                }
                _.invoke(predefinedProps, 'onActiveChanged', e, props);
            },
            variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
        }); }; };
        _this.handleDividerOverrides = function (variables) { return function (predefinedProps) { return ({
            variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
        }); }; };
        _this.renderItems = function (styles, variables, accessibility) {
            var _a = _this.props, iconOnly = _a.iconOnly, items = _a.items, pills = _a.pills, pointing = _a.pointing, primary = _a.primary, secondary = _a.secondary, underlined = _a.underlined, vertical = _a.vertical, submenu = _a.submenu, indicator = _a.indicator;
            var activeIndex = _this.state.activeIndex;
            var itemsCount = _.filter(items, function (item) { return utils_1.getKindProp(item, 'item') !== 'divider'; }).length;
            var itemPosition = 0;
            var overrideItemProps = _this.handleItemOverrides(variables);
            var overrideDividerProps = _this.handleDividerOverrides(variables);
            return _.map(items, function (item, index) {
                var active = (typeof activeIndex === 'string' ? parseInt(activeIndex, 10) : activeIndex) === index;
                var kind = utils_1.getKindProp(item, 'item');
                if (kind === 'divider') {
                    return MenuDivider_1.default.create(item, {
                        defaultProps: function () { return ({
                            primary: primary,
                            secondary: secondary,
                            vertical: vertical,
                            styles: styles.divider,
                            inSubmenu: submenu,
                            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.divider : undefined,
                        }); },
                        overrideProps: overrideDividerProps,
                    });
                }
                itemPosition++;
                return MenuItem_1.default.create(item, {
                    defaultProps: function () { return ({
                        iconOnly: iconOnly,
                        pills: pills,
                        pointing: pointing,
                        primary: primary,
                        secondary: secondary,
                        underlined: underlined,
                        vertical: vertical,
                        index: index,
                        itemPosition: itemPosition,
                        itemsCount: itemsCount,
                        active: active,
                        inSubmenu: submenu,
                        indicator: indicator,
                        accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,
                    }); },
                    overrideProps: overrideItemProps,
                });
            });
        };
        return _this;
    }
    Menu.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, variables = _a.variables, unhandledProps = _a.unhandledProps;
        var children = this.props.children;
        return (React.createElement(ElementType, tslib_1.__assign({}, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), unhandledProps, { className: classes.root }), utils_1.childrenExist(children) ? children : this.renderItems(styles, variables, accessibility)));
    };
    Menu.displayName = 'Menu';
    Menu.deprecated_className = exports.menuClassName;
    Menu.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), fluid: PropTypes.bool, iconOnly: PropTypes.bool, items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']), onItemClick: PropTypes.func, onActiveIndexChange: PropTypes.func, pills: PropTypes.bool, pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]), primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), underlined: PropTypes.bool, vertical: PropTypes.bool, submenu: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren });
    Menu.defaultProps = {
        as: 'ul',
        accessibility: accessibility_1.menuBehavior,
    };
    Menu.autoControlledProps = ['activeIndex'];
    Menu.Item = MenuItem_1.default;
    Menu.Divider = MenuDivider_1.default;
    return Menu;
}(utils_1.AutoControlledComponent));
Menu.create = utils_1.createShorthandFactory({ Component: Menu, mappedArrayProp: 'items' });
/**
 * A Menu is a component that offers a grouped list of choices to the user.
 *
 * @accessibility
 * Implements ARIA [Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu), [Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) or [Tabs](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) design pattern, depending on the behavior used.
 * @accessibilityIssues
 * [JAWS - navigation instruction for menubar](https://github.com/FreedomScientific/VFO-standards-support/issues/203)
 * [JAWS - navigation instruction for menu with aria-orientation="horizontal"](https://github.com/FreedomScientific/VFO-standards-support/issues/204)
 * [JAWS [VC] doesn't narrate menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/324)
 * [JAWS [app mode] focus moves to second menu item, when it is open from menu button](https://github.com/FreedomScientific/VFO-standards-support/issues/325)
 * [Enter into a tablist JAWS narrates: To switch pages, press Control+PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/337)
 * 51114083 VoiceOver+Web narrate wrong position in menu / total count of menu items, when pseudo element ::after or ::before is used
 */
exports.default = types_1.withSafeTypeForAs(Menu);
