"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var HierarchicalTreeItem_1 = require("./HierarchicalTreeItem");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
exports.hierarchicalTreeClassName = 'ui-hierarchicaltree';
var HierarchicalTree = /** @class */ (function (_super) {
    tslib_1.__extends(HierarchicalTree, _super);
    function HierarchicalTree() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionHandlers = {
            expandSiblings: function (e) {
                var _a = _this.props, items = _a.items, exclusive = _a.exclusive;
                e.preventDefault();
                e.stopPropagation();
                if (exclusive) {
                    return;
                }
                var activeIndex = items
                    ? items.reduce(function (acc, item, index) {
                        if (item['items']) {
                            return tslib_1.__spreadArrays(acc, [index]);
                        }
                        return acc;
                    }, [])
                    : [];
                _this.trySetActiveIndexAndTriggerEvent(e, activeIndex);
            },
        };
        _this.trySetActiveIndexAndTriggerEvent = function (e, activeIndex) {
            _this.setState({ activeIndex: activeIndex });
            _.invoke(_this.props, 'onActiveIndexChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { activeIndex: activeIndex }));
        };
        _this.computeNewIndex = function (treeItemProps) {
            var index = treeItemProps.index, items = treeItemProps.items;
            var activeIndexes = _this.getActiveIndexes();
            var exclusive = _this.props.exclusive;
            if (!items) {
                return activeIndexes;
            }
            if (exclusive)
                return index;
            // check to see if index is in array, and remove it, if not then add it
            return _.includes(activeIndexes, index) ? _.without(activeIndexes, index) : tslib_1.__spreadArrays(activeIndexes, [index]);
        };
        _this.handleTreeItemOverrides = function (predefinedProps) { return ({
            onTitleClick: function (e, treeItemProps) {
                _this.trySetActiveIndexAndTriggerEvent(e, _this.computeNewIndex(treeItemProps));
                _.invoke(predefinedProps, 'onTitleClick', e, treeItemProps);
            },
        }); };
        return _this;
    }
    HierarchicalTree.prototype.getInitialAutoControlledState = function (_a) {
        var exclusive = _a.exclusive;
        return {
            activeIndex: exclusive ? -1 : [],
        };
    };
    HierarchicalTree.prototype.getActiveIndexes = function () {
        var activeIndex = this.state.activeIndex;
        return _.isArray(activeIndex) ? activeIndex : [activeIndex];
    };
    HierarchicalTree.prototype.renderContent = function () {
        var _this = this;
        var _a = this.props, items = _a.items, renderItemTitle = _a.renderItemTitle, exclusive = _a.exclusive;
        var activeIndex = this.state.activeIndex;
        var activeIndexes = this.getActiveIndexes();
        return _.map(items, function (item, index) {
            return HierarchicalTreeItem_1.default.create(item, {
                defaultProps: function () { return ({
                    index: index,
                    exclusive: exclusive,
                    renderItemTitle: renderItemTitle,
                    open: exclusive ? index === activeIndex : _.includes(activeIndexes, index),
                }); },
                overrideProps: _this.handleTreeItemOverrides,
            });
        });
    };
    HierarchicalTree.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, unhandledProps = _a.unhandledProps, styles = _a.styles, variables = _a.variables;
        var children = this.props.children;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), utils_1.childrenExist(children) ? children : this.renderContent()));
    };
    HierarchicalTree.displayName = 'HierarchicalTree';
    HierarchicalTree.deprecated_className = exports.hierarchicalTreeClassName;
    HierarchicalTree.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { activeIndex: customPropTypes.every([
            customPropTypes.disallow(['children']),
            PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
        ]), defaultActiveIndex: customPropTypes.every([
            customPropTypes.disallow(['children']),
            PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),
        ]), exclusive: PropTypes.bool, items: customPropTypes.collectionShorthand, renderItemTitle: PropTypes.func, onActiveIndexChange: PropTypes.func });
    HierarchicalTree.defaultProps = {
        as: 'ul',
        accessibility: accessibility_1.hierarchicalTreeBehavior,
    };
    HierarchicalTree.autoControlledProps = ['activeIndex'];
    return HierarchicalTree;
}(utils_1.AutoControlledComponent));
HierarchicalTree.create = utils_1.createShorthandFactory({
    Component: HierarchicalTree,
    mappedArrayProp: 'items',
});
/**
 * (DEPRECATED) A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(HierarchicalTree);
