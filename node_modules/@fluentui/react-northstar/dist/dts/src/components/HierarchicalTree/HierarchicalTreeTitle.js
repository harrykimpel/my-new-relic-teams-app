"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
exports.hierarchicalTreeTitleClassName = 'ui-hierarchicaltree__title';
var HierarchicalTreeTitle = /** @class */ (function (_super) {
    tslib_1.__extends(HierarchicalTreeTitle, _super);
    function HierarchicalTreeTitle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionHandlers = {
            performClick: function (e) {
                e.preventDefault();
                _this.handleClick(e);
            },
        };
        _this.handleClick = function (e) {
            _.invoke(_this.props, 'onClick', e, _this.props);
        };
        return _this;
    }
    HierarchicalTreeTitle.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, unhandledProps = _a.unhandledProps, styles = _a.styles, variables = _a.variables;
        var _b = this.props, children = _b.children, content = _b.content;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onClick: this.handleClick }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] }), unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), utils_1.childrenExist(children) ? children : content));
    };
    HierarchicalTreeTitle.deprecated_className = exports.hierarchicalTreeTitleClassName;
    HierarchicalTreeTitle.displayName = 'HierarchicalTreeTitle';
    HierarchicalTreeTitle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { onClick: PropTypes.func, open: PropTypes.bool, hasSubtree: PropTypes.bool });
    HierarchicalTreeTitle.defaultProps = {
        as: 'a',
        accessibility: accessibility_1.hierarchicalTreeTitleBehavior,
    };
    return HierarchicalTreeTitle;
}(utils_1.UIComponent));
HierarchicalTreeTitle.create = utils_1.createShorthandFactory({
    Component: HierarchicalTreeTitle,
    mappedProp: 'content',
});
/**
 * A TreeTitle renders a title of TreeItem.
 */
exports.default = types_1.withSafeTypeForAs(HierarchicalTreeTitle);
