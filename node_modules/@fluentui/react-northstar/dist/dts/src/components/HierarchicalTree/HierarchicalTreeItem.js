"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var HierarchicalTree_1 = require("./HierarchicalTree");
var HierarchicalTreeTitle_1 = require("./HierarchicalTreeTitle");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
exports.hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
exports.hierarchicalTreeItemSlotClassNames = {
    subtree: exports.hierarchicalTreeItemClassName + "__subtree",
};
var HierarchicalTreeItem = /** @class */ (function (_super) {
    tslib_1.__extends(HierarchicalTreeItem, _super);
    function HierarchicalTreeItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemRef = React.createRef();
        _this.treeRef = React.createRef();
        _this.actionHandlers = {
            performClick: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _.invoke(_this.props, 'onTitleClick', e, _this.props);
            },
            receiveFocus: function (e) {
                e.preventDefault();
                e.stopPropagation();
                // Focuses the title if the event comes from a child item.
                if (_this.eventComesFromChildItem(e)) {
                    _this.itemRef.current.focus();
                }
            },
            collapse: function (e) {
                e.preventDefault();
                e.stopPropagation();
                // Handle click on title if the keyboard event was dispatched on that title
                if (!_this.eventComesFromChildItem(e)) {
                    _this.handleTitleClick(e);
                }
            },
            expand: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this.handleTitleClick(e);
            },
            focusSubtree: function (e) {
                e.preventDefault();
                e.stopPropagation();
                var element = react_bindings_1.getFirstFocusable(_this.treeRef.current, _this.treeRef.current, true);
                if (element) {
                    element.focus();
                }
            },
        };
        _this.eventComesFromChildItem = function (e) {
            return e.currentTarget !== e.target;
        };
        _this.handleTitleClick = function (e) {
            _.invoke(_this.props, 'onTitleClick', e, _this.props);
        };
        _this.handleTitleOverrides = function (predefinedProps) { return ({
            onClick: function (e, titleProps) {
                _this.handleTitleClick(e);
                _.invoke(predefinedProps, 'onClick', e, titleProps);
            },
        }); };
        return _this;
    }
    HierarchicalTreeItem.prototype.renderContent = function () {
        var _a = this.props, items = _a.items, title = _a.title, renderItemTitle = _a.renderItemTitle, open = _a.open, exclusive = _a.exclusive;
        var hasSubtree = !_.isNil(items);
        return (React.createElement(React.Fragment, null,
            HierarchicalTreeTitle_1.default.create(title, {
                defaultProps: function () { return ({
                    open: open,
                    hasSubtree: hasSubtree,
                    as: hasSubtree ? 'span' : 'a',
                }); },
                render: renderItemTitle,
                overrideProps: this.handleTitleOverrides,
            }),
            hasSubtree && open && (React.createElement(react_component_ref_1.Ref, { innerRef: this.treeRef }, HierarchicalTree_1.default.create(items, {
                defaultProps: function () { return ({
                    accessibility: accessibility_1.hierarchicalSubtreeBehavior,
                    className: exports.hierarchicalTreeItemSlotClassNames.subtree,
                    exclusive: exclusive,
                    renderItemTitle: renderItemTitle,
                }); },
            })))));
    };
    HierarchicalTreeItem.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, accessibility = _a.accessibility, classes = _a.classes, unhandledProps = _a.unhandledProps, styles = _a.styles, variables = _a.variables;
        var children = this.props.children;
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.itemRef },
            React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), utils_1.childrenExist(children) ? children : this.renderContent())));
    };
    HierarchicalTreeItem.displayName = 'HierarchicalTreeItem';
    HierarchicalTreeItem.deprecated_className = exports.hierarchicalTreeItemClassName;
    HierarchicalTreeItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { items: customPropTypes.collectionShorthand, index: PropTypes.number, exclusive: PropTypes.bool, onTitleClick: PropTypes.func, open: PropTypes.bool, renderItemTitle: PropTypes.func, title: customPropTypes.itemShorthand });
    HierarchicalTreeItem.defaultProps = {
        as: 'li',
        accessibility: accessibility_1.hierarchicalTreeItemBehavior,
    };
    return HierarchicalTreeItem;
}(utils_1.UIComponent));
HierarchicalTreeItem.create = utils_1.createShorthandFactory({
    Component: HierarchicalTreeItem,
    mappedProp: 'title',
});
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(HierarchicalTreeItem);
