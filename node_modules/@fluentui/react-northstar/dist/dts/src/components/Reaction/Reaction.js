"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Box_1 = require("../Box/Box");
var ReactionGroup_1 = require("./ReactionGroup");
exports.reactionClassName = 'ui-reaction';
exports.reactionSlotClassNames = {
    icon: exports.reactionClassName + "__icon",
    content: exports.reactionClassName + "__content",
};
var Reaction = /** @class */ (function (_super) {
    tslib_1.__extends(Reaction, _super);
    function Reaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Reaction.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, icon = _b.icon, content = _b.content;
        return (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), accessibility.attributes.root, unhandledProps, { className: classes.root }), utils_1.childrenExist(children) ? (children) : (React.createElement(React.Fragment, null,
            Box_1.default.create(icon, {
                defaultProps: function () { return ({
                    className: exports.reactionSlotClassNames.icon,
                    styles: styles.icon,
                }); },
            }),
            Box_1.default.create(content, {
                defaultProps: function () { return ({
                    className: exports.reactionSlotClassNames.content,
                    styles: styles.content,
                }); },
            })))));
    };
    Reaction.deprecated_className = exports.reactionClassName;
    Reaction.displayName = 'Reaction';
    Reaction.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: 'shorthand',
    })), { icon: customPropTypes.shorthandAllowingChildren });
    Reaction.defaultProps = {
        as: 'span',
    };
    Reaction.Group = ReactionGroup_1.default;
    return Reaction;
}(utils_1.UIComponent));
Reaction.create = utils_1.createShorthandFactory({ Component: Reaction, mappedProp: 'content' });
/**
 * A Reaction indicates user's emotion or perception.
 * Used to display user's reaction for entity in Chat (e.g. message).
 */
exports.default = types_1.withSafeTypeForAs(Reaction);
