import { Accessibility, CarouselBehaviorProps } from '@fluentui/accessibility';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps } from '../../utils';
import { WithAsProp, ShorthandCollection, ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';
import CarouselItem, { CarouselItemProps } from './CarouselItem';
import CarouselNavigation, { CarouselNavigationProps } from './CarouselNavigation';
import CarouselNavigationItem, { CarouselNavigationItemProps } from './CarouselNavigationItem';
import CarouselPaddle, { CarouselPaddleProps } from './CarouselPaddle';
export interface CarouselSlotClassNames {
    itemsContainer: string;
    paddleNext: string;
    paddlePrevious: string;
    pagination: string;
    navigation: string;
}
export interface CarouselProps extends UIComponentProps, ChildrenComponentProps {
    /**
     * Accessibility behavior if overridden by the user.
     * @available menuAsToolbarBehavior, tabListBehavior, tabBehavior
     */
    accessibility?: Accessibility<CarouselBehaviorProps>;
    /** Index of the currently active item. */
    activeIndex?: number;
    /**
     * Sets the aria-roledescription attribute.
     */
    ariaRoleDescription?: string;
    /**
     * Sets the aria-label attribute for carousel.
     */
    ariaLabel?: string;
    /** Specifies if the process of switching slides is circular. */
    circular?: boolean;
    /** Initial activeIndex value. */
    defaultActiveIndex?: number;
    /**
     * Message generator for item position in the carousel. Used to generate the
     * text for pagination. Also generates invisible text content for each item
     * which is added along with the slide content. These are used by the screen
     * reader to narrate position when active item is changed.
     */
    getItemPositionText?: (index: number, size: number) => string;
    /** Shorthand array of props for CarouselItem. */
    items?: ShorthandCollection<CarouselItemProps>;
    thumbnails?: boolean;
    /** Shorthand array of props for the buttons of the CarouselNavigation. */
    navigation?: ShorthandValue<CarouselNavigationProps> | ShorthandCollection<CarouselNavigationItemProps>;
    /**
     * A Carousel can position its navigation below the content by default,
     * above the content, to the start or to the end of the content.
     */
    navigationPosition?: 'below' | 'above' | 'start' | 'end';
    /**
     * Called when a panel title is clicked.
     *
     * @param {SyntheticEvent} event - React's original SyntheticEvent.
     * @param {object} data - All Carousel props.
     */
    onActiveIndexChange?: ComponentEventHandler<CarouselProps>;
    /** Shorthand for the paddle that navigates to the next item. */
    paddleNext?: ShorthandValue<CarouselPaddleProps>;
    /**
     * A Carousel can position its paddels inside the content, outside or inline
     * with the navigation component.
     */
    paddlesPosition?: 'inside' | 'outside' | 'inline';
    /** Shorthand for the paddle that navigates to the previous item. */
    paddlePrevious?: ShorthandValue<CarouselPaddleProps>;
}
export declare type CarouselStylesProps = {
    isFromKeyboard: boolean;
    shouldFocusContainer: boolean;
};
export declare const carouselClassName = "ui-carousel";
export declare const carouselSlotClassNames: CarouselSlotClassNames;
export declare const Carousel: React.FC<WithAsProp<CarouselProps>> & FluentComponentStaticProps<CarouselProps> & {
    Item: typeof CarouselItem;
    Navigation: typeof CarouselNavigation;
    NavigationItem: typeof CarouselNavigationItem;
    Paddle: typeof CarouselPaddle;
};
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & CarouselProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<CarouselBehaviorProps>;
        activeIndex?: number;
        ariaRoleDescription?: string;
        ariaLabel?: string;
        circular?: boolean;
        defaultActiveIndex?: number;
        getItemPositionText?: (index: number, size: number) => string;
        items?: ShorthandCollection<CarouselItemProps, never>;
        thumbnails?: boolean;
        navigation?: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | ShorthandCollection<CarouselNavigationItemProps, never> | import("../../types").ObjectShorthandValue<CarouselNavigationProps>;
        navigationPosition?: "end" | "start" | "above" | "below";
        onActiveIndexChange?: ComponentEventHandler<CarouselProps>;
        paddleNext?: ShorthandValue<CarouselPaddleProps>;
        paddlesPosition?: "inline" | "inside" | "outside";
        paddlePrevious?: ShorthandValue<CarouselPaddleProps>;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        children?: React.ReactNode;
        ref?: React.LegacyRef<HTMLDivElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
        onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
    }): JSX.Element;
} & {
    displayName: string;
    handledProps: ("children" | "navigation" | "className" | "variables" | "styles" | "accessibility" | "design" | "activeIndex" | "defaultActiveIndex" | "onActiveIndexChange" | "thumbnails" | "circular" | "items" | "ariaRoleDescription" | "ariaLabel" | "getItemPositionText" | "navigationPosition" | "paddleNext" | "paddlesPosition" | "paddlePrevious")[];
    create: import("../../utils").ShorthandFactory<CarouselProps>;
    shorthandConfig: import("../../utils").ShorthandConfig<CarouselProps>;
    Item: {
        <Tag_1>(x: {
            as: Tag_1;
        } & CarouselItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<import("@fluentui/accessibility").CarouselItemBehaviorProps>;
            active?: boolean;
            itemPositionText?: string;
            navigation?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            content?: React.ReactNode;
            ref?: React.LegacyRef<HTMLDivElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLDivElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLDivElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLDivElement>) => void;
            onChange?: (event: React.FormEvent<HTMLDivElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInput?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onReset?: (event: React.FormEvent<HTMLDivElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLDivElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLDivElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLDivElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLDivElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLDivElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLDivElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLDivElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLDivElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLDivElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLDivElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLDivElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("content" | "active" | "children" | "navigation" | "className" | "variables" | "styles" | "accessibility" | "design" | "itemPositionText")[];
        create: import("../../utils").ShorthandFactory<CarouselItemProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<CarouselItemProps>;
    };
    Navigation: {
        <Tag_2>(x: {
            as: Tag_2;
        } & CarouselNavigationProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<never>;
            activeIndex?: import("csstype").AnimationIterationCountProperty;
            iconOnly?: boolean;
            thumbnails?: boolean;
            items?: ShorthandCollection<CarouselNavigationItemProps, never>;
            onItemClick?: ComponentEventHandler<CarouselNavigationItemProps>;
            primary?: boolean;
            secondary?: boolean;
            vertical?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            ref?: React.LegacyRef<HTMLUListElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLUListElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLUListElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
            onChange?: (event: React.FormEvent<HTMLUListElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLUListElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onInput?: (event: React.FormEvent<HTMLUListElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onReset?: (event: React.FormEvent<HTMLUListElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLUListElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLUListElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLUListElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLUListElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLUListElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLUListElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLUListElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLUListElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLUListElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("vertical" | "children" | "className" | "variables" | "styles" | "accessibility" | "primary" | "secondary" | "design" | "activeIndex" | "thumbnails" | "iconOnly" | "items" | "onItemClick")[];
        create: import("../../utils").ShorthandFactory<CarouselNavigationProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<CarouselNavigationProps>;
    };
    NavigationItem: {
        <Tag_3>(x: {
            as: Tag_3;
        } & CarouselNavigationItemProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<any>;
            active?: boolean;
            indicator?: ShorthandValue<import("../..").BoxProps>;
            iconOnly?: boolean;
            index?: number;
            onClick?: ComponentEventHandler<CarouselNavigationItemProps>;
            primary?: boolean;
            secondary?: boolean;
            vertical?: boolean;
            thumbnails?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            children?: React.ReactNode;
            content?: React.ReactNode;
            ref?: React.LegacyRef<HTMLLIElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            value?: string | number | string[];
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLLIElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLLIElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLLIElement>) => void;
            onChange?: (event: React.FormEvent<HTMLLIElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLLIElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInput?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onReset?: (event: React.FormEvent<HTMLLIElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLLIElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLLIElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLLIElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLLIElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLLIElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLLIElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLLIElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLLIElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLLIElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLLIElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLLIElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLLIElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLLIElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLLIElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLLIElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("content" | "vertical" | "active" | "children" | "className" | "onClick" | "variables" | "styles" | "accessibility" | "primary" | "secondary" | "design" | "index" | "indicator" | "thumbnails" | "iconOnly")[];
        create: import("../../utils").ShorthandFactory<CarouselNavigationItemProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<CarouselNavigationItemProps>;
    };
    Paddle: {
        <Tag_4>(x: {
            as: Tag_4;
        } & CarouselPaddleProps & {
            [K: string]: any;
        }): JSX.Element;
        (x: {
            accessibility?: Accessibility<import("@fluentui/accessibility").ButtonBehaviorProps>;
            disabled?: boolean;
            hidden?: boolean;
            onClick?: ComponentEventHandler<CarouselPaddleProps>;
            next?: boolean;
            previous?: boolean;
            className?: string;
            design?: import("@fluentui/react-bindings").ComponentDesignProp;
            styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
            variables?: any;
            content?: ShorthandValue<import("../..").BoxProps>;
            children?: React.ReactNode;
            ref?: React.LegacyRef<HTMLButtonElement>;
            key?: import("csstype").AnimationIterationCountProperty;
            autoFocus?: boolean;
            form?: string;
            formAction?: string;
            formEncType?: string;
            formMethod?: string;
            formNoValidate?: boolean;
            formTarget?: string;
            name?: string;
            type?: "button" | "reset" | "submit";
            value?: string | number | string[];
            defaultChecked?: boolean;
            defaultValue?: string | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            contentEditable?: boolean;
            contextMenu?: string;
            dir?: string;
            draggable?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean;
            style?: React.CSSProperties;
            tabIndex?: number;
            title?: string;
            inputMode?: string;
            is?: string;
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: string;
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "false" | "true";
            'aria-autocomplete'?: "both" | "none" | "inline" | "list";
            'aria-busy'?: boolean | "false" | "true";
            'aria-checked'?: boolean | "mixed" | "false" | "true";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "false" | "true";
            'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "false" | "true";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "false" | "true";
            'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
            'aria-hidden'?: boolean | "false" | "true";
            'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "false" | "true";
            'aria-multiline'?: boolean | "false" | "true";
            'aria-multiselectable'?: boolean | "false" | "true";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "mixed" | "false" | "true";
            'aria-readonly'?: boolean | "false" | "true";
            'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "false" | "true";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "false" | "true";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCopyCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCut?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCutCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onPaste?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onPasteCapture?: (event: React.ClipboardEvent<HTMLButtonElement>) => void;
            onCompositionEnd?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionEndCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionStart?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionStartCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionUpdate?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLButtonElement>) => void;
            onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onFocusCapture?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onBlurCapture?: (event: React.FocusEvent<HTMLButtonElement>) => void;
            onChange?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onChangeCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onBeforeInput?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onBeforeInputCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInput?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInputCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onReset?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onResetCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onSubmit?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onSubmitCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInvalid?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onInvalidCapture?: (event: React.FormEvent<HTMLButtonElement>) => void;
            onLoad?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onError?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onErrorCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onKeyDown?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyDownCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyPress?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyPressCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyUp?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onKeyUpCapture?: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
            onAbort?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onAbortCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlay?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayThrough?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onDurationChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEmptied?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEmptiedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEncrypted?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEncryptedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEnded?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onEndedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedData?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedMetadata?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadStart?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onLoadStartCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPause?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPauseCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlay?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlayCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlaying?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onPlayingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onProgress?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onProgressCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onRateChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onRateChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeeked?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeekedCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeeking?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSeekingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onStalled?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onStalledCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSuspend?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSuspendCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTimeUpdate?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onVolumeChange?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onWaiting?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onWaitingCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onAuxClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onAuxClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onContextMenu?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onContextMenuCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDoubleClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDoubleClickCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onDrag?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnd?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEndCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnter?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragEnterCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragExit?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragExitCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragLeave?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragLeaveCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragOver?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragOverCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragStart?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDragStartCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDrop?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onDropCapture?: (event: React.DragEvent<HTMLButtonElement>) => void;
            onMouseDown?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseDownCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseMove?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseMoveCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOut?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOutCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOver?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseOverCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseUp?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onMouseUpCapture?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
            onSelect?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onSelectCapture?: (event: React.SyntheticEvent<HTMLButtonElement, Event>) => void;
            onTouchCancel?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchCancelCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchEnd?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchEndCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchMove?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchMoveCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchStart?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onTouchStartCapture?: (event: React.TouchEvent<HTMLButtonElement>) => void;
            onPointerDown?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerDownCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerMove?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerMoveCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerUp?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerUpCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerCancel?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerCancelCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerEnter?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerEnterCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerLeave?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerLeaveCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOver?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOverCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOut?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onPointerOutCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onGotPointerCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onLostPointerCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLButtonElement>) => void;
            onScroll?: (event: React.UIEvent<HTMLButtonElement>) => void;
            onScrollCapture?: (event: React.UIEvent<HTMLButtonElement>) => void;
            onWheel?: (event: React.WheelEvent<HTMLButtonElement>) => void;
            onWheelCapture?: (event: React.WheelEvent<HTMLButtonElement>) => void;
            onAnimationStart?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationStartCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationEnd?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationEndCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationIteration?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLButtonElement>) => void;
            onTransitionEnd?: (event: React.TransitionEvent<HTMLButtonElement>) => void;
            onTransitionEndCapture?: (event: React.TransitionEvent<HTMLButtonElement>) => void;
        }): JSX.Element;
    } & {
        displayName: string;
        handledProps: ("hidden" | "content" | "disabled" | "children" | "className" | "onClick" | "variables" | "styles" | "accessibility" | "design" | "next" | "previous")[];
        create: import("../../utils").ShorthandFactory<CarouselPaddleProps>;
        shorthandConfig: import("../../utils").ShorthandConfig<CarouselPaddleProps>;
    };
};
/**
 * A Carousel displays data organised as a gallery.
 *
 * @accessibility
 * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.
 * @accessibilityIssues
 * [VoiceOver doens't narrate label referenced by aria-labelledby attribute, when role is "tabpanel"](https://bugs.chromium.org/p/chromium/issues/detail?id=1040924)
 */
export default _default;
