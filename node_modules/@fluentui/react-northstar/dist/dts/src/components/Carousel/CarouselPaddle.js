"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var react_bindings_1 = require("@fluentui/react-bindings");
var Box_1 = require("../Box/Box");
// @ts-ignore
var react_fela_1 = require("react-fela");
exports.carouselPaddleClassName = 'ui-carousel__paddle';
exports.carouselPaddleSlotClassNames = {
    content: exports.carouselPaddleClassName + "__content",
};
var CarouselPaddle = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(CarouselPaddle.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, as = props.as, children = props.children, className = props.className, content = props.content, disabled = props.disabled, design = props.design, hidden = props.hidden, next = props.next, previous = props.previous, styles = props.styles, variables = props.variables;
    var hasChildren = utils_1.childrenExist(children);
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: CarouselPaddle.displayName,
        mapPropsToBehavior: function () { return ({
            as: as,
            disabled: disabled,
        }); },
        actionHandlers: {
            performClick: function (event) {
                event.preventDefault();
                handleClick(event);
            },
        },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(CarouselPaddle.displayName, {
        className: exports.carouselPaddleClassName,
        mapPropsToStyles: function () { return ({
            disabled: disabled,
            hidden: hidden,
            next: next,
            previous: previous,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var unhandledProps = react_bindings_1.useUnhandledProps(CarouselPaddle.handledProps, props);
    var ElementType = react_bindings_1.getElementType(props);
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var result = (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), getA11Props('root', tslib_1.__assign({ onClick: handleClick, disabled: disabled, className: classes.root }, unhandledProps))), hasChildren
        ? children
        : Box_1.default.create(content, {
            defaultProps: function () {
                return getA11Props('content', {
                    as: 'span',
                    className: exports.carouselPaddleSlotClassNames.content,
                    styles: resolvedStyles.content,
                });
            },
        })));
    setEnd();
    return result;
};
CarouselPaddle.defaultProps = {
    as: 'button',
    accessibility: accessibility_1.buttonBehavior,
    content: {},
};
CarouselPaddle.displayName = 'CarouselPaddle';
CarouselPaddle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: 'shorthand',
})), { disabled: PropTypes.bool, hidden: PropTypes.bool, onClick: PropTypes.func, next: customPropTypes.every([customPropTypes.disallow(['previous']), PropTypes.bool]), previous: customPropTypes.every([customPropTypes.disallow(['next']), PropTypes.bool]) });
CarouselPaddle.handledProps = Object.keys(CarouselPaddle.propTypes);
CarouselPaddle.create = utils_1.createShorthandFactory({ Component: CarouselPaddle, mappedProp: 'content' });
/**
 * A CarouselPaddle allows users to customize the paddles inside the Carousel component.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(CarouselPaddle);
