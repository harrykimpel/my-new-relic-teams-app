"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var ChatItem_1 = require("./ChatItem");
var ChatMessage_1 = require("./ChatMessage");
exports.chatClassName = 'ui-chat';
exports.chatSlotClassNames = {
    item: exports.chatClassName + "__item",
};
var Chat = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Chat.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, design = props.design, items = props.items, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: Chat.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(Chat.displayName, {
        className: exports.chatClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Chat.handledProps, props);
    var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] })), unhandledProps))), utils_1.childrenExist(children)
        ? children
        : _.map(items, function (item) {
            return ChatItem_1.default.create(item, {
                defaultProps: function () { return ({ className: exports.chatSlotClassNames.item }); },
            });
        })));
    setEnd();
    return element;
};
Chat.displayName = 'Chat';
Chat.defaultProps = {
    accessibility: accessibility_1.chatBehavior,
    as: 'ul',
};
Chat.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { items: PropTypes.arrayOf(customPropTypes.itemShorthand) });
Chat.handledProps = Object.keys(Chat.propTypes);
Chat.Item = ChatItem_1.default;
Chat.Message = ChatMessage_1.default;
Chat.create = utils_1.createShorthandFactory({ Component: Chat });
/**
 * A Chat displays messages from a conversation between multiple users.
 */
exports.default = types_1.withSafeTypeForAs(Chat);
