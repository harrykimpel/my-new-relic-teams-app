"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var CustomPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var CardBody_1 = require("./CardBody");
var CardColumn_1 = require("./CardColumn");
var CardFooter_1 = require("./CardFooter");
var CardHeader_1 = require("./CardHeader");
var CardPreview_1 = require("./CardPreview");
var CardTopControls_1 = require("./CardTopControls");
exports.cardClassName = 'ui-card';
var Card = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Card.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var cardRef = React.useRef();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, children = props.children, compact = props.compact, horizontal = props.horizontal, centered = props.centered, size = props.size, fluid = props.fluid, onClick = props.onClick, disabled = props.disabled;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Card.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: Card.displayName,
        actionHandlers: {
            performClick: function (e) {
                handleClick(e);
            },
            focusCard: function (e) {
                cardRef.current.focus();
            },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(Card.displayName, {
        className: exports.cardClassName,
        mapPropsToStyles: function () { return ({
            centered: centered,
            horizontal: horizontal,
            compact: compact,
            size: size,
            fluid: fluid,
            actionable: !!onClick,
            disabled: disabled,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var element = (React.createElement(react_component_ref_1.Ref, { innerRef: cardRef }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick }, unhandledProps))), children))));
    setEnd();
    return element;
};
Card.displayName = 'Card';
Card.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { onClick: PropTypes.func, compact: PropTypes.bool, horizontal: PropTypes.bool, centered: PropTypes.bool, size: CustomPropTypes.size, fluid: PropTypes.bool });
Card.defaultProps = {
    accessibility: accessibility_1.cardBehavior,
    size: 'medium',
};
Card.handledProps = Object.keys(Card.propTypes);
Card.Header = CardHeader_1.default;
Card.Body = CardBody_1.default;
Card.Footer = CardFooter_1.default;
Card.Preview = CardPreview_1.default;
Card.TopControls = CardTopControls_1.default;
Card.Column = CardColumn_1.default;
Card.create = utils_1.createShorthandFactory({ Component: Card });
/**
 * A Card is used to display data in sematically grouped way.
 * * @accessibility
 * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)
 * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)
 * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).
 *
 */
exports.default = types_1.withSafeTypeForAs(Card);
