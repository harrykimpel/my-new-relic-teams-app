"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var types_1 = require("../../types");
exports.radioGroupItemClassName = 'ui-radiogroup__item';
exports.radioGroupItemSlotClassNames = {
    indicator: exports.radioGroupItemClassName + "__indicator",
};
var RadioGroupItem = /** @class */ (function (_super) {
    tslib_1.__extends(RadioGroupItem, _super);
    function RadioGroupItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.elementRef = React.createRef();
        _this.actionHandlers = {
            performClick: function (e) {
                e.preventDefault();
                _this.handleClick(e);
            },
        };
        _this.handleClick = function (e) {
            _.invoke(_this.props, 'onClick', e, _this.props);
        };
        _this.handleChange = function (e) {
            // RadioGroupItem component doesn't present any `input` component in markup, however all of our
            // components should handle events transparently.
            _.invoke(_this.props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { checked: _this.state.checked }));
        };
        return _this;
    }
    RadioGroupItem.prototype.componentDidUpdate = function (prevProps, prevState) {
        var checked = this.state.checked;
        if (checked !== prevState.checked) {
            checked && this.props.shouldFocus && this.elementRef.current.focus();
            _.invoke(this.props, 'onChange', undefined, tslib_1.__assign(tslib_1.__assign({}, this.props), { checked: checked }));
        }
    };
    RadioGroupItem.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps, styles = _a.styles, accessibility = _a.accessibility;
        var _b = this.props, label = _b.label, indicator = _b.indicator;
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.elementRef },
            React.createElement(ElementType, tslib_1.__assign({ onClick: this.handleClick, onChange: this.handleChange, className: classes.root }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
                Box_1.default.create(indicator, {
                    defaultProps: function () { return ({
                        className: exports.radioGroupItemSlotClassNames.indicator,
                        styles: styles.indicator,
                    }); },
                }),
                Box_1.default.create(label, {
                    defaultProps: function () { return ({
                        as: 'span',
                    }); },
                }))));
    };
    RadioGroupItem.displayName = 'RadioGroupItem';
    RadioGroupItem.deprecated_className = exports.radioGroupItemClassName;
    RadioGroupItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { checked: PropTypes.bool, defaultChecked: PropTypes.bool, disabled: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren, label: customPropTypes.itemShorthand, name: PropTypes.string, onClick: PropTypes.func, onChange: PropTypes.func, shouldFocus: PropTypes.bool, value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), vertical: PropTypes.bool });
    RadioGroupItem.defaultProps = {
        accessibility: accessibility_1.radioGroupItemBehavior,
        indicator: {},
    };
    RadioGroupItem.autoControlledProps = ['checked'];
    return RadioGroupItem;
}(utils_1.AutoControlledComponent));
RadioGroupItem.create = utils_1.createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });
/**
 * A RadioGroupItem represents single input element within a RadioGroup.
 *
 * @accessibility
 * Radio items need to be grouped to correctly handle accessibility.
 */
exports.default = types_1.withSafeTypeForAs(RadioGroupItem);
