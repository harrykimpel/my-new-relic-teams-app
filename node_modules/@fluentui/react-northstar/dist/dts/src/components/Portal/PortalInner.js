"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var ReactDOM = require("react-dom");
var utils_1 = require("../../utils");
var usePortalBox_1 = require("../Provider/usePortalBox");
/**
 * A PortalInner is a container for Portal's content.
 */
var PortalInner = /** @class */ (function (_super) {
    tslib_1.__extends(PortalInner, _super);
    function PortalInner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PortalInner.prototype.componentDidMount = function () {
        _.invoke(this.props, 'onMount', this.props);
    };
    PortalInner.prototype.componentWillUnmount = function () {
        _.invoke(this.props, 'onUnmount', this.props);
    };
    PortalInner.prototype.render = function () {
        var _a = this.props, children = _a.children, mountNode = _a.mountNode;
        // PortalInner should render elements even without a context
        // eslint-disable-next-line
        var target = utils_1.isBrowser() ? this.context || document.body : null;
        var container = mountNode || target;
        return container && ReactDOM.createPortal(children, container);
    };
    PortalInner.contextType = usePortalBox_1.PortalBoxContext;
    PortalInner.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        accessibility: false,
        as: false,
        className: false,
        content: false,
        styled: false,
    })), { mountNode: PropTypes.object, onMount: PropTypes.func, onUnmount: PropTypes.func });
    return PortalInner;
}(React.Component));
exports.default = PortalInner;
