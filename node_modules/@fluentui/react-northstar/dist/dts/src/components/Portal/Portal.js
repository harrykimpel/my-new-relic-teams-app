"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var PortalInner_1 = require("./PortalInner");
/**
 * A Portal allows to render children outside of their parent.
 */
var Portal = /** @class */ (function (_super) {
    tslib_1.__extends(Portal, _super);
    function Portal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleMount = function () {
            _.invoke(_this.props, 'onMount', _this.props);
        };
        _this.handleUnmount = function () {
            _.invoke(_this.props, 'onUnmount', _this.props);
        };
        _this.handlePortalRef = function (portalNode) {
            _this.portalNode = portalNode;
        };
        _this.handleTriggerRef = function (triggerNode) {
            _this.triggerNode = triggerNode;
            react_component_ref_1.handleRef(_this.props.triggerRef, triggerNode);
        };
        _this.handleTriggerClick = function (e) {
            var unhandledProps = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                unhandledProps[_i - 1] = arguments[_i];
            }
            var trigger = _this.props.trigger;
            _.invoke(_this.props, 'onTriggerClick', e); // Call handler from parent component
            _.invoke.apply(// Call handler from parent component
            _, tslib_1.__spreadArrays([trigger, 'props.onClick', e], unhandledProps)); // Call original event handler
            _this.setState({ open: !_this.state.open });
        };
        _this.handleDocumentClick = function (e) {
            if (!_this.portalNode || // no portal
                utils_1.doesNodeContainClick(_this.triggerNode, e, _this.context.target) || // event happened in trigger (delegate to trigger handlers)
                utils_1.doesNodeContainClick(_this.portalNode, e, _this.context.target) // event happened in the portal
            ) {
                return; // ignore the click
            }
            _.invoke(_this.props, 'onOutsideClick', e);
            _this.setState({ open: false });
        };
        return _this;
    }
    Portal.prototype.renderComponent = function () {
        return (React.createElement(React.Fragment, null,
            this.renderPortal(),
            this.renderTrigger()));
    };
    Portal.prototype.renderPortal = function () {
        var _a = this.props, children = _a.children, content = _a.content, trapFocus = _a.trapFocus;
        var open = this.state.open;
        var contentToRender = utils_1.childrenExist(children) ? children : content;
        var focusTrapZoneProps = (_.keys(trapFocus).length && trapFocus) || {};
        return (open && (React.createElement(react_component_ref_1.Ref, { innerRef: this.handlePortalRef },
            React.createElement(PortalInner_1.default, tslib_1.__assign({ onMount: this.handleMount, onUnmount: this.handleUnmount }, utils_1.rtlTextContainer.getAttributes({ forElements: [contentToRender] })),
                trapFocus ? React.createElement(react_bindings_1.FocusTrapZone, tslib_1.__assign({}, focusTrapZoneProps), contentToRender) : contentToRender,
                React.createElement(react_component_event_listener_1.EventListener, { listener: this.handleDocumentClick, target: this.context.target, type: "click" })))));
    };
    Portal.prototype.renderTrigger = function () {
        var _a = this.props, trigger = _a.trigger, triggerAccessibility = _a.triggerAccessibility;
        return (trigger && (React.createElement(react_component_ref_1.Ref, { innerRef: this.handleTriggerRef }, React.cloneElement(trigger, tslib_1.__assign(tslib_1.__assign({ onClick: this.handleTriggerClick }, triggerAccessibility.attributes), triggerAccessibility.keyHandlers)))));
    };
    Portal.autoControlledProps = ['open'];
    Portal.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        accessibility: false,
        as: false,
        className: false,
        styled: false,
    })), { defaultOpen: PropTypes.bool, onMount: PropTypes.func, onUnmount: PropTypes.func, open: PropTypes.bool, trigger: PropTypes.node, triggerRef: customPropTypes.ref, triggerAccessibility: PropTypes.object, onTriggerClick: PropTypes.func, onOutsideClick: PropTypes.func, trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]) });
    Portal.defaultProps = {
        triggerAccessibility: {},
    };
    return Portal;
}(utils_1.AutoControlledComponent));
exports.default = Portal;
