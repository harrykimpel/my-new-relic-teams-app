"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Text_1 = require("../Text/Text");
var Input_1 = require("../Input/Input");
var Box_1 = require("../Box/Box");
exports.formFieldClassName = 'ui-form__field';
var FormField = /** @class */ (function (_super) {
    tslib_1.__extends(FormField, _super);
    function FormField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.shouldControlAppearFirst = function () {
            var type = _this.props.type;
            return type && (type === 'checkbox' || type === 'radio');
        };
        return _this;
    }
    FormField.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, control = _b.control, id = _b.id, label = _b.label, message = _b.message, name = _b.name, required = _b.required, type = _b.type;
        var labelElement = Text_1.default.create(label, {
            defaultProps: function () { return ({
                as: 'label',
                htmlFor: id,
                styles: styles.label,
            }); },
        });
        var messageElement = Text_1.default.create(message, {
            defaultProps: function () { return ({
                styles: styles.message,
            }); },
        });
        var controlElement = Box_1.default.create(control || {}, {
            defaultProps: function () { return ({ required: required, id: id, name: name, type: type, styles: styles.control }); },
        });
        var content = (React.createElement(React.Fragment, null,
            this.shouldControlAppearFirst() && controlElement,
            labelElement,
            !this.shouldControlAppearFirst() && controlElement,
            messageElement));
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps), utils_1.childrenExist(children) ? children : content));
    };
    FormField.displayName = 'FormField';
    FormField.deprecated_className = exports.formFieldClassName;
    FormField.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { control: customPropTypes.itemShorthand, id: PropTypes.string, inline: PropTypes.bool, label: customPropTypes.itemShorthand, message: customPropTypes.itemShorthand, name: PropTypes.string, required: PropTypes.bool, type: PropTypes.string });
    FormField.defaultProps = {
        as: 'div',
        control: { as: Input_1.default },
    };
    return FormField;
}(utils_1.UIComponent));
FormField.create = utils_1.createShorthandFactory({ Component: FormField, mappedProp: 'label' });
/**
 * A FormField represents a Form element containing a label and an input.
 */
exports.default = types_1.withSafeTypeForAs(FormField);
