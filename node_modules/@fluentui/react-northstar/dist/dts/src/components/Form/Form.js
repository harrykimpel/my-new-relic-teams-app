"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var FormField_1 = require("./FormField");
exports.formClassName = 'ui-form';
var Form = /** @class */ (function (_super) {
    tslib_1.__extends(Form, _super);
    function Form() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleSubmit = function (e) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var action = _this.props.action;
            // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()
            // method.
            if (!action)
                _.invoke(e, 'preventDefault');
            _.invoke.apply(_, tslib_1.__spreadArrays([_this.props, 'onSubmit', e, _this.props], args));
        };
        _this.renderFields = function () {
            var fields = _this.props.fields;
            return _.map(fields, function (field) { return FormField_1.default.create(field); });
        };
        return _this;
    }
    Form.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps;
        var _b = this.props, action = _b.action, children = _b.children;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, action: action, onSubmit: this.handleSubmit }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), accessibility.attributes.root, unhandledProps), utils_1.childrenExist(children) ? children : this.renderFields()));
    };
    Form.displayName = 'Form';
    Form.deprecated_className = exports.formClassName;
    Form.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { action: PropTypes.string, fields: customPropTypes.collectionShorthand, onSubmit: PropTypes.func });
    Form.defaultProps = {
        as: 'form',
    };
    Form.Field = FormField_1.default;
    return Form;
}(utils_1.UIComponent));
/**
 * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.
 */
exports.default = types_1.withSafeTypeForAs(Form);
