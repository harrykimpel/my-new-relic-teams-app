"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuDividerClassName = 'ui-toolbar__menudivider';
var ToolbarMenuDivider = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ToolbarMenuDivider.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: ToolbarMenuDivider.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(ToolbarMenuDivider.displayName, {
        className: exports.toolbarMenuDividerClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: styles_1.mergeComponentVariables(parentVariables, variables),
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarMenuDivider.handledProps, props);
    var element = React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { className: classes.root }))));
    setEnd();
    return element;
};
ToolbarMenuDivider.displayName = 'ToolbarMenuDivider';
ToolbarMenuDivider.propTypes = utils_1.commonPropTypes.createCommon();
ToolbarMenuDivider.defaultProps = {
    as: 'li',
};
ToolbarMenuDivider.handledProps = Object.keys(ToolbarMenuDivider.propTypes);
ToolbarMenuDivider.create = utils_1.createShorthandFactory({
    Component: ToolbarMenuDivider,
    mappedProp: 'content',
});
/**
 * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarMenuDivider);
