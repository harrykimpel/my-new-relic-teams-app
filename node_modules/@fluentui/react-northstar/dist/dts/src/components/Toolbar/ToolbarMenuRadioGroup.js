"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var styles_1 = require("@fluentui/styles");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var ToolbarMenuItem_1 = require("./ToolbarMenuItem");
var Box_1 = require("../Box/Box");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars
exports.toolbarMenuRadioGroupSlotClassNames = {
    wrapper: exports.toolbarMenuRadioGroupClassName + "__wrapper",
};
var ToolbarMenuRadioGroup = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ToolbarMenuRadioGroup.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, activeIndex = props.activeIndex, className = props.className, design = props.design, items = props.items, styles = props.styles, variables = props.variables, wrapper = props.wrapper;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = styles_1.mergeComponentVariables(parentVariables, variables);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: ToolbarMenuRadioGroup.displayName,
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(ToolbarMenuRadioGroup.displayName, {
        className: exports.toolbarMenuRadioGroupClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var handleItemOverrides = function (predefinedProps) { return ({
        onClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, itemProps);
        },
        wrapper: null,
    }); };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarMenuRadioGroup.handledProps, props);
    var content = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { className: classes.root }))),
        React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, _.map(items, function (item, index) {
            return ToolbarMenuItem_1.default.create(item, {
                defaultProps: function () { return ({
                    accessibility: accessibility_1.toolbarMenuItemRadioBehavior,
                    as: 'li',
                    active: activeIndex === index,
                    index: index,
                }); },
                overrideProps: handleItemOverrides,
            });
        }))));
    var element = Box_1.default.create(wrapper, {
        defaultProps: function () {
            return getA11yProps('wrapper', {
                as: 'li',
                className: exports.toolbarMenuRadioGroupSlotClassNames.wrapper,
                styles: resolvedStyles.wrapper,
            });
        },
        overrideProps: {
            children: content,
        },
    });
    setEnd();
    return element;
};
ToolbarMenuRadioGroup.displayName = 'ToolbarMenuRadioGroup';
ToolbarMenuRadioGroup.defaultProps = {
    as: 'ul',
    accessibility: accessibility_1.toolbarMenuRadioGroupBehavior,
    wrapper: {},
};
ToolbarMenuRadioGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { activeIndex: PropTypes.number, items: customPropTypes.collectionShorthand, onItemClick: PropTypes.func, wrapper: customPropTypes.itemShorthand });
ToolbarMenuRadioGroup.handledProps = Object.keys(ToolbarMenuRadioGroup.propTypes);
ToolbarMenuRadioGroup.create = utils_1.createShorthandFactory({
    Component: ToolbarMenuRadioGroup,
});
/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarMenuRadioGroup);
