"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var react_component_nesting_registry_1 = require("@fluentui/react-component-nesting-registry");
var customPropTypes = require("@fluentui/react-proptypes");
var styles_1 = require("@fluentui/styles");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var positioner_1 = require("../../utils/positioner");
var ToolbarMenu_1 = require("./ToolbarMenu");
var Box_1 = require("../Box/Box");
var Popup_1 = require("../Popup/Popup");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarItemClassName = 'ui-toolbar__item';
exports.toolbarItemSlotClassNames = {
    wrapper: exports.toolbarItemClassName + "__wrapper",
};
var ToolbarItem = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ToolbarItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, active = props.active, className = props.className, design = props.design, icon = props.icon, children = props.children, disabled = props.disabled, popup = props.popup, menu = props.menu, menuOpen = props.menuOpen, wrapper = props.wrapper, styles = props.styles, variables = props.variables;
    var itemRef = React.useRef();
    var menuRef = React.useRef();
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = styles_1.mergeComponentVariables(parentVariables, variables);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: ToolbarItem.displayName,
        actionHandlers: {
            performClick: function (event) {
                event.preventDefault();
                handleClick(event);
            },
            performWrapperClick: function (event) {
                handleWrapperClick(event);
            },
            closeMenuAndFocusTrigger: function (event) {
                trySetMenuOpen(false, event);
                _.invoke(itemRef.current, 'focus');
            },
            doNotNavigateNextToolbarItem: function (event) {
                event.stopPropagation();
            },
        },
        mapPropsToBehavior: function () { return ({
            as: String(props.as),
            disabled: disabled,
            hasMenu: !!menu,
            hasPopup: !!popup,
            menuOpen: menuOpen,
            active: active,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(ToolbarItem.displayName, {
        className: exports.toolbarItemClassName,
        mapPropsToStyles: function () { return ({ active: active, disabled: disabled }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleBlur = function (e) {
        _.invoke(props, 'onBlur', e, props);
    };
    var handleFocus = function (e) {
        _.invoke(props, 'onFocus', e, props);
    };
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        if (menu) {
            trySetMenuOpen(!menuOpen, e);
        }
        _.invoke(props, 'onClick', e, props);
    };
    var handleWrapperClick = function (e) {
        if (menu) {
            if (utils_1.doesNodeContainClick(menuRef.current, e.nativeEvent, context.target)) {
                trySetMenuOpen(false, e);
            }
        }
    };
    var handleOutsideClick = function (getRefs) { return function (e) {
        var isItemClick = utils_1.doesNodeContainClick(itemRef.current, e, context.target);
        var isNestedClick = _.some(getRefs(), function (childRef) {
            return utils_1.doesNodeContainClick(childRef.current, e, context.target);
        });
        var isInside = isItemClick || isNestedClick;
        if (!isInside) {
            trySetMenuOpen(false, e);
        }
    }; };
    var trySetMenuOpen = function (newValue, e) {
        _.invoke(props, 'onMenuOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { menuOpen: newValue }));
    };
    var handleMenuOverrides = function (getRefs) { return function (predefinedProps) { return ({
        onBlur: function (e) {
            var isInsideOrMenuTrigger = _.some(getRefs(), function (childRef) {
                return (childRef.current.contains(e.relatedTarget) ||
                    itemRef.current.contains(e.relatedTarget));
            });
            if (!isInsideOrMenuTrigger) {
                trySetMenuOpen(false, e);
            }
        },
        onItemClick: function (e, itemProps) {
            var popup = itemProps.popup, menuOpen = itemProps.menuOpen;
            _.invoke(predefinedProps, 'onItemClick', e, itemProps);
            if (popup) {
                return;
            }
            // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?
            trySetMenuOpen(menuOpen, e);
        },
    }); }; };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarItem.handledProps, props);
    var itemElement = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { disabled: disabled, className: classes.root, onBlur: handleBlur, onFocus: handleFocus, onClick: handleClick }))), utils_1.childrenExist(children) ? children : Box_1.default.create(icon)));
    var submenuElement = menuOpen ? (React.createElement(react_component_nesting_registry_1.Unstable_NestingAuto, null, function (getRefs, nestingRef) { return (React.createElement(React.Fragment, null,
        React.createElement(react_component_ref_1.Ref, { innerRef: function (node) {
                nestingRef.current = node;
                menuRef.current = node;
            } },
            React.createElement(positioner_1.Popper, tslib_1.__assign({ align: "start", position: "above", targetRef: itemRef }, positioner_1.getPopperPropsFromShorthand(menu)),
                React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, ToolbarMenu_1.default.create(menu, {
                    overrideProps: handleMenuOverrides(getRefs),
                })))),
        React.createElement(react_component_event_listener_1.EventListener, { listener: handleOutsideClick(getRefs), target: context.target, type: "click", capture: true }))); })) : null;
    if (popup) {
        var popupElement = Popup_1.default.create(popup, {
            defaultProps: function () { return ({
                trapFocus: true,
            }); },
            overrideProps: {
                trigger: itemElement,
                children: undefined,
            },
        });
        setEnd();
        return popupElement;
    }
    // wrap the item if it has menu (even if it is closed = not rendered)
    if (menu) {
        var contentElement_1 = (React.createElement(React.Fragment, null,
            React.createElement(react_component_ref_1.Ref, { innerRef: itemRef }, itemElement),
            submenuElement));
        if (wrapper) {
            var wrapperElement = Box_1.default.create(wrapper, {
                defaultProps: function () {
                    return getA11yProps('wrapper', {
                        className: classnames_1.default(exports.toolbarItemSlotClassNames.wrapper, classes.wrapper),
                    });
                },
                overrideProps: function (predefinedProps) { return ({
                    children: contentElement_1,
                    onClick: function (e) {
                        handleWrapperClick(e);
                        _.invoke(predefinedProps, 'onClick', e);
                    },
                }); },
            });
            setEnd();
            return wrapperElement;
        }
        setEnd();
        return contentElement_1;
    }
    var refElement = React.createElement(react_component_ref_1.Ref, { innerRef: itemRef }, itemElement);
    setEnd();
    return refElement;
};
ToolbarItem.displayName = 'ToolbarItem';
ToolbarItem.defaultProps = {
    as: 'button',
    accessibility: accessibility_1.toolbarItemBehavior,
    wrapper: {},
};
ToolbarItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, disabled: PropTypes.bool, icon: customPropTypes.shorthandAllowingChildren, menu: PropTypes.oneOfType([
        customPropTypes.shorthandAllowingChildren,
        PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren),
    ]), menuOpen: PropTypes.bool, onMenuOpenChange: PropTypes.func, onClick: PropTypes.func, onFocus: PropTypes.func, onBlur: PropTypes.func, popup: PropTypes.oneOfType([
        PropTypes.shape(tslib_1.__assign(tslib_1.__assign({}, Popup_1.default.propTypes), { trigger: customPropTypes.never, children: customPropTypes.never })),
        PropTypes.string,
    ]), wrapper: customPropTypes.shorthandAllowingChildren });
ToolbarItem.handledProps = Object.keys(ToolbarItem.propTypes);
ToolbarItem.create = utils_1.createShorthandFactory({ Component: ToolbarItem, mappedProp: 'content' });
/**
 * A ToolbarItem renders Toolbar item as a button with an icon.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarItem);
