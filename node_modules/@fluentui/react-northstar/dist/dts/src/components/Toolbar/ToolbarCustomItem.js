"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarCustomItemClassName = 'ui-toolbar__customitem';
var ToolbarCustomItem = function (props) {
    var _a;
    var context = React.useContext(react_fela_1.ThemeContext);
    var _b = react_bindings_1.useTelemetry(ToolbarCustomItem.displayName, context.telemetry), setStart = _b.setStart, setEnd = _b.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, content = props.content, design = props.design, fitted = props.fitted, focusable = props.focusable, styles = props.styles, variables = props.variables;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: ToolbarCustomItem.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(ToolbarCustomItem.displayName, {
        className: exports.toolbarCustomItemClassName,
        mapPropsToStyles: function () { return ({ fitted: fitted }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: styles_1.mergeComponentVariables(parentVariables, variables),
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarCustomItem.handledProps, props);
    var handleBlur = function (e) {
        if (focusable) {
            _.invoke(props, 'onBlur', e, props);
        }
    };
    var handleFocus = function (e) {
        if (focusable) {
            _.invoke(props, 'onFocus', e, props);
        }
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign((_a = {}, _a[accessibility_1.IS_FOCUSABLE_ATTRIBUTE] = focusable, _a), unhandledProps), { className: classes.root, onBlur: handleBlur, onFocus: handleFocus }))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
ToolbarCustomItem.displayName = 'ToolbarCustomItem';
ToolbarCustomItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { fitted: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(['horizontally', 'vertically']),
    ]), focusable: PropTypes.bool, onFocus: PropTypes.func, onBlur: PropTypes.func });
ToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes);
ToolbarCustomItem.create = utils_1.createShorthandFactory({
    Component: ToolbarCustomItem,
    mappedProp: 'content',
});
/**
 * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarCustomItem);
