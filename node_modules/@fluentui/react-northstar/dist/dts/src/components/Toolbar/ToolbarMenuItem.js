"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var React = require("react");
var _ = require("lodash");
var classnames_1 = require("classnames");
var PropTypes = require("prop-types");
var react_component_event_listener_1 = require("@fluentui/react-component-event-listener");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
// @ts-ignore
var react_fela_1 = require("react-fela");
var react_component_nesting_registry_1 = require("@fluentui/react-component-nesting-registry");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var positioner_1 = require("../../utils/positioner");
var Box_1 = require("../Box/Box");
var Popup_1 = require("../Popup/Popup");
var ToolbarMenu_1 = require("./ToolbarMenu");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuItemClassName = 'ui-toolbar__menuitem';
exports.toolbarMenuItemSlotClassNames = {
    activeIndicator: exports.toolbarMenuItemClassName + "__activeIndicator",
    wrapper: exports.toolbarMenuItemClassName + "__wrapper",
    submenu: exports.toolbarMenuItemClassName + "__submenu",
    submenuIndicator: exports.toolbarMenuItemClassName + "__submenuIndicator",
};
var ToolbarMenuItem = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ToolbarMenuItem.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var active = props.active, activeIndicator = props.activeIndicator, children = props.children, content = props.content, disabled = props.disabled, submenuIndicator = props.submenuIndicator, icon = props.icon, menu = props.menu, popup = props.popup, wrapper = props.wrapper, inSubmenu = props.inSubmenu, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var _b = react_bindings_1.useAutoControlled({
        defaultValue: props.defaultMenuOpen,
        value: props.menuOpen,
        initialValue: false,
    }), menuOpen = _b[0], setMenuOpen = _b[1];
    var itemRef = React.useRef();
    var menuRef = React.useRef();
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = styles_1.mergeComponentVariables(parentVariables, variables);
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarMenuItem.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: ToolbarMenuItem.displayName,
        mapPropsToBehavior: function () { return ({
            menu: menu,
            active: active,
            menuOpen: menuOpen,
            disabled: disabled,
            'aria-label': props['aria-label'],
            'aria-labelledby': props['aria-labelledby'],
            'aria-describedby': props['aria-describedby'],
        }); },
        actionHandlers: {
            performClick: function (event) {
                event.preventDefault();
                handleClick(event);
            },
            openMenu: function (event) { return openMenu(event); },
            closeAllMenusAndFocusNextParentItem: function (event) { return closeAllMenus(event); },
            closeMenu: function (event) { return closeMenu(event); },
            closeMenuAndFocusTrigger: function (event) { return closeMenu(event); },
            doNotNavigateNextParentItem: function (event) {
                event.stopPropagation();
            },
            closeAllMenus: function (event) { return closeAllMenus(event); },
        },
        rtl: context.rtl,
    });
    var _c = react_bindings_1.useStyles(ToolbarMenuItem.displayName, {
        className: exports.toolbarMenuItemClassName,
        mapPropsToStyles: function () { return ({
            disabled: disabled,
            hasContent: !!content,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
    }), classes = _c.classes, resolvedStyles = _c.styles;
    var openMenu = function (e) {
        if (menu && !menuOpen) {
            trySetMenuOpen(true, e);
            e.stopPropagation();
            e.preventDefault();
        }
    };
    var closeMenu = function (e) {
        if (!isSubmenuOpen()) {
            return;
        }
        trySetMenuOpen(false, e, function () {
            react_bindings_1.focusAsync(itemRef.current);
        });
        e.stopPropagation();
    };
    var closeAllMenus = function (e) {
        if (!isSubmenuOpen()) {
            return;
        }
        trySetMenuOpen(false, e, function () {
            if (!inSubmenu) {
                react_bindings_1.focusAsync(itemRef.current);
            }
        });
        // avoid spacebar scrolling the page
        if (!inSubmenu) {
            e.preventDefault();
        }
    };
    var isSubmenuOpen = function () {
        return !!(menu && menuOpen);
    };
    var trySetMenuOpen = function (newValue, e, onStateChanged) {
        setMenuOpen(newValue);
        // The reason why post-effect is not passed as callback to trySetState method
        // is that in 'controlled' mode the post-effect is applied before final re-rendering
        // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.
        // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.
        onStateChanged && onStateChanged();
        _.invoke(props, 'onMenuOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, props), { menuOpen: newValue }));
    };
    var outsideClickHandler = function (getRefs) { return function (e) {
        var isItemClick = utils_1.doesNodeContainClick(itemRef.current, e, context.target);
        var isNestedClick = _.some(getRefs(), function (childRef) {
            return utils_1.doesNodeContainClick(childRef.current, e, context.target);
        });
        var isInside = isItemClick || isNestedClick;
        if (!isInside) {
            trySetMenuOpen(false, e);
        }
    }; };
    var handleMenuOverrides = function (predefinedProps) { return ({
        onItemClick: function (e, itemProps) {
            var popup = itemProps.popup, menuOpen = itemProps.menuOpen;
            _.invoke(predefinedProps, 'onItemClick', e, itemProps);
            if (popup) {
                return;
            }
            trySetMenuOpen(menuOpen, e);
            if (!menuOpen) {
                _.invoke(itemRef.current, 'focus');
            }
        },
    }); };
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        if (menu) {
            // the menuItem element was clicked => toggle the open/close and stop propagation
            trySetMenuOpen(!menuOpen, e);
            e.stopPropagation();
            e.preventDefault();
        }
        if (popup) {
            e.stopPropagation();
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick, disabled: disabled }, unhandledProps))), utils_1.childrenExist(children) ? (children) : (React.createElement(React.Fragment, null,
        Box_1.default.create(icon, {
            defaultProps: function () { return ({
                styles: resolvedStyles.icon,
            }); },
        }),
        content,
        active &&
            Box_1.default.create(activeIndicator, {
                defaultProps: function () { return ({
                    as: 'span',
                    className: exports.toolbarMenuItemSlotClassNames.activeIndicator,
                    styles: resolvedStyles.activeIndicator,
                    accessibility: accessibility_1.indicatorBehavior,
                }); },
            }),
        menu &&
            Box_1.default.create(submenuIndicator, {
                defaultProps: function () { return ({
                    as: 'span',
                    className: exports.toolbarMenuItemSlotClassNames.submenuIndicator,
                    styles: resolvedStyles.submenuIndicator,
                    accessibility: accessibility_1.indicatorBehavior,
                }); },
            })))));
    var hasChildren = utils_1.childrenExist(children);
    if (popup && !hasChildren) {
        var popupElement = Popup_1.default.create(popup, {
            defaultProps: function () { return ({
                trapFocus: true,
                onOpenChange: function (e) {
                    e.stopPropagation();
                },
            }); },
            overrideProps: {
                trigger: element,
                children: undefined,
            },
        });
        setEnd();
        return popupElement;
    }
    var menuItemInner = hasChildren ? children : React.createElement(react_component_ref_1.Ref, { innerRef: itemRef }, element);
    var maybeSubmenu = menu && menuOpen ? (React.createElement(react_component_nesting_registry_1.Unstable_NestingAuto, null, function (getRefs, nestingRef) { return (React.createElement(React.Fragment, null,
        React.createElement(react_component_ref_1.Ref, { innerRef: function (node) {
                nestingRef.current = node;
                menuRef.current = node;
            } },
            React.createElement(positioner_1.Popper, tslib_1.__assign({ align: "top", position: context.rtl ? 'before' : 'after', targetRef: itemRef }, positioner_1.getPopperPropsFromShorthand(menu)),
                React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, ToolbarMenu_1.default.create(menu, {
                    defaultProps: function () { return ({
                        className: exports.toolbarMenuItemSlotClassNames.submenu,
                        styles: resolvedStyles.menu,
                        submenu: true,
                        submenuIndicator: submenuIndicator,
                    }); },
                    overrideProps: handleMenuOverrides,
                })))),
        React.createElement(react_component_event_listener_1.EventListener, { listener: outsideClickHandler(getRefs), target: context.target, type: "click" }))); })) : null;
    if (!wrapper) {
        setEnd();
        return menuItemInner;
    }
    var wrapperElement = Box_1.default.create(wrapper, {
        defaultProps: function () {
            return getA11yProps('wrapper', {
                className: classnames_1.default(exports.toolbarMenuItemSlotClassNames.wrapper, classes.wrapper),
            });
        },
        overrideProps: function () { return ({
            children: (React.createElement(React.Fragment, null,
                menuItemInner,
                maybeSubmenu)),
        }); },
    });
    setEnd();
    return wrapperElement;
};
ToolbarMenuItem.displayName = 'ToolbarMenuItem';
ToolbarMenuItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, activeIndicator: customPropTypes.shorthandAllowingChildren, defaultMenuOpen: PropTypes.bool, disabled: PropTypes.bool, icon: customPropTypes.shorthandAllowingChildren, index: PropTypes.number, submenuIndicator: customPropTypes.shorthandAllowingChildren, inSubmenu: PropTypes.bool, menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]), menuOpen: PropTypes.bool, onClick: PropTypes.func, onMenuOpenChange: PropTypes.func, popup: PropTypes.oneOfType([
        PropTypes.shape(tslib_1.__assign(tslib_1.__assign({}, Popup_1.default.propTypes), { trigger: customPropTypes.never, children: customPropTypes.never })),
        PropTypes.string,
    ]), wrapper: customPropTypes.itemShorthand });
ToolbarMenuItem.handledProps = Object.keys(ToolbarMenuItem.propTypes);
ToolbarMenuItem.defaultProps = {
    as: 'button',
    accessibility: accessibility_1.toolbarMenuItemBehavior,
    wrapper: { as: 'li' },
    activeIndicator: {},
    submenuIndicator: {},
};
ToolbarMenuItem.create = utils_1.createShorthandFactory({
    Component: ToolbarMenuItem,
    mappedProp: 'content',
});
/**
 * A ToolbarMenuItem renders ToolbarMenu item as button.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarMenuItem);
