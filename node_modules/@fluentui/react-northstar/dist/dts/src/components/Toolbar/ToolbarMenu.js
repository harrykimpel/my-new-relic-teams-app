"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var styles_1 = require("@fluentui/styles");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var ToolbarMenuRadioGroup_1 = require("./ToolbarMenuRadioGroup");
var ToolbarMenuDivider_1 = require("./ToolbarMenuDivider");
var ToolbarMenuItem_1 = require("./ToolbarMenuItem");
var toolbarVariablesContext_1 = require("./toolbarVariablesContext");
exports.toolbarMenuClassName = 'ui-toolbar__menu';
var ToolbarMenu = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ToolbarMenu.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, className = props.className, children = props.children, design = props.design, items = props.items, submenu = props.submenu, submenuIndicator = props.submenuIndicator, styles = props.styles, variables = props.variables;
    var parentVariables = React.useContext(toolbarVariablesContext_1.ToolbarVariablesContext);
    var mergedVariables = styles_1.mergeComponentVariables(parentVariables, variables);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: ToolbarMenu.displayName,
        actionHandlers: {
            performClick: function (e) {
                _.invoke(props, 'onClick', e, props);
            },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(ToolbarMenu.displayName, {
        className: exports.toolbarMenuClassName,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: mergedVariables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleItemOverrides = function (predefinedProps) { return ({
        onClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, tslib_1.__assign(tslib_1.__assign({}, itemProps), { menuOpen: !!itemProps.menu }));
        },
    }); };
    var handleRadioGroupOverrides = function (predefinedProps) { return ({
        onItemClick: function (e, itemProps) {
            _.invoke(predefinedProps, 'onItemClick', e, itemProps);
            _.invoke(props, 'onItemClick', e, itemProps);
        },
    }); };
    var renderItems = function () {
        return _.map(items, function (item) {
            var kind = _.get(item, 'kind', 'item');
            switch (kind) {
                case 'divider':
                    return ToolbarMenuDivider_1.default.create(item);
                case 'group':
                    return ToolbarMenuRadioGroup_1.default.create(item, { overrideProps: handleRadioGroupOverrides });
                case 'toggle':
                    return ToolbarMenuItem_1.default.create(item, {
                        defaultProps: function () { return ({ accessibility: accessibility_1.toolbarMenuItemCheckboxBehavior }); },
                        overrideProps: handleItemOverrides,
                    });
                default:
                    return ToolbarMenuItem_1.default.create(item, {
                        defaultProps: function () { return ({
                            submenuIndicator: submenuIndicator,
                            inSubmenu: submenu,
                        }); },
                        overrideProps: handleItemOverrides,
                    });
            }
        });
    };
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ToolbarMenu.handledProps, props);
    var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({}, unhandledProps), { className: classes.root }))),
        React.createElement(toolbarVariablesContext_1.ToolbarVariablesProvider, { value: mergedVariables }, utils_1.childrenExist(children) ? children : renderItems())));
    setEnd();
    return element;
};
ToolbarMenu.displayName = 'ToolbarMenu';
ToolbarMenu.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']), onItemClick: PropTypes.func, submenu: PropTypes.bool, submenuIndicator: customPropTypes.shorthandAllowingChildren });
ToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes);
ToolbarMenu.defaultProps = {
    accessibility: accessibility_1.toolbarMenuBehavior,
    as: 'ul',
};
ToolbarMenu.create = utils_1.createShorthandFactory({ Component: ToolbarMenu, mappedArrayProp: 'items' });
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(ToolbarMenu);
