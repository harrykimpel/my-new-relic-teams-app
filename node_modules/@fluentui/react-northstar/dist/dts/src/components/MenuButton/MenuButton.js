"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var utils_1 = require("../../utils");
var factories_1 = require("../../utils/factories");
var Popup_1 = require("../Popup/Popup");
var Menu_1 = require("../Menu/Menu");
var focusUtils_1 = require("./focusUtils");
var positioner_1 = require("../../utils/positioner");
exports.menuButtonClassName = 'ui-menubutton';
exports.menuButtonSlotClassNames = {
    menu: exports.menuButtonClassName + "__menu",
};
/**
 * A MenuButton displays a menu connected to trigger element.
 * @accessibility
 */
var MenuButton = /** @class */ (function (_super) {
    tslib_1.__extends(MenuButton, _super);
    function MenuButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.triggerRef = React.createRef();
        _this.menuRef = React.createRef();
        _this.actionHandlers = {
            closeMenu: function (e) { return _this.closeMenu(e); },
            openAndFocusFirst: function (e) { return _this.openAndFocus(e, 'first'); },
            openAndFocusLast: function (e) { return _this.openAndFocus(e, 'last'); },
        };
        _this.handleOpenChange = function (e, open, callback) {
            _.invoke(_this.props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { open: open }));
            _this.setState({ open: open }, callback);
        };
        _this.handleMenuOverrides = function (predefinedProps) { return ({
            onItemClick: function (e, itemProps) {
                _.invoke(predefinedProps, 'onItemClick', e, itemProps);
                _.invoke(_this.props, 'onMenuItemClick', e, itemProps);
                if (!itemProps || !itemProps.menu) {
                    // do not close if clicked on item with submenu
                    _this.handleOpenChange(e, false);
                }
            },
        }); };
        return _this;
    }
    MenuButton.getAutoControlledStateFromProps = function (props, state) {
        return {
            menuId: utils_1.getOrGenerateIdFromShorthand('menubutton-menu-', props.menu, state.menuId),
            triggerId: utils_1.getOrGenerateIdFromShorthand('menubutton-trigger-', props.trigger, state.triggerId),
        };
    };
    MenuButton.prototype.closeMenu = function (e) {
        this.handleOpenChange(e, false);
    };
    MenuButton.prototype.openAndFocus = function (e, which) {
        var _this = this;
        e.preventDefault();
        this.handleOpenChange(e, true, function () { return focusUtils_1.focusMenuItem(_this.menuRef.current, which); });
    };
    MenuButton.prototype.renderComponent = function (_a) {
        var _this = this;
        var ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps, accessibility = _a.accessibility, styles = _a.styles;
        var _b = this.props, 
        // MenuButton props:
        contextMenu = _b.contextMenu, menu = _b.menu, 
        // Popup props:
        accessibilityProp = _b.accessibility, align = _b.align, className = _b.className, defaultOpen = _b.defaultOpen, flipBoundary = _b.flipBoundary, mountNode = _b.mountNode, mouseLeaveDelay = _b.mouseLeaveDelay, offset = _b.offset, on = _b.on, onOpenChange = _b.onOpenChange, open = _b.open, overflowBoundary = _b.overflowBoundary, pointing = _b.pointing, position = _b.position, positionFixed = _b.positionFixed, tabbableTrigger = _b.tabbableTrigger, stylesProp = _b.styles, target = _b.target, trigger = _b.trigger, unstable_pinned = _b.unstable_pinned, variables = _b.variables;
        var popupProps = {
            accessibility: accessibilityProp,
            align: align,
            className: className,
            defaultOpen: defaultOpen,
            mountNode: mountNode,
            mouseLeaveDelay: mouseLeaveDelay,
            flipBoundary: flipBoundary,
            offset: offset,
            on: on,
            onOpenChange: onOpenChange,
            open: open,
            overflowBoundary: overflowBoundary,
            pointing: pointing,
            position: position,
            positionFixed: positionFixed,
            tabbableTrigger: tabbableTrigger,
            styles: stylesProp,
            target: target,
            trigger: trigger,
            unstable_pinned: unstable_pinned,
            variables: variables,
        };
        var content = Menu_1.default.create(menu, {
            defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({}, accessibility.attributes.menu), { vertical: true, className: exports.menuButtonSlotClassNames.menu })); },
            overrideProps: this.handleMenuOverrides,
        });
        var overrideProps = tslib_1.__assign({ accessibility: function () { return accessibility; }, open: this.state.open, onOpenChange: function (e, _a) {
                var open = _a.open;
                _this.handleOpenChange(e, open);
            }, content: {
                styles: styles.popupContent,
                content: content && React.createElement(react_component_ref_1.Ref, { innerRef: this.menuRef }, content),
            }, children: undefined }, (contextMenu
            ? {
                on: 'context',
                trapFocus: true,
                tabbableTrigger: false,
            }
            : {
                inline: true,
                autoFocus: true,
            }));
        var popup = Popup_1.default.create(popupProps, { overrideProps: overrideProps });
        if (contextMenu) {
            return popup;
        }
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
            React.createElement(react_component_ref_1.Ref, { innerRef: this.triggerRef }, popup)));
    };
    MenuButton.displayName = 'MenuButton';
    MenuButton.deprecated_className = exports.menuButtonClassName;
    MenuButton.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        as: true,
        content: false,
    })), { align: PropTypes.oneOf(positioner_1.ALIGNMENTS), defaultOpen: PropTypes.bool, mountNode: customPropTypes.domNode, mouseLeaveDelay: PropTypes.number, offset: PropTypes.oneOfType([
            PropTypes.func,
            PropTypes.arrayOf(PropTypes.number),
        ]), on: PropTypes.oneOfType([
            PropTypes.oneOf(['hover', 'click', 'focus', 'context']),
            PropTypes.arrayOf(PropTypes.oneOf(['click', 'focus', 'context'])),
            PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'context'])),
        ]), flipBoundary: PropTypes.oneOfType([
            PropTypes.object,
            PropTypes.arrayOf(PropTypes.object),
            PropTypes.oneOf(['clippingParents', 'window', 'scrollParent']),
        ]), overflowBoundary: PropTypes.oneOfType([
            PropTypes.object,
            PropTypes.arrayOf(PropTypes.object),
            PropTypes.oneOf(['clippingParents', 'window', 'scrollParent']),
        ]), open: PropTypes.bool, onMenuItemClick: PropTypes.func, onOpenChange: PropTypes.func, position: PropTypes.oneOf(positioner_1.POSITIONS), positionFixed: PropTypes.bool, target: PropTypes.any, trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.any]), tabbableTrigger: PropTypes.bool, unstable_pinned: PropTypes.bool, menu: PropTypes.oneOfType([
            customPropTypes.itemShorthandWithoutJSX,
            PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),
        ]), contextMenu: PropTypes.bool });
    MenuButton.defaultProps = {
        accessibility: accessibility_1.menuButtonBehavior,
        align: 'start',
        position: 'below',
    };
    MenuButton.autoControlledProps = ['open'];
    return MenuButton;
}(utils_1.AutoControlledComponent));
exports.default = MenuButton;
MenuButton.create = factories_1.createShorthandFactory({ Component: MenuButton, mappedProp: 'menu' });
