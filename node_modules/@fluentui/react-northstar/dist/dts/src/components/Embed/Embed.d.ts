import { Accessibility, EmbedBehaviorProps } from '@fluentui/accessibility';
import * as React from 'react';
import { UIComponentProps } from '../../utils';
import { VideoProps } from '../Video/Video';
import { BoxProps } from '../Box/Box';
import { ComponentEventHandler, WithAsProp, ShorthandValue, FluentComponentStaticProps } from '../../types';
export interface EmbedSlotClassNames {
    control: string;
}
export interface EmbedProps extends UIComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<EmbedBehaviorProps>;
    /** Alternative text. */
    alt?: string;
    /** Corresponds to HTML title attribute. */
    title?: string;
    /** Whether the embedded object should be active. */
    active?: boolean;
    /** Whether the embedded object should start active. */
    defaultActive?: boolean;
    /** Shorthand for an control. */
    control?: ShorthandValue<BoxProps>;
    /** Shorthand for an embedded iframe. */
    iframe?: ShorthandValue<BoxProps>;
    /**
     * Event for request to change 'active' value.
     * @param event - React's original SyntheticEvent.
     * @param data - All props and proposed value.
     */
    onActiveChange?: ComponentEventHandler<EmbedProps>;
    /**
     * Called when is clicked.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All item props.
     */
    onClick?: ComponentEventHandler<EmbedProps>;
    /** Image source URL for when video isn't playing. */
    placeholder?: string;
    /** Shorthand for an embedded video. */
    video?: ShorthandValue<VideoProps>;
}
export declare const embedClassName = "ui-embed";
export declare const embedSlotClassNames: EmbedSlotClassNames;
export declare type EmbedStylesProps = Required<Pick<EmbedProps, 'active'>> & {
    iframeLoaded: boolean;
};
export declare const Embed: React.FC<WithAsProp<EmbedProps>> & FluentComponentStaticProps<EmbedProps>;
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & EmbedProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<EmbedBehaviorProps>;
        alt?: string;
        title?: string;
        active?: boolean;
        defaultActive?: boolean;
        control?: ShorthandValue<BoxProps>;
        iframe?: ShorthandValue<BoxProps>;
        onActiveChange?: ComponentEventHandler<EmbedProps>;
        onClick?: ComponentEventHandler<EmbedProps>;
        placeholder?: string;
        video?: ShorthandValue<VideoProps>;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        ref?: React.LegacyRef<HTMLSpanElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLSpanElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLSpanElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLSpanElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLSpanElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLSpanElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLSpanElement>) => void;
        onChange?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onInput?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onReset?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLSpanElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLSpanElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLSpanElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLSpanElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLSpanElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLSpanElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLSpanElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLSpanElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLSpanElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLSpanElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLSpanElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLSpanElement>) => void;
    }): JSX.Element;
} & {
    displayName: string;
    handledProps: ("active" | "iframe" | "title" | "video" | "className" | "placeholder" | "onClick" | "variables" | "styles" | "alt" | "accessibility" | "design" | "defaultActive" | "control" | "onActiveChange")[];
    create: import("../../utils").ShorthandFactory<EmbedProps>;
    shorthandConfig: import("../../utils").ShorthandConfig<EmbedProps>;
};
/**
 * An Embed displays content from external websites, like a post from external social network.
 *
 * @accessibility
 * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its
 * accessibility section.
 */
export default _default;
