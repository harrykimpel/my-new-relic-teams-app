"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var classnames_1 = require("classnames");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var react_transition_group_1 = require("react-transition-group");
var utils_1 = require("../../utils");
exports.animationClassName = 'ui-animation';
/**
 * An Animation provides animation effects to rendered elements.
 */
var Animation = function (props) {
    var _a, _b;
    var context = React.useContext(react_fela_1.ThemeContext);
    var _c = react_bindings_1.useTelemetry(Animation.displayName, context.telemetry), setStart = _c.setStart, setEnd = _c.setEnd;
    setStart();
    var appear = props.appear, children = props.children, className = props.className, delay = props.delay, direction = props.direction, duration = props.duration, fillMode = props.fillMode, iterationCount = props.iterationCount, keyframeParams = props.keyframeParams, mountOnEnter = props.mountOnEnter, name = props.name, playState = props.playState, timeout = props.timeout, timingFunction = props.timingFunction, visible = props.visible, unmountOnExit = props.unmountOnExit;
    var handleAnimationEvent = function (event) { return function () {
        _.invoke(props, event, null, props);
    }; };
    var _d = React.useMemo(function () {
        var animation = {
            name: name,
            keyframeParams: keyframeParams,
            duration: duration,
            delay: delay,
            iterationCount: iterationCount,
            direction: direction,
            fillMode: fillMode,
            playState: playState,
            timingFunction: timingFunction,
        };
        return react_bindings_1.unstable_getStyles({
            className: exports.animationClassName,
            displayNames: [Animation.displayName],
            props: {
                className: className,
                styles: react_bindings_1.unstable_createAnimationStyles(animation, context.theme),
            },
            disableAnimations: context.disableAnimations,
            renderer: context.renderer,
            rtl: context.rtl,
            performance: {
                enableSanitizeCssPlugin: false,
                enableStylesCaching: false,
                enableVariablesCaching: false,
                enableBooleanVariablesCaching: false,
            },
            saveDebug: _.noop,
            theme: context.theme,
        });
    }, [
        className,
        context,
        name,
        delay,
        direction,
        duration,
        fillMode,
        iterationCount,
        keyframeParams,
        playState,
        timingFunction,
    ]), classes = _d.classes, animationStyles = _d.styles;
    if (_.isNil(children)) {
        setEnd();
        return null;
    }
    var _e = animationStyles.root, animationDuration = _e.animationDuration, animationDelay = _e.animationDelay;
    var timeoutResult = timeout || react_bindings_1.unstable_calculateAnimationTimeout(animationDuration, animationDelay) || 0;
    var unhandledProps = react_bindings_1.useUnhandledProps(Animation.handledProps, props);
    var isChildrenFunction = typeof children === 'function';
    var child = utils_1.childrenExist(children) && !isChildrenFunction && React.Children.only(children);
    var element = (React.createElement(react_transition_group_1.Transition, tslib_1.__assign({ in: visible, appear: appear, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, timeout: timeoutResult, onEnter: handleAnimationEvent('onEnter'), onEntering: handleAnimationEvent('onEntering'), onEntered: handleAnimationEvent('onEntered'), onExit: handleAnimationEvent('onExit'), onExiting: handleAnimationEvent('onExiting'), onExited: handleAnimationEvent('onExited') }, unhandledProps, { className: !isChildrenFunction ? classnames_1.default(classes.root, (_b = (_a = child) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.className) : '' }), isChildrenFunction ? function () { return children({ classes: classes.root }); } : child));
    setEnd();
    return element;
};
Animation.displayName = 'Animation';
Animation.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    accessibility: false,
    as: false,
    content: false,
    children: false,
})), { children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]), name: PropTypes.string, delay: PropTypes.string, direction: PropTypes.string, duration: PropTypes.string, fillMode: PropTypes.string, iterationCount: PropTypes.string, keyframeParams: PropTypes.object, playState: PropTypes.string, timingFunction: PropTypes.string, visible: PropTypes.bool, appear: PropTypes.bool, mountOnEnter: PropTypes.bool, unmountOnExit: PropTypes.bool, timeout: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.shape({
            appear: PropTypes.number,
            enter: PropTypes.number,
            exit: PropTypes.number,
        }),
    ]), onEnter: PropTypes.func, onEntering: PropTypes.func, onEntered: PropTypes.func, onExit: PropTypes.func, onExiting: PropTypes.func, onExited: PropTypes.func });
Animation.handledProps = Object.keys(Animation.propTypes);
exports.default = Animation;
