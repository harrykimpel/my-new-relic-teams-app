"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
// @ts-ignore
var react_fela_1 = require("react-fela");
var types_1 = require("../../types");
var react_bindings_1 = require("@fluentui/react-bindings");
exports.dividerClassName = 'ui-divider';
exports.Divider = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(exports.Divider.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, color = props.color, fitted = props.fitted, size = props.size, important = props.important, content = props.content, vertical = props.vertical, className = props.className, design = props.design, styles = props.styles, variables = props.variables, accessibility = props.accessibility;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.Divider.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(accessibility, {
        debugName: exports.Divider.displayName,
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(exports.Divider.displayName, {
        className: exports.dividerClassName,
        mapPropsToStyles: function () { return ({
            hasContent: utils_1.childrenExist(children) || !!content,
            color: color,
            fitted: fitted,
            size: size,
            important: important,
            vertical: vertical,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
exports.Divider.displayName = 'Divider';
exports.Divider.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ color: true })), { fitted: PropTypes.bool, size: PropTypes.number, important: PropTypes.bool, vertical: PropTypes.bool });
exports.Divider.defaultProps = {
    size: 0,
};
exports.Divider.handledProps = Object.keys(exports.Divider.propTypes);
exports.Divider.create = utils_1.createShorthandFactory({ Component: exports.Divider, mappedProp: 'content' });
/**
 * A Divider visually segments content.
 */
exports.default = types_1.withSafeTypeForAs(exports.Divider);
