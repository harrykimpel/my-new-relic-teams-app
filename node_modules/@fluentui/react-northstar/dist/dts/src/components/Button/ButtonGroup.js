"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var Button_1 = require("./Button");
var react_bindings_1 = require("@fluentui/react-bindings");
// @ts-ignore
var react_fela_1 = require("react-fela");
exports.buttonGroupClassName = 'ui-buttons';
exports.ButtonGroup = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(exports.ButtonGroup.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var children = props.children, buttons = props.buttons, circular = props.circular, content = props.content, className = props.className, design = props.design, styles = props.styles, variables = props.variables;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(exports.ButtonGroup.handledProps, props);
    var _b = react_bindings_1.useStyles(exports.ButtonGroup.displayName, {
        className: exports.buttonGroupClassName,
        mapPropsToStyles: function () { return ({
            circular: circular,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, ResolvedStyles = _b.styles;
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: exports.ButtonGroup.displayName,
        rtl: context.rtl,
    });
    var getStyleForButtonIndex = function (styles, isFirst, isLast) {
        var resultStyles = {};
        if (isFirst) {
            resultStyles = styles.firstButton;
        }
        if (isLast) {
            resultStyles = tslib_1.__assign(tslib_1.__assign({}, resultStyles), styles.lastButton);
        }
        if (!isFirst && !isLast) {
            resultStyles = styles.middleButton;
        }
        return resultStyles;
    };
    var emptyButtons = _.isNil(buttons);
    var element = (React.createElement(ElementType, tslib_1.__assign({}, tslib_1.__assign(tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root }, unhandledProps))), (emptyButtons && tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] }))))), emptyButtons
        ? utils_1.childrenExist(children)
            ? children
            : content
        : _.map(buttons, function (button, idx) {
            return utils_1.createShorthand(Button_1.default, button, {
                defaultProps: function () { return ({
                    circular: circular,
                    styles: getStyleForButtonIndex(ResolvedStyles, idx === 0, idx === buttons.length - 1),
                }); },
            });
        })));
    setEnd();
    return element;
};
exports.ButtonGroup.displayName = 'ButtonGroup';
exports.ButtonGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { buttons: customPropTypes.collectionShorthand, circular: PropTypes.bool });
exports.ButtonGroup.defaultProps = {
    accessibility: accessibility_1.buttonGroupBehavior,
    as: 'div',
};
exports.ButtonGroup.handledProps = Object.keys(exports.ButtonGroup.propTypes);
exports.ButtonGroup.create = utils_1.createShorthandFactory({
    Component: exports.ButtonGroup,
    mappedProp: 'content',
    mappedArrayProp: 'buttons',
});
/**
 * A ButtonGroup represents multiple related actions as a group.
 */
exports.default = types_1.withSafeTypeForAs(exports.ButtonGroup);
