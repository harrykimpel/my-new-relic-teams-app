import { Accessibility, TextAreaBehaviorProps } from '@fluentui/accessibility';
import { ComponentEventHandler, WithAsProp, FluentComponentStaticProps } from '../../types';
import * as React from 'react';
import { UIComponentProps, ChildrenComponentProps } from '../../utils';
export interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<TextAreaBehaviorProps>;
    /** The default value of the text area. */
    defaultValue?: string;
    /**
     * Called on change.
     *
     * @param event - React's original SyntheticEvent.
     * @param data - All props.
     */
    onChange?: ComponentEventHandler<TextAreaProps>;
    /** The value of the text area. */
    value?: string;
    /** The text area becomes read-only. */
    disabled?: boolean;
    /** An input can have inverted colors. */
    inverted?: boolean;
    /** A textarea can be resized. */
    resize?: 'none' | 'both' | 'horizontal' | 'vertical';
    /** A textarea can take the width of its container. */
    fluid?: boolean;
}
export declare type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled'>>;
export declare const textAreaClassName = "ui-textarea";
export declare const TextArea: React.FC<WithAsProp<TextAreaProps>> & FluentComponentStaticProps<TextAreaProps>;
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & TextAreaProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<TextAreaBehaviorProps>;
        defaultValue?: string;
        onChange?: ComponentEventHandler<TextAreaProps>;
        value?: string;
        disabled?: boolean;
        inverted?: boolean;
        resize?: "both" | "none" | "horizontal" | "vertical";
        fluid?: boolean;
        className?: string;
        design?: import("@fluentui/react-bindings").ComponentDesignProp;
        styles?: import("@fluentui/styles").ComponentSlotStyle<any, any>;
        variables?: any;
        children?: React.ReactNode;
        ref?: React.LegacyRef<HTMLTextAreaElement>;
        key?: import("csstype").AnimationIterationCountProperty;
        autoComplete?: string;
        autoFocus?: boolean;
        cols?: number;
        dirName?: string;
        form?: string;
        maxLength?: number;
        minLength?: number;
        name?: string;
        placeholder?: string;
        readOnly?: boolean;
        required?: boolean;
        rows?: number;
        wrap?: string;
        defaultChecked?: boolean;
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLTextAreaElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onInput?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onReset?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLTextAreaElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLTextAreaElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLTextAreaElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLTextAreaElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLTextAreaElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLTextAreaElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLTextAreaElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLTextAreaElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLTextAreaElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLTextAreaElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLTextAreaElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLTextAreaElement>) => void;
    }): JSX.Element;
} & {
    displayName: string;
    handledProps: ("disabled" | "resize" | "children" | "className" | "defaultValue" | "onChange" | "value" | "variables" | "styles" | "accessibility" | "inverted" | "fluid" | "design")[];
    create: import("../../utils").ShorthandFactory<TextAreaProps>;
    shorthandConfig: import("../../utils").ShorthandConfig<TextAreaProps>;
};
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */
export default _default;
