"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var _ = require("lodash");
// @ts-ignore We have this export in package, but it is not present in typings
var react_fela_1 = require("react-fela");
var renderComponent_1 = require("./renderComponent");
// TODO @Bugaa92: deprecated by createComponent.tsx
var UIComponent = /** @class */ (function (_super) {
    tslib_1.__extends(UIComponent, _super);
    function UIComponent(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.childClass = _this.constructor;
        // stores debug information
        _this.fluentUIDebug = null;
        if (process.env.NODE_ENV !== 'production') {
            var child = _this.constructor;
            var childName = child.name;
            if (typeof _this.renderComponent !== 'function') {
                throw new Error(childName + " extending UIComponent is missing a renderComponent() method.");
            }
        }
        _this.renderComponent = _this.renderComponent.bind(_this);
        return _this;
    }
    Object.defineProperty(UIComponent, "handledProps", {
        get: function () {
            if (!this._handledPropsCache) {
                this._handledPropsCache = _.difference(_.keys(this.propTypes), this.unhandledProps).sort();
            }
            return this._handledPropsCache;
        },
        enumerable: true,
        configurable: true
    });
    UIComponent.prototype.renderComponent = function (config) {
        throw new Error('renderComponent is not implemented.');
    };
    UIComponent.prototype.render = function () {
        var _this = this;
        return renderComponent_1.default({
            className: this.childClass.deprecated_className,
            displayName: this.childClass.displayName,
            handledProps: this.childClass.handledProps,
            props: this.props,
            state: this.state,
            actionHandlers: this.actionHandlers,
            render: this.renderComponent,
            saveDebug: function (updatedDebug) { return (_this.fluentUIDebug = updatedDebug); },
        }, this.context);
    };
    UIComponent.contextType = react_fela_1.ThemeContext;
    /** Array of props to exclude from list of handled ones. */
    UIComponent.unhandledProps = [];
    UIComponent._handledPropsCache = undefined;
    return UIComponent;
}(React.Component));
exports.default = UIComponent;
