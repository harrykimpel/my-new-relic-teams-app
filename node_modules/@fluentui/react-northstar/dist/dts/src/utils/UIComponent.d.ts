import { AccessibilityActionHandlers } from '@fluentui/react-bindings';
import * as React from 'react';
import { ProviderContextPrepared } from '../types';
import { RenderResultConfig } from './renderComponent';
declare class UIComponent<P, S = {}> extends React.Component<P, S> {
    readonly childClass: typeof UIComponent;
    static defaultProps: {
        [key: string]: any;
    };
    static displayName: string;
    static deprecated_className: string;
    static contextType: any;
    static propTypes: any;
    /** Array of props to exclude from list of handled ones. */
    static unhandledProps: string[];
    static _handledPropsCache: string[];
    static get handledProps(): string[];
    actionHandlers: AccessibilityActionHandlers;
    context: ProviderContextPrepared;
    fluentUIDebug: any;
    constructor(props: any, context: any);
    renderComponent(config: RenderResultConfig<P>): React.ReactNode;
    render(): React.ReactElement<P, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
}
export default UIComponent;
