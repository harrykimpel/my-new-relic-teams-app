"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var PopperJs = require("@popperjs/core");
var _ = require("lodash");
var React = require("react");
var isBrowser_1 = require("../isBrowser");
var getBoundary_1 = require("./getBoundary");
var getScrollParent_1 = require("./getScrollParent");
var positioningHelper_1 = require("./positioningHelper");
/**
 * Memoize a result using deep equality. This hook has two advantages over
 * React.useMemo: it uses deep equality to compare memo keys, and it guarantees
 * that the memo function will only be called if the keys are unequal.
 * React.useMemo cannot be relied on to do this, since it is only a performance
 * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).
 *
 * Copied from https://github.com/apollographql/react-apollo/blob/master/packages/hooks/src/utils/useDeepMemo.ts.
 */
function useDeepMemo(memoFn, key) {
    var ref = React.useRef();
    if (!ref.current || !_.isEqual(key, ref.current.key)) {
        ref.current = { key: key, value: memoFn() };
    }
    return ref.current.value;
}
/**
 * Popper relies on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.
 */
var Popper = function (props) {
    var align = props.align, children = props.children, enabled = props.enabled, flipBoundary = props.flipBoundary, userModifiers = props.modifiers, offset = props.offset, overflowBoundary = props.overflowBoundary, pointerTargetRef = props.pointerTargetRef, position = props.position, positionFixed = props.positionFixed, _a = props.positioningDependencies, positioningDependencies = _a === void 0 ? [] : _a, rtl = props.rtl, targetRef = props.targetRef, unstable_pinned = props.unstable_pinned;
    var proposedPlacement = positioningHelper_1.getPlacement({ align: align, position: position, rtl: rtl });
    var popperRef = React.useRef();
    var contentRef = React.useRef(null);
    var latestPlacement = React.useRef(proposedPlacement);
    var _b = React.useState(proposedPlacement), computedPlacement = _b[0], setComputedPlacement = _b[1];
    var computedModifiers = useDeepMemo(function () { return tslib_1.__spreadArrays([
        offset && {
            name: 'offset',
            options: { offset: rtl ? positioningHelper_1.applyRtlToOffset(offset) : offset },
        }
    ], userModifiers); }, [offset, flipBoundary, overflowBoundary, userModifiers]);
    var createInstance = React.useCallback(function () {
        var reference = targetRef && react_component_ref_1.isRefObject(targetRef)
            ? targetRef.current
            : targetRef;
        if (!enabled || !reference || !contentRef.current) {
            return;
        }
        var handleUpdate = function (_a) {
            var state = _a.state;
            // PopperJS performs computations that might update the computed placement: auto positioning, flipping the
            // placement in case the popper box should be rendered at the edge of the viewport and does not fit
            if (state.placement !== latestPlacement.current) {
                latestPlacement.current = state.placement;
                setComputedPlacement(state.placement);
            }
        };
        var hasDocument = isBrowser_1.default();
        var scrollParentElement = hasDocument ? getScrollParent_1.default(contentRef.current) : null;
        var hasScrollableElement = scrollParentElement
            ? scrollParentElement !== scrollParentElement.ownerDocument.body
            : false;
        var hasPointer = !!(pointerTargetRef && pointerTargetRef.current);
        var modifiers = [
            { name: 'flip', options: { flipVariations: true } },
            /**
             * unstable_pinned disables the flip modifier by setting flip.enabled to false; this
             * disables automatic repositioning of the popper box; it will always be placed according to
             * the values of `align` and `position` props, regardless of the size of the component, the
             * reference element or the viewport.
             */
            unstable_pinned && { name: 'flip', enabled: false },
            /**
             * When the popper box is placed in the context of a scrollable element, we need to set
             * preventOverflow.escapeWithReference to true and flip.boundariesElement to 'scrollParent'
             * (default is 'viewport') so that the popper box will stick with the targetRef when we
             * scroll targetRef out of the viewport.
             */
            hasScrollableElement && { name: 'flip', options: { boundary: 'clippingParents' } },
            hasScrollableElement && { name: 'preventOverflow', options: { boundary: 'clippingParents' } },
        ];
        var options = {
            placement: proposedPlacement,
            strategy: positionFixed ? 'fixed' : 'absolute',
            modifiers: tslib_1.__spreadArrays(modifiers, computedModifiers, [
                /**
                 * This modifier is necessary in order to render the pointer. Refs are resolved in effects, so it can't be
                 * placed under computed modifiers. Deep merge is not required as this modifier has only these properties.
                 */
                {
                    name: 'arrow',
                    enabled: hasPointer,
                    options: {
                        element: pointerTargetRef && pointerTargetRef.current,
                    },
                },
                flipBoundary && {
                    name: 'flip',
                    options: {
                        altBoundary: true,
                        boundary: getBoundary_1.default(contentRef.current, flipBoundary),
                    },
                },
                overflowBoundary && {
                    name: 'preventOverflow',
                    options: {
                        altBoundary: true,
                        boundary: getBoundary_1.default(contentRef.current, overflowBoundary),
                    },
                },
                {
                    name: 'onUpdate',
                    enabled: true,
                    phase: 'afterWrite',
                    fn: handleUpdate,
                },
            ]).filter(Boolean),
            onFirstUpdate: function (state) { return handleUpdate({ state: state }); },
        };
        popperRef.current = PopperJs.createPopper(reference, contentRef.current, options);
    }, [contentRef, computedModifiers, enabled, pointerTargetRef, positionFixed, proposedPlacement, targetRef]);
    var destroyInstance = React.useCallback(function () {
        if (popperRef.current) {
            popperRef.current.destroy();
            popperRef.current = null;
        }
    }, []);
    var scheduleUpdate = React.useCallback(function () {
        if (popperRef.current) {
            popperRef.current.update();
        }
    }, []);
    react_bindings_1.useIsomorphicLayoutEffect(function () {
        createInstance();
        return destroyInstance;
    }, [createInstance]);
    React.useEffect(scheduleUpdate, tslib_1.__spreadArrays(positioningDependencies, [computedPlacement]));
    var child = typeof children === 'function'
        ? children({ placement: computedPlacement, scheduleUpdate: scheduleUpdate })
        : children;
    return child ? React.createElement(react_component_ref_1.Ref, { innerRef: contentRef }, React.Children.only(child)) : null;
};
Popper.defaultProps = {
    enabled: true,
    modifiers: [],
    positionFixed: false,
    positioningDependencies: [],
};
exports.default = Popper;
