"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * Checks whether provided CSS property value is safe for being rendered by Fela engine.
 */
var isValidCssValue = function (value) {
    if (typeof value !== 'string') {
        return true;
    }
    var openingBrackets = '({[';
    var closingBrackets = ')}]';
    var openingBracketsStack = [];
    /**
     * This loop logic checks whether braces sequence of input argument is valid.
     * Essentially, it ensures that each of the '(', '{', '[' braces
     * - is properly matched by its complementary closing character
     * - closing brace properly corresponds to the last opened one
     */
    for (var i = 0; i < value.length; ++i) {
        var currentCharacter = value[i];
        if (openingBrackets.includes(currentCharacter)) {
            openingBracketsStack.push(currentCharacter);
        }
        else if (closingBrackets.includes(currentCharacter)) {
            var lastOpeningBracket = openingBracketsStack.pop();
            if (lastOpeningBracket &&
                openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)) {
                return false;
            }
        }
    }
    return openingBracketsStack.length === 0;
};
exports.default = (function (config) {
    var cssPropertiesToSkip = tslib_1.__spreadArrays(((config && config.skip) || []));
    var sanitizeCssStyleObject = function (styles, type, renderer, params) {
        if (!params.sanitizeCss) {
            return styles;
        }
        var processedStyles = Array.isArray(styles) ? [] : {};
        Object.keys(styles).forEach(function (cssPropertyNameOrIndex) {
            var cssPropertyValue = styles[cssPropertyNameOrIndex];
            if (typeof cssPropertyValue === 'object') {
                processedStyles[cssPropertyNameOrIndex] = sanitizeCssStyleObject(cssPropertyValue, type, renderer, params);
                return;
            }
            var isPropertyToSkip = cssPropertiesToSkip.some(function (propToExclude) { return propToExclude === cssPropertyNameOrIndex; });
            if (isPropertyToSkip) {
                processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;
                return;
            }
            if (isValidCssValue(cssPropertyValue)) {
                processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;
            }
            else if (process.env.NODE_ENV !== 'production') {
                // eslint-disable-next-line no-console
                console.warn("fela-sanitize-css: An invalid value \"" + cssPropertyValue + "\" was passed to property \"" + cssPropertyNameOrIndex + "\"");
            }
        });
        return processedStyles;
    };
    return sanitizeCssStyleObject;
});
