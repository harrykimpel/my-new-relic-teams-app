{"version":3,"sources":["utils/getOrGenerateIdFromShorthand.ts"],"names":["getOrGenerateIdFromShorthand","prefix","value","currentValue","undefined","result","React","isValidElement","props","id"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAIA,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B,CACnCC,MADmC,EAEnCC,KAFmC,EAGnCC,YAHmC,EAIZ;AACvB,MAAI,qBAAQD,KAAR,CAAJ,EAAoB;AAClB,WAAOE,SAAP;AACD;;AAED,MAAIC,MAAJ;;AAEA,MAAIC,KAAK,CAACC,cAAN,CAAqBL,KAArB,CAAJ,EAAiC;AAC/BG,IAAAA,MAAM,GAAIH,KAAD,CAA+CM,KAA/C,CAAqDC,EAA9D;AACD,GAFD,MAEO,IAAI,6BAAgBP,KAAhB,CAAJ,EAA4B;AACjCG,IAAAA,MAAM,GAAIH,KAAD,CAA+BO,EAAxC;AACD;;AAED,SAAOJ,MAAM,IAAIF,YAAV,IAA0B,wBAAWF,MAAX,CAAjC;AACD,CAlBD;;eAoBeD,4B","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ShorthandValue } from '../types';\n\nconst getOrGenerateIdFromShorthand = <P extends Record<string, any>>(\n  prefix: string,\n  value: ShorthandValue<P>,\n  currentValue?: string,\n): string | undefined => {\n  if (_.isNil(value)) {\n    return undefined;\n  }\n\n  let result: string;\n\n  if (React.isValidElement(value)) {\n    result = (value as React.ReactElement<{ id?: string }>).props.id;\n  } else if (_.isPlainObject(value)) {\n    result = (value as Record<string, any>).id;\n  }\n\n  return result || currentValue || _.uniqueId(prefix);\n};\n\nexport default getOrGenerateIdFromShorthand;\n"],"file":"getOrGenerateIdFromShorthand.js"}