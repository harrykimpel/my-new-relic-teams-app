{"version":3,"sources":["utils/fontSizeUtility.ts"],"names":["DEFAULT_REM_SIZE_IN_PX","_documentRemSize","getDocumentRemSize","getFontSizeValue","getComputedStyle","document","documentElement","fontSize","size","parseFloat","pxToRem","valueInPx","baseRemSize","remSize","convertedValueInRems"],"mappings":";;;;;;;;;;;AACA;;AAEA,IAAMA,sBAAsB,GAAG,EAA/B;AAEA,IAAIC,gBAA+B,GAAG,IAAtC;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAc;AACvC,SAAO,4BACH;AACAC,EAAAA,gBAAgB,CAACC,gBAAgB,CAACC,QAAQ,CAACC,eAAV,CAAhB,CAA2CC,QAA5C,CAAhB,IAAyEP,sBAFtE,GAGHA,sBAHJ;AAID,CALD;;AAOA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACK,IAAD,EAAyC;AAChE,SAAQA,IAAI,IAAIC,UAAU,CAACD,IAAD,CAAnB,IAA8B,IAArC;AACD,CAFD;AAIA;;;;;;;;;;;;;;;;;AAeO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD,EAAoBC,WAApB,EAAqD;AAC1E,MAAI,CAACA,WAAD,IAAgB,CAACX,gBAArB,EAAuC;AACrC;AACA;AACA;AACAA,IAAAA,gBAAgB,GAAGC,kBAAkB,EAArC;AACD;;AAED,MAAMW,OAAO,GAAGD,WAAW,IAAIX,gBAAf,IAAmCD,sBAAnD;AACA,MAAMc,oBAAoB,GAAGH,SAAS,GAAGE,OAAzC;AAEA,mBAAU,qBAAQC,oBAAR,EAA8B,CAA9B,CAAV;AACD,CAZM","sourcesContent":["import * as _ from 'lodash';\nimport isBrowser from './isBrowser';\n\nconst DEFAULT_REM_SIZE_IN_PX = 16;\n\nlet _documentRemSize: number | null = null;\n\nconst getDocumentRemSize = (): number => {\n  return isBrowser()\n    ? // eslint-disable-next-line no-undef\n      getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX\n    : DEFAULT_REM_SIZE_IN_PX;\n};\n\nconst getFontSizeValue = (size?: string | null): number | null => {\n  return (size && parseFloat(size)) || null;\n};\n\n/**\n * Converts the provided px size to rem based on the default font size of 16px unless\n * the HTML font size has been previously defined with setHTMLFontSize().\n * @param valueInPx - The px value to convert to rem.\n * @param baseRemSize - Rem size to use for conversions. Optional - document's font size will be taken otherwise.\n * @example\n * ```\n * // Returns '1rem' for default document font size (16px).\n * pxToRem(16)\n *\n * // Returns '2rem'.\n * pxToRem(32, 16)\n * ```\n * @returns The value converted to the rem.\n */\nexport const pxToRem = (valueInPx: number, baseRemSize?: number): string => {\n  if (!baseRemSize && !_documentRemSize) {\n    // there is no way how to reset the cached value\n    // invalidating the cache is not possible as resetting cached value won't trigger recalculation of site variables,\n    // for which originally computed values will stay unchanged\n    _documentRemSize = getDocumentRemSize();\n  }\n\n  const remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;\n  const convertedValueInRems = valueInPx / remSize;\n\n  return `${_.round(convertedValueInRems, 4)}rem`;\n};\n"],"file":"fontSizeUtility.js"}