{"version":3,"sources":["utils/whatInput.ts"],"names":["currentInput","window","sessionStorage","getItem","e","eventTimer","ignoreMap","whatInputInitialized","inputMap","keydown","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","isBuffering","pointerMap","supportsPassive","opts","Object","defineProperty","get","addEventListener","setUp","detectWheel","addListeners","doUpdate","document","eventTarget","options","passive","capture","PointerEvent","setInput","MSPointerEvent","eventBuffer","event","eventKey","which","value","type","pointerType","ignoreMatch","indexOf","shouldUpdate","setItem","view","target","documentElement","setAttribute","clearTimeout","setTimeout","wheelType","createElement","onmousewheel","undefined","Array","prototype","setUpWhatInput","targetWindow","defaultView","initializedTimes","cleanupWhatInput","removeEventListener","tryCleanupWhatInput","setWhatInputSource","newInput","ask","isFromKeyboard"],"mappings":"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","sourcesContent":["import isBrowser from './isBrowser';\n\n// Taken from https://github.com/ten1seven/what-input/blob/master/src/scripts/what-input.js\n/* eslint-disable */\n\n/*\n * variables\n */\n\n// last used input type\nlet currentInput = 'initial';\n\n// check for sessionStorage support\n// then check for session variables and use if available\ntry {\n  if (window.sessionStorage.getItem('what-input')) {\n    currentInput = window.sessionStorage.getItem('what-input');\n  }\n} catch (e) {}\n\n// event buffer timer\nlet eventTimer = null;\n\n// list of modifier keys commonly used with the mouse and\n// can be safely ignored to prevent false keyboard detection\nconst ignoreMap = [\n  16, // shift\n  17, // control\n  18, // alt\n  91, // Windows key / left Apple cmd\n  93, // Windows menu / right Apple cmd\n];\n// used to count how many Providers needed to initialize whatinput.\nconst whatInputInitialized = 'whatInputInitialized';\n\n// mapping of events to input types\nconst inputMap = {\n  keydown: 'keyboard',\n  keyup: 'keyboard',\n  mousedown: 'mouse',\n  mousemove: 'mouse',\n  MSPointerDown: 'pointer',\n  MSPointerMove: 'pointer',\n  pointerdown: 'pointer',\n  pointermove: 'pointer',\n  touchstart: 'touch',\n};\n\n// boolean: true if touch buffer is active\nlet isBuffering = false;\n\n// map of IE 10 pointer events\nconst pointerMap = {\n  2: 'touch',\n  3: 'touch', // treat pen like touch\n  4: 'mouse',\n};\n\n// check support for passive event listeners\nlet supportsPassive = false;\n\ntry {\n  const opts = Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    },\n  });\n\n  window.addEventListener('test', null, opts);\n} catch (e) {}\n\n/*\n * set up\n */\n\nconst setUp = () => {\n  // add correct mouse wheel event mapping to `inputMap`\n  inputMap[detectWheel()] = 'mouse';\n\n  addListeners(window);\n  doUpdate(window.document);\n};\n\n/*\n * events\n */\n\nconst addListeners = (eventTarget: Window) => {\n  // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n  // can only demonstrate potential, but not actual, interaction\n  // and are treated separately\n  const options = supportsPassive ? { passive: true, capture: true } : true;\n\n  // pointer events (mouse, pen, touch)\n  // @ts-ignore\n  if (eventTarget.PointerEvent) {\n    eventTarget.addEventListener('pointerdown', setInput);\n    // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.addEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.addEventListener('mousedown', setInput, true);\n\n    // touch events\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.addEventListener('touchstart', eventBuffer, options);\n      eventTarget.addEventListener('touchend', setInput, true);\n    }\n  }\n\n  // keyboard events\n  eventTarget.addEventListener('keydown', eventBuffer, true);\n  eventTarget.addEventListener('keyup', eventBuffer, true);\n};\n\n// checks conditions before updating new input\nconst setInput = event => {\n  // only execute if the event buffer timer isn't running\n  if (!isBuffering) {\n    const eventKey = event.which;\n    let value = inputMap[event.type];\n\n    if (value === 'pointer') {\n      value = pointerType(event);\n    }\n\n    const ignoreMatch = ignoreMap.indexOf(eventKey) === -1;\n    const shouldUpdate = (value === 'keyboard' && eventKey && ignoreMatch) || value === 'mouse' || value === 'touch';\n\n    if (currentInput !== value && shouldUpdate) {\n      currentInput = value;\n\n      try {\n        window.sessionStorage.setItem('what-input', currentInput);\n      } catch (e) {}\n\n      doUpdate(event.view.document);\n    }\n  }\n};\n\n// updates the doc and `inputTypes` array with new input\nconst doUpdate = (target: Document) => {\n  target.documentElement.setAttribute(`data-whatinput`, currentInput);\n};\n\n// buffers events that frequently also fire mouse events\nconst eventBuffer = event => {\n  // set the current input\n  setInput(event);\n\n  // clear the timer if it happens to be running\n  window.clearTimeout(eventTimer);\n\n  // set the isBuffering to `true`\n  isBuffering = true;\n\n  // run the timer\n  eventTimer = window.setTimeout(() => {\n    // if the timer runs out, set isBuffering back to `false`\n    isBuffering = false;\n  }, 100);\n};\n\n/*\n * utilities\n */\n\nconst pointerType = event => {\n  if (typeof event.pointerType === 'number') {\n    return pointerMap[event.pointerType];\n  }\n\n  // treat pen like touch\n  return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n};\n\n// detect version of mouse wheel event to use\n// via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\nconst detectWheel = () => {\n  let wheelType;\n\n  // Modern browsers support \"wheel\"\n  if ('onwheel' in document.createElement('div')) {\n    wheelType = 'wheel';\n  } else {\n    // Webkit and IE support at least \"mousewheel\"\n    // or assume that remaining browsers are older Firefox\n    wheelType =\n      // @ts-ignore\n      document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n  }\n\n  return wheelType;\n};\n\n// don't start script unless browser cuts the mustard\n// (also passes if polyfills are used)\nif (isBrowser() && 'addEventListener' in window && Array.prototype.indexOf) {\n  setUp();\n}\n\n/*\n * set up for document\n */\n\nexport const setUpWhatInput = (target: Document) => {\n  const targetWindow = target.defaultView;\n  if (isBrowser() && targetWindow && 'addEventListener' in targetWindow && Array.prototype.indexOf) {\n    const initializedTimes = target[whatInputInitialized];\n    if (typeof initializedTimes === 'number' && initializedTimes > 0) {\n      target[whatInputInitialized] = initializedTimes + 1;\n      return;\n    }\n    target[whatInputInitialized] = 1;\n\n    addListeners(targetWindow);\n    doUpdate(target);\n  }\n};\n\nfunction cleanupWhatInput(eventTarget: Window) {\n  const options = supportsPassive ? { capture: true } : true;\n\n  // @ts-ignore\n  if (eventTarget.PointerEvent) {\n    eventTarget.removeEventListener('pointerdown', setInput);\n    // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.removeEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.removeEventListener('mousedown', setInput, true);\n\n    // touch events\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.removeEventListener('touchstart', eventBuffer, options);\n      eventTarget.removeEventListener('touchend', setInput, true);\n    }\n  }\n\n  // keyboard events\n  eventTarget.removeEventListener('keydown', eventBuffer, true);\n  eventTarget.removeEventListener('keyup', eventBuffer, true);\n}\n\nexport const tryCleanupWhatInput = (target: Document) => {\n  const targetWindow = target.defaultView;\n  if (isBrowser() && targetWindow && 'removeEventListener' in targetWindow) {\n    if (target[whatInputInitialized] === 1) {\n      delete target[whatInputInitialized];\n      cleanupWhatInput(targetWindow);\n    } else {\n      target[whatInputInitialized] = target[whatInputInitialized] - 1;\n    }\n  }\n};\n\nexport const setWhatInputSource = (target: Document, newInput: 'mouse' | 'keyboard' | 'initial') => {\n  currentInput = newInput;\n  doUpdate(target);\n};\n\n// returns string: the current input type\n// returns the same value as the `data-whatinput` attribute\nexport const ask = (): string => currentInput;\n\nexport const isFromKeyboard = (): boolean => ask() === 'keyboard';\n"],"file":"whatInput.js"}