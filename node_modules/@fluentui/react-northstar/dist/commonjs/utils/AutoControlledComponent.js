"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getAutoControlledStateValue = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _startsWith2 = _interopRequireDefault(require("lodash/startsWith"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _UIComponent2 = _interopRequireDefault(require("./UIComponent"));

var getDefaultPropName = function getDefaultPropName(prop) {
  return "default".concat(prop[0].toUpperCase() + prop.slice(1));
};
/**
 * Return the auto controlled state value for a give prop. The initial value is chosen in this order:
 *  - regular props
 *  - then, default props
 *  - then, initial state
 *  - then, `checked` defaults to false
 *  - then, `value` defaults to '' or [] if props.multiple
 *  - else, undefined
 *
 *  @param propName - A prop name
 *  @param props - A props object
 *  @param state - A state object
 *  @param includeDefaults - Whether or not to heed the default props or initial state
 */


var getAutoControlledStateValue = function getAutoControlledStateValue(propName, props) {
  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  var includeDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  // regular props
  var propValue = props[propName];
  if (propValue !== undefined) return propValue;

  if (includeDefaults) {
    // defaultProps
    var defaultProp = props[getDefaultPropName(propName)];
    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined

    if (state) {
      var initialState = state[propName];
      if (initialState !== undefined) return initialState;
    }
  } // React doesn't allow changing from uncontrolled to controlled components,
  // default checked/value if they were not present.


  if (propName === 'checked') return false;
  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined
};

exports.getAutoControlledStateValue = getAutoControlledStateValue;

var AutoControlledComponent =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(AutoControlledComponent, _UIComponent);

  function AutoControlledComponent(props, ctx) {
    var _this;

    (0, _classCallCheck2.default)(this, AutoControlledComponent);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AutoControlledComponent).call(this, props, ctx));
    var _ref = _this.constructor,
        autoControlledProps = _ref.autoControlledProps,
        getAutoControlledStateFromProps = _ref.getAutoControlledStateFromProps;
    var state = (0, _invoke2.default)((0, _assertThisInitialized2.default)(_this), 'getInitialAutoControlledState', _this.props) || {};

    if (process.env.NODE_ENV !== 'production') {
      var _ref2 = _this.constructor,
          defaultProps = _ref2.defaultProps,
          name = _ref2.name,
          propTypes = _ref2.propTypes,
          getDerivedStateFromProps = _ref2.getDerivedStateFromProps; // require usage of getAutoControlledStateFromProps()

      if (getDerivedStateFromProps !== AutoControlledComponent.getDerivedStateFromProps) {
        /* eslint-disable-next-line no-console */
        console.error("Auto controlled ".concat(name, " must specify a static getAutoControlledStateFromProps() instead of getDerivedStateFromProps()."));
      } // require static autoControlledProps


      if (!autoControlledProps) {
        /* eslint-disable-next-line no-console */
        console.error("Auto controlled ".concat(name, " must specify a static autoControlledProps array."));
      } // require propTypes


      (0, _each2.default)(autoControlledProps, function (prop) {
        var defaultProp = getDefaultPropName(prop); // regular prop

        if (!(0, _has2.default)(propTypes, defaultProp)) {
          /* eslint-disable-next-line no-console */
          console.error("".concat(name, " is missing \"").concat(defaultProp, "\" propTypes validation for auto controlled prop \"").concat(prop, "\"."));
        } // its default prop


        if (!(0, _has2.default)(propTypes, prop)) {
          /* eslint-disable-next-line no-console */
          console.error("".concat(name, " is missing propTypes validation for auto controlled prop \"").concat(prop, "\"."));
        }
      }); // prevent autoControlledProps in defaultProps
      //
      // When setting state, auto controlled props values always win (so the parent can manage them).
      // It is not reasonable to decipher the difference between props from the parent and defaultProps.
      // Allowing defaultProps results in trySetState always deferring to the defaultProp value.
      // Auto controlled props also listed in defaultProps can never be updated.
      //
      // To set defaults for an AutoControlled prop, you can set the initial state in the
      // constructor or by using an ES7 property initializer:
      // https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers

      var illegalDefaults = (0, _intersection2.default)(autoControlledProps, (0, _keys2.default)(defaultProps));

      if (!(0, _isEmpty2.default)(illegalDefaults)) {
        /* eslint-disable-next-line no-console */
        console.error(['Do not set defaultProps for autoControlledProps. You can set defaults by', 'setting state in the constructor or using an ES7 property initializer', '(https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers)', "See ".concat(name, " props: \"").concat(illegalDefaults, "\".")].join(' '));
      } // prevent listing defaultProps in autoControlledProps
      //
      // Default props are automatically handled.
      // Listing defaults in autoControlledProps would result in allowing defaultDefaultValue props.


      var illegalAutoControlled = (0, _filter2.default)(autoControlledProps, function (prop) {
        return (0, _startsWith2.default)(prop, 'default');
      });

      if (!(0, _isEmpty2.default)(illegalAutoControlled)) {
        /* eslint-disable-next-line no-console */
        console.error(['Do not add default props to autoControlledProps.', 'Default props are automatically handled.', "See ".concat(name, " autoControlledProps: \"").concat(illegalAutoControlled, "\".")].join(' '));
      }
    } // Auto controlled props are copied to state.
    // Set initial state by copying auto controlled props to state.
    // Also look for the default prop for any auto controlled props (foo => defaultFoo)
    // so we can set initial values from defaults.


    var initialAutoControlledState = autoControlledProps.reduce(function (acc, prop) {
      acc[prop] = getAutoControlledStateValue(prop, _this.props, state, true);

      if (process.env.NODE_ENV !== 'production') {
        var defaultPropName = getDefaultPropName(prop);
        var _name = _this.constructor.name; // prevent defaultFoo={} along side foo={}

        if (!(0, _isUndefined2.default)(_this.props[defaultPropName]) && !(0, _isUndefined2.default)(_this.props[prop])) {
          /* eslint-disable-next-line no-console */
          console.error("".concat(_name, " prop \"").concat(prop, "\" is auto controlled. Specify either ").concat(defaultPropName, " or ").concat(prop, ", but not both."));
        }
      }

      return acc;
    }, {});
    _this.state = Object.assign({}, state, {}, initialAutoControlledState, {
      autoControlledProps: autoControlledProps,
      getAutoControlledStateFromProps: getAutoControlledStateFromProps
    });
    return _this;
  }

  return AutoControlledComponent;
}(_UIComponent2.default); // eslint-disable-next-line func-names


exports.default = AutoControlledComponent;
(0, _defineProperty2.default)(AutoControlledComponent, "getDerivedStateFromProps", void 0);
(0, _defineProperty2.default)(AutoControlledComponent, "getAutoControlledStateFromProps", void 0);

AutoControlledComponent.getDerivedStateFromProps = function (props, state) {
  var autoControlledProps = state.autoControlledProps,
      getAutoControlledStateFromProps = state.getAutoControlledStateFromProps; // Solve the next state for autoControlledProps

  var newStateFromProps = autoControlledProps.reduce(function (acc, prop) {
    var isNextDefined = !(0, _isUndefined2.default)(props[prop]); // if next is defined then use its value

    if (isNextDefined) acc[prop] = props[prop];
    return acc;
  }, {}); // Due to the inheritance of the AutoControlledComponent we should call its
  // getAutoControlledStateFromProps() and merge it with the existing state

  if (getAutoControlledStateFromProps) {
    var computedState = getAutoControlledStateFromProps(props, Object.assign({}, state, {}, newStateFromProps)); // We should follow the idea of getDerivedStateFromProps() and return only modified state

    return Object.assign({}, newStateFromProps, {}, computedState);
  }

  return newStateFromProps;
}; // eslint-disable-next-line func-names


AutoControlledComponent.getAutoControlledStateFromProps = function (props, state) {
  return null;
};
//# sourceMappingURL=AutoControlledComponent.js.map
