"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _mapValues2 = _interopRequireDefault(require("lodash/mapValues"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var React = _interopRequireWildcard(require("react"));

// Makes sure that 'onKeyDown' is correctly overriden on the slots.
// It should be applied after 'unhandledProps' because they can contain 'onKeyDown' from user and is handled by UTs in isConformant()
var applyAccessibilityKeyHandlers = function applyAccessibilityKeyHandlers(keyHandlers, value) {
  var valIsPropsObject = (0, _isPlainObject2.default)(value);
  var valIsReactElement = React.isValidElement(value);
  var slotProps = valIsReactElement && value.props || valIsPropsObject && value || {};
  return (0, _mapValues2.default)(keyHandlers, function (accessibilityHandler, handleName) {
    return function (e) {
      accessibilityHandler(e);

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _invoke2.default.apply(void 0, [slotProps, handleName, e].concat(args));
    };
  });
};

var _default = applyAccessibilityKeyHandlers;
exports.default = _default;
//# sourceMappingURL=applyAccessibilityKeyHandlers.js.map
