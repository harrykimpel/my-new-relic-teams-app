"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPointerStyles = exports.getContainerStyles = void 0;

var getContainerStyles = function getContainerStyles(options) {
  var placement = options.placement,
      margin = options.margin;
  return Object.assign({}, placement === 'bottom' && {
    paddingTop: margin
  }, {}, placement === 'top' && {
    paddingBottom: margin
  }, {}, placement === 'left' && {
    paddingRight: margin
  }, {}, placement === 'right' && {
    paddingLeft: margin
  });
};

exports.getContainerStyles = getContainerStyles;

var getPointerStyles = function getPointerStyles(options) {
  var backgroundColor = options.backgroundColor,
      borderColor = options.borderColor,
      borderSize = options.borderSize,
      gap = options.gap,
      height = options.height,
      placement = options.placement,
      rtl = options.rtl,
      svg = options.svg,
      width = options.width;
  return Object.assign({
    display: 'block',
    position: 'absolute',
    zIndex: 1
  }, (placement === 'bottom' || placement === 'top') && {
    paddingLeft: gap,
    paddingRight: gap,
    height: height,
    width: "calc(".concat(width, " + (").concat(gap, " * 2))")
  }, {}, (placement === 'left' || placement === 'right') && {
    paddingBottom: gap,
    paddingTop: gap,
    height: "calc(".concat(width, " + (").concat(gap, " * 2))"),
    width: height
  }, {}, placement === 'bottom' && {
    top: "calc(".concat(height, " + (").concat(borderSize, " * 2))")
  }, {}, placement === 'top' && {
    bottom: "calc(".concat(height, " + ").concat(borderSize, ")")
  }, {}, placement === 'left' && {
    right: "calc(".concat(height, " + ").concat(borderSize, ")")
  }, {}, placement === 'right' && {
    left: "calc(".concat(height, " + ").concat(borderSize, ")")
  }, {
    '::before': Object.assign({
      content: '" "',
      display: 'block',
      height: height,
      position: 'relative',
      transformOrigin: 'center top',
      borderBottomColor: 'transparent',
      borderLeftColor: 'transparent',
      borderRightColor: 'transparent',
      borderTopColor: 'transparent',
      borderStyle: 'solid',
      left: 0,
      top: 0
    }, placement === 'bottom' && {
      borderBottomColor: backgroundColor,
      borderWidth: "0 ".concat(height, " ").concat(height)
    }, {}, placement === 'top' && {
      borderTopColor: backgroundColor,
      borderWidth: "".concat(height, " ").concat(height, " 0"),
      top: "calc(".concat(borderSize, " * -1)")
    }, {}, placement === 'left' && {
      borderLeftColor: backgroundColor,
      borderWidth: "".concat(height, " 0 ").concat(height, " ").concat(height)
    }, {}, placement === 'right' && {
      borderRightColor: backgroundColor,
      borderWidth: "".concat(height, " ").concat(height, " ").concat(height, " 0")
    }),
    '::after': Object.assign({
      content: '" "',
      display: 'block',
      height: height,
      position: 'relative',
      transformOrigin: 'center top',
      zIndex: -1,
      borderBottomColor: 'transparent',
      borderLeftColor: 'transparent',
      borderRightColor: 'transparent',
      borderTopColor: 'transparent',
      borderStyle: 'solid'
    }, placement === 'bottom' && {
      borderBottomColor: borderColor,
      borderWidth: "0 ".concat(height, " ").concat(height),
      left: 0,
      bottom: "calc(".concat(height, " + 1px)")
    }, {}, placement === 'top' && {
      borderTopColor: borderColor,
      borderWidth: "".concat(height, " ").concat(height, " 0"),
      left: 0,
      bottom: height
    }, {}, placement === 'left' && {
      borderLeftColor: borderColor,
      borderWidth: "".concat(height, " 0 ").concat(height, " ").concat(height),
      left: borderSize,
      bottom: width
    }, {}, placement === 'right' && {
      borderRightColor: borderColor,
      borderWidth: "".concat(height, " ").concat(height, " ").concat(height, " 0"),
      right: borderSize,
      bottom: width
    })
  }, svg && {
    '::before': Object.assign({
      content: '" "',
      backgroundImage: svg,
      backgroundRepeat: 'no-repeat',
      backgroundPosition: 'center',
      display: 'block',
      position: 'relative'
    }, placement === 'bottom' && {
      height: "calc(".concat(width, " + (").concat(gap, " * 2))"),
      width: height,
      left: gap,
      bottom: "calc(".concat(width, " + ").concat(borderSize, ")"),
      transform: "rotate(".concat(rtl ? -90 : 90, "deg)")
    }, {}, placement === 'top' && {
      height: "calc(".concat(width, " + (").concat(gap, " * 2))"),
      width: height,
      left: gap,
      bottom: "calc(".concat(gap, " - ").concat(borderSize, ")"),
      transform: "rotate(".concat(rtl ? 90 : -90, "deg)")
    }, {}, placement === 'left' && {
      height: width,
      width: height,
      left: height,
      transform: "rotate(".concat(rtl ? 0 : 180, "deg)")
    }, {}, placement === 'right' && {
      height: width,
      width: height,
      right: height,
      transform: "rotate(".concat(rtl ? 180 : 0, "deg)")
    }),
    '::after': undefined
  });
};

exports.getPointerStyles = getPointerStyles;
//# sourceMappingURL=getPointerStyles.js.map
