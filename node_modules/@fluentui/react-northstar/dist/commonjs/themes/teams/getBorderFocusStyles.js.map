{"version":3,"sources":["themes/teams/getBorderFocusStyles.ts"],"names":["defaultColor","getPseudoElementStyles","args","borderEdgeValue","styles","content","position","borderStyle","pointerEvents","top","right","bottom","left","getBorderFocusStyles","sv","variables","borderWidth","borderRadius","focusInnerBorderColor","focusOuterBorderColor","borderPadding","defaultBorderStyles","outline","borderColor","zIndex","zIndexes","foreground"],"mappings":";;;;;;;;;;;AAuBA,IAAMA,YAAY,GAAG,aAArB;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,IAAD,EAAoD;AAAA,MACzEC,eADyE,GAC1CD,IAD0C,CACzEC,eADyE;AAAA,MACrDC,MADqD,0CAC1CF,IAD0C;AAGjF;AACEG,IAAAA,OAAO,EAAE,IADX;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,WAAW,EAAE,OAHf;AAIEC,IAAAA,aAAa,EAAE,MAJjB;AAKEC,IAAAA,GAAG,EAAEN,eALP;AAMEO,IAAAA,KAAK,EAAEP,eANT;AAOEQ,IAAAA,MAAM,EAAER,eAPV;AAQES,IAAAA,IAAI,EAAET;AARR,KASKC,MATL;AAWD,CAdD;AAgBA;;;;;;;AAKA,IAAMS,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,IAAD,EAA4C;AACvE,MAAMY,EAAE,GAAGZ,IAAI,CAACa,SAAhB;AADuE,0BAQnEb,IARmE,CAGrEc,WAHqE;AAAA,MAGrEA,WAHqE,kCAGvDF,EAAE,CAACE,WAHoD;AAAA,2BAQnEd,IARmE,CAIrEe,YAJqE;AAAA,MAIrEA,YAJqE,mCAItDH,EAAE,CAACG,YAJmD;AAAA,8BAQnEf,IARmE,CAKrEgB,qBALqE;AAAA,MAKrEA,qBALqE,sCAK7CJ,EAAE,CAACI,qBAAH,IAA4BlB,YALiB;AAAA,8BAQnEE,IARmE,CAMrEiB,qBANqE;AAAA,MAMrEA,qBANqE,sCAM7CL,EAAE,CAACK,qBAAH,IAA4BnB,YANiB;AAAA,MAOrEoB,aAPqE,GAQnElB,IARmE,CAOrEkB,aAPqE;AAUvE,MAAMC,mBAAwC,GAAG;AAAEL,IAAAA,WAAW,EAAXA,WAAF;AAAeC,IAAAA,YAAY,EAAZA;AAAf,GAAjD;AAEA,SAAO;AACL,cAAU;AACRK,MAAAA,OAAO,EAAE;AADD,KADL;AAIL,sBAAkB;AAChBC,MAAAA,WAAW,EAAE,aADG;AAGhB,iBAAWtB,sBAAsB;AAC/BuB,QAAAA,MAAM,EAAEV,EAAE,CAACW,QAAH,CAAYC,UADW;AAE/BvB,QAAAA,eAAe,EAAEiB,aAAa,IAAI,IAAjB,GAAwB,GAAxB,cAAkCA,aAAlC,CAFc;AAG/BG,QAAAA,WAAW,EAAEL;AAHkB,SAI5BG,mBAJ4B,EAHjB;AAUhB,gBAAUpB,sBAAsB;AAC9BuB,QAAAA,MAAM,EAAEV,EAAE,CAACW,QAAH,CAAYC,UADU;AAE9BvB,QAAAA,eAAe,EAAEiB,aAAa,IAAI,IAAjB,cAA4BJ,WAA5B,yBAA0DI,aAA1D,gBAA6EJ,WAA7E,MAFa;AAG9BO,QAAAA,WAAW,EAAEJ;AAHiB,SAI3BE,mBAJ2B;AAVhB;AAJb,GAAP;AAsBD,CAlCD;;eAoCeR,oB","sourcesContent":["import { ICSSInJSStyle, SiteVariablesPrepared } from '@fluentui/styles';\nimport * as React from 'react';\n\ntype CSSBorderStyles = Pick<React.CSSProperties, 'borderWidth' | 'borderRadius'>;\n\ntype BorderFocusStyles = CSSBorderStyles & {\n  variables?:\n    | SiteVariablesPrepared\n    | {\n        borderWidth: string;\n        borderRadius: string;\n        focusInnerBorderColor: string;\n        focusOuterBorderColor: string;\n\n        zIndexes: { foreground: string };\n      };\n  focusInnerBorderColor?: string;\n  focusOuterBorderColor?: string;\n  borderPadding?: React.CSSProperties['padding'];\n};\n\ntype BorderPseudoElementStyles = CSSBorderStyles & { borderEdgeValue: string };\n\nconst defaultColor = 'transparent';\n\nconst getPseudoElementStyles = (args: BorderPseudoElementStyles): ICSSInJSStyle => {\n  const { borderEdgeValue, ...styles } = args;\n\n  return {\n    content: '\"\"',\n    position: 'absolute',\n    borderStyle: 'solid',\n    pointerEvents: 'none',\n    top: borderEdgeValue,\n    right: borderEdgeValue,\n    bottom: borderEdgeValue,\n    left: borderEdgeValue,\n    ...styles,\n  };\n};\n\n/**\n * Returns style object that can be used for styling components on focus state.\n * NOTE: the element where this is used needs to have relative positioning so that the\n * pseudo elements created on focus can be properly positioned.\n */\nconst getBorderFocusStyles = (args: BorderFocusStyles): ICSSInJSStyle => {\n  const sv = args.variables;\n  const {\n    borderWidth = sv.borderWidth,\n    borderRadius = sv.borderRadius,\n    focusInnerBorderColor = sv.focusInnerBorderColor || defaultColor,\n    focusOuterBorderColor = sv.focusOuterBorderColor || defaultColor,\n    borderPadding,\n  } = args;\n\n  const defaultBorderStyles: React.CSSProperties = { borderWidth, borderRadius };\n\n  return {\n    ':focus': {\n      outline: 0,\n    },\n    ':focus-visible': {\n      borderColor: 'transparent',\n\n      ':before': getPseudoElementStyles({\n        zIndex: sv.zIndexes.foreground,\n        borderEdgeValue: borderPadding == null ? '0' : `-${borderPadding}`,\n        borderColor: focusInnerBorderColor,\n        ...defaultBorderStyles,\n      }),\n\n      ':after': getPseudoElementStyles({\n        zIndex: sv.zIndexes.foreground,\n        borderEdgeValue: borderPadding == null ? `-${borderWidth}` : `calc(0px - ${borderPadding} - ${borderWidth})`,\n        borderColor: focusOuterBorderColor,\n        ...defaultBorderStyles,\n      }),\n    },\n  };\n};\n\nexport default getBorderFocusStyles;\n"],"file":"getBorderFocusStyles.js"}