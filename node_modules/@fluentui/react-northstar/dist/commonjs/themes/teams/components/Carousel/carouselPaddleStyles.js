"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactBindings = require("@fluentui/react-bindings");

var _CarouselPaddle = require("../../../../components/Carousel/CarouselPaddle");

var _getBorderFocusStyles = _interopRequireDefault(require("../../getBorderFocusStyles"));

var _getIconFillOrOutlineStyles = _interopRequireDefault(require("../../getIconFillOrOutlineStyles"));

var _paddleIndicatorUrl = _interopRequireDefault(require("./paddleIndicatorUrl"));

var _utils = require("../../../../utils");

var getIndicatorStyles = function getIndicatorStyles(color, next, size) {
  return {
    width: size,
    height: size,
    backgroundImage: (0, _paddleIndicatorUrl.default)(color, next),
    backgroundRepeat: 'no-repeat'
  };
};

var carouselPaddleStyles = {
  root: function root(_ref) {
    var _Object$assign;

    var p = _ref.props,
        v = _ref.variables,
        theme = _ref.theme;
    var siteVariables = theme.siteVariables;
    var borderWidth = siteVariables.borderWidth;
    var borderFocusStyles = (0, _getBorderFocusStyles.default)({
      variables: {
        borderRadius: v.focusBorderRadius,
        borderWidth: v.focusBorderWidth,
        focusInnerBorderColor: v.focusInnerBorderColor,
        focusOuterBorderColor: v.focusOuterBorderColor,
        zIndexes: {
          foreground: v.focusBorderZIndex
        }
      },
      borderPadding: borderWidth
    });
    return Object.assign({
      height: v.paddleHeight,
      minWidth: v.paddleHeight,
      color: v.paddleColor,
      backgroundColor: v.paddleBackgroundColor,
      borderRadius: v.paddleBorderRadius,
      display: 'inline-flex',
      justifyContent: 'center',
      alignItems: 'center',
      position: 'relative',
      verticalAlign: 'middle',
      cursor: 'pointer',
      outline: 0,
      padding: 0,
      borderWidth: borderWidth,
      borderStyle: 'solid',
      borderColor: v.paddleBorderColor,
      boxShadow: v.paddleBoxShadow
    }, p.next && {
      height: (0, _utils.pxToRem)(v.paddleNextSize),
      top: (0, _utils.pxToRem)(-v.height / 2 - v.paddleNextSize / 2),
      left: (0, _utils.pxToRem)(v.width - 2 * v.paddleNextSize)
    }, {}, p.previous && {
      height: (0, _utils.pxToRem)(v.paddlePreviousSize),
      top: (0, _utils.pxToRem)(-v.height / 2 - v.paddlePreviousSize / 2)
    }, {}, p.hidden && {
      visibility: 'hidden'
    }, {
      ':hover': Object.assign({}, (0, _getIconFillOrOutlineStyles.default)({
        outline: false
      }), (_Object$assign = {}, (0, _defineProperty2.default)(_Object$assign, "& .".concat(_CarouselPaddle.carouselPaddleSlotClassNames.content), Object.assign({}, getIndicatorStyles(v.paddleColorHover, p.next, v.paddleIndicatorSize))), (0, _defineProperty2.default)(_Object$assign, "color", v.paddleColorHover), (0, _defineProperty2.default)(_Object$assign, "background", v.paddleBackgroundColorHover), _Object$assign)),
      ':active': Object.assign({}, (0, _reactBindings.unstable_createAnimationStyles)('scaleDownSoft', theme), {
        color: v.paddleColorActive,
        backgroundColor: v.paddleBackgroundColorActive,
        borderColor: v.paddleBorderColorActive,
        boxShadow: 'none'
      }),
      ':focus': borderFocusStyles[':focus'],
      ':focus-visible': {
        backgroundColor: v.paddleBackgroundColorFocus,
        borderColor: v.paddleBorderColorFocus,
        color: v.paddleColorFocus,
        borderWidth: borderWidth,
        ':hover': {
          borderColor: v.paddleBorderColorHover
        }
      }
    }, p.disabled && {
      cursor: 'default',
      color: v.paddleColorDisabled,
      boxShadow: 'none',
      pointerEvents: 'none',
      ':hover': {
        color: v.paddleColorDisabled
      },
      backgroundColor: v.paddleBackgroundColorDisabled,
      borderColor: v.paddleBorderColorDisabled
    });
  },
  content: function content(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables,
        rtl = _ref2.rtl;
    return Object.assign({}, getIndicatorStyles(p.disabled ? v.paddleColorDisabled : v.paddleColor, p.next, v.paddleIndicatorSize), {}, rtl && {
      transform: 'scaleX(-1)'
    });
  }
};
var _default = carouselPaddleStyles;
exports.default = _default;
//# sourceMappingURL=carouselPaddleStyles.js.map
