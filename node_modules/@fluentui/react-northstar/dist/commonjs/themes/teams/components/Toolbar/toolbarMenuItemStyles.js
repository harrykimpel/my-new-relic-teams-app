"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _colors = require("../../colors");

var _utils = require("../../../../utils");

var _getBorderFocusStyles = _interopRequireDefault(require("../../getBorderFocusStyles"));

var _ToolbarMenuItem = require("../../../../components/Toolbar/ToolbarMenuItem");

var _submenuIndicatorUrl = _interopRequireDefault(require("./submenuIndicatorUrl"));

var _activeIndicatorUrl = _interopRequireDefault(require("./activeIndicatorUrl"));

var toolbarMenuItemStyles = {
  root: function root(_ref) {
    var _hover, _ref2;

    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    var colors = (0, _colors.getColorScheme)(v.colorScheme);
    var borderFocusStyles = (0, _getBorderFocusStyles.default)({
      variables: siteVariables,
      borderRadius: 0
    });
    return Object.assign({
      position: 'relative',
      color: v.menuItemForeground || colors.foreground1,
      borderWidth: v.menuBorderWidth,
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      display: 'flex',
      alignItems: 'center',
      textAlign: 'left',
      width: '100%',
      maxWidth: '100%',
      padding: v.menuItemPadding,
      cursor: 'pointer',
      ':focus': {
        outline: 0
      },
      ':hover': (_hover = {
        color: v.menuItemForegroundHover || colors.menuItemForegroundHover,
        backgroundColor: v.menuItemBackgroundHover || colors.menuItemBackgroundHover
      }, (0, _defineProperty2.default)(_hover, "& .".concat(_ToolbarMenuItem.toolbarMenuItemSlotClassNames.submenuIndicator), {
        backgroundImage: (0, _submenuIndicatorUrl.default)(v.menuItemForegroundHover || colors.menuItemForegroundHover)
      }), (0, _defineProperty2.default)(_hover, "& .".concat(_ToolbarMenuItem.toolbarMenuItemSlotClassNames.activeIndicator), {
        backgroundImage: (0, _activeIndicatorUrl.default)(v.menuItemForegroundHover || colors.menuItemForegroundHover)
      }), _hover),
      ':focus-visible': borderFocusStyles[':focus-visible']
    }, p.disabled && (_ref2 = {
      cursor: 'default',
      color: v.menuItemForegroundDisabled || colors.foregroundDisabled1,
      backgroundColor: v.menuItemBackgroundDisabled
    }, (0, _defineProperty2.default)(_ref2, "& .".concat(_ToolbarMenuItem.toolbarMenuItemSlotClassNames.submenuIndicator), {
      backgroundImage: (0, _submenuIndicatorUrl.default)(v.menuItemForegroundDisabled || colors.foregroundDisabled1)
    }), (0, _defineProperty2.default)(_ref2, "& .".concat(_ToolbarMenuItem.toolbarMenuItemSlotClassNames.activeIndicator), {
      backgroundImage: (0, _activeIndicatorUrl.default)(v.menuItemForegroundDisabled || colors.foregroundDisabled1)
    }), (0, _defineProperty2.default)(_ref2, ':hover', {// empty to overwrite all existing hover styles
    }), _ref2));
  },
  activeIndicator: function activeIndicator(_ref3) {
    var v = _ref3.variables;
    var colors = (0, _colors.getColorScheme)(v.colorScheme);
    return {
      backgroundImage: (0, _activeIndicatorUrl.default)(v.menuItemForeground || colors.foreground1),
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
      width: (0, _utils.pxToRem)(24),
      height: '100%',
      position: 'absolute',
      right: (0, _utils.pxToRem)(7)
    };
  },
  submenuIndicator: function submenuIndicator(_ref4) {
    var v = _ref4.variables,
        rtl = _ref4.rtl;
    var colors = (0, _colors.getColorScheme)(v.colorScheme);
    return Object.assign({
      backgroundImage: (0, _submenuIndicatorUrl.default)(v.menuItemForeground || colors.foreground1),
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat'
    }, rtl && {
      transform: "scaleX(-1)"
    }, {
      width: (0, _utils.pxToRem)(16),
      height: '100%',
      position: 'absolute',
      right: (0, _utils.pxToRem)(7)
    });
  },
  wrapper: function wrapper() {
    return {
      display: 'block'
    };
  },
  icon: function icon(_ref5) {
    var p = _ref5.props;
    return Object.assign({}, p.hasContent && {
      marginRight: (0, _utils.pxToRem)(10)
    });
  }
};
var _default = toolbarMenuItemStyles;
exports.default = _default;
//# sourceMappingURL=toolbarMenuItemStyles.js.map
