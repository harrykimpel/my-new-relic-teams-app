"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextArea = exports.textAreaClassName = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _accessibility = require("@fluentui/accessibility");

var _types = require("../../types");

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _reactBindings = require("@fluentui/react-bindings");

var _reactFela = require("react-fela");

// @ts-ignore
var textAreaClassName = 'ui-textarea';
exports.textAreaClassName = textAreaClassName;

var TextArea = function TextArea(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(TextArea.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var disabled = props.disabled,
      accessibility = props.accessibility,
      inverted = props.inverted,
      resize = props.resize,
      fluid = props.fluid,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultValue,
    value: props.value,
    initialValue: ''
  }),
      _useAutoControlled2 = (0, _slicedToArray2.default)(_useAutoControlled, 2),
      value = _useAutoControlled2[0],
      setValue = _useAutoControlled2[1];

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(TextArea.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: TextArea.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        disabled: disabled
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(TextArea.displayName, {
    className: textAreaClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        inverted: inverted,
        resize: resize,
        fluid: fluid,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);

  var handleChange = function handleChange(e) {
    var newValue = (0, _get2.default)(e, 'target.value');
    (0, _invoke2.default)(props, 'onChange', e, Object.assign({}, props, {
      value: newValue
    }));
    setValue(newValue);
  };

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    value: value,
    disabled: disabled,
    onChange: handleChange
  }, unhandledProps)));
  setEnd();
  return element;
};

exports.TextArea = TextArea;
TextArea.displayName = 'TextArea';
TextArea.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  defaultValue: PropTypes.string,
  onChange: PropTypes.func,
  value: PropTypes.string,
  disabled: PropTypes.bool
});
TextArea.defaultProps = {
  as: 'textarea',
  accessibility: _accessibility.textAreaBehavior
};
TextArea.handledProps = Object.keys(TextArea.propTypes);
TextArea.create = (0, _utils.createShorthandFactory)({
  Component: TextArea
});
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */

var _default = (0, _types.withSafeTypeForAs)(TextArea);

exports.default = _default;
//# sourceMappingURL=TextArea.js.map
