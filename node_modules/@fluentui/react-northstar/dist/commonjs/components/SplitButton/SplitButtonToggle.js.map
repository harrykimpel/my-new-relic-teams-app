{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["splitButtonToggleClassName","SplitButtonToggle","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","as","children","content","disabled","primary","className","size","styles","variables","design","hasChildren","getA11Props","debugName","mapPropsToBehavior","actionHandlers","performClick","event","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","unhandledProps","handledProps","ElementType","e","result","rtlTextContainer","getAttributes","forElements","onClick","root","defaultProps","buttonBehavior","propTypes","commonPropTypes","createCommon","PropTypes","bool","func","customPropTypes","every","disallow","secondary","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\nconst SplitButtonToggle: React.FC<WithAsProp<SplitButtonToggleProps>> &\n  FluentComponentStaticProps<SplitButtonToggleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, as, children, content, disabled, primary, className, size, styles, variables, design } = props;\n\n  const hasChildren = childrenExist(children);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: () => ({\n      as,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: () => ({\n      primary,\n      disabled,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport default withSafeTypeForAs<typeof SplitButtonToggle, SplitButtonToggleProps, 'button'>(SplitButtonToggle);\n"],"file":"SplitButtonToggle.js"}