{"version":3,"sources":["components/SplitButton/SplitButton.tsx"],"names":["splitButtonClassName","SplitButton","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","button","disabled","menu","primary","secondary","toggleButton","size","position","align","flipBoundary","overflowBoundary","positionFixed","offset","unstable_pinned","className","design","styles","accessibility","variables","targetRef","useRef","ElementType","unhandledProps","handledProps","defaultValue","defaultOpen","value","open","initialValue","setOpen","useState","isFromKeyboard","setIsFromKeyboard","getA11yProps","debugName","mapPropsToBehavior","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleMenuButtonOverrides","predefinedProps","onMenuItemClick","e","menuItemProps","onOpenChange","popupProps","stopPropagation","handleMenuButtonTriggerOverrides","onClick","buttonProps","onFocus","element","root","MenuButton","create","defaultProps","on","trigger","Button","menuButton","overrideProps","target","current","SplitButtonToggle","isOpen","Toggle","propTypes","commonPropTypes","createCommon","content","customPropTypes","itemShorthand","PropTypes","bool","oneOfType","arrayOf","itemShorthandWithoutJSX","onMainButtonClick","func","every","disallow","oneOf","POSITIONS","ALIGNMENTS","object","number","splitButtonBehavior","Object","keys","Component"],"mappings":"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","sourcesContent":["import { Accessibility, splitButtonBehavior, SplitButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ComponentEventHandler,\n  ShorthandValue,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  isFromKeyboard as checkIsFromKeyboard,\n  commonPropTypes,\n  SizeValue,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport SplitButtonToggle, { SplitButtonToggleProps } from './SplitButtonToggle';\nimport Button, { ButtonProps } from '../Button/Button';\nimport MenuButton, { MenuButtonProps } from '../MenuButton/MenuButton';\nimport { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PopupProps } from '../Popup/Popup';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { PositioningProps } from '../../utils/positioner/types';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  useTelemetry,\n  useAutoControlled,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<SplitButtonBehaviorProps>;\n\n  /** Shorthand for the main button. */\n  button?: ShorthandValue<ButtonProps>;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** A split button can be disabled. */\n  disabled?: boolean;\n\n  /** Shorthand for the menu. */\n  menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;\n\n  /**\n   * Called after user's click on the main button.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMainButtonClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after user's click on a menu item.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMenuItemClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<SplitButtonProps>;\n\n  /** Defines whether menu is displayed. */\n  open?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  secondary?: boolean;\n\n  /** A split button can be sized */\n  size?: SizeValue;\n\n  /** Shorthand for the toggle button. */\n  toggleButton?: ShorthandValue<SplitButtonToggleProps>;\n}\n\nexport const splitButtonClassName = 'ui-splitbutton';\n\nexport type SplitButtonStylesProps = Required<Pick<SplitButtonProps, 'size'>> & { isFromKeyboard: boolean };\n\nexport const SplitButton: React.FC<WithAsProp<SplitButtonProps>> &\n  FluentComponentStaticProps<SplitButtonProps> & {\n    Toggle: typeof SplitButtonToggle;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(SplitButton.displayName, context.telemetry);\n  setStart();\n\n  const {\n    button,\n    disabled,\n    menu,\n    primary,\n    secondary,\n    toggleButton,\n    size,\n    position,\n    align,\n    flipBoundary,\n    overflowBoundary,\n    positionFixed,\n    offset,\n    unstable_pinned,\n    className,\n    design,\n    styles,\n    accessibility,\n    variables,\n  } = props;\n\n  const targetRef = React.useRef<HTMLDivElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(SplitButton.handledProps, props);\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false,\n  });\n\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState<boolean>(false);\n\n  const getA11yProps = useAccessibility<SplitButtonBehaviorProps>(accessibility, {\n    debugName: SplitButton.displayName,\n    mapPropsToBehavior: () => ({\n      open,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<SplitButtonStylesProps>(SplitButton.displayName, {\n    className: splitButtonClassName,\n    mapPropsToStyles: () => ({\n      isFromKeyboard,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleMenuButtonOverrides = (predefinedProps: MenuButtonProps) => ({\n    onMenuItemClick: (e: React.SyntheticEvent, menuItemProps: MenuItemProps) => {\n      setOpen(false);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: false });\n\n      _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n      _.invoke(props, 'onMenuItemClick', e, menuItemProps);\n    },\n    onOpenChange: (e: React.SyntheticEvent, popupProps: PopupProps) => {\n      e.stopPropagation();\n      setOpen(popupProps.open);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: popupProps.open });\n    },\n  });\n\n  const handleMenuButtonTriggerOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(props, 'onMainButtonClick', e, buttonProps);\n    },\n    onFocus: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, buttonProps);\n      setIsFromKeyboard(checkIsFromKeyboard());\n    },\n  });\n\n  const element = (\n    <Ref innerRef={targetRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      >\n        {MenuButton.create(\n          {},\n          {\n            defaultProps: () =>\n              getA11yProps('menuButton', {\n                menu,\n                on: [],\n                open,\n                trigger: createShorthand(Button, button, {\n                  defaultProps: () => ({\n                    styles: resolvedStyles.menuButton,\n                    primary,\n                    secondary,\n                    disabled,\n                  }),\n                  overrideProps: handleMenuButtonTriggerOverrides,\n                }),\n                target: targetRef.current,\n                position,\n                align,\n                flipBoundary,\n                overflowBoundary,\n                positionFixed,\n                offset,\n                unstable_pinned,\n              }),\n            overrideProps: handleMenuButtonOverrides,\n          },\n        )}\n\n        {SplitButtonToggle.create(toggleButton, {\n          defaultProps: () =>\n            getA11yProps('toggleButton', {\n              disabled,\n              primary,\n              secondary,\n              size,\n            }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n              _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n              setOpen(isOpen => {\n                const open = !isOpen;\n                _.invoke(props, 'onOpenChange', e, { ...props, open });\n                return open;\n              });\n            },\n          }),\n        })}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n};\n\nSplitButton.displayName = 'SplitButton';\n\nSplitButton.Toggle = SplitButtonToggle;\n\nSplitButton.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  button: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  menu: PropTypes.oneOfType([\n    customPropTypes.itemShorthand,\n    PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),\n  ]),\n  onMainButtonClick: PropTypes.func,\n  onMenuItemClick: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  open: PropTypes.bool,\n  size: customPropTypes.size,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  toggleButton: customPropTypes.itemShorthand,\n  position: PropTypes.oneOf(POSITIONS),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_pinned: PropTypes.bool,\n};\n\nSplitButton.defaultProps = {\n  accessibility: splitButtonBehavior,\n  toggleButton: {},\n  position: 'below',\n  align: 'start',\n};\n\nSplitButton.handledProps = Object.keys(SplitButton.propTypes) as any;\n\nSplitButton.create = createShorthandFactory({\n  Component: SplitButton,\n});\n\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\nexport default withSafeTypeForAs<typeof SplitButton, SplitButtonProps>(SplitButton);\n"],"file":"SplitButton.js"}