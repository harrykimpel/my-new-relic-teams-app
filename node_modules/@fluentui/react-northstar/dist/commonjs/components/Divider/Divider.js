"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Divider = exports.dividerClassName = void 0;

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _utils = require("../../utils");

var _reactFela = require("react-fela");

var _types = require("../../types");

var _reactBindings = require("@fluentui/react-bindings");

// @ts-ignore
var dividerClassName = 'ui-divider';
exports.dividerClassName = dividerClassName;

var Divider = function Divider(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Divider.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var children = props.children,
      color = props.color,
      fitted = props.fitted,
      size = props.size,
      important = props.important,
      content = props.content,
      vertical = props.vertical,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      accessibility = props.accessibility;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Divider.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Divider.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Divider.displayName, {
    className: dividerClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasContent: (0, _utils.childrenExist)(children) || !!content,
        color: color,
        fitted: fitted,
        size: size,
        important: important,
        vertical: vertical
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
};

exports.Divider = Divider;
Divider.displayName = 'Divider';
Divider.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  color: true
}), {
  fitted: PropTypes.bool,
  size: PropTypes.number,
  important: PropTypes.bool,
  vertical: PropTypes.bool
});
Divider.defaultProps = {
  size: 0
};
Divider.handledProps = Object.keys(Divider.propTypes);
Divider.create = (0, _utils.createShorthandFactory)({
  Component: Divider,
  mappedProp: 'content'
});
/**
 * A Divider visually segments content.
 */

var _default = (0, _types.withSafeTypeForAs)(Divider);

exports.default = _default;
//# sourceMappingURL=Divider.js.map
