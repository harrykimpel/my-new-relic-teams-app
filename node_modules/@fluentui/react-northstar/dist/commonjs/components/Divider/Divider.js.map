{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["dividerClassName","Divider","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","children","color","fitted","size","important","content","vertical","className","design","styles","variables","accessibility","ElementType","unhandledProps","handledProps","getA11yProps","debugName","rtl","mapPropsToStyles","hasContent","mapPropsToInlineStyles","classes","element","root","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","number","defaultProps","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { WithAsProp, withSafeTypeForAs, ProviderContextPrepared, FluentComponentStaticProps } from '../../types';\nimport { useTelemetry, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\nexport const Divider: React.FC<WithAsProp<DividerProps>> & FluentComponentStaticProps<DividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    content,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"],"file":"Divider.js"}