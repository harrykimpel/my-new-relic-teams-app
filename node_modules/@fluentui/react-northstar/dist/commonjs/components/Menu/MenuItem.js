"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.menuItemSlotClassNames = exports.menuItemClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _classnames = _interopRequireDefault(require("classnames"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _Menu = _interopRequireDefault(require("./Menu"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var _types = require("../../types");

var _positioner = require("../../utils/positioner");

var menuItemClassName = 'ui-menu__item';
exports.menuItemClassName = menuItemClassName;
var menuItemSlotClassNames = {
  submenu: "".concat(menuItemClassName, "__submenu"),
  wrapper: "".concat(menuItemClassName, "__wrapper"),
  indicator: "".concat(menuItemClassName, "__indicator")
};
exports.menuItemSlotClassNames = menuItemSlotClassNames;

var MenuItem =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(MenuItem, _AutoControlledCompon);

  function MenuItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, MenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menuRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleWrapperBlur", function (e) {
      if (!_this.props.inSubmenu && !e.currentTarget.contains(e.relatedTarget)) {
        _this.trySetMenuOpen(false, e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(event) {
        return !event.defaultPrevented && _this.handleClick(event);
      },
      openMenu: function openMenu(event) {
        return _this.openMenu(event);
      },
      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {
        return _this.closeAllMenus(event);
      },
      closeMenu: function closeMenu(event) {
        return _this.closeMenu(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        return _this.closeMenu(event, true);
      },
      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {
        event.stopPropagation();
      },
      closeAllMenus: function closeAllMenus(event) {
        return _this.closeAllMenus(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "outsideClickHandler", function (e) {
      if (!_this.isSubmenuOpen()) return;

      if (!(0, _utils.doesNodeContainClick)(_this.itemRef.current, e, _this.context.target) && !(0, _utils.doesNodeContainClick)(_this.menuRef.current, e, _this.context.target)) {
        _this.trySetMenuOpen(false, e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "performClick", function (e) {
      var _this$props = _this.props,
          active = _this$props.active,
          menu = _this$props.menu;

      if (menu) {
        if ((0, _utils.doesNodeContainClick)(_this.menuRef.current, e, _this.context.target)) {
          // submenu was clicked => close it and propagate
          _this.trySetMenuOpen(false, e, function () {
            return (0, _reactBindings.focusAsync)(_this.itemRef.current);
          });
        } else {
          // the menuItem element was clicked => toggle the open/close and stop propagation
          _this.trySetMenuOpen(active ? !_this.state.menuOpen : true, e);

          e.stopPropagation();
          e.preventDefault();
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;

      if (disabled) {
        e.preventDefault();
        return;
      }

      _this.performClick(e);

      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function (e) {
      _this.setState({
        isFromKeyboard: false
      });

      (0, _invoke2.default)(_this.props, 'onBlur', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function (e) {
      _this.setState({
        isFromKeyboard: (0, _utils.isFromKeyboard)()
      });

      (0, _invoke2.default)(_this.props, 'onFocus', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isSubmenuOpen", function () {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;
      return !!(menu && menuOpen);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeAllMenus", function (e) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      var inSubmenu = _this.props.inSubmenu;

      _this.trySetMenuOpen(false, e, function () {
        if (!inSubmenu) {
          (0, _reactBindings.focusAsync)(_this.itemRef.current);
        }
      }); // avoid spacebar scrolling the page


      if (!inSubmenu) {
        e.preventDefault();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeMenu", function (e, forceTriggerFocus) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      var inSubmenu = _this.props.inSubmenu;
      var shouldStopPropagation = inSubmenu || _this.props.vertical;

      _this.trySetMenuOpen(false, e, function () {
        if (forceTriggerFocus || shouldStopPropagation) {
          (0, _reactBindings.focusAsync)(_this.itemRef.current);
        }
      });

      if (forceTriggerFocus || shouldStopPropagation) {
        e.stopPropagation();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openMenu", function (e) {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;

      if (menu && !menuOpen) {
        _this.trySetMenuOpen(true, e);

        (0, _invoke2.default)(_this.props, 'onActiveChanged', e, Object.assign({}, _this.props, {
          active: true
        }));
        e.stopPropagation();
        e.preventDefault();
      }
    });
    return _this;
  }

  (0, _createClass2.default)(MenuItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          rtl = _ref.rtl;
      var _this$props2 = this.props,
          children = _this$props2.children,
          content = _this$props2.content,
          icon = _this$props2.icon,
          wrapper = _this$props2.wrapper,
          menu = _this$props2.menu,
          primary = _this$props2.primary,
          secondary = _this$props2.secondary,
          active = _this$props2.active,
          vertical = _this$props2.vertical,
          indicator = _this$props2.indicator,
          disabled = _this$props2.disabled;
      var menuOpen = this.state.menuOpen;
      var menuItemInner = (0, _utils.childrenExist)(children) ? children : React.createElement(_reactComponentRef.Ref, {
        innerRef: this.itemRef
      }, React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root,
        disabled: disabled,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }, accessibility.attributes.root, accessibility.keyHandlers.root, unhandledProps, !wrapper && {
        onClick: this.handleClick
      }, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), _Box.default.create(icon, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.icon,
            as: 'span'
          };
        }
      }), _Box.default.create(content, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            styles: styles.content
          };
        }
      }), menu && _Box.default.create(indicator, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            className: menuItemSlotClassNames.indicator,
            styles: styles.indicator,
            accessibility: _accessibility.indicatorBehavior
          };
        }
      })));
      var maybeSubmenu = menu && active && menuOpen ? React.createElement(React.Fragment, null, React.createElement(_reactComponentRef.Ref, {
        innerRef: this.menuRef
      }, React.createElement(_positioner.Popper, (0, _extends2.default)({
        align: vertical ? 'top' : rtl ? 'end' : 'start',
        position: vertical ? rtl ? 'before' : 'after' : 'below',
        targetRef: this.itemRef
      }, (0, _positioner.getPopperPropsFromShorthand)(menu)), _Menu.default.create(menu, {
        defaultProps: function defaultProps() {
          return {
            accessibility: _accessibility.submenuBehavior,
            className: menuItemSlotClassNames.submenu,
            vertical: true,
            primary: primary,
            secondary: secondary,
            styles: styles.menu,
            submenu: true,
            indicator: indicator
          };
        }
      }))), React.createElement(_reactComponentEventListener.EventListener, {
        listener: this.outsideClickHandler,
        target: this.context.target,
        type: "click"
      })) : null;

      if (wrapper) {
        return _Box.default.create(wrapper, {
          defaultProps: function defaultProps() {
            return Object.assign({
              className: (0, _classnames.default)(menuItemSlotClassNames.wrapper, classes.wrapper)
            }, accessibility.attributes.wrapper, {}, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.wrapper, wrapper));
          },
          overrideProps: function overrideProps() {
            return {
              children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu),
              onClick: _this2.handleClick,
              onBlur: _this2.handleWrapperBlur
            };
          }
        });
      }

      return menuItemInner;
    }
  }, {
    key: "trySetMenuOpen",
    value: function trySetMenuOpen(newValue, e, onStateChanged) {
      this.setState({
        menuOpen: newValue
      }); // The reason why post-effect is not passed as callback to trySetState method
      // is that in 'controlled' mode the post-effect is applied before final re-rendering
      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.
      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.

      onStateChanged && onStateChanged();
      (0, _invoke2.default)(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {
        menuOpen: newValue
      }));
    }
  }]);
  return MenuItem;
}(_utils.AutoControlledComponent);

(0, _defineProperty2.default)(MenuItem, "displayName", 'MenuItem');
(0, _defineProperty2.default)(MenuItem, "deprecated_className", menuItemClassName);
(0, _defineProperty2.default)(MenuItem, "create", void 0);
(0, _defineProperty2.default)(MenuItem, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  index: PropTypes.number,
  itemPosition: PropTypes.number,
  itemsCount: PropTypes.number,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  pills: PropTypes.bool,
  pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  underlined: PropTypes.bool,
  vertical: PropTypes.bool,
  wrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  menuOpen: PropTypes.bool,
  defaultMenuOpen: PropTypes.bool,
  onActiveChanged: PropTypes.func,
  inSubmenu: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  onMenuOpenChange: PropTypes.func
}));
(0, _defineProperty2.default)(MenuItem, "defaultProps", {
  as: 'a',
  accessibility: _accessibility.menuItemBehavior,
  wrapper: {
    as: 'li'
  },
  indicator: {}
});
(0, _defineProperty2.default)(MenuItem, "autoControlledProps", ['menuOpen']);
MenuItem.create = (0, _utils.createShorthandFactory)({
  Component: MenuItem,
  mappedProp: 'content'
});
/**
 * A MenuItem is an actionable item within a Menu.
 */

var _default = (0, _types.withSafeTypeForAs)(MenuItem);

exports.default = _default;
//# sourceMappingURL=MenuItem.js.map
