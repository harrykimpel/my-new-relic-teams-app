{"version":3,"sources":["components/SvgIcon/SvgIcon.tsx"],"names":["SvgIcon","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","alt","ariaLabel","bordered","circular","className","design","disabled","children","outline","rotate","size","styles","variables","xSpacing","svgIconClassName","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","ElementType","unhandledProps","handledProps","element","undefined","root","svgIconDisplayName","svgIconHandledProps","defaultProps","as"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAOA;;AACA;;AAEA;;AAEA;;AAHA;AASA,IAAMA,OAEL,GAAG,SAFEA,OAEF,CAAAC,KAAK,EAAI;AACX,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AADW,sBAGkB,iCAAaL,OAAO,CAACM,WAArB,EAAkCJ,OAAO,CAACK,SAA1C,CAHlB;AAAA,MAGHC,QAHG,iBAGHA,QAHG;AAAA,MAGOC,MAHP,iBAGOA,MAHP;;AAIXD,EAAAA,QAAQ;AAJG,MAOTE,GAPS,GAqBPT,KArBO,CAOTS,GAPS;AAAA,MAQKC,SARL,GAqBPV,KArBO,CAQT,YARS;AAAA,MASTW,QATS,GAqBPX,KArBO,CASTW,QATS;AAAA,MAUTC,QAVS,GAqBPZ,KArBO,CAUTY,QAVS;AAAA,MAWTC,SAXS,GAqBPb,KArBO,CAWTa,SAXS;AAAA,MAYTC,MAZS,GAqBPd,KArBO,CAYTc,MAZS;AAAA,MAaTC,QAbS,GAqBPf,KArBO,CAaTe,QAbS;AAAA,MAcTC,QAdS,GAqBPhB,KArBO,CAcTgB,QAdS;AAAA,MAeTC,OAfS,GAqBPjB,KArBO,CAeTiB,OAfS;AAAA,MAgBTC,MAhBS,GAqBPlB,KArBO,CAgBTkB,MAhBS;AAAA,MAiBTC,IAjBS,GAqBPnB,KArBO,CAiBTmB,IAjBS;AAAA,MAkBTC,MAlBS,GAqBPpB,KArBO,CAkBToB,MAlBS;AAAA,MAmBTC,SAnBS,GAqBPrB,KArBO,CAmBTqB,SAnBS;AAAA,MAoBTC,QApBS,GAqBPtB,KArBO,CAoBTsB,QApBS;;AAAA,mBAuBS,8BAA8BvB,OAAO,CAACM,WAAtC,EAAmD;AACrEQ,IAAAA,SAAS,EAAEU,qCAD0D;AAErEC,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AACvBb,QAAAA,QAAQ,EAARA,QADuB;AAEvBC,QAAAA,QAAQ,EAARA,QAFuB;AAGvBG,QAAAA,QAAQ,EAARA,QAHuB;AAIvBE,QAAAA,OAAO,EAAPA,OAJuB;AAKvBC,QAAAA,MAAM,EAANA,MALuB;AAMvBC,QAAAA,IAAI,EAAJA,IANuB;AAOvBG,QAAAA,QAAQ,EAARA;AAPuB,OAAP;AAAA,KAFmD;AAWrEG,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAAEZ,QAAAA,SAAS,EAATA,SAAF;AAAaC,QAAAA,MAAM,EAANA,MAAb;AAAqBM,QAAAA,MAAM,EAANA,MAArB;AAA6BC,QAAAA,SAAS,EAATA;AAA7B,OAAP;AAAA,KAX6C;AAYrEK,IAAAA,GAAG,EAAEzB,OAAO,CAACyB;AAZwD,GAAnD,CAvBT;AAAA,MAuBHC,OAvBG,cAuBHA,OAvBG;;AAsCX,MAAMC,WAAW,GAAG,mCAAe5B,KAAf,CAApB;AACA,MAAM6B,cAAc,GAAG,sCAAkB9B,OAAO,CAAC+B,YAA1B,EAAwC9B,KAAxC,CAAvB;AAEA,MAAM+B,OAAO,GACX,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,mBAAatB,GAAG,IAAIC,SAAP,GAAmBsB,SAAnB,GAA+B,MAF9C;AAGE,kBAAYtB,SAHd;AAIE,IAAA,SAAS,EAAEiB,OAAO,CAACM;AAJrB,KAKMJ,cALN,GAOG,sBAASb,QAAT,EAAmB;AAAEW,IAAAA,OAAO,EAAPA,OAAF;AAAWD,IAAAA,GAAG,EAAEzB,OAAO,CAACyB,GAAxB;AAA6B1B,IAAAA,KAAK,EAALA;AAA7B,GAAnB,CAPH,CADF;AAWAQ,EAAAA,MAAM;AAEN,SAAOuB,OAAP;AACD,CAzDD;;AA2DAhC,OAAO,CAACM,WAAR,GAAsB6B,uCAAtB;AACAnC,OAAO,CAAC+B,YAAR,8CAA2BK,wCAA3B,IAAgD,UAAhD;AACApC,OAAO,CAACqC,YAAR,GAAuB;AACrBC,EAAAA,EAAE,EAAE,MADiB;AAErBlB,EAAAA,IAAI,EAAE,QAFe;AAGrBD,EAAAA,MAAM,EAAE;AAHa,CAAvB;AAMA;;;;eAGe,8BAAwDnB,OAAxD,C","sourcesContent":["import { getElementType, getUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport {\n  SvgIconProps,\n  svgIconClassName,\n  svgIconDisplayName,\n  svgIconHandledProps,\n  SvgIconChildrenFn,\n} from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport type SvgIconStylesProps = Required<\n  Pick<SvgIconProps, 'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'>\n>;\n\nconst SvgIcon: React.FC<WithAsProp<SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }>> & {\n  handledProps: (keyof (SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }))[];\n} = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n\n  const { setStart, setEnd } = useTelemetry(SvgIcon.displayName, context.telemetry);\n  setStart();\n\n  const {\n    alt,\n    'aria-label': ariaLabel,\n    bordered,\n    circular,\n    className,\n    design,\n    disabled,\n    children,\n    outline,\n    rotate,\n    size,\n    styles,\n    variables,\n    xSpacing,\n  } = props;\n\n  const { classes } = useStyles<SvgIconStylesProps>(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: () => ({\n      bordered,\n      circular,\n      disabled,\n      outline,\n      rotate,\n      size,\n      xSpacing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n\n  const element = (\n    <ElementType\n      role=\"img\"\n      aria-hidden={alt || ariaLabel ? undefined : 'true'}\n      aria-label={ariaLabel}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {callable(children)({ classes, rtl: context.rtl, props })}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [...svgIconHandledProps, 'children'];\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0,\n};\n\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\nexport default withSafeTypeForAs<typeof SvgIcon, SvgIconProps, 'span'>(SvgIcon);\n"],"file":"SvgIcon.js"}