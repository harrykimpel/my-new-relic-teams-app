{"version":3,"sources":["components/Video/Video.tsx"],"names":["videoClassName","Video","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","ElementType","videoRef","createRef","unhandledProps","handledProps","getA11yProps","accessibility","debugName","useEffect","current","mapPropsToInlineStyles","classes","element","root","create","Component","mappedProp","propTypes","commonPropTypes","createCommon","children","content","PropTypes","bool","string","defaultProps","as","videoBehavior","Object","keys"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { getElementType, useStyles, useUnhandledProps, useTelemetry, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\nexport const Video: React.FC<WithAsProp<VideoProps>> & FluentComponentStaticProps<VideoProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const ElementType = getElementType(props);\n  const videoRef = React.createRef<HTMLVideoElement>();\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport default withSafeTypeForAs<typeof Video, VideoProps, 'video'>(Video);\n"],"file":"Video.js"}