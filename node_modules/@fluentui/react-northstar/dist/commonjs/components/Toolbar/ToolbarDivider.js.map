{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["toolbarDividerClassName","ToolbarDivider","props","ref","composeOptions","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","unstable_props","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","create","Component","mappedProp","shorthandConfig"],"mappings":";;;;;;;;;AACA;;AASA;;AAEA;;AAEA;;AAEA;;AASA;;AAdA;AAwBO,IAAMA,uBAAuB,GAAG,qBAAhC;AAEP;;;;;AAGA,IAAMC,cAAc,GAAG,4BACrB,UAACC,KAAD,EAAQC,GAAR,EAAaC,cAAb,EAAgC;AAC9B,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AAD8B,sBAED,iCAAaJ,cAAc,CAACK,WAA5B,EAAyCJ,OAAO,CAACK,SAAjD,CAFC;AAAA,MAEtBC,QAFsB,iBAEtBA,QAFsB;AAAA,MAEZC,MAFY,iBAEZA,MAFY;;AAG9BD,EAAAA,QAAQ;AAHsB,MAKtBE,aALsB,GAKkCX,KALlC,CAKtBW,aALsB;AAAA,MAKPC,SALO,GAKkCZ,KALlC,CAKPY,SALO;AAAA,MAKIC,MALJ,GAKkCb,KALlC,CAKIa,MALJ;AAAA,MAKYC,MALZ,GAKkCd,KALlC,CAKYc,MALZ;AAAA,MAKoBC,SALpB,GAKkCf,KALlC,CAKoBe,SALpB;AAM9B,MAAMC,eAAe,GAAGZ,KAAK,CAACC,UAAN,CAAiBY,gDAAjB,CAAxB;AAEA,MAAMC,YAAY,GAAG,qCAAiBP,aAAjB,EAAgC;AACnDQ,IAAAA,SAAS,EAAEjB,cAAc,CAACK,WADyB;AAEnDa,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFsC,GAAhC,CAArB;;AAR8B,mBAYV,8BAAqClB,cAAc,CAACK,WAApD,EAAiE;AACnFK,IAAAA,SAAS,EAAEV,cAAc,CAACU,SADyD;AAEnFS,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAE,qCAAwBC,eAAxB,EAAyCD,SAAzC;AAJkB,OAAP;AAAA,KAF2D;AAQnFK,IAAAA,GAAG,EAAEjB,OAAO,CAACiB,GARsE;AASnFlB,IAAAA,cAAc,EAAdA,cATmF;AAUnFoB,IAAAA,cAAc,EAAEtB;AAVmE,GAAjE,CAZU;AAAA,MAYtBuB,OAZsB,cAYtBA,OAZsB;;AAyB9B,MAAMC,WAAW,GAAG,mCAAexB,KAAf,CAApB;AACA,MAAMyB,cAAc,GAAG,sCAAkBvB,cAAc,CAACwB,YAAjC,EAA+C1B,KAA/C,CAAvB;AAEA,MAAM2B,OAAO,GAAG,oBAAC,WAAD,EAAiBT,YAAY,CAAC,MAAD;AAAWjB,IAAAA,GAAG,EAAHA;AAAX,KAAmBwB,cAAnB;AAAmCb,IAAAA,SAAS,EAAEW,OAAO,CAACK;AAAtD,KAA7B,CAAhB;AACAlB,EAAAA,MAAM;AAEN,SAAOiB,OAAP;AACD,CAjCoB,EAkCrB;AACEpB,EAAAA,WAAW,EAAE,gBADf;AAEEK,EAAAA,SAAS,EAAEd,uBAFb;AAGE4B,EAAAA,YAAY,EAAE,CAAC,eAAD,EAAkB,IAAlB,EAAwB,UAAxB,EAAoC,WAApC,EAAiD,SAAjD,EAA4D,QAA5D,EAAsE,WAAtE,EAAmF,QAAnF;AAHhB,CAlCqB,CAAvB;AA2CA3B,cAAc,CAAC8B,SAAf,GAA2BC,uBAAgBC,YAAhB,EAA3B;AAEAhC,cAAc,CAACiC,MAAf,GAAwB,mCAAuB;AAAEC,EAAAA,SAAS,EAAElC,cAAb;AAA6BmC,EAAAA,UAAU,EAAE;AAAzC,CAAvB,CAAxB;AACAnC,cAAc,CAACoC,eAAf,GAAiC;AAC/BD,EAAAA,UAAU,EAAE;AADmB,CAAjC;eAIenC,c","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { ProviderContextPrepared } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n  ShorthandConfig,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\nexport const toolbarDividerClassName = 'ui-toolbar__divider';\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nconst ToolbarDivider = compose<'div', ToolbarDividerProps, ToolbarDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeComponentVariables(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ref, ...unhandledProps, className: classes.root })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    displayName: 'ToolbarDivider',\n    className: toolbarDividerClassName,\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],\n  },\n) as ComponentWithAs<'div', ToolbarDividerProps> & {\n  create: ShorthandFactory<ToolbarDividerProps>;\n  shorthandConfig: ShorthandConfig<ToolbarDividerProps>;\n};\nToolbarDivider.propTypes = commonPropTypes.createCommon();\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\nToolbarDivider.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nexport default ToolbarDivider;\n"],"file":"ToolbarDivider.js"}