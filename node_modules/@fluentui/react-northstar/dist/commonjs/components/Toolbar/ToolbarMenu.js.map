{"version":3,"sources":["components/Toolbar/ToolbarMenu.tsx"],"names":["toolbarMenuClassName","ToolbarMenu","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","className","children","design","items","submenu","submenuIndicator","styles","variables","parentVariables","ToolbarVariablesContext","mergedVariables","getA11yProps","debugName","actionHandlers","performClick","e","rtl","mapPropsToInlineStyles","classes","handleItemOverrides","predefinedProps","onClick","itemProps","menuOpen","menu","handleRadioGroupOverrides","onItemClick","renderItems","item","kind","ToolbarMenuDivider","create","ToolbarMenuRadioGroup","overrideProps","ToolbarMenuItem","defaultProps","toolbarMenuItemCheckboxBehavior","inSubmenu","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","propTypes","commonPropTypes","createCommon","customPropTypes","collectionShorthandWithKindProp","PropTypes","func","bool","shorthandAllowingChildren","Object","keys","toolbarMenuBehavior","as","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuBehavior,\n  toolbarMenuItemCheckboxBehavior,\n  ToolbarMenuBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  createShorthandFactory,\n  commonPropTypes,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  ShorthandCollection,\n  withSafeTypeForAs,\n  ShorthandValue,\n  WithAsProp,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nimport ToolbarMenuRadioGroup, { ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport ToolbarMenuDivider from './ToolbarMenuDivider';\nimport ToolbarMenuItem, { ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarMenuItemShorthandKinds = 'divider' | 'item' | 'toggle';\n\nexport interface ToolbarMenuProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuBehaviorProps>;\n\n  /** Shorthand array of props for ToolbarMenu. */\n  items?: ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Indicates whether the menu is submenu. */\n  submenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuStylesProps = never;\nexport const toolbarMenuClassName = 'ui-toolbar__menu';\n\nconst ToolbarMenu: React.FC<WithAsProp<ToolbarMenuProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenu.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, children, design, items, submenu, submenuIndicator, styles, variables } = props;\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenu.displayName,\n    actionHandlers: {\n      performClick: e => {\n        _.invoke(props, 'onClick', e, props);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarMenuStylesProps>(ToolbarMenu.displayName, {\n    className: toolbarMenuClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergedVariables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleItemOverrides = predefinedProps => ({\n    onClick: (e, itemProps) => {\n      _.invoke(predefinedProps, 'onClick', e, itemProps);\n      _.invoke(props, 'onItemClick', e, {\n        ...itemProps,\n        menuOpen: !!itemProps.menu,\n      });\n    },\n  });\n\n  const handleRadioGroupOverrides = (predefinedProps: ToolbarMenuRadioGroupProps) => ({\n    onItemClick: (e, itemProps) => {\n      _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n      _.invoke(props, 'onItemClick', e, itemProps);\n    },\n  });\n\n  const renderItems = () => {\n    return _.map(items, item => {\n      const kind = _.get(item, 'kind', 'item');\n\n      switch (kind) {\n        case 'divider':\n          return ToolbarMenuDivider.create(item);\n\n        case 'group':\n          return ToolbarMenuRadioGroup.create(item, { overrideProps: handleRadioGroupOverrides });\n\n        case 'toggle':\n          return ToolbarMenuItem.create(item, {\n            defaultProps: () => ({ accessibility: toolbarMenuItemCheckboxBehavior }),\n            overrideProps: handleItemOverrides,\n          });\n\n        default:\n          return ToolbarMenuItem.create(item, {\n            defaultProps: () => ({\n              submenuIndicator,\n              inSubmenu: submenu,\n            }),\n            overrideProps: handleItemOverrides,\n          });\n      }\n    });\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenu.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        className: classes.root,\n      })}\n    >\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {childrenExist(children) ? children : renderItems()}\n      </ToolbarVariablesProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarMenu.displayName = 'ToolbarMenu';\n\nToolbarMenu.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n};\nToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes) as any;\n\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul',\n};\n\nToolbarMenu.create = createShorthandFactory({ Component: ToolbarMenu, mappedArrayProp: 'items' });\n\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenu, ToolbarMenuProps, 'ul'>(ToolbarMenu);\n"],"file":"ToolbarMenu.js"}