{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupClassName","ToolbarRadioGroup","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","activeIndex","children","className","design","items","variables","styles","itemRefs","parentVariables","ToolbarVariablesContext","mergedVariables","getA11yProps","debugName","actionHandlers","nextItem","event","setFocusedItem","prevItem","rtl","mapPropsToInlineStyles","classes","direction","filteredRadioItems","item","index","currentItem","disabled","currentFocusedIndex","current","tabIndex","itemsLength","length","nextIndex","nextItemToFocus","focus","target","activeElement","stopPropagation","preventDefault","renderItems","kind","ref","createRef","ToolbarDivider","create","toolbarItem","ToolbarItem","defaultProps","toolbarRadioGroupItemBehavior","active","key","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","PropTypes","number","customPropTypes","collectionShorthandWithKindProp","Object","keys","toolbarRadioGroupBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport {\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport ToolbarDivider from './ToolbarDivider';\nimport ToolbarItem, { ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = 'divider' | 'item';\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\nconst ToolbarRadioGroup: React.FC<WithAsProp<ToolbarRadioGroupProps>> &\n  FluentComponentStaticProps<ToolbarRadioGroupProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarRadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n  const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarRadioGroup.displayName,\n    actionHandlers: {\n      nextItem: event => setFocusedItem(event, 1),\n      prevItem: event => setFocusedItem(event, -1),\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarRadioGroupStylesProps>(ToolbarRadioGroup.displayName, {\n    className: toolbarRadioGroupClassName,\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n    rtl: context.rtl,\n  });\n\n  const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n    // filter items which are not disabled\n    const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n      const currentItem = items[index] as ToolbarItemProps;\n      return currentItem && !currentItem.disabled;\n    });\n\n    // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n    const currentFocusedIndex =\n      _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n        return item.current.tabIndex === 0;\n      }) || 0;\n\n    const itemsLength = filteredRadioItems.length;\n    let nextIndex = currentFocusedIndex + direction;\n\n    if (nextIndex >= itemsLength) {\n      nextIndex = 0;\n    }\n\n    if (nextIndex < 0) {\n      nextIndex = itemsLength - 1;\n    }\n\n    const nextItemToFocus = filteredRadioItems[nextIndex].current;\n    if (nextItemToFocus) {\n      nextItemToFocus.focus();\n    }\n\n    if (context.target.activeElement === nextItemToFocus) {\n      event.stopPropagation();\n    }\n    event.preventDefault();\n  };\n\n  const renderItems = () => {\n    return _.map(items, (item, index) => {\n      const kind = _.get(item, 'kind', 'item');\n\n      const ref = React.createRef<HTMLElement>();\n      itemRefs[index] = ref;\n\n      if (kind === 'divider') {\n        return ToolbarDivider.create(item);\n      }\n\n      const toolbarItem = ToolbarItem.create(item, {\n        defaultProps: () => ({\n          accessibility: toolbarRadioGroupItemBehavior,\n          active: activeIndex === index,\n        }),\n      });\n\n      return (\n        <Ref innerRef={ref} key={toolbarItem.key}>\n          {toolbarItem}\n        </Ref>\n      );\n    });\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarRadioGroup.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        className: classes.root,\n      })}\n    >\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {childrenExist(children) ? children : renderItems()}\n      </ToolbarVariablesProvider>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarRadioGroup.displayName = 'ToolbarRadioGroup';\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.handledProps = Object.keys(ToolbarRadioGroup.propTypes) as any;\n\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n\nToolbarRadioGroup.create = createShorthandFactory({\n  Component: ToolbarRadioGroup,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport default withSafeTypeForAs<typeof ToolbarRadioGroup, ToolbarRadioGroupProps>(ToolbarRadioGroup);\n"],"file":"ToolbarRadioGroup.js"}