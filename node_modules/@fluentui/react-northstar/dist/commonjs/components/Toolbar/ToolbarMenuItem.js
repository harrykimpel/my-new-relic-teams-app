"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.toolbarMenuItemSlotClassNames = exports.toolbarMenuItemClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _reactBindings = require("@fluentui/react-bindings");

var _styles = require("@fluentui/styles");

var _reactFela = require("react-fela");

var _reactComponentNestingRegistry = require("@fluentui/react-component-nesting-registry");

var _utils = require("../../utils");

var _types = require("../../types");

var _positioner = require("../../utils/positioner");

var _Box = _interopRequireDefault(require("../Box/Box"));

var _Popup = _interopRequireDefault(require("../Popup/Popup"));

var _ToolbarMenu = _interopRequireDefault(require("./ToolbarMenu"));

var _toolbarVariablesContext = require("./toolbarVariablesContext");

// @ts-ignore
var toolbarMenuItemClassName = 'ui-toolbar__menuitem';
exports.toolbarMenuItemClassName = toolbarMenuItemClassName;
var toolbarMenuItemSlotClassNames = {
  activeIndicator: "".concat(toolbarMenuItemClassName, "__activeIndicator"),
  wrapper: "".concat(toolbarMenuItemClassName, "__wrapper"),
  submenu: "".concat(toolbarMenuItemClassName, "__submenu"),
  submenuIndicator: "".concat(toolbarMenuItemClassName, "__submenuIndicator")
};
exports.toolbarMenuItemSlotClassNames = toolbarMenuItemSlotClassNames;

var ToolbarMenuItem = function ToolbarMenuItem(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ToolbarMenuItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var active = props.active,
      activeIndicator = props.activeIndicator,
      children = props.children,
      content = props.content,
      disabled = props.disabled,
      submenuIndicator = props.submenuIndicator,
      icon = props.icon,
      menu = props.menu,
      popup = props.popup,
      wrapper = props.wrapper,
      inSubmenu = props.inSubmenu,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultMenuOpen,
    value: props.menuOpen,
    initialValue: false
  }),
      _useAutoControlled2 = (0, _slicedToArray2.default)(_useAutoControlled, 2),
      menuOpen = _useAutoControlled2[0],
      setMenuOpen = _useAutoControlled2[1];

  var itemRef = React.useRef();
  var menuRef = React.useRef();
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _styles.mergeComponentVariables)(parentVariables, variables);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ToolbarMenuItem.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: ToolbarMenuItem.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        menu: menu,
        active: active,
        menuOpen: menuOpen,
        disabled: disabled,
        'aria-label': props['aria-label'],
        'aria-labelledby': props['aria-labelledby'],
        'aria-describedby': props['aria-describedby']
      };
    },
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      },
      openMenu: function openMenu(event) {
        return _openMenu(event);
      },
      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {
        return _closeAllMenus(event);
      },
      closeMenu: function closeMenu(event) {
        return _closeMenu(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        return _closeMenu(event);
      },
      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {
        event.stopPropagation();
      },
      closeAllMenus: function closeAllMenus(event) {
        return _closeAllMenus(event);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ToolbarMenuItem.displayName, {
    className: toolbarMenuItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        disabled: disabled,
        hasContent: !!content
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var _openMenu = function _openMenu(e) {
    if (menu && !menuOpen) {
      trySetMenuOpen(true, e);
      e.stopPropagation();
      e.preventDefault();
    }
  };

  var _closeMenu = function _closeMenu(e) {
    if (!isSubmenuOpen()) {
      return;
    }

    trySetMenuOpen(false, e, function () {
      (0, _reactBindings.focusAsync)(itemRef.current);
    });
    e.stopPropagation();
  };

  var _closeAllMenus = function _closeAllMenus(e) {
    if (!isSubmenuOpen()) {
      return;
    }

    trySetMenuOpen(false, e, function () {
      if (!inSubmenu) {
        (0, _reactBindings.focusAsync)(itemRef.current);
      }
    }); // avoid spacebar scrolling the page

    if (!inSubmenu) {
      e.preventDefault();
    }
  };

  var isSubmenuOpen = function isSubmenuOpen() {
    return !!(menu && menuOpen);
  };

  var trySetMenuOpen = function trySetMenuOpen(newValue, e, onStateChanged) {
    setMenuOpen(newValue); // The reason why post-effect is not passed as callback to trySetState method
    // is that in 'controlled' mode the post-effect is applied before final re-rendering
    // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.
    // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.

    onStateChanged && onStateChanged();
    (0, _invoke2.default)(props, 'onMenuOpenChange', e, Object.assign({}, props, {
      menuOpen: newValue
    }));
  };

  var outsideClickHandler = function outsideClickHandler(getRefs) {
    return function (e) {
      var isItemClick = (0, _utils.doesNodeContainClick)(itemRef.current, e, context.target);
      var isNestedClick = (0, _some2.default)(getRefs(), function (childRef) {
        return (0, _utils.doesNodeContainClick)(childRef.current, e, context.target);
      });
      var isInside = isItemClick || isNestedClick;

      if (!isInside) {
        trySetMenuOpen(false, e);
      }
    };
  };

  var handleMenuOverrides = function handleMenuOverrides(predefinedProps) {
    return {
      onItemClick: function onItemClick(e, itemProps) {
        var popup = itemProps.popup,
            menuOpen = itemProps.menuOpen;
        (0, _invoke2.default)(predefinedProps, 'onItemClick', e, itemProps);

        if (popup) {
          return;
        }

        trySetMenuOpen(menuOpen, e);

        if (!menuOpen) {
          (0, _invoke2.default)(itemRef.current, 'focus');
        }
      }
    };
  };

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    if (menu) {
      // the menuItem element was clicked => toggle the open/close and stop propagation
      trySetMenuOpen(!menuOpen, e);
      e.stopPropagation();
      e.preventDefault();
    }

    if (popup) {
      e.stopPropagation();
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick,
    disabled: disabled
  }, unhandledProps)), (0, _utils.childrenExist)(children) ? children : React.createElement(React.Fragment, null, _Box.default.create(icon, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.icon
      };
    }
  }), content, active && _Box.default.create(activeIndicator, {
    defaultProps: function defaultProps() {
      return {
        as: 'span',
        className: toolbarMenuItemSlotClassNames.activeIndicator,
        styles: resolvedStyles.activeIndicator,
        accessibility: _accessibility.indicatorBehavior
      };
    }
  }), menu && _Box.default.create(submenuIndicator, {
    defaultProps: function defaultProps() {
      return {
        as: 'span',
        className: toolbarMenuItemSlotClassNames.submenuIndicator,
        styles: resolvedStyles.submenuIndicator,
        accessibility: _accessibility.indicatorBehavior
      };
    }
  })));
  var hasChildren = (0, _utils.childrenExist)(children);

  if (popup && !hasChildren) {
    var popupElement = _Popup.default.create(popup, {
      defaultProps: function defaultProps() {
        return {
          trapFocus: true,
          onOpenChange: function onOpenChange(e) {
            e.stopPropagation();
          }
        };
      },
      overrideProps: {
        trigger: element,
        children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`

      }
    });

    setEnd();
    return popupElement;
  }

  var menuItemInner = hasChildren ? children : React.createElement(_reactComponentRef.Ref, {
    innerRef: itemRef
  }, element);
  var maybeSubmenu = menu && menuOpen ? React.createElement(_reactComponentNestingRegistry.Unstable_NestingAuto, null, function (getRefs, nestingRef) {
    return React.createElement(React.Fragment, null, React.createElement(_reactComponentRef.Ref, {
      innerRef: function innerRef(node) {
        nestingRef.current = node;
        menuRef.current = node;
      }
    }, React.createElement(_positioner.Popper, (0, _extends2.default)({
      align: "top",
      position: context.rtl ? 'before' : 'after',
      targetRef: itemRef
    }, (0, _positioner.getPopperPropsFromShorthand)(menu)), React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
      value: mergedVariables
    }, _ToolbarMenu.default.create(menu, {
      defaultProps: function defaultProps() {
        return {
          className: toolbarMenuItemSlotClassNames.submenu,
          styles: resolvedStyles.menu,
          submenu: true,
          submenuIndicator: submenuIndicator
        };
      },
      overrideProps: handleMenuOverrides
    })))), React.createElement(_reactComponentEventListener.EventListener, {
      listener: outsideClickHandler(getRefs),
      target: context.target,
      type: "click"
    }));
  }) : null;

  if (!wrapper) {
    setEnd();
    return menuItemInner;
  }

  var wrapperElement = _Box.default.create(wrapper, {
    defaultProps: function defaultProps() {
      return getA11yProps('wrapper', {
        className: (0, _classnames.default)(toolbarMenuItemSlotClassNames.wrapper, classes.wrapper)
      });
    },
    overrideProps: function overrideProps() {
      return {
        children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu)
      };
    }
  });

  setEnd();
  return wrapperElement;
};

ToolbarMenuItem.displayName = 'ToolbarMenuItem';
ToolbarMenuItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  activeIndicator: customPropTypes.shorthandAllowingChildren,
  defaultMenuOpen: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  index: PropTypes.number,
  submenuIndicator: customPropTypes.shorthandAllowingChildren,
  inSubmenu: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  menuOpen: PropTypes.bool,
  onClick: PropTypes.func,
  onMenuOpenChange: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, _Popup.default.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.itemShorthand
});
ToolbarMenuItem.handledProps = Object.keys(ToolbarMenuItem.propTypes);
ToolbarMenuItem.defaultProps = {
  as: 'button',
  accessibility: _accessibility.toolbarMenuItemBehavior,
  wrapper: {
    as: 'li'
  },
  activeIndicator: {},
  submenuIndicator: {}
};
ToolbarMenuItem.create = (0, _utils.createShorthandFactory)({
  Component: ToolbarMenuItem,
  mappedProp: 'content'
});
/**
 * A ToolbarMenuItem renders ToolbarMenu item as button.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarMenuItem);

exports.default = _default;
//# sourceMappingURL=ToolbarMenuItem.js.map
