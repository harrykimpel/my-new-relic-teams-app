"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.toolbarCustomItemClassName = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _styles = require("@fluentui/styles");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _types = require("../../types");

var _utils = require("../../utils");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

// @ts-ignore
var toolbarCustomItemClassName = 'ui-toolbar__customitem';
exports.toolbarCustomItemClassName = toolbarCustomItemClassName;

var ToolbarCustomItem = function ToolbarCustomItem(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ToolbarCustomItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      fitted = props.fitted,
      focusable = props.focusable,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: ToolbarCustomItem.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ToolbarCustomItem.displayName, {
    className: toolbarCustomItemClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        fitted: fitted
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: (0, _styles.mergeComponentVariables)(parentVariables, variables)
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ToolbarCustomItem.handledProps, props);

  var handleBlur = function handleBlur(e) {
    if (focusable) {
      (0, _invoke2.default)(props, 'onBlur', e, props);
    }
  };

  var handleFocus = function handleFocus(e) {
    if (focusable) {
      (0, _invoke2.default)(props, 'onFocus', e, props);
    }
  };

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign((0, _defineProperty2.default)({}, _accessibility.IS_FOCUSABLE_ATTRIBUTE, focusable), unhandledProps, {
    className: classes.root,
    onBlur: handleBlur,
    onFocus: handleFocus
  })), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
};

ToolbarCustomItem.displayName = 'ToolbarCustomItem';
ToolbarCustomItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  fitted: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),
  focusable: PropTypes.bool,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
});
ToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes);
ToolbarCustomItem.create = (0, _utils.createShorthandFactory)({
  Component: ToolbarCustomItem,
  mappedProp: 'content'
});
/**
 * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarCustomItem);

exports.default = _default;
//# sourceMappingURL=ToolbarCustomItem.js.map
