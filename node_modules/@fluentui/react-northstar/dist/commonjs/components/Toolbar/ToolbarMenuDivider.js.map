{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["toolbarMenuDividerClassName","ToolbarMenuDivider","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","defaultProps","as","Object","keys","create","Component","mappedProp"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AAOA;;AACA;;AAXA;AAqBO,IAAMA,2BAA2B,GAAG,yBAApC;;;AAEP,IAAMC,kBAC+C,GAAG,SADlDA,kBACkD,CAAAC,KAAK,EAAI;AAC/D,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AAD+D,sBAElC,iCAAaL,kBAAkB,CAACM,WAAhC,EAA6CJ,OAAO,CAACK,SAArD,CAFkC;AAAA,MAEvDC,QAFuD,iBAEvDA,QAFuD;AAAA,MAE7CC,MAF6C,iBAE7CA,MAF6C;;AAG/DD,EAAAA,QAAQ;AAHuD,MAKvDE,aALuD,GAKCT,KALD,CAKvDS,aALuD;AAAA,MAKxCC,SALwC,GAKCV,KALD,CAKxCU,SALwC;AAAA,MAK7BC,MAL6B,GAKCX,KALD,CAK7BW,MAL6B;AAAA,MAKrBC,MALqB,GAKCZ,KALD,CAKrBY,MALqB;AAAA,MAKbC,SALa,GAKCb,KALD,CAKba,SALa;AAM/D,MAAMC,eAAe,GAAGZ,KAAK,CAACC,UAAN,CAAiBY,gDAAjB,CAAxB;AAEA,MAAMC,YAAY,GAAG,qCAAiBP,aAAjB,EAAgC;AACnDQ,IAAAA,SAAS,EAAElB,kBAAkB,CAACM,WADqB;AAEnDa,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFsC,GAAhC,CAArB;;AAR+D,mBAY3C,8BAAyCnB,kBAAkB,CAACM,WAA5D,EAAyE;AAC3FK,IAAAA,SAAS,EAAEZ,2BADgF;AAE3FqB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAE,qCAAwBC,eAAxB,EAAyCD,SAAzC;AAJkB,OAAP;AAAA,KAFmE;AAQ3FK,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAR8E,GAAzE,CAZ2C;AAAA,MAYvDE,OAZuD,cAYvDA,OAZuD;;AAuB/D,MAAMC,WAAW,GAAG,mCAAerB,KAAf,CAApB;AACA,MAAMsB,cAAc,GAAG,sCAAkBvB,kBAAkB,CAACwB,YAArC,EAAmDvB,KAAnD,CAAvB;AAEA,MAAMwB,OAAO,GAAG,oBAAC,WAAD,EAAiBR,YAAY,CAAC,MAAD,oBAAcM,cAAd;AAA8BZ,IAAAA,SAAS,EAAEU,OAAO,CAACK;AAAjD,KAA7B,CAAhB;AACAjB,EAAAA,MAAM;AAEN,SAAOgB,OAAP;AACD,CA/BD;;AAiCAzB,kBAAkB,CAACM,WAAnB,GAAiC,oBAAjC;AAEAN,kBAAkB,CAAC2B,SAAnB,GAA+BC,uBAAgBC,YAAhB,EAA/B;AACA7B,kBAAkB,CAAC8B,YAAnB,GAAkC;AAChCC,EAAAA,EAAE,EAAE;AAD4B,CAAlC;AAGA/B,kBAAkB,CAACwB,YAAnB,GAAkCQ,MAAM,CAACC,IAAP,CAAYjC,kBAAkB,CAAC2B,SAA/B,CAAlC;AAEA3B,kBAAkB,CAACkC,MAAnB,GAA4B,mCAAuB;AACjDC,EAAAA,SAAS,EAAEnC,kBADsC;AAEjDoC,EAAAA,UAAU,EAAE;AAFqC,CAAvB,CAA5B;AAKA;;;;eAGe,8BAA4EpC,kBAA5E,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\nexport const toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\nconst ToolbarMenuDivider: React.FC<WithAsProp<ToolbarMenuDividerProps>> &\n  FluentComponentStaticProps<ToolbarMenuDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenuDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarMenuDividerStylesProps>(ToolbarMenuDivider.displayName, {\n    className: toolbarMenuDividerClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenuDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarMenuDivider.displayName = 'ToolbarMenuDivider';\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n};\nToolbarMenuDivider.handledProps = Object.keys(ToolbarMenuDivider.propTypes) as any;\n\nToolbarMenuDivider.create = createShorthandFactory({\n  Component: ToolbarMenuDivider,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenuDivider, ToolbarMenuDividerProps, 'li'>(ToolbarMenuDivider);\n"],"file":"ToolbarMenuDivider.js"}