"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.toolbarMenuRadioGroupSlotClassNames = exports.toolbarMenuRadioGroupClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _styles = require("@fluentui/styles");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _types = require("../../types");

var _ToolbarMenuItem = _interopRequireDefault(require("./ToolbarMenuItem"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var _toolbarVariablesContext = require("./toolbarVariablesContext");

// @ts-ignore
var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars

exports.toolbarMenuRadioGroupClassName = toolbarMenuRadioGroupClassName;
var toolbarMenuRadioGroupSlotClassNames = {
  wrapper: "".concat(toolbarMenuRadioGroupClassName, "__wrapper")
};
exports.toolbarMenuRadioGroupSlotClassNames = toolbarMenuRadioGroupSlotClassNames;

var ToolbarMenuRadioGroup = function ToolbarMenuRadioGroup(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ToolbarMenuRadioGroup.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      activeIndex = props.activeIndex,
      className = props.className,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables,
      wrapper = props.wrapper;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _styles.mergeComponentVariables)(parentVariables, variables);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: ToolbarMenuRadioGroup.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ToolbarMenuRadioGroup.displayName, {
    className: toolbarMenuRadioGroupClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, itemProps);
      },
      wrapper: null
    };
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ToolbarMenuRadioGroup.handledProps, props);
  var content = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })), React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
    value: mergedVariables
  }, (0, _map2.default)(items, function (item, index) {
    return _ToolbarMenuItem.default.create(item, {
      defaultProps: function defaultProps() {
        return {
          accessibility: _accessibility.toolbarMenuItemRadioBehavior,
          as: 'li',
          active: activeIndex === index,
          index: index
        };
      },
      overrideProps: handleItemOverrides
    });
  })));

  var element = _Box.default.create(wrapper, {
    defaultProps: function defaultProps() {
      return getA11yProps('wrapper', {
        as: 'li',
        className: toolbarMenuRadioGroupSlotClassNames.wrapper,
        styles: resolvedStyles.wrapper
      });
    },
    overrideProps: {
      children: content
    }
  });

  setEnd();
  return element;
};

ToolbarMenuRadioGroup.displayName = 'ToolbarMenuRadioGroup';
ToolbarMenuRadioGroup.defaultProps = {
  as: 'ul',
  accessibility: _accessibility.toolbarMenuRadioGroupBehavior,
  wrapper: {}
};
ToolbarMenuRadioGroup.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthand,
  onItemClick: PropTypes.func,
  wrapper: customPropTypes.itemShorthand
});
ToolbarMenuRadioGroup.handledProps = Object.keys(ToolbarMenuRadioGroup.propTypes);
ToolbarMenuRadioGroup.create = (0, _utils.createShorthandFactory)({
  Component: ToolbarMenuRadioGroup
});
/**
 * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarMenuRadioGroup);

exports.default = _default;
//# sourceMappingURL=ToolbarMenuRadioGroup.js.map
