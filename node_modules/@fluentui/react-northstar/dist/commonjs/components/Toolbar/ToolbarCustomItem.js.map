{"version":3,"sources":["components/Toolbar/ToolbarCustomItem.tsx"],"names":["toolbarCustomItemClassName","ToolbarCustomItem","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","fitted","focusable","styles","variables","parentVariables","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","handleBlur","e","handleFocus","element","IS_FOCUSABLE_ATTRIBUTE","root","onBlur","onFocus","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","bool","oneOf","func","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A custom item can remove element padding, vertically or horizontally. */\n  fitted?: boolean | 'horizontally' | 'vertically';\n\n  /** A custom item can be focused. */\n  focusable?: boolean;\n\n  /** A custom item can't be actionable. */\n  onClick?: never;\n\n  /**\n   * Called after user's focus. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;\n\n  /**\n   * Called after item blur. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;\n}\n\nexport type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;\nexport const toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\nconst ToolbarCustomItem: React.FC<WithAsProp<ToolbarCustomItemProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarCustomItem.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, fitted, focusable, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarCustomItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarCustomItemStylesProps>(ToolbarCustomItem.displayName, {\n    className: toolbarCustomItemClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarCustomItem.handledProps, props);\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onFocus', e, props);\n    }\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        [IS_FOCUSABLE_ATTRIBUTE]: focusable,\n        ...unhandledProps,\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarCustomItem.displayName = 'ToolbarCustomItem';\n\nToolbarCustomItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'horizontally' | 'vertically'>(['horizontally', 'vertically']),\n  ]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n};\nToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes) as any;\n\nToolbarCustomItem.create = createShorthandFactory({\n  Component: ToolbarCustomItem,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\nexport default withSafeTypeForAs<typeof ToolbarCustomItem, ToolbarCustomItemProps>(ToolbarCustomItem);\n"],"file":"ToolbarCustomItem.js"}