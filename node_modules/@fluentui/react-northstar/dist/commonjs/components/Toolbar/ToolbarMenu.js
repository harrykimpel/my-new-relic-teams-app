"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.toolbarMenuClassName = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _styles = require("@fluentui/styles");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _types = require("../../types");

var _ToolbarMenuRadioGroup = _interopRequireDefault(require("./ToolbarMenuRadioGroup"));

var _ToolbarMenuDivider = _interopRequireDefault(require("./ToolbarMenuDivider"));

var _ToolbarMenuItem = _interopRequireDefault(require("./ToolbarMenuItem"));

var _toolbarVariablesContext = require("./toolbarVariablesContext");

// @ts-ignore
var toolbarMenuClassName = 'ui-toolbar__menu';
exports.toolbarMenuClassName = toolbarMenuClassName;

var ToolbarMenu = function ToolbarMenu(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ToolbarMenu.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      children = props.children,
      design = props.design,
      items = props.items,
      submenu = props.submenu,
      submenuIndicator = props.submenuIndicator,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var mergedVariables = (0, _styles.mergeComponentVariables)(parentVariables, variables);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: ToolbarMenu.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        (0, _invoke2.default)(props, 'onClick', e, props);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ToolbarMenu.displayName, {
    className: toolbarMenuClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: mergedVariables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleItemOverrides = function handleItemOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, Object.assign({}, itemProps, {
          menuOpen: !!itemProps.menu
        }));
      }
    };
  };

  var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {
    return {
      onItemClick: function onItemClick(e, itemProps) {
        (0, _invoke2.default)(predefinedProps, 'onItemClick', e, itemProps);
        (0, _invoke2.default)(props, 'onItemClick', e, itemProps);
      }
    };
  };

  var renderItems = function renderItems() {
    return (0, _map2.default)(items, function (item) {
      var kind = (0, _get2.default)(item, 'kind', 'item');

      switch (kind) {
        case 'divider':
          return _ToolbarMenuDivider.default.create(item);

        case 'group':
          return _ToolbarMenuRadioGroup.default.create(item, {
            overrideProps: handleRadioGroupOverrides
          });

        case 'toggle':
          return _ToolbarMenuItem.default.create(item, {
            defaultProps: function defaultProps() {
              return {
                accessibility: _accessibility.toolbarMenuItemCheckboxBehavior
              };
            },
            overrideProps: handleItemOverrides
          });

        default:
          return _ToolbarMenuItem.default.create(item, {
            defaultProps: function defaultProps() {
              return {
                submenuIndicator: submenuIndicator,
                inSubmenu: submenu
              };
            },
            overrideProps: handleItemOverrides
          });
      }
    });
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ToolbarMenu.handledProps, props);
  var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })), React.createElement(_toolbarVariablesContext.ToolbarVariablesProvider, {
    value: mergedVariables
  }, (0, _utils.childrenExist)(children) ? children : renderItems())));
  setEnd();
  return element;
};

ToolbarMenu.displayName = 'ToolbarMenu';
ToolbarMenu.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
  onItemClick: PropTypes.func,
  submenu: PropTypes.bool,
  submenuIndicator: customPropTypes.shorthandAllowingChildren
});
ToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes);
ToolbarMenu.defaultProps = {
  accessibility: _accessibility.toolbarMenuBehavior,
  as: 'ul'
};
ToolbarMenu.create = (0, _utils.createShorthandFactory)({
  Component: ToolbarMenu,
  mappedArrayProp: 'items'
});
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarMenu);

exports.default = _default;
//# sourceMappingURL=ToolbarMenu.js.map
