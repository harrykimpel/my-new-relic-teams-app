"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.animationClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _reactBindings = require("@fluentui/react-bindings");

var _classnames = _interopRequireDefault(require("classnames"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _reactTransitionGroup = require("react-transition-group");

var _utils = require("../../utils");

// @ts-ignore
var animationClassName = 'ui-animation';
/**
 * An Animation provides animation effects to rendered elements.
 */

exports.animationClassName = animationClassName;

var Animation = function Animation(props) {
  var _ref, _ref$props;

  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Animation.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var appear = props.appear,
      children = props.children,
      className = props.className,
      delay = props.delay,
      direction = props.direction,
      duration = props.duration,
      fillMode = props.fillMode,
      iterationCount = props.iterationCount,
      keyframeParams = props.keyframeParams,
      mountOnEnter = props.mountOnEnter,
      name = props.name,
      playState = props.playState,
      timeout = props.timeout,
      timingFunction = props.timingFunction,
      visible = props.visible,
      unmountOnExit = props.unmountOnExit;

  var handleAnimationEvent = function handleAnimationEvent(event) {
    return function () {
      (0, _invoke2.default)(props, event, null, props);
    };
  };

  var _React$useMemo = React.useMemo(function () {
    var animation = {
      name: name,
      keyframeParams: keyframeParams,
      duration: duration,
      delay: delay,
      iterationCount: iterationCount,
      direction: direction,
      fillMode: fillMode,
      playState: playState,
      timingFunction: timingFunction
    };
    return (0, _reactBindings.unstable_getStyles)({
      className: animationClassName,
      displayNames: [Animation.displayName],
      props: {
        className: className,
        styles: (0, _reactBindings.unstable_createAnimationStyles)(animation, context.theme)
      },
      disableAnimations: context.disableAnimations,
      renderer: context.renderer,
      rtl: context.rtl,
      performance: {
        enableSanitizeCssPlugin: false,
        enableStylesCaching: false,
        enableVariablesCaching: false,
        enableBooleanVariablesCaching: false
      },
      saveDebug: _noop2.default,
      theme: context.theme
    });
  }, [className, context, name, delay, direction, duration, fillMode, iterationCount, keyframeParams, playState, timingFunction]),
      classes = _React$useMemo.classes,
      animationStyles = _React$useMemo.styles;

  if ((0, _isNil2.default)(children)) {
    setEnd();
    return null;
  }

  var _animationStyles$root = animationStyles.root,
      animationDuration = _animationStyles$root.animationDuration,
      animationDelay = _animationStyles$root.animationDelay;
  var timeoutResult = timeout || (0, _reactBindings.unstable_calculateAnimationTimeout)(animationDuration, animationDelay) || 0;
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Animation.handledProps, props);
  var isChildrenFunction = typeof children === 'function';
  var child = (0, _utils.childrenExist)(children) && !isChildrenFunction && React.Children.only(children);
  var element = React.createElement(_reactTransitionGroup.Transition, (0, _extends2.default)({
    in: visible,
    appear: appear,
    mountOnEnter: mountOnEnter,
    unmountOnExit: unmountOnExit,
    timeout: timeoutResult,
    onEnter: handleAnimationEvent('onEnter'),
    onEntering: handleAnimationEvent('onEntering'),
    onEntered: handleAnimationEvent('onEntered'),
    onExit: handleAnimationEvent('onExit'),
    onExiting: handleAnimationEvent('onExiting'),
    onExited: handleAnimationEvent('onExited')
  }, unhandledProps, {
    className: !isChildrenFunction ? (0, _classnames.default)(classes.root, (_ref = child) === null || _ref === void 0 ? void 0 : (_ref$props = _ref.props) === null || _ref$props === void 0 ? void 0 : _ref$props.className) : ''
  }), isChildrenFunction ? function () {
    return children({
      classes: classes.root
    });
  } : child);
  setEnd();
  return element;
};

Animation.displayName = 'Animation';
Animation.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  accessibility: false,
  as: false,
  content: false,
  children: false
}), {
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),
  name: PropTypes.string,
  delay: PropTypes.string,
  direction: PropTypes.string,
  duration: PropTypes.string,
  fillMode: PropTypes.string,
  iterationCount: PropTypes.string,
  keyframeParams: PropTypes.object,
  playState: PropTypes.string,
  timingFunction: PropTypes.string,
  visible: PropTypes.bool,
  appear: PropTypes.bool,
  mountOnEnter: PropTypes.bool,
  unmountOnExit: PropTypes.bool,
  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    appear: PropTypes.number,
    enter: PropTypes.number,
    exit: PropTypes.number
  })]),
  onEnter: PropTypes.func,
  onEntering: PropTypes.func,
  onEntered: PropTypes.func,
  onExit: PropTypes.func,
  onExiting: PropTypes.func,
  onExited: PropTypes.func
});
Animation.handledProps = Object.keys(Animation.propTypes);
var _default = Animation;
exports.default = _default;
//# sourceMappingURL=Animation.js.map
