{"version":3,"sources":["components/Input/Input.tsx"],"names":["inputClassName","inputSlotClassNames","input","icon","Input","React","createRef","clear","e","props","clearable","state","value","stopPropagation","nativeEvent","handleOnClear","predefinedProps","onClick","disabled","inputRef","current","focus","setState","length","accessibility","ElementType","unhandledProps","styles","variables","className","type","wrapper","htmlInputProps","restProps","Box","create","defaultProps","attributes","root","children","inputElement","as","onChange","handleChange","keyHandlers","computeIcon","overrideProps","handleIconOverrides","hasValue","AutoControlledComponent","commonPropTypes","createCommon","content","PropTypes","bool","defaultValue","oneOfType","string","number","fluid","customPropTypes","shorthandAllowingChildren","iconPosition","oneOf","itemShorthand","ref","inline","inverted","func","wrapperShorthand","inputBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, inputBehavior } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n\nimport {\n  AutoControlledComponent,\n  RenderResultConfig,\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { WithAsProp, ShorthandValue, ComponentEventHandler, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport interface InputState {\n  value?: InputProps['value'];\n  hasValue?: boolean;\n}\n\nexport const inputClassName = 'ui-input';\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\nclass Input extends AutoControlledComponent<WithAsProp<InputProps>, InputState> {\n  inputRef = React.createRef<HTMLElement>();\n\n  static deprecated_className = inputClassName;\n\n  static displayName = 'Input';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    clearable: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconPosition: PropTypes.oneOf(['start', 'end']),\n    input: customPropTypes.itemShorthand,\n    inputRef: customPropTypes.ref,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    onChange: PropTypes.func,\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    wrapper: customPropTypes.wrapperShorthand,\n  };\n\n  static defaultProps = {\n    accessibility: inputBehavior,\n    type: 'text',\n    wrapper: {},\n    iconPosition: 'end',\n  };\n\n  static autoControlledProps = ['value'];\n\n  static getAutoControlledStateFromProps(props: InputProps, state: InputState): Partial<InputState> {\n    const { value } = state;\n\n    return {\n      hasValue: !!value && (value as string).length !== 0,\n    };\n  }\n\n  actionHandlers = {\n    clear: (e: React.KeyboardEvent) => {\n      if (this.props.clearable && this.state.value !== '') {\n        e.stopPropagation();\n        e.nativeEvent && e.nativeEvent.stopPropagation();\n        this.handleOnClear(e);\n      }\n    },\n  };\n\n  renderComponent({ accessibility, ElementType, unhandledProps, styles, variables }: RenderResultConfig<InputProps>) {\n    const { className, input, inputRef, type, wrapper, disabled } = this.props;\n    const { value = '' } = this.state;\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n\n    return Box.create(wrapper, {\n      defaultProps: () => ({\n        ...accessibility.attributes.root,\n        className: cx(inputClassName, className),\n        children: (\n          <>\n            <Ref\n              innerRef={(inputElement: HTMLElement) => {\n                handleRef(this.inputRef, inputElement);\n                handleRef(inputRef, inputElement);\n              }}\n            >\n              {Box.create(input || type, {\n                defaultProps: () => ({\n                  ...htmlInputProps,\n                  as: 'input',\n                  disabled,\n                  type,\n                  value,\n                  className: inputSlotClassNames.input,\n                  styles: styles.input,\n                  onChange: this.handleChange,\n                  ...applyAccessibilityKeyHandlers(accessibility.keyHandlers.input, htmlInputProps),\n                }),\n              })}\n            </Ref>\n            {Box.create(this.computeIcon(), {\n              defaultProps: () => ({\n                className: inputSlotClassNames.icon,\n                styles: styles.icon,\n              }),\n              overrideProps: this.handleIconOverrides,\n            })}\n          </>\n        ),\n        styles: styles.root,\n        ...restProps,\n      }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n  }\n\n  handleIconOverrides = predefinedProps => ({\n    onClick: (e: React.SyntheticEvent) => {\n      if (!this.props.disabled) {\n        this.handleOnClear(e);\n        this.inputRef.current.focus();\n      }\n\n      _.invoke(predefinedProps, 'onClick', e, this.props);\n    },\n  });\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const value = _.get(e, 'target.value');\n\n    _.invoke(this.props, 'onChange', e, { ...this.props, value });\n\n    this.setState({ value });\n  };\n\n  handleOnClear = (e: React.SyntheticEvent) => {\n    if (this.props.clearable) {\n      _.invoke(this.props, 'onChange', e, { ...this.props, value: '' });\n      this.setState({ value: '' });\n    }\n  };\n\n  computeIcon = (): ShorthandValue<BoxProps> => {\n    const { clearable, icon } = this.props;\n    const { value } = this.state;\n\n    if (clearable && (value as string).length !== 0) {\n      return {};\n    }\n\n    return icon || null;\n  };\n}\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport default withSafeTypeForAs<typeof Input, InputProps, 'div'>(Input);\n"],"file":"Input.js"}