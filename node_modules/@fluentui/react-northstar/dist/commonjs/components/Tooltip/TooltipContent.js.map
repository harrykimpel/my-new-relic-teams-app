{"version":3,"sources":["components/Tooltip/TooltipContent.tsx"],"names":["tooltipContentClassName","TooltipContent","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","open","placement","pointing","pointerRef","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","basePlacement","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","pointer","propTypes","commonPropTypes","createCommon","PropTypes","oneOf","bool","customPropTypes","ref","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n}\n\nexport type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const tooltipContentClassName = 'ui-tooltip__content';\n\nconst TooltipContent: React.FC<WithAsProp<TooltipContentProps>> &\n  FluentComponentStaticProps<TooltipContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TooltipContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    open,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TooltipContentStylesProps>(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      open,\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {open && pointing && <div className={classes.pointer} ref={pointerRef} />}\n\n      <div {...getA11Props('content', { className: classes.content })}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltipContent.displayName = 'TooltipContent';\n\nTooltipContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref,\n};\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes) as any;\n\nTooltipContent.create = createShorthandFactory({ Component: TooltipContent, mappedProp: 'content' });\n\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\nexport default withSafeTypeForAs<typeof TooltipContent, TooltipContentProps>(TooltipContent);\n"],"file":"TooltipContent.js"}