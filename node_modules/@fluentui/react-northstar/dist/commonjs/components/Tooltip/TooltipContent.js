"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.tooltipContentClassName = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _positioner = require("../../utils/positioner");

var _types = require("../../types");

// @ts-ignore
var tooltipContentClassName = 'ui-tooltip__content';
exports.tooltipContentClassName = tooltipContentClassName;

var TooltipContent = function TooltipContent(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(TooltipContent.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      open = props.open,
      placement = props.placement,
      pointing = props.pointing,
      pointerRef = props.pointerRef,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: TooltipContent.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(TooltipContent.displayName, {
    className: tooltipContentClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        basePlacement: (0, _positioner.getBasePlacement)(placement, context.rtl),
        open: open,
        pointing: pointing
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(TooltipContent.handledProps, props);
  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), open && pointing && React.createElement("div", {
    className: classes.pointer,
    ref: pointerRef
  }), React.createElement("div", getA11Props('content', {
    className: classes.content
  }), (0, _utils.childrenExist)(children) ? children : content));
  setEnd();
  return element;
};

TooltipContent.displayName = 'TooltipContent';
TooltipContent.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),
  pointing: PropTypes.bool,
  pointerRef: customPropTypes.ref
});
TooltipContent.handledProps = Object.keys(TooltipContent.propTypes);
TooltipContent.create = (0, _utils.createShorthandFactory)({
  Component: TooltipContent,
  mappedProp: 'content'
});
/**
 * A TooltipContent contains the content of a Tooltip component.
 */

var _default = (0, _types.withSafeTypeForAs)(TooltipContent);

exports.default = _default;
//# sourceMappingURL=TooltipContent.js.map
