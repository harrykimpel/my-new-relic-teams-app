{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","createCheckboxManager","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","Text","create","defaultProps","element","root","onClick","onChange","Box","checkbox","checkboxBehavior","propTypes","commonPropTypes","createCommon","content","PropTypes","bool","customPropTypes","shorthandAllowingChildren","itemShorthand","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\nconst Checkbox: React.FC<WithAsProp<CheckboxProps>> & FluentComponentStaticProps<CheckboxProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof Checkbox, CheckboxProps>(Checkbox);\n"],"file":"Checkbox.js"}