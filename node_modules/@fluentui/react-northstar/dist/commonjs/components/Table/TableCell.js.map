{"version":3,"sources":["components/Table/TableCell.tsx"],"names":["tableCellClassName","tableCellSlotClassNames","content","TableCell","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","cellRef","useRef","children","truncateContent","className","design","styles","variables","hasChildren","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","focusCell","e","preventDefault","current","focus","performClick","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","currentTarget","target","element","unstable_wrapWithFocusZone","root","onClick","Box","create","defaultProps","propTypes","commonPropTypes","createCommon","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","nodeContent","bool","Object","keys","tableCellBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport Box, { BoxProps } from '../Box/Box';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nexport const tableCellClassName = 'ui-table__cell';\nexport const tableCellSlotClassNames: TableCellSlotClassNames = {\n  content: `${tableCellClassName}__content`,\n};\n\nconst TableCell: React.FC<WithAsProp<TableCellProps>> & FluentComponentStaticProps<TableCellProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ className: tableCellSlotClassNames.content, styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n\n/**\n * Component represents a table cell\n */\nexport default withSafeTypeForAs<typeof TableCell, TableCellProps, 'div'>(TableCell);\n"],"file":"TableCell.js"}