"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.labelClassName = void 0;

var _has2 = _interopRequireDefault(require("lodash/has"));

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _Image = _interopRequireDefault(require("../Image/Image"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var _types = require("../../types");

// @ts-ignore
var labelClassName = 'ui-label';
exports.labelClassName = labelClassName;

var Label = function Label(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Label.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      circular = props.circular,
      color = props.color,
      content = props.content,
      icon = props.icon,
      iconPosition = props.iconPosition,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      image = props.image,
      imagePosition = props.imagePosition;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Label.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Label.displayName, {
    className: labelClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        hasActionableIcon: (0, _has2.default)(icon, 'onClick'),
        hasImage: !!image,
        hasIcon: !!icon,
        circular: circular,
        color: color,
        imagePosition: imagePosition,
        iconPosition: iconPosition
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Label.handledProps, props);

  if ((0, _utils.childrenExist)(children)) {
    var _element = React.createElement(ElementType, getA11Props('root', Object.assign({
      className: classes.root
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [children]
    }), {}, unhandledProps)), children);

    setEnd();
    return _element;
  }

  var imageElement = _Image.default.create(image, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.image
      };
    }
  });

  var iconElement = _Box.default.create(icon, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.icon
      };
    }
  });

  var contentElement = _Box.default.create(content, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.content
      };
    }
  });

  var startImage = imagePosition === 'start' && imageElement;
  var startIcon = iconPosition === 'start' && iconElement;
  var endIcon = iconPosition === 'end' && iconElement;
  var endImage = imagePosition === 'end' && imageElement;
  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, unhandledProps)), startImage, startIcon, contentElement, endIcon, endImage);
  setEnd();
  return element;
};

Label.displayName = 'Label';
Label.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  color: true,
  content: 'shorthand'
}), {
  circular: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconPosition: PropTypes.oneOf(['start', 'end']),
  image: customPropTypes.itemShorthandWithoutJSX,
  imagePosition: PropTypes.oneOf(['start', 'end']),
  fluid: PropTypes.bool
});
Label.handledProps = Object.keys(Label.propTypes);
Label.defaultProps = {
  as: 'span',
  imagePosition: 'start',
  iconPosition: 'end'
};
Label.create = (0, _utils.createShorthandFactory)({
  Component: Label,
  mappedProp: 'content'
});
/**
 * A Label allows user to classify content.
 */

var _default = (0, _types.withSafeTypeForAs)(Label);

exports.default = _default;
//# sourceMappingURL=Label.js.map
