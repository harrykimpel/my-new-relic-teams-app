{"version":3,"sources":["components/ItemLayout/ItemLayout.tsx"],"names":["itemLayoutClassName","itemLayoutSlotClassNames","header","headerMedia","main","content","contentMedia","media","endMedia","ItemLayout","classes","unhandledProps","styles","props","as","debug","renderMainArea","rootCSS","mediaCSS","endMediaCSS","startArea","mainArea","state","endArea","mergedMediaClasses","mergedEndMediaClasses","root","rtlTextContainer","createFor","element","UIComponent","commonPropTypes","createCommon","accessibility","children","PropTypes","any","bool","renderContentArea","func","renderHeaderArea","object","headerCSS","headerMediaCSS","contentCSS","contentMediaCSS","headerArea","contentArea","gridTemplateRows","mergedClasses","mediaClasses","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport {\n  createShorthandFactory,\n  pxToRem,\n  UIComponent,\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport Layout from '../Layout/Layout';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface ItemLayoutSlotClassNames {\n  header: string;\n  headerMedia: string;\n  main: string;\n  content: string;\n  contentMedia: string;\n  media: string;\n  endMedia: string;\n}\n\nexport interface ItemLayoutProps extends UIComponentProps, ContentComponentProps<any> {\n  contentMedia?: any;\n  /** Toggle debug mode */\n  debug?: boolean;\n  header?: any;\n  endMedia?: any;\n  headerMedia?: any;\n  media?: any;\n  renderContentArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderHeaderArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderMainArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: React.CSSProperties;\n  /** Styled applied to the media element of the rendered component. */\n  mediaCSS?: React.CSSProperties;\n  /** Styled applied to the header element of the rendered component. */\n  headerCSS?: React.CSSProperties;\n  /** Styled applied to the header media element of the rendered component. */\n  headerMediaCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentMediaCSS?: React.CSSProperties;\n  /** Styled applied to the end media element of the rendered component. */\n  endMediaCSS?: React.CSSProperties;\n}\n\nexport const itemLayoutClassName = 'ui-itemlayout';\nexport const itemLayoutSlotClassNames: ItemLayoutSlotClassNames = {\n  header: `${itemLayoutClassName}__header`,\n  headerMedia: `${itemLayoutClassName}__headerMedia`,\n  main: `${itemLayoutClassName}__main`,\n  content: `${itemLayoutClassName}__content`,\n  contentMedia: `${itemLayoutClassName}__contentMedia`,\n  media: `${itemLayoutClassName}__media`,\n  endMedia: `${itemLayoutClassName}__endMedia`,\n};\n\nclass ItemLayout extends UIComponent<WithAsProp<ItemLayoutProps>, any> {\n  static create: ShorthandFactory<ItemLayoutProps>;\n\n  static displayName = 'ItemLayout';\n\n  static deprecated_className = itemLayoutClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    contentMedia: PropTypes.any,\n    content: PropTypes.any,\n    debug: PropTypes.bool,\n    header: PropTypes.any,\n    endMedia: PropTypes.any,\n    headerMedia: PropTypes.any,\n    media: PropTypes.any,\n    renderContentArea: PropTypes.func,\n    renderHeaderArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    rootCSS: PropTypes.object,\n    mediaCSS: PropTypes.object,\n    headerCSS: PropTypes.object,\n    headerMediaCSS: PropTypes.object,\n    contentCSS: PropTypes.object,\n    contentMediaCSS: PropTypes.object,\n    endMediaCSS: PropTypes.object,\n  };\n\n  static defaultProps = {\n    as: 'div',\n\n    renderMainArea: (props, state, classes) => {\n      const { renderHeaderArea, renderContentArea } = props;\n\n      const headerArea = renderHeaderArea(props, state, classes);\n      const contentArea = renderContentArea(props, state, classes);\n\n      return (\n        <div\n          className={itemLayoutSlotClassNames.main}\n          style={{\n            gridTemplateRows: '1fr 1fr',\n          }}\n        >\n          {headerArea}\n          {contentArea}\n        </div>\n      );\n    },\n\n    renderHeaderArea: (props, state, classes) => {\n      const { debug, header, headerMedia, headerCSS, headerMediaCSS } = props;\n\n      const mergedClasses = cx(itemLayoutSlotClassNames.header, classes.header);\n      const mediaClasses = cx(itemLayoutSlotClassNames.headerMedia, classes.headerMedia);\n\n      return !header && !headerMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"end\"\n          gap={pxToRem(8)}\n          debug={debug}\n          main={rtlTextContainer.createFor({ element: header })}\n          rootCSS={headerCSS}\n          end={\n            headerMedia && (\n              <span style={headerMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: headerMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n\n    renderContentArea: (props, state, classes) => {\n      const { debug, content, contentMedia, contentCSS, contentMediaCSS } = props;\n\n      const mergedClasses = cx(itemLayoutSlotClassNames.content, classes.content);\n      const mediaClasses = cx(itemLayoutSlotClassNames.contentMedia, classes.contentMedia);\n\n      return !content && !contentMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"start\"\n          gap={pxToRem(8)}\n          debug={debug}\n          rootCSS={contentCSS}\n          main={rtlTextContainer.createFor({ element: content })}\n          end={\n            contentMedia && (\n              <span style={contentMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: contentMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n  };\n\n  renderComponent({ classes, unhandledProps, styles }) {\n    const { as, debug, endMedia, media, renderMainArea, rootCSS, mediaCSS, endMediaCSS } = this.props;\n\n    const startArea = media;\n    const mainArea = renderMainArea(this.props, this.state, classes);\n    const endArea = endMedia;\n\n    const mergedMediaClasses = cx(itemLayoutSlotClassNames.media, classes.media);\n    const mergedEndMediaClasses = cx(itemLayoutSlotClassNames.endMedia, classes.endMedia);\n\n    return (\n      <Layout\n        as={as}\n        className={classes.root}\n        styles={styles.root}\n        rootCSS={rootCSS}\n        alignItems=\"center\"\n        gap={pxToRem(8)}\n        debug={debug}\n        reducing\n        start={\n          startArea && (\n            <span style={mediaCSS} className={mergedMediaClasses}>\n              {rtlTextContainer.createFor({ element: startArea })}\n            </span>\n          )\n        }\n        main={mainArea}\n        end={\n          endArea && (\n            <span style={endMediaCSS} className={mergedEndMediaClasses}>\n              {rtlTextContainer.createFor({ element: endArea })}\n            </span>\n          )\n        }\n        {...unhandledProps}\n      />\n    );\n  }\n}\n\nItemLayout.create = createShorthandFactory({ Component: ItemLayout, mappedProp: 'content' });\n\n/**\n * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.\n */\nexport default withSafeTypeForAs<typeof ItemLayout, ItemLayoutProps>(ItemLayout);\n"],"file":"ItemLayout.js"}