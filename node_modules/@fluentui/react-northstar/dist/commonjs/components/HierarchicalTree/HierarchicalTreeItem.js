"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.hierarchicalTreeItemSlotClassNames = exports.hierarchicalTreeItemClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var _reactComponentRef = require("@fluentui/react-component-ref");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _HierarchicalTree = _interopRequireDefault(require("./HierarchicalTree"));

var _HierarchicalTreeTitle = _interopRequireDefault(require("./HierarchicalTreeTitle"));

var _utils = require("../../utils");

var _types = require("../../types");

var hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';
exports.hierarchicalTreeItemClassName = hierarchicalTreeItemClassName;
var hierarchicalTreeItemSlotClassNames = {
  subtree: "".concat(hierarchicalTreeItemClassName, "__subtree")
};
exports.hierarchicalTreeItemSlotClassNames = hierarchicalTreeItemSlotClassNames;

var HierarchicalTreeItem =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(HierarchicalTreeItem, _UIComponent);

  function HierarchicalTreeItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, HierarchicalTreeItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HierarchicalTreeItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "treeRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();
        (0, _invoke2.default)(_this.props, 'onTitleClick', e, _this.props);
      },
      receiveFocus: function receiveFocus(e) {
        e.preventDefault();
        e.stopPropagation(); // Focuses the title if the event comes from a child item.

        if (_this.eventComesFromChildItem(e)) {
          _this.itemRef.current.focus();
        }
      },
      collapse: function collapse(e) {
        e.preventDefault();
        e.stopPropagation(); // Handle click on title if the keyboard event was dispatched on that title

        if (!_this.eventComesFromChildItem(e)) {
          _this.handleTitleClick(e);
        }
      },
      expand: function expand(e) {
        e.preventDefault();
        e.stopPropagation();

        _this.handleTitleClick(e);
      },
      focusSubtree: function focusSubtree(e) {
        e.preventDefault();
        e.stopPropagation();
        var element = (0, _reactBindings.getFirstFocusable)(_this.treeRef.current, _this.treeRef.current, true);

        if (element) {
          element.focus();
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "eventComesFromChildItem", function (e) {
      return e.currentTarget !== e.target;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTitleClick", function (e) {
      (0, _invoke2.default)(_this.props, 'onTitleClick', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTitleOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          _this.handleTitleClick(e);

          (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(HierarchicalTreeItem, [{
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          items = _this$props.items,
          title = _this$props.title,
          renderItemTitle = _this$props.renderItemTitle,
          open = _this$props.open,
          exclusive = _this$props.exclusive;
      var hasSubtree = !(0, _isNil2.default)(items);
      return React.createElement(React.Fragment, null, _HierarchicalTreeTitle.default.create(title, {
        defaultProps: function defaultProps() {
          return {
            open: open,
            hasSubtree: hasSubtree,
            as: hasSubtree ? 'span' : 'a'
          };
        },
        render: renderItemTitle,
        overrideProps: this.handleTitleOverrides
      }), hasSubtree && open && React.createElement(_reactComponentRef.Ref, {
        innerRef: this.treeRef
      }, _HierarchicalTree.default.create(items, {
        defaultProps: function defaultProps() {
          return {
            accessibility: _accessibility.hierarchicalSubtreeBehavior,
            className: hierarchicalTreeItemSlotClassNames.subtree,
            exclusive: exclusive,
            renderItemTitle: renderItemTitle
          };
        }
      })));
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          accessibility = _ref.accessibility,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables;
      var children = this.props.children;
      return React.createElement(_reactComponentRef.Ref, {
        innerRef: this.itemRef
      }, React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, _utils.rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), (0, _utils.childrenExist)(children) ? children : this.renderContent()));
    }
  }]);
  return HierarchicalTreeItem;
}(_utils.UIComponent);

(0, _defineProperty2.default)(HierarchicalTreeItem, "create", void 0);
(0, _defineProperty2.default)(HierarchicalTreeItem, "displayName", 'HierarchicalTreeItem');
(0, _defineProperty2.default)(HierarchicalTreeItem, "deprecated_className", hierarchicalTreeItemClassName);
(0, _defineProperty2.default)(HierarchicalTreeItem, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  items: customPropTypes.collectionShorthand,
  index: PropTypes.number,
  exclusive: PropTypes.bool,
  onTitleClick: PropTypes.func,
  open: PropTypes.bool,
  renderItemTitle: PropTypes.func,
  title: customPropTypes.itemShorthand
}));
(0, _defineProperty2.default)(HierarchicalTreeItem, "defaultProps", {
  as: 'li',
  accessibility: _accessibility.hierarchicalTreeItemBehavior
});
HierarchicalTreeItem.create = (0, _utils.createShorthandFactory)({
  Component: HierarchicalTreeItem,
  mappedProp: 'title'
});
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(HierarchicalTreeItem);

exports.default = _default;
//# sourceMappingURL=HierarchicalTreeItem.js.map
