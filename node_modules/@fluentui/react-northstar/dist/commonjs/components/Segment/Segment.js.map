{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["segmentClassName","Segment","accessibility","ElementType","classes","unhandledProps","props","children","content","rtlTextContainer","getAttributes","forElements","attributes","root","Box","create","UIComponent","commonPropTypes","createCommon","color","disabled","PropTypes","bool","inverted","rtlAttributes","func","as"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAYA;;AACA;;AAmBO,IAAMA,gBAAgB,GAAG,YAAzB;;;IAEDC,O;;;;;;;;;;;;0CAmBqE;AAAA,UAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBACzC,KAAKC,KADoC;AAAA,UAC/DC,QAD+D,eAC/DA,QAD+D;AAAA,UACrDC,OADqD,eACrDA,OADqD;AAGvE,aACE,oBAAC,WAAD,6BACMC,wBAAiBC,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACJ,QAAD;AAAf,OAA/B,CADN,EAEML,aAAa,CAACU,UAAd,CAAyBC,IAF/B,EAGMR,cAHN;AAIE,QAAA,SAAS,EAAED,OAAO,CAACS;AAJrB,UAMG,0BAAcN,QAAd,IAA0BA,QAA1B,GAAqCO,aAAIC,MAAJ,CAAWP,OAAX,CANxC,CADF;AAUD;;;EAhCmBQ,kB;AAmCtB;;;;;8BAnCMf,O,0BAC0BD,gB;8BAD1BC,O,iBAGiB,S;8BAHjBA,O,iCAMCgB,uBAAgBC,YAAhB,CAA6B;AAC9BV,EAAAA,OAAO,EAAE,WADqB;AAE9BW,EAAAA,KAAK,EAAE;AAFuB,CAA7B,C;AAIHC,EAAAA,QAAQ,EAAEC,SAAS,CAACC,I;AACpBC,EAAAA,QAAQ,EAAEF,SAAS,CAACC,I;AACpBE,EAAAA,aAAa,EAAEH,SAAS,CAACI;;8BAZvBxB,O,kBAekB;AACpByB,EAAAA,EAAE,EAAE;AADgB,C;;eAuBT,8BAAgDzB,OAAhD,C","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport const segmentClassName = 'ui-segment';\n\nclass Segment extends UIComponent<WithAsProp<SegmentProps>, any> {\n  static deprecated_className = segmentClassName;\n\n  static displayName = 'Segment';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: 'shorthand',\n      color: true,\n    }),\n    disabled: PropTypes.bool,\n    inverted: PropTypes.bool,\n    rtlAttributes: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : Box.create(content)}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * A Segment visually groups related content.\n */\nexport default withSafeTypeForAs<typeof Segment, SegmentProps>(Segment);\n"],"file":"Segment.js"}