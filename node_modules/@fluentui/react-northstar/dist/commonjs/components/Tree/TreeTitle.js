"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.treeTitleSlotClassNames = exports.treeTitleClassName = void 0;

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _Box = _interopRequireDefault(require("../Box/Box"));

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _types = require("../../types");

// @ts-ignore
var treeTitleClassName = 'ui-tree__title';
exports.treeTitleClassName = treeTitleClassName;
var treeTitleSlotClassNames = {
  indicator: "".concat(treeTitleClassName, "__selection-indicator")
};
exports.treeTitleSlotClassNames = treeTitleSlotClassNames;

var TreeTitle = function TreeTitle(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(TreeTitle.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      hasSubtree = props.hasSubtree,
      level = props.level,
      index = props.index,
      styles = props.styles,
      treeSize = props.treeSize,
      variables = props.variables,
      selectionIndicator = props.selectionIndicator,
      disabled = props.disabled,
      selected = props.selected,
      selectable = props.selectable,
      selectableParent = props.selectableParent,
      expanded = props.expanded,
      indeterminate = props.indeterminate;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: TreeTitle.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();
        handleClick(e);
      },
      performSelection: function performSelection(e) {
        e.preventDefault();
        e.stopPropagation();
        handleClick(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        hasSubtree: hasSubtree,
        level: level,
        index: index,
        treeSize: treeSize,
        selected: selected,
        selectable: selectable,
        selectableParent: selectableParent
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(TreeTitle.displayName, {
    className: treeTitleClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables,
        selected: selected,
        selectableParent: selectableParent,
        disabled: disabled,
        selectable: selectable,
        indeterminate: indeterminate
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(TreeTitle.handledProps, props);

  var handleClick = function handleClick(e) {
    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var selectIndicator = _Box.default.create(selectionIndicator, {
    defaultProps: function defaultProps() {
      return Object.assign({
        as: 'span',
        selected: selected
      }, selectableParent && !(0, _isEmpty2.default)(selectionIndicator) && {
        expanded: expanded
      }, {}, getA11Props('indicator', Object.assign({
        className: treeTitleSlotClassNames.indicator
      }, (selectable && !hasSubtree || selectableParent && expanded) && (0, _isEmpty2.default)(selectionIndicator) && {
        styles: resolvedStyles.selectionIndicator
      })));
    }
  });

  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    onClick: handleClick,
    selected: selected
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content, selectable && selectIndicator);
  setEnd();
  return element;
};

TreeTitle.displayName = 'TreeTitle';
TreeTitle.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  hasSubtree: PropTypes.bool,
  index: PropTypes.number,
  level: PropTypes.number,
  onClick: PropTypes.func,
  expanded: PropTypes.bool,
  selected: PropTypes.bool,
  selectable: PropTypes.bool,
  selectableParent: PropTypes.bool,
  treeSize: PropTypes.number,
  selectionIndicator: customPropTypes.shorthandAllowingChildren,
  indeterminate: PropTypes.bool
});
TreeTitle.defaultProps = {
  as: 'a',
  selectionIndicator: {},
  accessibility: _accessibility.treeTitleBehavior
};
TreeTitle.handledProps = Object.keys(TreeTitle.propTypes);
TreeTitle.create = (0, _utils.createShorthandFactory)({
  Component: TreeTitle,
  mappedProp: 'content'
});
/**
 * A TreeTitle renders a title of TreeItem.
 */

var _default = (0, _types.withSafeTypeForAs)(TreeTitle);

exports.default = _default;
//# sourceMappingURL=TreeTitle.js.map
