{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["treeClassName","Tree","React","createRef","Map","parent","parentRef","itemsRef","get","current","focus","e","selectedItemIds","props","setState","treeItemProps","executeSelection","state","id","selectableParent","items","expanded","treeItemHasSubtree","isExpandedSelectableParent","target","currentTarget","isAllGroupChecked","selectedItems","getAllSelectableChildrenId","filter","indexOf","selectItems","forEach","item","selectble","hasOwnProperty","selectable","push","setSelectedItemIds","itemID","processItemsForSelection","expandItems","itemId","currentElement","elementToBeFocused","treeRef","exclusive","activeItemIds","siblings","sibling","isActiveItem","setActiveItemIds","reduce","acc","selectableItemIds","some","every","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","activeItemIdIndex","activeSiblingIdIndex","accessibility","renderItemTitle","renderItems","level","renderedItems","index","isSubtree","isSubtreeExpanded","isSelectedItem","indeterminate","isIndeterminate","has","set","renderedItem","TreeItem","create","defaultProps","childBehaviors","undefined","selected","key","contentRef","treeSize","length","ElementType","classes","unhandledProps","children","contextValue","root","attributes","rtlTextContainer","getAttributes","forElements","keyHandlers","renderContent","nextProps","prevState","iterateItems","expandedItemsGenerator","AutoControlledComponent","commonPropTypes","createCommon","content","customPropTypes","collectionShorthand","defaultActiveItemIds","defaultSelectedItemIds","PropTypes","bool","collectionObjectShorthand","onActiveItemIdsChange","func","onSelectedItemIdsChange","as","treeBehavior","TreeTitle","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior, getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport TreeItem, { TreeItemProps } from './TreeItem';\nimport TreeTitle, { TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ComponentEventHandler,\n  ObjectShorthandCollection,\n} from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext, TreeRenderContextValue } from './utils';\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Ids of selected items. */\n  selectedItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Called when tree item selection state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `selectedItemIds` reflecting the new state.\n   */\n  onSelectedItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n\n  /** Whether or not tree items are selectable. */\n  selectable?: boolean;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport interface TreeState {\n  activeItemIds: string[];\n  selectedItemIds: string[];\n}\n\nexport const treeClassName = 'ui-tree';\n\nclass Tree extends AutoControlledComponent<WithAsProp<TreeProps>, TreeState> {\n  static create: ShorthandFactory<TreeProps>;\n\n  static displayName = 'Tree';\n\n  static deprecated_className = treeClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeItemIds: customPropTypes.collectionShorthand,\n    selectedItemIds: customPropTypes.collectionShorthand,\n    defaultActiveItemIds: customPropTypes.collectionShorthand,\n    defaultSelectedItemIds: customPropTypes.collectionShorthand,\n    exclusive: PropTypes.bool,\n    selectable: PropTypes.bool,\n    items: customPropTypes.collectionObjectShorthand,\n    onActiveItemIdsChange: PropTypes.func,\n    onSelectedItemIdsChange: PropTypes.func,\n    renderItemTitle: PropTypes.func,\n    renderedItems: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: treeBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['activeItemIds', 'selectedItemIds'];\n\n  static Item: typeof TreeItem = TreeItem;\n  static Title: typeof TreeTitle = TreeTitle;\n\n  static getAutoControlledStateFromProps(nextProps: TreeProps, prevState: TreeState) {\n    const { items, selectable } = nextProps;\n    let { activeItemIds, selectedItemIds } = nextProps;\n\n    if (selectable && items && !selectedItemIds) {\n      if (!selectedItemIds && items) {\n        selectedItemIds = prevState.selectedItemIds;\n\n        const iterateItems = (items, selectedItems = selectedItemIds) => {\n          _.forEach(items, item => {\n            if (item['selected'] && selectedItemIds.indexOf(item['id']) === -1) {\n              selectedItems.push(item['id']);\n            }\n            if (item['items']) {\n              return iterateItems(item['items']);\n            }\n          });\n        };\n\n        iterateItems(items);\n      }\n    }\n\n    if (!activeItemIds && items) {\n      activeItemIds = prevState.activeItemIds;\n\n      const expandedItemsGenerator = (items, acc = activeItemIds) =>\n        _.reduce(\n          items,\n          (acc, item) => {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          },\n          acc,\n        );\n\n      expandedItemsGenerator(items);\n    }\n\n    return {\n      activeItemIds,\n      selectedItemIds,\n    };\n  }\n\n  getInitialAutoControlledState() {\n    return { activeItemIds: [], selectedItemIds: [] };\n  }\n\n  treeRef = React.createRef<HTMLElement>();\n  itemsRef = new Map<string, React.RefObject<HTMLElement>>();\n\n  onFocusParent = (parent: string) => {\n    const parentRef = this.itemsRef.get(parent);\n\n    if (!parentRef || !parentRef.current) {\n      return;\n    }\n\n    parentRef.current.focus();\n  };\n\n  setSelectedItemIds = (e: React.SyntheticEvent, selectedItemIds: string[]) => {\n    _.invoke(this.props, 'onSelectedItemIdsChange', e, { ...this.props, selectedItemIds });\n\n    this.setState({\n      selectedItemIds,\n    });\n  };\n\n  processItemsForSelection = (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean) => {\n    let { selectedItemIds } = this.state;\n    const { id, selectableParent, items, expanded } = treeItemProps;\n    const treeItemHasSubtree = hasSubtree(treeItemProps);\n    const isExpandedSelectableParent = treeItemHasSubtree && selectableParent && expanded;\n\n    // parent must be selectable and expanded in order to procced with selection, otherwise return\n    if (treeItemHasSubtree && !(selectableParent && expanded)) {\n      return;\n    }\n\n    // if the target is equal to currentTarget it means treeItem should be collapsed, not procced with selection\n    if (treeItemHasSubtree && e.target === e.currentTarget && !executeSelection) {\n      return;\n    }\n\n    // push all tree items under particular parent into selection array\n    // not parent itself, therefore not procced with selection\n\n    if (isExpandedSelectableParent) {\n      if (this.isAllGroupChecked(items)) {\n        const selectedItems = this.getAllSelectableChildrenId(items);\n        selectedItemIds = selectedItemIds.filter(id => selectedItems.indexOf(id) === -1);\n      } else {\n        const selectItems = items => {\n          items.forEach(item => {\n            const selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n            if (selectedItemIds.indexOf(item.id) === -1) {\n              if (item.items) {\n                selectItems(item.items);\n              } else if (selectble) {\n                selectedItemIds.push(item.id);\n              }\n            }\n          });\n        };\n        selectItems(items);\n      }\n\n      this.setSelectedItemIds(e, selectedItemIds);\n      return;\n    }\n\n    // push/remove single tree item into selection array\n    if (selectedItemIds.indexOf(id) === -1) {\n      selectedItemIds.push(id);\n    } else {\n      selectedItemIds = selectedItemIds.filter(itemID => itemID !== id);\n    }\n\n    this.setSelectedItemIds(e, selectedItemIds);\n  };\n\n  onTitleClick = (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean = false) => {\n    const treeItemHasSubtree = hasSubtree(treeItemProps);\n\n    if (!treeItemProps) {\n      return;\n    }\n\n    if (treeItemProps.selectable) {\n      this.processItemsForSelection(e, treeItemProps, executeSelection);\n    }\n\n    if (treeItemHasSubtree && !executeSelection && e.target === e.currentTarget) {\n      this.expandItems(e, treeItemProps);\n    }\n  };\n\n  expandItems(e: React.SyntheticEvent, treeItemProps: TreeItemProps) {\n    let { activeItemIds } = this.state;\n    const { id } = treeItemProps;\n    const { exclusive, items } = this.props;\n    const siblings = getSiblings(items, id);\n\n    const activeItemIdIndex = activeItemIds.indexOf(id);\n\n    if (activeItemIdIndex > -1) {\n      activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n    } else {\n      if (exclusive) {\n        siblings.some(sibling => {\n          const activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n          if (activeSiblingIdIndex > -1) {\n            activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n\n            return true;\n          }\n          return false;\n        });\n      }\n\n      activeItemIds = [...activeItemIds, id];\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  }\n\n  onFocusFirstChild = (itemId: string) => {\n    const currentElement = this.itemsRef.get(itemId);\n\n    if (!currentElement || !currentElement.current) {\n      return;\n    }\n\n    const elementToBeFocused = getNextElement(this.treeRef.current, currentElement.current);\n\n    if (!elementToBeFocused) {\n      return;\n    }\n\n    elementToBeFocused.focus();\n  };\n\n  onSiblingsExpand = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    const { exclusive, items } = this.props;\n    if (exclusive) {\n      return;\n    }\n\n    const { id } = treeItemProps;\n    const { activeItemIds } = this.state;\n    const siblings = getSiblings(items, id);\n\n    siblings.forEach(sibling => {\n      if (hasSubtree(sibling) && !this.isActiveItem(sibling['id'])) {\n        activeItemIds.push(sibling['id']);\n      }\n    });\n\n    if (hasSubtree(treeItemProps) && !this.isActiveItem(id)) {\n      activeItemIds.push(id);\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  setActiveItemIds = (e: React.SyntheticEvent, activeItemIds: string[]) => {\n    _.invoke(this.props, 'onActiveItemIdsChange', e, { ...this.props, activeItemIds });\n\n    this.setState({\n      activeItemIds,\n    });\n  };\n\n  getAllSelectableChildrenId = items => {\n    return items.reduce((acc, item) => {\n      if (item.items) {\n        return [...acc, ...this.getAllSelectableChildrenId(item.items)];\n      }\n      return item.hasOwnProperty('selectable') && !item.selectable ? acc : [...acc, item.id];\n    }, []);\n  };\n\n  isIndeterminate = (item: TreeItemProps) => {\n    if (!item.selectableParent || !item.items) {\n      return false;\n    }\n\n    const { items } = item;\n\n    const selectableItemIds = this.getAllSelectableChildrenId(items);\n\n    return !this.isAllGroupChecked(items) && selectableItemIds.some(id => this.state.selectedItemIds.indexOf(id) > -1);\n  };\n\n  isAllGroupChecked = (items: ShorthandCollection<TreeItemProps, never>) => {\n    const selectableItemIds = this.getAllSelectableChildrenId(items);\n    return selectableItemIds.every(id => this.state.selectedItemIds.indexOf(id) > -1);\n  };\n\n  contextValue: TreeRenderContextValue = {\n    onFocusParent: this.onFocusParent,\n    onSiblingsExpand: this.onSiblingsExpand,\n    onFocusFirstChild: this.onFocusFirstChild,\n    onTitleClick: this.onTitleClick,\n  };\n\n  renderContent(accessibility: ReactAccessibilityBehavior): React.ReactElement[] {\n    const { items, renderItemTitle, selectable } = this.props;\n\n    if (!items) return null;\n\n    const renderItems = (items: TreeItemProps[], level = 1, parent?: string): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: TreeItemProps, index: number) => {\n        const id = item.id;\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && this.isActiveItem(id);\n        const isSelectedItem = this.isSelectedItem(item);\n        const indeterminate = this.isIndeterminate(item);\n\n        if (!this.itemsRef.has(id)) {\n          this.itemsRef.set(id, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () => ({\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n            expanded: isSubtreeExpanded,\n            selected: isSelectedItem,\n            selectable,\n            renderItemTitle,\n            id,\n            key: id,\n            parent,\n            level,\n            index: index + 1, // Used for aria-posinset and it's 1-based.\n            contentRef: this.itemsRef.get(id),\n            treeSize: items.length,\n            indeterminate,\n          }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item.items as TreeItemProps[], level + 1, id) : ([] as any)),\n        ];\n      }, []);\n    };\n\n    return renderItems(items as TreeItemProps[]);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, renderedItems } = this.props;\n\n    return (\n      <TreeContext.Provider value={this.contextValue}>\n        <Ref innerRef={this.treeRef}>\n          <ElementType\n            className={classes.root}\n            {...accessibility.attributes.root}\n            {...rtlTextContainer.getAttributes({ forElements: [children] })}\n            {...unhandledProps}\n            {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n          >\n            {childrenExist(children)\n              ? children\n              : renderedItems\n              ? renderedItems(this.renderContent(accessibility))\n              : this.renderContent(accessibility)}\n          </ElementType>\n        </Ref>\n      </TreeContext.Provider>\n    );\n  }\n\n  isActiveItem = (id: string): boolean => {\n    const { activeItemIds } = this.state;\n    return activeItemIds.indexOf(id) > -1;\n  };\n\n  isSelectedItem = (item: TreeItemProps): boolean => {\n    const { selectedItemIds } = this.state;\n\n    if (item.selectableParent && item.items) {\n      return this.isAllGroupChecked(item.items);\n    }\n\n    return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n  };\n}\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs<typeof Tree, TreeProps, 'ul'>(Tree);\n"],"file":"Tree.js"}