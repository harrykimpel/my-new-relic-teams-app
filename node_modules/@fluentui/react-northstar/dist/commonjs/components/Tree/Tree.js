"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.treeClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactComponentRef = require("@fluentui/react-component-ref");

var _TreeItem = _interopRequireDefault(require("./TreeItem"));

var _TreeTitle = _interopRequireDefault(require("./TreeTitle"));

var _utils = require("../../utils");

var _types = require("../../types");

var _utils2 = require("./utils");

var treeClassName = 'ui-tree';
exports.treeClassName = treeClassName;

var Tree =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Tree, _AutoControlledCompon);

  function Tree() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "treeRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemsRef", new Map());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocusParent", function (parent) {
      var parentRef = _this.itemsRef.get(parent);

      if (!parentRef || !parentRef.current) {
        return;
      }

      parentRef.current.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setSelectedItemIds", function (e, selectedItemIds) {
      (0, _invoke2.default)(_this.props, 'onSelectedItemIdsChange', e, Object.assign({}, _this.props, {
        selectedItemIds: selectedItemIds
      }));

      _this.setState({
        selectedItemIds: selectedItemIds
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "processItemsForSelection", function (e, treeItemProps, executeSelection) {
      var selectedItemIds = _this.state.selectedItemIds;
      var id = treeItemProps.id,
          selectableParent = treeItemProps.selectableParent,
          items = treeItemProps.items,
          expanded = treeItemProps.expanded;
      var treeItemHasSubtree = (0, _utils2.hasSubtree)(treeItemProps);
      var isExpandedSelectableParent = treeItemHasSubtree && selectableParent && expanded; // parent must be selectable and expanded in order to procced with selection, otherwise return

      if (treeItemHasSubtree && !(selectableParent && expanded)) {
        return;
      } // if the target is equal to currentTarget it means treeItem should be collapsed, not procced with selection


      if (treeItemHasSubtree && e.target === e.currentTarget && !executeSelection) {
        return;
      } // push all tree items under particular parent into selection array
      // not parent itself, therefore not procced with selection


      if (isExpandedSelectableParent) {
        if (_this.isAllGroupChecked(items)) {
          var selectedItems = _this.getAllSelectableChildrenId(items);

          selectedItemIds = selectedItemIds.filter(function (id) {
            return selectedItems.indexOf(id) === -1;
          });
        } else {
          var selectItems = function selectItems(items) {
            items.forEach(function (item) {
              var selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;

              if (selectedItemIds.indexOf(item.id) === -1) {
                if (item.items) {
                  selectItems(item.items);
                } else if (selectble) {
                  selectedItemIds.push(item.id);
                }
              }
            });
          };

          selectItems(items);
        }

        _this.setSelectedItemIds(e, selectedItemIds);

        return;
      } // push/remove single tree item into selection array


      if (selectedItemIds.indexOf(id) === -1) {
        selectedItemIds.push(id);
      } else {
        selectedItemIds = selectedItemIds.filter(function (itemID) {
          return itemID !== id;
        });
      }

      _this.setSelectedItemIds(e, selectedItemIds);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTitleClick", function (e, treeItemProps) {
      var executeSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var treeItemHasSubtree = (0, _utils2.hasSubtree)(treeItemProps);

      if (!treeItemProps) {
        return;
      }

      if (treeItemProps.selectable) {
        _this.processItemsForSelection(e, treeItemProps, executeSelection);
      }

      if (treeItemHasSubtree && !executeSelection && e.target === e.currentTarget) {
        _this.expandItems(e, treeItemProps);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocusFirstChild", function (itemId) {
      var currentElement = _this.itemsRef.get(itemId);

      if (!currentElement || !currentElement.current) {
        return;
      }

      var elementToBeFocused = (0, _reactBindings.getNextElement)(_this.treeRef.current, currentElement.current);

      if (!elementToBeFocused) {
        return;
      }

      elementToBeFocused.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSiblingsExpand", function (e, treeItemProps) {
      var _this$props = _this.props,
          exclusive = _this$props.exclusive,
          items = _this$props.items;

      if (exclusive) {
        return;
      }

      var id = treeItemProps.id;
      var activeItemIds = _this.state.activeItemIds;
      var siblings = (0, _utils2.getSiblings)(items, id);
      siblings.forEach(function (sibling) {
        if ((0, _utils2.hasSubtree)(sibling) && !_this.isActiveItem(sibling['id'])) {
          activeItemIds.push(sibling['id']);
        }
      });

      if ((0, _utils2.hasSubtree)(treeItemProps) && !_this.isActiveItem(id)) {
        activeItemIds.push(id);
      }

      _this.setActiveItemIds(e, activeItemIds);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setActiveItemIds", function (e, activeItemIds) {
      (0, _invoke2.default)(_this.props, 'onActiveItemIdsChange', e, Object.assign({}, _this.props, {
        activeItemIds: activeItemIds
      }));

      _this.setState({
        activeItemIds: activeItemIds
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAllSelectableChildrenId", function (items) {
      return items.reduce(function (acc, item) {
        if (item.items) {
          return [].concat((0, _toConsumableArray2.default)(acc), (0, _toConsumableArray2.default)(_this.getAllSelectableChildrenId(item.items)));
        }

        return item.hasOwnProperty('selectable') && !item.selectable ? acc : [].concat((0, _toConsumableArray2.default)(acc), [item.id]);
      }, []);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isIndeterminate", function (item) {
      if (!item.selectableParent || !item.items) {
        return false;
      }

      var items = item.items;

      var selectableItemIds = _this.getAllSelectableChildrenId(items);

      return !_this.isAllGroupChecked(items) && selectableItemIds.some(function (id) {
        return _this.state.selectedItemIds.indexOf(id) > -1;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isAllGroupChecked", function (items) {
      var selectableItemIds = _this.getAllSelectableChildrenId(items);

      return selectableItemIds.every(function (id) {
        return _this.state.selectedItemIds.indexOf(id) > -1;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "contextValue", {
      onFocusParent: _this.onFocusParent,
      onSiblingsExpand: _this.onSiblingsExpand,
      onFocusFirstChild: _this.onFocusFirstChild,
      onTitleClick: _this.onTitleClick
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isActiveItem", function (id) {
      var activeItemIds = _this.state.activeItemIds;
      return activeItemIds.indexOf(id) > -1;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isSelectedItem", function (item) {
      var selectedItemIds = _this.state.selectedItemIds;

      if (item.selectableParent && item.items) {
        return _this.isAllGroupChecked(item.items);
      }

      return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;
    });
    return _this;
  }

  (0, _createClass2.default)(Tree, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        activeItemIds: [],
        selectedItemIds: []
      };
    }
  }, {
    key: "expandItems",
    value: function expandItems(e, treeItemProps) {
      var activeItemIds = this.state.activeItemIds;
      var id = treeItemProps.id;
      var _this$props2 = this.props,
          exclusive = _this$props2.exclusive,
          items = _this$props2.items;
      var siblings = (0, _utils2.getSiblings)(items, id);
      var activeItemIdIndex = activeItemIds.indexOf(id);

      if (activeItemIdIndex > -1) {
        activeItemIds = (0, _utils2.removeItemAtIndex)(activeItemIds, activeItemIdIndex);
      } else {
        if (exclusive) {
          siblings.some(function (sibling) {
            var activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);

            if (activeSiblingIdIndex > -1) {
              activeItemIds = (0, _utils2.removeItemAtIndex)(activeItemIds, activeSiblingIdIndex);
              return true;
            }

            return false;
          });
        }

        activeItemIds = [].concat((0, _toConsumableArray2.default)(activeItemIds), [id]);
      }

      this.setActiveItemIds(e, activeItemIds);
    }
  }, {
    key: "renderContent",
    value: function renderContent(accessibility) {
      var _this2 = this;

      var _this$props3 = this.props,
          items = _this$props3.items,
          renderItemTitle = _this$props3.renderItemTitle,
          selectable = _this$props3.selectable;
      if (!items) return null;

      var renderItems = function renderItems(items) {
        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var parent = arguments.length > 2 ? arguments[2] : undefined;
        return items.reduce(function (renderedItems, item, index) {
          var id = item.id;
          var isSubtree = (0, _utils2.hasSubtree)(item);

          var isSubtreeExpanded = isSubtree && _this2.isActiveItem(id);

          var isSelectedItem = _this2.isSelectedItem(item);

          var indeterminate = _this2.isIndeterminate(item);

          if (!_this2.itemsRef.has(id)) {
            _this2.itemsRef.set(id, React.createRef());
          }

          var renderedItem = _TreeItem.default.create(item, {
            defaultProps: function defaultProps() {
              return {
                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,
                expanded: isSubtreeExpanded,
                selected: isSelectedItem,
                selectable: selectable,
                renderItemTitle: renderItemTitle,
                id: id,
                key: id,
                parent: parent,
                level: level,
                index: index + 1,
                // Used for aria-posinset and it's 1-based.
                contentRef: _this2.itemsRef.get(id),
                treeSize: items.length,
                indeterminate: indeterminate
              };
            }
          });

          return [].concat((0, _toConsumableArray2.default)(renderedItems), [renderedItem], (0, _toConsumableArray2.default)(isSubtreeExpanded ? renderItems(item.items, level + 1, id) : []));
        }, []);
      };

      return renderItems(items);
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props4 = this.props,
          children = _this$props4.children,
          renderedItems = _this$props4.renderedItems;
      return React.createElement(_utils2.TreeContext.Provider, {
        value: this.contextValue
      }, React.createElement(_reactComponentRef.Ref, {
        innerRef: this.treeRef
      }, React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, _utils.rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), (0, _utils.childrenExist)(children) ? children : renderedItems ? renderedItems(this.renderContent(accessibility)) : this.renderContent(accessibility))));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(nextProps, prevState) {
      var items = nextProps.items,
          selectable = nextProps.selectable;
      var activeItemIds = nextProps.activeItemIds,
          selectedItemIds = nextProps.selectedItemIds;

      if (selectable && items && !selectedItemIds) {
        if (!selectedItemIds && items) {
          selectedItemIds = prevState.selectedItemIds;

          var iterateItems = function iterateItems(items) {
            var selectedItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : selectedItemIds;
            (0, _forEach2.default)(items, function (item) {
              if (item['selected'] && selectedItemIds.indexOf(item['id']) === -1) {
                selectedItems.push(item['id']);
              }

              if (item['items']) {
                return iterateItems(item['items']);
              }
            });
          };

          iterateItems(items);
        }
      }

      if (!activeItemIds && items) {
        activeItemIds = prevState.activeItemIds;

        var expandedItemsGenerator = function expandedItemsGenerator(items) {
          var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : activeItemIds;
          return (0, _reduce2.default)(items, function (acc, item) {
            if (item['expanded'] && acc.indexOf(item['id']) === -1) {
              acc.push(item['id']);
            }

            if (item['items']) {
              return expandedItemsGenerator(item['items'], acc);
            }

            return acc;
          }, acc);
        };

        expandedItemsGenerator(items);
      }

      return {
        activeItemIds: activeItemIds,
        selectedItemIds: selectedItemIds
      };
    }
  }]);
  return Tree;
}(_utils.AutoControlledComponent);

(0, _defineProperty2.default)(Tree, "create", void 0);
(0, _defineProperty2.default)(Tree, "displayName", 'Tree');
(0, _defineProperty2.default)(Tree, "deprecated_className", treeClassName);
(0, _defineProperty2.default)(Tree, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  activeItemIds: customPropTypes.collectionShorthand,
  selectedItemIds: customPropTypes.collectionShorthand,
  defaultActiveItemIds: customPropTypes.collectionShorthand,
  defaultSelectedItemIds: customPropTypes.collectionShorthand,
  exclusive: PropTypes.bool,
  selectable: PropTypes.bool,
  items: customPropTypes.collectionObjectShorthand,
  onActiveItemIdsChange: PropTypes.func,
  onSelectedItemIdsChange: PropTypes.func,
  renderItemTitle: PropTypes.func,
  renderedItems: PropTypes.func
}));
(0, _defineProperty2.default)(Tree, "defaultProps", {
  as: 'div',
  accessibility: _accessibility.treeBehavior
});
(0, _defineProperty2.default)(Tree, "autoControlledProps", ['activeItemIds', 'selectedItemIds']);
(0, _defineProperty2.default)(Tree, "Item", _TreeItem.default);
(0, _defineProperty2.default)(Tree, "Title", _TreeTitle.default);
Tree.create = (0, _utils.createShorthandFactory)({
  Component: Tree,
  mappedArrayProp: 'items'
});
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 * @accessibilityIssues
 * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)
 * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)
 */

var _default = (0, _types.withSafeTypeForAs)(Tree);

exports.default = _default;
//# sourceMappingURL=Tree.js.map
