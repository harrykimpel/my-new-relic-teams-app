"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeContext = exports.getSiblings = exports.removeItemAtIndex = exports.hasSubtree = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var React = _interopRequireWildcard(require("react"));

var hasSubtree = function hasSubtree(item) {
  return !(0, _isNil2.default)(item['items']) && item['items'].length > 0;
};

exports.hasSubtree = hasSubtree;

var removeItemAtIndex = function removeItemAtIndex(items, itemIndex) {
  return [].concat((0, _toConsumableArray2.default)(items.slice(0, itemIndex)), (0, _toConsumableArray2.default)(items.slice(itemIndex + 1)));
};
/**
 * Looks for the item inside the nested items array and returns its siblings.
 * @param {any[]} items The nested items array.
 * @param {string} itemId The id of the item to return the children of.
 * @returns {any[]} The item siblings
 */


exports.removeItemAtIndex = removeItemAtIndex;

var getSiblings = function getSiblings(items, itemId) {
  function getSiblingsFn(items) {
    var itemIndex = items.findIndex(function (item) {
      return item.id === itemId;
    });

    if (itemIndex > -1) {
      return removeItemAtIndex(items, itemIndex);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;

        if (item.items) {
          var result = getSiblingsFn(item.items);

          if (result) {
            return result;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return null;
  }

  return getSiblingsFn(items);
};

exports.getSiblings = getSiblings;
var TreeContext = React.createContext({
  onFocusFirstChild: _noop2.default,
  onFocusParent: _noop2.default,
  onSiblingsExpand: _noop2.default,
  onTitleClick: _noop2.default
});
exports.TreeContext = TreeContext;
//# sourceMappingURL=index.js.map
