{"version":3,"sources":["components/Chat/ChatMessage.tsx"],"names":["chatMessageClassName","chatMessageSlotClassNames","actionMenu","author","timestamp","badge","content","reactionGroup","ChatMessage","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","parentAttached","ChatItemContext","v","attached","accessibility","badgePosition","children","className","design","mine","positionActionMenu","reactionGroupPosition","styles","variables","overflow","unstable_overflow","useState","focused","setFocused","messageNode","setMessageNode","updateActionsMenuPosition","useRef","getA11Props","actionHandlers","preventDefault","event","currentTarget","target","focus","stopPropagation","mapPropsToStyles","hasBadge","hasReactionGroup","mapPropsToInlineStyles","rtl","classes","resolvedStyles","handleFocus","e","handleBlur","shouldPreserveFocusState","relatedTarget","handleMouseEnter","renderActionMenu","actionMenuElement","Menu","create","defaultProps","IS_FOCUSABLE_ATTRIBUTE","menuAsToolbarBehavior","modifiers","name","options","fallbackPlacements","boundary","scheduleUpdate","current","childrenPropExists","rootClasses","root","ElementType","unhandledProps","handledProps","badgeElement","Label","reactionGroupElement","Reaction","Group","authorElement","Text","size","timestampElement","messageContent","Box","element","unstable_wrapWithFocusZone","onBlur","onFocus","onMouseEnter","rtlTextContainer","getAttributes","forElements","chatMessageBehavior","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","customPropTypes","itemShorthand","collectionShorthand","bool","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  IS_FOCUSABLE_ATTRIBUTE,\n  chatMessageBehavior,\n  menuAsToolbarBehavior,\n  ChatMessageBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  getScrollParent,\n  Popper,\n  PopperShorthandProps,\n  getPopperPropsFromShorthand,\n  PopperModifiers,\n} from '../../utils/positioner';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Label, { LabelProps } from '../Label/Label';\nimport Menu, { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport Text, { TextProps } from '../Text/Text';\nimport Reaction, { ReactionProps } from '../Reaction/Reaction';\nimport { ReactionGroupProps } from '../Reaction/ReactionGroup';\nimport { ChatItemContext } from './chatItemContext';\n\nexport interface ChatMessageSlotClassNames {\n  actionMenu: string;\n  author: string;\n  timestamp: string;\n  badge: string;\n  content: string;\n  reactionGroup: string;\n}\n\nexport interface ChatMessageProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatMessageBehaviorProps>;\n\n  /** Menu with actions of the message. */\n  actionMenu?: ShorthandValue<MenuProps & { popper?: PopperShorthandProps }> | ShorthandCollection<MenuItemProps>;\n\n  /** Controls messages's relation to other chat messages. Is automatically set by the ChatItem. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Author of the message. */\n  author?: ShorthandValue<TextProps>;\n\n  /** Indicates whether message belongs to the current user. */\n  mine?: boolean;\n\n  /** Timestamp of the message. */\n  timestamp?: ShorthandValue<TextProps>;\n\n  /** Badge attached to the message. */\n  badge?: ShorthandValue<LabelProps>;\n\n  /** A message can format the badge to appear at the start or the end of the message. */\n  badgePosition?: 'start' | 'end';\n\n  /**\n   * Called after user's blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user enters by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<ChatMessageProps>;\n\n  /** Allows suppression of action menu positioning for performance reasons */\n  positionActionMenu?: boolean;\n\n  /** Reaction group applied to the message. */\n  reactionGroup?: ShorthandValue<ReactionGroupProps> | ShorthandCollection<ReactionProps>;\n\n  /** A message can format the reactions group to appear at the start or the end of the message. */\n  reactionGroupPosition?: 'start' | 'end';\n\n  /** Positions an actionMenu slot in \"fixed\" mode. */\n  unstable_overflow?: boolean;\n}\n\nexport type ChatMessageStylesProps = Pick<ChatMessageProps, 'attached' | 'badgePosition' | 'mine'> & {\n  focused: boolean;\n  hasBadge: boolean;\n  hasReactionGroup: boolean;\n};\n\nexport const chatMessageClassName = 'ui-chat__message';\nexport const chatMessageSlotClassNames: ChatMessageSlotClassNames = {\n  actionMenu: `${chatMessageClassName}__actions`,\n  author: `${chatMessageClassName}__author`,\n  timestamp: `${chatMessageClassName}__timestamp`,\n  badge: `${chatMessageClassName}__badge`,\n  content: `${chatMessageClassName}__content`,\n  reactionGroup: `${chatMessageClassName}__reactions`,\n};\n\nconst ChatMessage: React.FC<WithAsProp<ChatMessageProps>> & FluentComponentStaticProps<ChatMessageProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatMessage.displayName, context.telemetry);\n  setStart();\n\n  const parentAttached = useContextSelector(ChatItemContext, v => v.attached);\n  const {\n    accessibility,\n    actionMenu,\n    attached = parentAttached,\n    author,\n    badge,\n    badgePosition,\n    children,\n    className,\n    content,\n    design,\n    mine,\n    positionActionMenu,\n    reactionGroup,\n    reactionGroupPosition,\n    timestamp,\n    styles,\n    variables,\n    unstable_overflow: overflow,\n  } = props;\n\n  const [focused, setFocused] = React.useState<boolean>(false);\n  const [messageNode, setMessageNode] = React.useState<HTMLElement | null>(null);\n\n  const updateActionsMenuPosition = React.useRef<(() => void) | null>(null);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: event => {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n\n      focus: event => {\n        if (messageNode) {\n          messageNode.focus();\n          event.stopPropagation();\n        }\n      },\n    },\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatMessageStylesProps>(ChatMessage.displayName, {\n    className: chatMessageClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      badgePosition,\n      focused,\n      mine,\n      hasBadge: !!badge,\n      hasReactionGroup: !!reactionGroup,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n\n    setFocused(true);\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    const shouldPreserveFocusState = _.invoke(e, 'currentTarget.contains', (e as any).relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleMouseEnter = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const renderActionMenu = () => {\n    const actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: () => ({\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        accessibility: menuAsToolbarBehavior,\n        className: chatMessageSlotClassNames.actionMenu,\n        styles: resolvedStyles.actionMenu,\n      }),\n    });\n\n    if (!actionMenuElement) {\n      return actionMenuElement;\n    }\n\n    const modifiers: PopperModifiers | undefined = positionActionMenu && [\n      // https://popper.js.org/docs/v2/modifiers/flip/\n      // Forces to flip only in \"top-*\" positions\n      { name: 'flip', options: { fallbackPlacements: ['top'] } },\n      overflow && {\n        name: 'preventOverflow',\n        options: { boundary: getScrollParent(messageNode) },\n      },\n    ];\n\n    return (\n      <Popper\n        enabled={positionActionMenu}\n        align=\"end\"\n        modifiers={modifiers}\n        position=\"above\"\n        positionFixed={overflow}\n        targetRef={messageNode}\n        {...getPopperPropsFromShorthand(actionMenu)}\n      >\n        {({ scheduleUpdate }) => {\n          updateActionsMenuPosition.current = scheduleUpdate;\n\n          return actionMenuElement;\n        }}\n      </Popper>\n    );\n  };\n\n  const childrenPropExists = childrenExist(children);\n  const rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n\n  const badgeElement = Label.create(badge, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.badge,\n      styles: resolvedStyles.badge,\n    }),\n  });\n\n  const reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.reactionGroup,\n      styles: resolvedStyles.reactionGroup,\n    }),\n  });\n\n  const actionMenuElement = renderActionMenu();\n\n  const authorElement = Text.create(author, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.author,\n      className: chatMessageSlotClassNames.author,\n    }),\n  });\n\n  const timestampElement = Text.create(timestamp, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.timestamp,\n      timestamp: true,\n      className: chatMessageSlotClassNames.timestamp,\n    }),\n  });\n\n  const messageContent = Box.create(content, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const element = (\n    <Ref innerRef={setMessageNode}>\n      {getA11Props.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11Props('root', {\n            className: rootClasses,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onMouseEnter: handleMouseEnter,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenPropExists ? (\n            children\n          ) : (\n            <>\n              {actionMenuElement}\n              {badgePosition === 'start' && badgeElement}\n              {authorElement}\n              {timestampElement}\n              {reactionGroupPosition === 'start' && reactionGroupElement}\n              {messageContent}\n              {reactionGroupPosition === 'end' && reactionGroupElement}\n              {badgePosition === 'end' && badgeElement}\n            </>\n          )}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatMessage.displayName = 'ChatMessage';\n\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  positionActionMenu: true,\n  reactionGroupPosition: 'start',\n};\nChatMessage.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  mine: PropTypes.bool,\n  timestamp: customPropTypes.itemShorthand,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  unstable_overflow: PropTypes.bool,\n};\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes) as any;\n\nChatMessage.create = createShorthandFactory({ Component: ChatMessage, mappedProp: 'content' });\n\n/**\n * A ChatMessage represents a single message in chat.\n */\nexport default withSafeTypeForAs<typeof ChatMessage, ChatMessageProps>(ChatMessage);\n"],"file":"ChatMessage.js"}