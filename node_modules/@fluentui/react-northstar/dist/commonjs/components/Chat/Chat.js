"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.chatSlotClassNames = exports.chatClassName = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _utils = require("../../utils");

var _types = require("../../types");

var _ChatItem = _interopRequireDefault(require("./ChatItem"));

var _ChatMessage = _interopRequireDefault(require("./ChatMessage"));

// @ts-ignore
var chatClassName = 'ui-chat';
exports.chatClassName = chatClassName;
var chatSlotClassNames = {
  item: "".concat(chatClassName, "__item")
};
exports.chatSlotClassNames = chatSlotClassNames;

var Chat = function Chat(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Chat.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Chat.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Chat.displayName, {
    className: chatClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Chat.handledProps, props);
  var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), {}, unhandledProps)), (0, _utils.childrenExist)(children) ? children : (0, _map2.default)(items, function (item) {
    return _ChatItem.default.create(item, {
      defaultProps: function defaultProps() {
        return {
          className: chatSlotClassNames.item
        };
      }
    });
  })));
  setEnd();
  return element;
};

Chat.displayName = 'Chat';
Chat.defaultProps = {
  accessibility: _accessibility.chatBehavior,
  as: 'ul'
};
Chat.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  items: PropTypes.arrayOf(customPropTypes.itemShorthand)
});
Chat.handledProps = Object.keys(Chat.propTypes);
Chat.Item = _ChatItem.default;
Chat.Message = _ChatMessage.default;
Chat.create = (0, _utils.createShorthandFactory)({
  Component: Chat
});
/**
 * A Chat displays messages from a conversation between multiple users.
 */

var _default = (0, _types.withSafeTypeForAs)(Chat);

exports.default = _default;
//# sourceMappingURL=Chat.js.map
