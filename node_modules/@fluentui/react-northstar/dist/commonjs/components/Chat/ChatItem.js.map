{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["chatItemClassName","chatItemSlotClassNames","message","gutter","ChatItem","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","attached","children","className","contentPosition","design","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","Box","create","defaultProps","messageElement","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","as","propTypes","commonPropTypes","createCommon","content","PropTypes","oneOfType","bool","oneOf","customPropTypes","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport const chatItemClassName = 'ui-chat__item';\nexport const chatItemSlotClassNames: ChatItemSlotClassNames = {\n  message: `${chatItemClassName}__message`,\n  gutter: `${chatItemClassName}__gutter`,\n};\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\nconst ChatItem: React.FC<WithAsProp<ChatItemProps>> & FluentComponentStaticProps<ChatItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: chatItemClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: chatItemSlotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: chatItemSlotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.displayName = 'ChatItem';\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport default withSafeTypeForAs<typeof ChatItem, ChatItemProps, 'li'>(ChatItem);\n"],"file":"ChatItem.js"}