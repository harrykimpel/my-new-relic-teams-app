"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cardClassName = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var CustomPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _types = require("../../types");

var _utils = require("../../utils");

var _CardBody = _interopRequireDefault(require("./CardBody"));

var _CardColumn = _interopRequireDefault(require("./CardColumn"));

var _CardFooter = _interopRequireDefault(require("./CardFooter"));

var _CardHeader = _interopRequireDefault(require("./CardHeader"));

var _CardPreview = _interopRequireDefault(require("./CardPreview"));

var _CardTopControls = _interopRequireDefault(require("./CardTopControls"));

// @ts-ignore
var cardClassName = 'ui-card';
exports.cardClassName = cardClassName;

var Card = function Card(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Card.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var cardRef = React.useRef();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      compact = props.compact,
      horizontal = props.horizontal,
      centered = props.centered,
      size = props.size,
      fluid = props.fluid,
      onClick = props.onClick,
      disabled = props.disabled;
  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Card.handledProps, props);
  var getA11yProps = (0, _reactBindings.useAccessibility)(props.accessibility, {
    debugName: Card.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        handleClick(e);
      },
      focusCard: function focusCard(e) {
        cardRef.current.focus();
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Card.displayName, {
    className: cardClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        centered: centered,
        horizontal: horizontal,
        compact: compact,
        size: size,
        fluid: fluid,
        actionable: !!onClick,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var element = React.createElement(_reactComponentRef.Ref, {
    innerRef: cardRef
  }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), children)));
  setEnd();
  return element;
};

Card.displayName = 'Card';
Card.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  onClick: PropTypes.func,
  compact: PropTypes.bool,
  horizontal: PropTypes.bool,
  centered: PropTypes.bool,
  size: CustomPropTypes.size,
  fluid: PropTypes.bool
});
Card.defaultProps = {
  accessibility: _accessibility.cardBehavior,
  size: 'medium'
};
Card.handledProps = Object.keys(Card.propTypes);
Card.Header = _CardHeader.default;
Card.Body = _CardBody.default;
Card.Footer = _CardFooter.default;
Card.Preview = _CardPreview.default;
Card.TopControls = _CardTopControls.default;
Card.Column = _CardColumn.default;
Card.create = (0, _utils.createShorthandFactory)({
  Component: Card
});
/**
 * A Card is used to display data in sematically grouped way.
 * * @accessibility
 * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)
 * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)
 * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).
 *
 */

var _default = (0, _types.withSafeTypeForAs)(Card);

exports.default = _default;
//# sourceMappingURL=Card.js.map
