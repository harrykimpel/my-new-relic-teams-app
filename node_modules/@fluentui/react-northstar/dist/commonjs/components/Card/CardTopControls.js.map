{"version":3,"sources":["components/Card/CardTopControls.tsx"],"names":["cardTopControlsClassName","CardTopControls","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","className","design","styles","variables","children","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToInlineStyles","classes","element","root","propTypes","commonPropTypes","createCommon","Object","keys","create","Component"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAHA;AAaO,IAAMA,wBAAwB,GAAG,sBAAjC;;;AAEP,IAAMC,eAC4C,GAAG,SAD/CA,eAC+C,CAAAC,KAAK,EAAI;AAC5D,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AAD4D,sBAE/B,iCAAaL,eAAe,CAACM,WAA7B,EAA0CJ,OAAO,CAACK,SAAlD,CAF+B;AAAA,MAEpDC,QAFoD,iBAEpDA,QAFoD;AAAA,MAE1CC,MAF0C,iBAE1CA,MAF0C;;AAG5DD,EAAAA,QAAQ;AAHoD,MAKpDE,SALoD,GAKDT,KALC,CAKpDS,SALoD;AAAA,MAKzCC,MALyC,GAKDV,KALC,CAKzCU,MALyC;AAAA,MAKjCC,MALiC,GAKDX,KALC,CAKjCW,MALiC;AAAA,MAKzBC,SALyB,GAKDZ,KALC,CAKzBY,SALyB;AAAA,MAKdC,QALc,GAKDb,KALC,CAKda,QALc;AAM5D,MAAMC,WAAW,GAAG,mCAAed,KAAf,CAApB;AACA,MAAMe,cAAc,GAAG,sCAAkBhB,eAAe,CAACiB,YAAlC,EAAgDhB,KAAhD,CAAvB;AACA,MAAMiB,YAAY,GAAG,qCAAiBjB,KAAK,CAACkB,aAAvB,EAAsC;AACzDC,IAAAA,SAAS,EAAEpB,eAAe,CAACM,WAD8B;AAEzDe,IAAAA,GAAG,EAAEnB,OAAO,CAACmB;AAF4C,GAAtC,CAArB;;AAR4D,mBAaxC,8BAAsCrB,eAAe,CAACM,WAAtD,EAAmE;AACrFI,IAAAA,SAAS,EAAEX,wBAD0E;AAErFuB,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BZ,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAF6D;AAQrFQ,IAAAA,GAAG,EAAEnB,OAAO,CAACmB;AARwE,GAAnE,CAbwC;AAAA,MAapDE,OAboD,cAapDA,OAboD;;AAwB5D,MAAMC,OAAO,GACX,oBAAC,WAAD,EACMN,YAAY,CAAC,MAAD;AACdR,IAAAA,SAAS,EAAEa,OAAO,CAACE;AADL,KAEXT,cAFW,EADlB,EAMGF,QANH,CADF;AAUAL,EAAAA,MAAM;AACN,SAAOe,OAAP;AACD,CArCD;;AAuCAxB,eAAe,CAACM,WAAhB,GAA8B,iBAA9B;AAEAN,eAAe,CAAC0B,SAAhB,qBACKC,uBAAgBC,YAAhB,EADL;AAIA5B,eAAe,CAACiB,YAAhB,GAA+BY,MAAM,CAACC,IAAP,CAAY9B,eAAe,CAAC0B,SAA5B,CAA/B;AAEA1B,eAAe,CAAC+B,MAAhB,GAAyB,mCAAuB;AAAEC,EAAAA,SAAS,EAAEhC;AAAb,CAAvB,CAAzB;AAEA;;;;eAGe,8BAAuEA,eAAvE,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardTopControlsProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type CardTopControlsStylesProps = never;\nexport const cardTopControlsClassName = 'ui-card__topcontrols';\n\nconst CardTopControls: React.FC<WithAsProp<CardTopControlsProps>> &\n  FluentComponentStaticProps<CardTopControlsProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardTopControls.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardTopControls.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardTopControls.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardTopControlsStylesProps>(CardTopControls.displayName, {\n    className: cardTopControlsClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardTopControls.displayName = 'CardTopControls';\n\nCardTopControls.propTypes = {\n  ...commonPropTypes.createCommon(),\n};\n\nCardTopControls.handledProps = Object.keys(CardTopControls.propTypes) as any;\n\nCardTopControls.create = createShorthandFactory({ Component: CardTopControls });\n\n/**\n * A CardTopControls is used to render control elements in the top of a Card component.\n */\nexport default withSafeTypeForAs<typeof CardTopControls, CardTopControlsProps, 'div'>(CardTopControls);\n"],"file":"CardTopControls.js"}