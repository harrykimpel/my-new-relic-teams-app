{"version":3,"sources":["components/Card/CardPreview.tsx"],"names":["cardPreviewClassName","CardPreview","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","className","design","styles","variables","children","horizontal","fitted","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","propTypes","commonPropTypes","createCommon","PropTypes","bool","Object","keys","create","Component"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAHA;AAmBO,IAAMA,oBAAoB,GAAG,kBAA7B;;;AAEP,IAAMC,WAAkG,GAAG,SAArGA,WAAqG,CAAAC,KAAK,EAAI;AAClH,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AADkH,sBAErF,iCAAaL,WAAW,CAACM,WAAzB,EAAsCJ,OAAO,CAACK,SAA9C,CAFqF;AAAA,MAE1GC,QAF0G,iBAE1GA,QAF0G;AAAA,MAEhGC,MAFgG,iBAEhGA,MAFgG;;AAGlHD,EAAAA,QAAQ;AAH0G,MAK1GE,SAL0G,GAKnCT,KALmC,CAK1GS,SAL0G;AAAA,MAK/FC,MAL+F,GAKnCV,KALmC,CAK/FU,MAL+F;AAAA,MAKvFC,MALuF,GAKnCX,KALmC,CAKvFW,MALuF;AAAA,MAK/EC,SAL+E,GAKnCZ,KALmC,CAK/EY,SAL+E;AAAA,MAKpEC,QALoE,GAKnCb,KALmC,CAKpEa,QALoE;AAAA,MAK1DC,UAL0D,GAKnCd,KALmC,CAK1Dc,UAL0D;AAAA,MAK9CC,MAL8C,GAKnCf,KALmC,CAK9Ce,MAL8C;AAMlH,MAAMC,WAAW,GAAG,mCAAehB,KAAf,CAApB;AACA,MAAMiB,cAAc,GAAG,sCAAkBlB,WAAW,CAACmB,YAA9B,EAA4ClB,KAA5C,CAAvB;AACA,MAAMmB,YAAY,GAAG,qCAAiBnB,KAAK,CAACoB,aAAvB,EAAsC;AACzDC,IAAAA,SAAS,EAAEtB,WAAW,CAACM,WADkC;AAEzDiB,IAAAA,GAAG,EAAErB,OAAO,CAACqB;AAF4C,GAAtC,CAArB;;AARkH,mBAa9F,8BAAkCvB,WAAW,CAACM,WAA9C,EAA2D;AAC7EI,IAAAA,SAAS,EAAEX,oBADkE;AAE7EyB,IAAAA,gBAAgB,EAAE;AAAA,aAAO;AAAET,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,MAAM,EAANA;AAAd,OAAP;AAAA,KAF2D;AAG7ES,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7Bf,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAAA,KAHqD;AAS7EU,IAAAA,GAAG,EAAErB,OAAO,CAACqB;AATgE,GAA3D,CAb8F;AAAA,MAa1GG,OAb0G,cAa1GA,OAb0G;;AAyBlH,MAAMC,OAAO,GACX,oBAAC,WAAD,EACMP,YAAY,CAAC,MAAD;AACdV,IAAAA,SAAS,EAAEgB,OAAO,CAACE;AADL,KAEXV,cAFW,EADlB,EAMGJ,QANH,CADF;AAUAL,EAAAA,MAAM;AACN,SAAOkB,OAAP;AACD,CArCD;;AAuCA3B,WAAW,CAACM,WAAZ,GAA0B,aAA1B;AAEAN,WAAW,CAAC6B,SAAZ,qBACKC,uBAAgBC,YAAhB,EADL;AAEEhB,EAAAA,UAAU,EAAEiB,SAAS,CAACC,IAFxB;AAGEjB,EAAAA,MAAM,EAAEgB,SAAS,CAACC;AAHpB;AAMAjC,WAAW,CAACmB,YAAZ,GAA2Be,MAAM,CAACC,IAAP,CAAYnC,WAAW,CAAC6B,SAAxB,CAA3B;AAEA7B,WAAW,CAACoC,MAAZ,GAAqB,mCAAuB;AAAEC,EAAAA,SAAS,EAAErC;AAAb,CAAvB,CAArB;AAEA;;;;eAGe,8BAA+DA,WAA/D,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardPreviewProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** If preview is in horizontal card. */\n  horizontal?: boolean;\n\n  /** A preview can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardPreviewStylesProps = Pick<CardPreviewProps, 'horizontal' | 'fitted'>;\nexport const cardPreviewClassName = 'ui-card__preview';\n\nconst CardPreview: React.FC<WithAsProp<CardPreviewProps>> & FluentComponentStaticProps<CardPreviewProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardPreview.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, horizontal, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardPreview.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardPreview.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardPreviewStylesProps>(CardPreview.displayName, {\n    className: cardPreviewClassName,\n    mapPropsToStyles: () => ({ horizontal, fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardPreview.displayName = 'CardPreview';\n\nCardPreview.propTypes = {\n  ...commonPropTypes.createCommon(),\n  horizontal: PropTypes.bool,\n  fitted: PropTypes.bool,\n};\n\nCardPreview.handledProps = Object.keys(CardPreview.propTypes) as any;\n\nCardPreview.create = createShorthandFactory({ Component: CardPreview });\n\n/**\n * A CardPreview is used to display data Card preview.\n */\nexport default withSafeTypeForAs<typeof CardPreview, CardPreviewProps, 'div'>(CardPreview);\n"],"file":"CardPreview.js"}