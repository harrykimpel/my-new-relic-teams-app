"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.textClassName = void 0;

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _types = require("../../types");

var _reactBindings = require("@fluentui/react-bindings");

var _reactFela = require("react-fela");

// @ts-ignore
var textClassName = 'ui-text';
exports.textClassName = textClassName;

var Text = function Text(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Text.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      align = props.align,
      atMention = props.atMention,
      children = props.children,
      className = props.className,
      color = props.color,
      content = props.content,
      design = props.design,
      disabled = props.disabled,
      error = props.error,
      important = props.important,
      size = props.size,
      styles = props.styles,
      success = props.success,
      timestamp = props.timestamp,
      truncated = props.truncated,
      temporary = props.temporary,
      variables = props.variables,
      weight = props.weight;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Text.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Text.displayName, {
    className: textClassName,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        atMention: atMention,
        color: color,
        important: important,
        timestamp: timestamp,
        truncated: truncated,
        disabled: disabled,
        error: error,
        success: success,
        temporary: temporary,
        align: align,
        weight: weight,
        size: size
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Text.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), (0, _utils.childrenExist)(children) ? children : content);
  setEnd();
  return element;
};

Text.displayName = 'Text';
Text.defaultProps = {
  as: 'span'
};
Text.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  color: true
}), {
  atMention: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['me'])]),
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  important: PropTypes.bool,
  size: customPropTypes.size,
  weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']),
  success: PropTypes.bool,
  temporary: PropTypes.bool,
  align: customPropTypes.align,
  timestamp: PropTypes.bool,
  truncated: PropTypes.bool
});
Text.handledProps = Object.keys(Text.propTypes);
Text.create = (0, _utils.createShorthandFactory)({
  Component: Text,
  mappedProp: 'content'
});
/**
 * A Text consistently styles and formats occurrences of text.
 */

var _default = (0, _types.withSafeTypeForAs)(Text);

exports.default = _default;
//# sourceMappingURL=Text.js.map
