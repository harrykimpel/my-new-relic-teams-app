{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsList","searchInput","selectedItem","selectedItems","triggerButton","Dropdown","React","createRef","e","props","value","state","changes","activeElement","context","target","type","Downshift","stateChangeTypes","blurButton","isOpen","listRef","current","search","multiple","highlightFirstItemOnOpen","items","getA11ySelectionMessage","open","newState","changeInput","shouldValueChange","inputValue","length","searchQuery","highlightedIndex","shouldMenuClose","undefined","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","getSelectedItemAsString","indexOf","onAdd","setA11ySelectionMessage","setTimeout","selectedItemsRef","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","itemIsFromKeyboard","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","filter","Boolean","setStateAndInvokeHandler","index","activeSelectedIndex","getItemProps","selected","predefinedProps","accessibilityItemProps","disabled","onClick","stopPropagation","nativeEvent","stopImmediatePropagation","rtl","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","onKeyDown","handleSelectedItemKeyDown","selectItemAtIndex","toggleMenu","accessibilityComboboxProps","getInputProps","handleInputBlur","searchInputProps","setState","focused","isFromKeyboard","handleInputKeyDown","keyboardKey","getCode","Tab","handleTabSelection","ArrowLeft","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","accessibilityInputProps","onBlur","onChange","onFocus","onInputBlur","onInputKeyDown","filteredItems","moveFocusOnTab","preventDefault","inputRef","selectionStart","inputElement","selectionEnd","removeItemFromValue","getInitialAutoControlledState","tryFocusSearchInput","accessibilityInputPropsKeyDown","keyCode","Escape","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","relatedTarget","buttonRef","filteredItemStrings","startingString","newStartingString","toLowerCase","newHighlightedIndex","setStartingString","startsWith","handlerNames","event","proposedValue","forEach","handlerName","itemToString","placeholder","isArrowUp","isArrowDown","itemsLength","offset","a11ySelectionStatus","clearA11ySelectionMessage","clearStartingString","a11yStatusCleanupTime","charKeyPressedCleanupTime","cancel","ElementType","classes","styles","variables","unhandledProps","clearable","getA11yStatusMessage","root","handleChange","downshiftStateReducer","handleStateChange","defaultView","getMenuProps","getRootProps","getToggleButtonProps","refKey","suppressRefError","innerRef","accessibilityRootPropsRest","showClearIndicator","containerRef","handleContainerClick","renderSelectedItems","renderSearchInput","renderTriggerButton","Box","create","defaultProps","className","accessibility","indicatorBehavior","tabIndex","role","overrideProps","handleClear","renderItemsList","screenReaderContainerStyles","content","triggerButtonId","defaultTriggerButtonId","triggerButtonProps","handleTriggerButtonOrListFocus","handleTriggerButtonBlur","handleTriggerButtonKeyDown","l","join","restTriggerButtonProps","Button","id","fluid","inline","noPlaceholder","DropdownSearchInput","handleSearchInputOverrides","align","position","unstable_pinned","list","renderItems","accessibilityMenuProps","handleListKeyDown","listElement","List","listProps","handleListBlur","renderItem","checkable","checkableIndicator","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","children","DropdownItem","active","hasOwnProperty","key","header","handleItemOverrides","render","push","headerMessage","loading","loadingMessage","noResultsMessage","renderSelectedItem","map","DropdownSelectedItem","isSelectedItemActive","handleSelectedItemOverrides","previousKey","nextKey","Delete","poppedItem","currentElement","pop","itemToValue","rawValue","normalizedValue","slice","filteredItemsByValue","filteredItem","modifiedState","AutoControlledComponent","commonPropTypes","createCommon","PropTypes","number","oneOf","ALIGNMENTS","bool","customPropTypes","shorthandAllowingChildren","defaultActiveSelectedIndex","defaultOpen","defaultHighlightedIndex","defaultSearchQuery","string","defaultValue","oneOfType","itemShorthand","collectionShorthand","object","func","inverted","arrayOf","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","POSITIONS","as","isValidElement"],"mappings":"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","sourcesContent":["import { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport * as keyboardKey from 'keyboard-key';\n\nimport {\n  DebounceResultFn,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport { ComponentSlotStylesInput, ComponentVariablesInput } from '@fluentui/styles';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n} from 'downshift';\nimport {\n  AutoControlledComponent,\n  RenderResultConfig,\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport List, { ListProps } from '../List/List';\nimport DropdownItem, { DropdownItemProps } from './DropdownItem';\nimport DropdownSelectedItem, { DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport DropdownSearchInput, { DropdownSearchInputProps } from './DropdownSearchInput';\nimport Button, { ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport Box, { BoxProps } from '../Box/Box';\nimport Portal from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  getPopperPropsFromShorthand,\n} from '../../utils/positioner';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps, DropdownState>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n  };\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n}\n\nexport interface DropdownState {\n  a11ySelectionStatus: string;\n  activeSelectedIndex: number;\n  filteredItems: ShorthandCollection<DropdownItemProps>;\n  filteredItemStrings: string[];\n  focused: boolean;\n  startingString: string;\n  open: boolean;\n  searchQuery: string;\n  highlightedIndex: number;\n  value: ShorthandCollection<DropdownItemProps>;\n  itemIsFromKeyboard: boolean;\n  isFromKeyboard: boolean;\n}\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nclass Dropdown extends AutoControlledComponent<WithAsProp<DropdownProps>, DropdownState> {\n  buttonRef = React.createRef<HTMLElement>();\n  inputRef = React.createRef<HTMLInputElement>();\n  listRef = React.createRef<HTMLElement>();\n  selectedItemsRef = React.createRef<HTMLDivElement>();\n  containerRef = React.createRef<HTMLDivElement>();\n\n  static displayName = 'Dropdown';\n\n  static deprecated_className = dropdownClassName;\n\n  static a11yStatusCleanupTime = 500;\n  static charKeyPressedCleanupTime = 500;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    activeSelectedIndex: PropTypes.number,\n    align: PropTypes.oneOf(ALIGNMENTS),\n    checkable: PropTypes.bool,\n    checkableIndicator: customPropTypes.shorthandAllowingChildren,\n    clearable: PropTypes.bool,\n    clearIndicator: customPropTypes.shorthandAllowingChildren,\n    defaultActiveSelectedIndex: PropTypes.number,\n    defaultOpen: PropTypes.bool,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSearchQuery: PropTypes.string,\n    defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    getA11ySelectionMessage: PropTypes.object,\n    getA11yStatusMessage: PropTypes.func,\n    highlightFirstItemOnOpen: PropTypes.bool,\n    highlightedIndex: PropTypes.number,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    itemToString: PropTypes.func,\n    itemToValue: PropTypes.func,\n    headerMessage: customPropTypes.itemShorthand,\n    list: customPropTypes.itemShorthand,\n    loading: PropTypes.bool,\n    loadingMessage: customPropTypes.itemShorthand,\n    moveFocusOnTab: PropTypes.bool,\n    multiple: PropTypes.bool,\n    noResultsMessage: customPropTypes.itemShorthand,\n    offset: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n    ]),\n    onOpenChange: PropTypes.func,\n    onSearchQueryChange: PropTypes.func,\n    onChange: PropTypes.func,\n    onActiveSelectedIndexChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    open: PropTypes.bool,\n    placeholder: PropTypes.string,\n    position: PropTypes.oneOf(POSITIONS),\n    renderItem: PropTypes.func,\n    renderSelectedItem: PropTypes.func,\n    search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    searchQuery: PropTypes.string,\n    searchInput: customPropTypes.itemShorthand,\n    toggleIndicator: customPropTypes.shorthandAllowingChildren,\n    triggerButton: customPropTypes.itemShorthand,\n    unstable_pinned: PropTypes.bool,\n    value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  };\n\n  static defaultProps = {\n    align: 'start',\n    as: 'div',\n    clearIndicator: {},\n    itemToString: item => {\n      if (!item || React.isValidElement(item)) {\n        return '';\n      }\n\n      // targets DropdownItem shorthand objects\n      return (item as any).header || String(item);\n    },\n    itemToValue: item => {\n      if (!item || React.isValidElement(item)) {\n        return '';\n      }\n\n      // targets DropdownItem shorthand objects\n      return (item as any).header || String(item);\n    },\n    list: {},\n    position: 'below',\n    toggleIndicator: {},\n    triggerButton: {},\n  };\n\n  static autoControlledProps = ['activeSelectedIndex', 'highlightedIndex', 'open', 'searchQuery', 'value'];\n\n  static Item = DropdownItem;\n  static SearchInput = DropdownSearchInput;\n  static SelectedItem = DropdownSelectedItem;\n\n  componentWillUnmount() {\n    this.clearStartingString.cancel();\n    this.clearA11ySelectionMessage.cancel();\n  }\n\n  getInitialAutoControlledState({ multiple, search }: DropdownProps): DropdownState {\n    return {\n      a11ySelectionStatus: '',\n      activeSelectedIndex: multiple ? null : undefined,\n      filteredItems: undefined,\n      filteredItemStrings: undefined,\n      focused: false,\n      startingString: search ? undefined : '',\n      open: false,\n      highlightedIndex: this.props.highlightFirstItemOnOpen ? 0 : null,\n      searchQuery: search ? '' : undefined,\n      value: [],\n      itemIsFromKeyboard: false,\n      isFromKeyboard: false,\n    };\n  }\n\n  defaultTriggerButtonId = _.uniqueId('dropdown-trigger-button-');\n\n  /**\n   * Used to compute the filtered items (by value and search query) and, if needed,\n   * their string equivalents, in order to be used throughout the component.\n   */\n  static getAutoControlledStateFromProps(props: DropdownProps, state: DropdownState) {\n    const { items, itemToString, itemToValue, multiple, search } = props;\n    const { searchQuery, value: rawValue } = state;\n\n    // `normalizedValue` should be normilized always as it can be received from props\n    const normalizedValue = _.isArray(rawValue) ? rawValue : [rawValue];\n    const value = multiple ? normalizedValue : normalizedValue.slice(0, 1);\n\n    const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n    const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n    const modifiedState: Partial<DropdownState> = {\n      filteredItems: filteredItemsByValue,\n      filteredItemStrings,\n      value,\n    };\n\n    if (search) {\n      if (_.isFunction(search)) {\n        modifiedState.filteredItems = search(filteredItemsByValue, searchQuery);\n      } else {\n        modifiedState.filteredItems = filteredItemsByValue.filter(\n          item =>\n            itemToString(item)\n              .toLowerCase()\n              .indexOf(searchQuery.toLowerCase()) !== -1,\n        );\n      }\n    }\n\n    return modifiedState;\n  }\n\n  handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(this.props, 'onChange', e, { ...this.props, value: this.state.value });\n  };\n\n  renderComponent({ ElementType, classes, styles, variables, unhandledProps, rtl }: RenderResultConfig<DropdownProps>) {\n    const {\n      clearable,\n      clearIndicator,\n      disabled,\n      search,\n      multiple,\n      getA11yStatusMessage,\n      itemToString,\n      toggleIndicator,\n    } = this.props;\n    const { highlightedIndex, open, searchQuery, value } = this.state;\n\n    return (\n      <ElementType className={classes.root} onChange={this.handleChange} {...unhandledProps}>\n        <Downshift\n          isOpen={open}\n          inputValue={search ? searchQuery : null}\n          stateReducer={this.downshiftStateReducer}\n          itemToString={itemToString}\n          // downshift does not work with arrays as selectedItem.\n          selectedItem={multiple || !value.length ? null : value[0]}\n          getA11yStatusMessage={getA11yStatusMessage}\n          highlightedIndex={highlightedIndex}\n          onStateChange={this.handleStateChange}\n          labelId={this.props['aria-labelledby']}\n          environment={this.context.target?.defaultView}\n          inputId={this.props.searchInput && this.props.searchInput['id'] ? this.props.searchInput['id'] : undefined}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            getMenuProps,\n            getRootProps,\n            getToggleButtonProps,\n            toggleMenu,\n            highlightedIndex,\n            selectItemAtIndex,\n          }) => {\n            const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n              { refKey: 'innerRef' },\n              { suppressRefError: true },\n            );\n            const showClearIndicator = clearable && value.length > 0;\n\n            return (\n              <Ref innerRef={innerRef}>\n                <div\n                  ref={this.containerRef}\n                  className={cx(dropdownSlotClassNames.container, classes.container)}\n                  onClick={search && !open ? this.handleContainerClick : undefined}\n                >\n                  <div\n                    ref={this.selectedItemsRef}\n                    className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}\n                  >\n                    {multiple && this.renderSelectedItems(variables, rtl)}\n                    {search\n                      ? this.renderSearchInput(\n                          accessibilityRootPropsRest,\n                          rtl,\n                          highlightedIndex,\n                          getInputProps,\n                          selectItemAtIndex,\n                          toggleMenu,\n                          variables,\n                        )\n                      : this.renderTriggerButton(styles, rtl, getToggleButtonProps)}\n                  </div>\n                  {showClearIndicator\n                    ? Box.create(clearIndicator, {\n                        defaultProps: () => ({\n                          className: dropdownSlotClassNames.clearIndicator,\n                          styles: styles.clearIndicator,\n                          accessibility: indicatorBehavior,\n                          ...(!search && { tabIndex: 0, role: 'button' }),\n                        }),\n                        overrideProps: (predefinedProps: BoxProps) => ({\n                          onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                            _.invoke(predefinedProps, 'onClick', e);\n                            this.handleClear(e);\n                          },\n                        }),\n                      })\n                    : Box.create(toggleIndicator, {\n                        defaultProps: () => ({\n                          className: dropdownSlotClassNames.toggleIndicator,\n                          styles: styles.toggleIndicator,\n                          accessibility: indicatorBehavior,\n                        }),\n                        overrideProps: (predefinedProps: BoxProps) => ({\n                          onClick: e => {\n                            if (!disabled) {\n                              getToggleButtonProps({ disabled }).onClick(e);\n                            }\n\n                            _.invoke(predefinedProps, 'onClick', e);\n                          },\n                        }),\n                      })}\n                  {this.renderItemsList(\n                    styles,\n                    variables,\n                    highlightedIndex,\n                    toggleMenu,\n                    selectItemAtIndex,\n                    getMenuProps,\n                    getItemProps,\n                    getInputProps,\n                    rtl,\n                  )}\n                </div>\n              </Ref>\n            );\n          }}\n        </Downshift>\n        <Portal open={!!this.props.getA11ySelectionMessage}>\n          <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n            {this.state.a11ySelectionStatus}\n          </div>\n        </Portal>\n      </ElementType>\n    );\n  }\n\n  renderTriggerButton(\n    styles: ComponentSlotStylesInput,\n    rtl: boolean,\n    getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any,\n  ): JSX.Element {\n    const { triggerButton, disabled } = this.props;\n    const { value } = this.state;\n\n    const content = this.getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || this.defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: this.handleTriggerButtonOrListFocus,\n      onBlur: this.handleTriggerButtonBlur,\n      onKeyDown: e => {\n        this.handleTriggerButtonKeyDown(e, rtl);\n      },\n      'aria-label': undefined,\n      'aria-labelledby': [this.props['aria-labelledby'], triggerButtonId].filter(l => !!l).join(' '),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={this.buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: styles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  }\n\n  renderSearchInput(\n    accessibilityComboboxProps: Object,\n    rtl: boolean,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element {\n    const { inline, searchInput, multiple, placeholder, disabled } = this.props;\n    const { searchQuery, value } = this.state;\n\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        inputRef: this.inputRef,\n        disabled,\n      }),\n      overrideProps: this.handleSearchInputOverrides(\n        highlightedIndex,\n        rtl,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  }\n\n  renderItemsList(\n    styles: ComponentSlotStylesInput,\n    variables: ComponentVariablesInput,\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    rtl: boolean,\n  ) {\n    const { align, offset, position, search, unstable_pinned, list } = this.props;\n    const { open } = this.state;\n    const items = open ? this.renderItems(styles, variables, getItemProps, highlightedIndex) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        this.handleListKeyDown(\n          e,\n          highlightedIndex,\n          accessibilityInputProps['onKeyDown'],\n          toggleMenu,\n          selectItemAtIndex,\n        );\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(this.listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          align={align}\n          position={position}\n          offset={offset}\n          rtl={rtl}\n          enabled={open}\n          targetRef={this.containerRef}\n          unstable_pinned={unstable_pinned}\n          positioningDependencies={[items.length]}\n          {...getPopperPropsFromShorthand(list)}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: styles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                this.handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                this.handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  }\n\n  renderItems(\n    styles: ComponentSlotStylesInput,\n    variables: ComponentVariablesInput,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    highlightedIndex: number,\n  ) {\n    const { renderItem, checkable, checkableIndicator } = this.props;\n    const { filteredItems, value } = this.state;\n    const footerItem = this.renderItemsListFooter(styles);\n    const headerItem = this.renderItemsListHeader(styles);\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: this.state.itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: this.handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  }\n\n  renderItemsListHeader(styles: ComponentSlotStylesInput) {\n    const { headerMessage } = this.props;\n\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: styles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  }\n\n  renderItemsListFooter(styles: ComponentSlotStylesInput) {\n    const { loading, loadingMessage, noResultsMessage, items } = this.props;\n\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: styles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (items && items.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: styles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  }\n\n  renderSelectedItems(variables, rtl: boolean) {\n    const { renderSelectedItem } = this.props;\n    const { value } = this.state;\n\n    if (value.length === 0) {\n      return null;\n    }\n\n    return value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: this.isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: this.handleSelectedItemOverrides(item, rtl),\n        render: renderSelectedItem,\n      }),\n    );\n  }\n\n  downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = this.context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === this.listRef.current) {\n          return {}; // won't change state in this case.\n        }\n      default:\n        return changes;\n    }\n  };\n\n  handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { search, multiple, highlightFirstItemOnOpen, items, getA11ySelectionMessage } = this.props;\n    const { value, open } = this.state;\n    const { type } = changes;\n    const newState = {} as DropdownState;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n        newState.searchQuery = changes.inputValue;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = this.getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            this.setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          setTimeout(() => (this.selectedItemsRef.current.scrollTop = this.selectedItemsRef.current.scrollHeight), 0);\n        }\n\n        this.tryFocusTriggerButton();\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search) {\n          newState.searchQuery = '';\n\n          if (!multiple) {\n            newState.value = [];\n          }\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              this.listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            this.listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          this.tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.value !== undefined && 'onChange',\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    this.setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  isSelectedItemActive = (index: number): boolean => {\n    return index === this.state.activeSelectedIndex;\n  };\n\n  handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!this.props.multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>, rtl: boolean) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: this.state.value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps, rtl);\n    },\n  });\n\n  handleSearchInputOverrides = (\n    highlightedIndex: number,\n    rtl: boolean,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n    const { disabled } = this.props;\n\n    const handleInputKeyDown = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        switch (keyboardKey.getCode(e)) {\n          case keyboardKey.Tab:\n            this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            if (!rtl) {\n              this.trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            if (rtl) {\n              this.trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            this.tryRemoveItemFromValue();\n            break;\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: e => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n          },\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n      onFocus: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          this.setState({ focused: true, isFromKeyboard: isFromKeyboard() });\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    const { open, filteredItems } = this.state;\n    const { moveFocusOnTab, multiple, items } = this.props;\n\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  trySetLastSelectedItemAsActive = () => {\n    const { multiple } = this.props;\n    const { value } = this.state;\n\n    if (!multiple || (this.inputRef.current && this.inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (this.state.activeSelectedIndex === value.length - 1) {\n        this.setState({ activeSelectedIndex: null }, () => {\n          this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: value.length - 1,\n          });\n        });\n      } else {\n        this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  tryRemoveItemFromValue = () => {\n    const { multiple } = this.props;\n    const { searchQuery, value } = this.state;\n    const inputElement = this.inputRef.current;\n\n    if (\n      multiple &&\n      (searchQuery === '' || (inputElement.selectionStart === 0 && inputElement.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      this.removeItemFromValue();\n    }\n  };\n\n  handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    const { activeSelectedIndex, highlightedIndex, open, searchQuery, value } = this.getInitialAutoControlledState(\n      this.props,\n    );\n\n    this.setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex,\n      highlightedIndex,\n      open,\n      searchQuery,\n      value,\n    });\n\n    this.tryFocusSearchInput();\n    this.tryFocusTriggerButton();\n  };\n\n  handleContainerClick = () => {\n    this.tryFocusSearchInput();\n  };\n\n  handleTriggerButtonKeyDown = (e: React.SyntheticEvent, rtl: boolean) => {\n    switch (keyboardKey.getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!rtl) {\n          this.trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (rtl) {\n          this.trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleListKeyDown = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = keyboardKey.getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        this.tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          this.setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  handleSelectedItemKeyDown(\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n    rtl: boolean,\n  ) {\n    const { activeSelectedIndex, value } = this.state;\n\n    const previousKey = rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (keyboardKey.getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            this.setState({ activeSelectedIndex: activeSelectedIndex + 1 });\n          } else {\n            this.setState({ activeSelectedIndex: null });\n            if (this.props.search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              this.inputRef.current.focus();\n            } else {\n              this.buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  }\n\n  handleTriggerButtonOrListFocus = () => {\n    this.setState({ focused: true, isFromKeyboard: isFromKeyboard() });\n  };\n\n  handleTriggerButtonBlur = e => {\n    if (this.listRef.current !== e.relatedTarget) {\n      this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n    }\n  };\n\n  handleListBlur = e => {\n    if (this.buttonRef.current !== e.relatedTarget) {\n      this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const { highlightedIndex, filteredItemStrings, startingString } = this.state;\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    this.setStartingString(newStartingString);\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      this.setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  handleSelectedItemRemove(\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) {\n    this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    this.removeItemFromValue(item);\n    this.tryFocusSearchInput();\n    this.tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  }\n\n  removeItemFromValue(item?: ShorthandValue<DropdownItemProps>) {\n    const { getA11ySelectionMessage } = this.props;\n    let { value } = this.state;\n    let poppedItem = item;\n\n    if (poppedItem) {\n      value = value.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = value.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      this.setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    this.setStateAndInvokeHandler(['onChange'], null, { value });\n  }\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: Partial<DropdownState>,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? this.state.value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = this.props.multiple ? proposedValue : proposedValue[0] || null;\n\n    this.setState(newState as DropdownState);\n    handlerNames.forEach(handlerName => {\n      _.invoke(this.props, handlerName, event, { ...this.props, ...newState, value: newValue });\n    });\n  };\n\n  tryFocusTriggerButton = () => {\n    if (!this.props.search && this.buttonRef.current) {\n      this.buttonRef.current.focus();\n    }\n  };\n\n  tryFocusSearchInput = () => {\n    if (this.props.search && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    const { itemToString, multiple, placeholder, search } = this.props;\n\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  getHighlightedIndexOnArrowKeyOpen = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>): number => {\n    const { filteredItems, highlightedIndex, value } = this.state;\n    const { highlightFirstItemOnOpen, items, multiple, search } = this.props;\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    this.setState({ a11ySelectionStatus });\n    this.clearA11ySelectionMessage();\n  };\n\n  setStartingString = (startingString: string): void => {\n    this.setState({ startingString });\n    this.clearStartingString();\n  };\n\n  clearA11ySelectionMessage: DebounceResultFn<() => void> = _.debounce(() => {\n    this.setState({ a11ySelectionStatus: '' });\n  }, Dropdown.a11yStatusCleanupTime);\n\n  clearStartingString: DebounceResultFn<() => void> = _.debounce(() => {\n    this.setState({ startingString: '' });\n  }, Dropdown.charKeyPressedCleanupTime);\n}\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\nexport default withSafeTypeForAs<typeof Dropdown, DropdownProps>(Dropdown);\n"],"file":"Dropdown.js"}