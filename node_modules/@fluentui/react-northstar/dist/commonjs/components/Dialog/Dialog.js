"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.dialogSlotClassNames = exports.dialogClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactComponentNestingRegistry = require("@fluentui/react-component-nesting-registry");

var _reactComponentEventListener = require("@fluentui/react-component-event-listener");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _utils = require("./utils");

var _utils2 = require("../../utils");

var _types = require("../../types");

var _Button = _interopRequireDefault(require("../Button/Button"));

var _ButtonGroup = _interopRequireDefault(require("../Button/ButtonGroup"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var _Header = _interopRequireDefault(require("../Header/Header"));

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _Flex = _interopRequireDefault(require("../Flex/Flex"));

var _DialogFooter = _interopRequireDefault(require("./DialogFooter"));

var dialogsCounterAttribute = 'fluent-dialogs-count';
var dialogClassName = 'ui-dialog';
exports.dialogClassName = dialogClassName;
var dialogSlotClassNames = {
  header: "".concat(dialogClassName, "__header"),
  headerAction: "".concat(dialogClassName, "__headerAction"),
  content: "".concat(dialogClassName, "__content"),
  overlay: "".concat(dialogClassName, "__overlay"),
  footer: "".concat(dialogClassName, "__footer")
};
exports.dialogSlotClassNames = dialogSlotClassNames;

var Dialog =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Dialog, _AutoControlledCompon);

  function Dialog() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Dialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      closeAndFocusTrigger: function closeAndFocusTrigger(e) {
        _this.handleDialogCancel(e);

        e.stopPropagation();
        (0, _invoke2.default)(_this.triggerRef, 'current.focus');
      },
      close: function close(e) {
        return _this.handleDialogCancel(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "contentRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "overlayRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "triggerRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDialogCancel", function (e) {
      (0, _invoke2.default)(_this.props, 'onCancel', e, Object.assign({}, _this.props, {
        open: false
      }));

      _this.setState({
        open: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDialogConfirm", function (e) {
      (0, _invoke2.default)(_this.props, 'onConfirm', e, Object.assign({}, _this.props, {
        open: false
      }));

      _this.setState({
        open: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDialogOpen", function (e) {
      (0, _invoke2.default)(_this.props, 'onOpen', e, Object.assign({}, _this.props, {
        open: true
      }));

      _this.setState({
        open: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCancelButtonOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);

          _this.handleDialogCancel(e);
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleConfirmButtonOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);

          _this.handleDialogConfirm(e);
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOverlayClick", function (e) {
      // Dialog has different conditions to close than Popup, so we don't need to iterate across all
      // refs
      var isInsideContentClick = (0, _utils2.doesNodeContainClick)(_this.contentRef.current, e, _this.context.target);
      var isInsideOverlayClick = (0, _utils2.doesNodeContainClick)(_this.overlayRef.current, e, _this.context.target);
      var shouldClose = !isInsideContentClick && isInsideOverlayClick;

      if (shouldClose) {
        _this.handleDialogCancel(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDocumentKeydown", function (getRefs) {
      return function (e) {
        // if focus was lost from Dialog, for e.g. when click on Dialog's content
        // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus
        var lastOverlayRef = getRefs().pop();
        var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === _this.overlayRef.current;

        if (keyboardKey.getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {
          _this.handleDialogCancel(e);

          (0, _invoke2.default)(_this.triggerRef, 'current.focus');
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(Dialog, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        open: false
      };
    }
  }, {
    key: "lockBodyScroll",
    value: function lockBodyScroll() {
      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;
      this.context.target.body.setAttribute(dialogsCounterAttribute, "".concat(openDialogs)); // Avoid to block scroll in nested dialogs

      if (openDialogs === 1) {
        (0, _utils.disableBodyScroll)(this.context.target.body);
      }
    }
  }, {
    key: "unlockBodyScroll",
    value: function unlockBodyScroll() {
      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;
      this.context.target.body.setAttribute(dialogsCounterAttribute, "".concat(openDialogs)); // Only enables scroll if all dialogs are closed

      if (openDialogs === 0) {
        (0, _utils.enableBodyScroll)(this.context.target.body);
        this.context.target.body.removeAttribute(dialogsCounterAttribute);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      // Open -> Closed
      if (prevState.open && !this.state.open) {
        this.unlockBodyScroll();
      } // Closed -> Open


      if (!prevState.open && this.state.open) {
        this.lockBodyScroll();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.state.open) {
        this.lockBodyScroll();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.state.open) {
        this.unlockBodyScroll();
      }
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var accessibility = _ref.accessibility,
          classes = _ref.classes,
          ElementType = _ref.ElementType,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps,
          rtl = _ref.rtl;
      var _this$props = this.props,
          actions = _this$props.actions,
          cancelButton = _this$props.cancelButton,
          closeOnOutsideClick = _this$props.closeOnOutsideClick,
          confirmButton = _this$props.confirmButton,
          content = _this$props.content,
          header = _this$props.header,
          headerAction = _this$props.headerAction,
          overlay = _this$props.overlay,
          trapFocus = _this$props.trapFocus,
          trigger = _this$props.trigger,
          footer = _this$props.footer;
      var open = this.state.open;
      var cancelElement = (0, _utils2.createShorthand)(_Button.default, cancelButton, {
        overrideProps: this.handleCancelButtonOverrides
      });
      var confirmElement = (0, _utils2.createShorthand)(_Button.default, confirmButton, {
        defaultProps: function defaultProps() {
          return {
            primary: true
          };
        },
        overrideProps: this.handleConfirmButtonOverrides
      });

      var dialogActions = (cancelElement || confirmElement) && _ButtonGroup.default.create(actions, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.actions
          };
        },
        overrideProps: {
          content: React.createElement(_Flex.default, {
            gap: "gap.smaller"
          }, cancelElement, confirmElement)
        }
      });

      var dialogContent = React.createElement(_reactComponentRef.Ref, {
        innerRef: this.contentRef
      }, React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.popup, unhandledProps, (0, _utils2.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.popup, unhandledProps)), _Header.default.create(header, {
        defaultProps: function defaultProps() {
          return Object.assign({
            as: 'h2',
            className: dialogSlotClassNames.header,
            styles: styles.header
          }, accessibility.attributes.header);
        }
      }), (0, _utils2.createShorthand)(_Button.default, headerAction, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: dialogSlotClassNames.headerAction,
            styles: styles.headerAction,
            text: true,
            iconOnly: true
          }, accessibility.attributes.headerAction);
        }
      }), _Box.default.create(content, {
        defaultProps: function defaultProps() {
          return Object.assign({
            styles: styles.content,
            className: dialogSlotClassNames.content
          }, accessibility.attributes.content);
        }
      }), _DialogFooter.default.create(footer, {
        overrideProps: {
          content: dialogActions,
          className: dialogSlotClassNames.footer,
          styles: styles.footer
        }
      })));
      var triggerAccessibility = {
        attributes: accessibility.attributes.trigger,
        keyHandlers: accessibility.keyHandlers.trigger
      };
      return React.createElement(_Portal.default, {
        onTriggerClick: this.handleDialogOpen,
        open: open,
        trapFocus: trapFocus,
        trigger: trigger,
        triggerAccessibility: triggerAccessibility,
        triggerRef: this.triggerRef
      }, React.createElement(_reactComponentNestingRegistry.Unstable_NestingAuto, null, function (getRefs, nestingRef) {
        return React.createElement(React.Fragment, null, React.createElement(_reactComponentRef.Ref, {
          innerRef: function innerRef(contentNode) {
            _this2.overlayRef.current = contentNode;
            nestingRef.current = contentNode;
          }
        }, _Box.default.create(overlay, {
          defaultProps: function defaultProps() {
            return {
              className: dialogSlotClassNames.overlay,
              styles: styles.overlay
            };
          },
          overrideProps: {
            content: dialogContent
          }
        })), closeOnOutsideClick && React.createElement(_reactComponentEventListener.EventListener, {
          listener: _this2.handleOverlayClick,
          target: _this2.context.target,
          type: "click",
          capture: true
        }), React.createElement(_reactComponentEventListener.EventListener, {
          listener: _this2.handleDocumentKeydown(getRefs),
          target: _this2.context.target,
          type: "keydown",
          capture: true
        }));
      }));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(props, state) {
      return {
        contentId: (0, _utils2.getOrGenerateIdFromShorthand)('dialog-content-', props.content, state.contentId),
        headerId: (0, _utils2.getOrGenerateIdFromShorthand)('dialog-header-', props.header, state.headerId)
      };
    }
  }]);
  return Dialog;
}(_utils2.AutoControlledComponent);
/**
 * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.
 * Dialogs are purposefully interruptive, so they should be used sparingly.
 *
 * @accessibility
 * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.
 * @accessibilityIssues
 * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)
 * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)
 * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)
 * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)
 */


(0, _defineProperty2.default)(Dialog, "displayName", 'Dialog');
(0, _defineProperty2.default)(Dialog, "deprecated_className", dialogClassName);
(0, _defineProperty2.default)(Dialog, "propTypes", Object.assign({}, _utils2.commonPropTypes.createCommon({
  children: false,
  content: 'shorthand'
}), {
  actions: customPropTypes.itemShorthand,
  backdrop: PropTypes.bool,
  headerAction: customPropTypes.itemShorthand,
  cancelButton: customPropTypes.itemShorthand,
  closeOnOutsideClick: PropTypes.bool,
  confirmButton: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  header: customPropTypes.itemShorthand,
  onCancel: PropTypes.func,
  onConfirm: PropTypes.func,
  onOpen: PropTypes.func,
  open: PropTypes.bool,
  overlay: customPropTypes.itemShorthand,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  trigger: PropTypes.any
}));
(0, _defineProperty2.default)(Dialog, "defaultProps", {
  accessibility: _accessibility.dialogBehavior,
  actions: {},
  backdrop: true,
  closeOnOutsideClick: true,
  overlay: {},
  footer: {},
  trapFocus: true
});
(0, _defineProperty2.default)(Dialog, "autoControlledProps", ['open']);
(0, _defineProperty2.default)(Dialog, "Footer", _DialogFooter.default);

var _default = (0, _types.withSafeTypeForAs)(Dialog);

exports.default = _default;
//# sourceMappingURL=Dialog.js.map
