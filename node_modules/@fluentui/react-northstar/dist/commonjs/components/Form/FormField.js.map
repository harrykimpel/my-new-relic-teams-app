{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldClassName","FormField","type","props","ElementType","classes","accessibility","styles","unhandledProps","children","control","id","label","message","name","required","labelElement","Text","create","defaultProps","as","htmlFor","messageElement","controlElement","Box","content","shouldControlAppearFirst","root","attributes","UIComponent","commonPropTypes","createCommon","customPropTypes","itemShorthand","PropTypes","string","inline","bool","Input","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Text, { TextProps } from '../Text/Text';\nimport Input from '../Input/Input';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldClassName = 'ui-form__field';\n\nclass FormField extends UIComponent<WithAsProp<FormFieldProps>, any> {\n  static displayName = 'FormField';\n\n  static deprecated_className = formFieldClassName;\n\n  static create: ShorthandFactory<FormFieldProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    control: customPropTypes.itemShorthand,\n    id: PropTypes.string,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    message: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.string,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    control: { as: Input },\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, unhandledProps }): React.ReactNode {\n    const { children, control, id, label, message, name, required, type } = this.props;\n\n    const labelElement = Text.create(label, {\n      defaultProps: () => ({\n        as: 'label',\n        htmlFor: id,\n        styles: styles.label,\n      }),\n    });\n\n    const messageElement = Text.create(message, {\n      defaultProps: () => ({\n        styles: styles.message,\n      }),\n    });\n\n    const controlElement = Box.create(control || {}, {\n      defaultProps: () => ({ required, id, name, type, styles: styles.control }),\n    });\n\n    const content = (\n      <>\n        {this.shouldControlAppearFirst() && controlElement}\n        {labelElement}\n        {!this.shouldControlAppearFirst() && controlElement}\n        {messageElement}\n      </>\n    );\n\n    return (\n      <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n\n  shouldControlAppearFirst = () => {\n    const { type } = this.props;\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n}\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport default withSafeTypeForAs<typeof FormField, FormFieldProps>(FormField);\n"],"file":"FormField.js"}