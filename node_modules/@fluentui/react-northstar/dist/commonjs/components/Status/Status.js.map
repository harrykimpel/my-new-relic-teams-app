{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusClassName","Status","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","className","color","icon","size","state","design","styles","variables","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","resolvedStyles","getA11Props","accessibility","debugName","ElementType","unhandledProps","handledProps","iconElement","Box","create","defaultProps","as","element","root","propTypes","commonPropTypes","createCommon","children","content","PropTypes","string","customPropTypes","shorthandAllowingChildren","oneOf","Object","keys","statusBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\nconst Status: React.FC<WithAsProp<StatusProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport default withSafeTypeForAs<typeof Status, StatusProps, 'span'>(Status);\n"],"file":"Status.js"}