{"version":3,"sources":["components/Debug/FiberNavigator.ts"],"names":["WorkTag","isDOMNode","e","tagName","nodeType","Node","ELEMENT_NODE","FiberNavigator","node","memoizedState","current","fluentUIDebug","next","findDebugHookState","fiberNav","instance","condition","move","fiber","fromFiber","__fiber","find","owner","parent","isClassComponent","isFunctionComponent","type","displayName","name","isHostComponent","stateNode","constructor","return","_debugOwner","child","elementType","prototype","isReactComponent","isDOMComponent","render","setState","elm","k","startsWith","fiberNavigator","Object","defineProperty","value","enumerable","writable","configurable","domNode","domNodeToReactFiber"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\n// ========================================================\n// react/packages/shared/ReactTypes.js\n// ========================================================\n\ntype ReactEventResponder<E, C> = {\n  $$typeof: Symbol | number;\n  displayName: string;\n  targetEventTypes: null | string[];\n  rootEventTypes: null | string[];\n  getInitialState: null | ((props: Object) => Object);\n  onEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onRootEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onMount: null | ((context: C, props: Object, state: Object) => void);\n  onUnmount: null | ((context: C, props: Object, state: Object) => void);\n};\n\ntype ReactEventResponderInstance<E, C> = {\n  fiber: Object;\n  props: Object;\n  responder: ReactEventResponder<E, C>;\n  rootEventTypes: null | Set<string>;\n  state: Object;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiberHooks.js\n// ========================================================\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useResponder';\n\ntype ReactProviderType<T> = {\n  $$typeof: Symbol | number;\n  _context: ReactContext<T>;\n};\n\ntype ReactContext<T> = {\n  $$typeof: Symbol | number;\n  Consumer: ReactContext<T>;\n  Provider: ReactProviderType<T>;\n\n  _calculateChangedBits: ((a: T, b: T) => number) | null;\n\n  _currentValue: T;\n  _currentValue2: T;\n  _threadCount: number;\n\n  // DEV only\n  _currentRenderer?: Object | null;\n  _currentRenderer2?: Object | null;\n};\n\ntype ContextDependency<T> = {\n  context: ReactContext<T>;\n  observedBits: number;\n  next: ContextDependency<any> | null;\n};\n\nenum WorkTag {\n  FunctionComponent = 0,\n  ClassComponent = 1,\n  IndeterminateComponent = 2, // Before we know whether it is function or class\n  HostRoot = 3, // Root of a host tree. Could be nested inside another node.\n  HostPortal = 4, // A subtree. Could be an entry point to a different renderer.\n  HostComponent = 5,\n  HostText = 6,\n  Fragment = 7,\n  Mode = 8,\n  ContextConsumer = 9,\n  ContextProvider = 10,\n  ForwardRef = 11,\n  Profiler = 12,\n  SuspenseComponent = 13,\n  MemoComponent = 14,\n  SimpleMemoComponent = 15,\n  LazyComponent = 16,\n  IncompleteClassComponent = 17,\n  DehydratedFragment = 18,\n  SuspenseListComponent = 19,\n  FundamentalComponent = 20,\n  ScopeComponent = 21,\n}\n\ntype Source = {\n  fileName: string;\n  lineNumber: number;\n};\n\ntype ExpirationTime = number;\n\ntype Dependencies = {\n  expirationTime: ExpirationTime;\n  firstContext: ContextDependency<any> | null;\n  responders: Map<ReactEventResponder<any, any>, ReactEventResponderInstance<any, any>> | null;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\ntype Fiber = {\n  // These first fields are conceptually members of an Instance. This used to\n  // be split into a separate type and intersected with the other Fiber fields,\n  // but until Flow fixes its intersection bugs, we've merged them into a\n  // single type.\n\n  // An Instance is shared between all versions of a component. We can easily\n  // break this out into a separate object to avoid copying so much to the\n  // alternate versions of the tree. We put this on a single object for now to\n  // minimize the number of objects created during the initial render.\n\n  // Tag identifying the type of fiber.\n  tag: WorkTag;\n\n  // Unique identifier of this child.\n  key: null | string;\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any;\n\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n\n  // The local state associated with this fiber.\n  stateNode: any;\n\n  // Conceptual aliases\n  // parent : Instance -> return The parent happens to be the same as the\n  // return fiber since we've merged the fiber and instance.\n\n  // Remaining fields belong to Fiber\n\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  return: Fiber | null;\n\n  // Singly Linked List Tree Structure.\n  child: Fiber | null;\n  sibling: Fiber | null;\n  index: number;\n\n  // The ref last used to attach this node.\n  // I'll avoid adding an owner field for prod and model that as functions.\n  ref: React.Ref<any>;\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  pendingProps: any; // This type will be more specific once we overload the tag.\n  memoizedProps: any; // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // updateQueue: UpdateQueue<any> | null,\n\n  // The state used to create the output\n  memoizedState: any;\n\n  // Dependencies (contexts, events) for this fiber, if it has any\n  dependencies: Dependencies | null;\n\n  // // Bitfield that describes properties about the fiber and its subtree. E.g.\n  // // the ConcurrentMode flag indicates whether the subtree should be async-by-\n  // // default. When a fiber is created, it inherits the mode of its\n  // // parent. Additional flags can be set at creation time, but after that the\n  // // value should remain unchanged throughout the fiber's lifetime, particularly\n  // // before its child fibers are created.\n  // mode: TypeOfMode\n  //\n  // // Effect\n  // effectTag: SideEffectTag\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null;\n\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  firstEffect: Fiber | null;\n  lastEffect: Fiber | null;\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime;\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime;\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  alternate: Fiber | null;\n\n  // Time spent rendering this Fiber and its descendants for the current update.\n  // This tells us how well the tree makes use of sCU for memoization.\n  // It is reset to 0 each time we render and only updated when we don't bailout.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualDuration?: number;\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number;\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number;\n\n  // Sum of base times for all descendants of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number;\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number;\n  _debugSource?: Source | null;\n  _debugOwner?: Fiber | null;\n  _debugIsCurrentlyTiming?: boolean;\n  _debugNeedsRemount?: boolean;\n\n  // Used to verify that the order of hooks does not change between renders.\n  _debugHookTypes?: HookType[] | null;\n};\n\nconst isDOMNode = e => e && typeof e.tagName === 'string' && e.nodeType === Node.ELEMENT_NODE;\n\nclass FiberNavigator {\n  __fiber: Fiber;\n\n  static domNodeToReactFiber = (elm: HTMLElement): Fiber => {\n    if (!elm) return null;\n\n    for (const k in elm) {\n      if (k.startsWith('__reactInternalInstance$')) {\n        return elm[k];\n      }\n    }\n\n    return null;\n  };\n\n  // TODO: Fibers can become stale.\n  //      The only current fiber is the one found on the DOM node.\n  //      There is no way to start at a React Component fiber, go the DOM node,\n  //      get the current fiber, and find your way back to the React Component fiber.\n  //      Probably need to remove fromFiber and re-implement using only DOM node weak map.\n  static fromFiber = fiber => {\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  static fromDOMNode = domNode => {\n    const fiber = FiberNavigator.domNodeToReactFiber(domNode);\n\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  get name() {\n    return this.isClassComponent || this.isFunctionComponent\n      ? this.__fiber.type.displayName || this.__fiber.type.name\n      : this.isHostComponent\n      ? this.__fiber.stateNode.constructor.name\n      : null;\n  }\n\n  get parent(): FiberNavigator {\n    return FiberNavigator.fromFiber(this.__fiber.return);\n  }\n\n  get owner() {\n    return FiberNavigator.fromFiber(this.__fiber._debugOwner);\n  }\n\n  get domNode() {\n    let fiber = this.__fiber;\n\n    do {\n      if (isDOMNode(fiber.stateNode)) {\n        return fiber.stateNode;\n      }\n      fiber = fiber.child;\n    } while (fiber);\n\n    return null;\n  }\n\n  get instance() {\n    if (this.isClassComponent) {\n      return this.__fiber.stateNode;\n    }\n\n    if (this.isFunctionComponent) {\n      // assumes functional component w/useRef\n      return this.findDebugHookState(this.__fiber.memoizedState);\n    }\n\n    return null;\n  }\n\n  /**\n   * Hooks state is represented by a recursive structure where:\n   * - `memoizedState` is a current value if applicable\n   * - `next` is next hook in order\n   * @param node - fiber\n   */\n  findDebugHookState(node) {\n    if (node && node.memoizedState && node.memoizedState.current && node.memoizedState.current.fluentUIDebug) {\n      return node.memoizedState.current;\n    }\n\n    if (node === null || node.next === null) {\n      return null;\n    }\n\n    return this.findDebugHookState(node.next);\n  }\n\n  get reactComponent() {\n    return this.isHostComponent ? this.owner.elementType : this.elementType;\n  }\n\n  get elementType() {\n    return this.__fiber.elementType;\n  }\n\n  get fluentUIDebug() {\n    return this.instance && this.instance.fluentUIDebug ? this.instance.fluentUIDebug : null;\n  }\n\n  get jsxString() {\n    return `<${this.name} />`;\n  }\n\n  //\n  // Methods\n  //\n\n  isEqual(fiberNav: FiberNavigator) {\n    // TODO: do equality check on __fiber instead, however, see fromFiber TODO :/\n    return !!fiberNav && fiberNav.instance === this.instance;\n  }\n\n  find(condition, move) {\n    let fiber: FiberNavigator = FiberNavigator.fromFiber(this.__fiber);\n\n    while (fiber) {\n      if (condition(fiber)) {\n        return fiber;\n      }\n      fiber = move(fiber);\n    }\n\n    return null;\n  }\n\n  findOwner(condition) {\n    return this.find(condition, fiber => fiber.owner);\n  }\n\n  findParent(condition) {\n    return this.find(condition, fiber => fiber.parent);\n  }\n\n  //\n  // Component Types\n  //\n\n  get isClassComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !!this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isFunctionComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isHostComponent() {\n    // Host components are platform components (i.e. 'div' on web)\n    // https://github.com/acdlite/react-fiber-architecture#type-and-key\n    return typeof this.__fiber.type === 'string';\n  }\n\n  //\n  // What this fiber component renders\n  //\n\n  get isDOMComponent() {\n    return !!this.__fiber.child && FiberNavigator.fromFiber(this.__fiber.child).isHostComponent;\n  }\n\n  // https://github.com/facebook/react/blob/16.8.6/packages/react-dom/src/test-utils/ReactTestUtils.js#L193\n  get isCompositeComponent() {\n    return this.isDOMComponent ? false : !!this.instance && !!this.instance.render && !!this.instance.setState;\n  }\n}\n\nexport default FiberNavigator;\n"],"file":"FiberNavigator.js"}