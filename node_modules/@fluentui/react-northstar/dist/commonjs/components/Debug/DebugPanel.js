"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _replace2 = _interopRequireDefault(require("lodash/replace"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _concat2 = _interopRequireDefault(require("lodash/concat"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var React = _interopRequireWildcard(require("react"));

var _DebugPanelItem = _interopRequireDefault(require("./DebugPanelItem"));

var _utils = require("./utils");

var _DebugComponentViewer = _interopRequireDefault(require("./DebugComponentViewer"));

var DebugPanel = function DebugPanel(props) {
  var cssStyles = props.cssStyles,
      inputDebugData = props.debugData,
      fiberNav = props.fiberNav,
      onActivateDebugSelectorClick = props.onActivateDebugSelectorClick,
      onClose = props.onClose,
      position = props.position,
      onPositionLeft = props.onPositionLeft,
      onPositionRight = props.onPositionRight,
      onFiberChanged = props.onFiberChanged,
      onFiberSelected = props.onFiberSelected;

  var _React$useState = React.useState('root'),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      slot = _React$useState2[0],
      setSlot = _React$useState2[1];

  var left = position === 'left';
  var debugData = (0, _isNil2.default)(inputDebugData) || (0, _isEmpty2.default)(inputDebugData) ? {
    componentStyles: {},
    componentVariables: [],
    siteVariables: []
  } : inputDebugData;
  debugData.componentStyles = debugData.componentStyles || {};
  debugData.componentVariables = debugData.componentVariables || [];
  debugData.siteVariables = debugData.siteVariables || [];
  var styleSlots = Object.keys(debugData.componentStyles);
  var siteVariablesUsedInComponentVariables = [];
  debugData.componentVariables.map(function (val) {
    return val.input;
  }).forEach(function (val) {
    return siteVariablesUsedInComponentVariables = (0, _concat2.default)(siteVariablesUsedInComponentVariables, (0, _utils.getValues)(val, function (val) {
      return val.indexOf('siteVariables.') > -1;
    }));
  });
  var uniqUsedSiteVariables = (0, _uniq2.default)(siteVariablesUsedInComponentVariables);
  var siteVariablesDataWithNulls = debugData.siteVariables.map(function (val) {
    return Object.assign({}, val, {
      resolved: uniqUsedSiteVariables.reduce(function (acc, next) {
        var key = (0, _replace2.default)(next, 'siteVariables.', '');
        (0, _set2.default)(acc, key, (0, _get2.default)(val['resolved'], key));
        return acc;
      }, {})
    });
  });
  var siteVariablesData = siteVariablesDataWithNulls.map(function (val) {
    return Object.assign({}, val, {
      resolved: (0, _utils.removeNulls)(val.resolved)
    });
  });
  return React.createElement("div", null, React.createElement("div", {
    style: debugPanelRoot(left)
  }, React.createElement("div", {
    style: debugPanelHeader
  }, React.createElement("div", {
    tabIndex: 0,
    onClick: onActivateDebugSelectorClick,
    style: debugPanelArrowIcon
  }, "\u21F1"), React.createElement("div", {
    style: {
      float: 'right'
    }
  }, React.createElement("div", {
    tabIndex: 0,
    style: debugPanelIcon(true, left),
    onClick: onPositionLeft
  }), React.createElement("div", {
    tabIndex: 0,
    style: debugPanelIcon(false, left),
    onClick: onPositionRight
  }), React.createElement("div", {
    tabIndex: 0,
    onClick: onClose,
    style: debugPanelCloseIcon
  }, "\u2715"))), React.createElement(_DebugComponentViewer.default, {
    fiberNav: fiberNav,
    onFiberChanged: onFiberChanged,
    onFiberSelected: onFiberSelected
  }), React.createElement("div", {
    style: debugPanelBody
  }, React.createElement("div", {
    style: debugPanel
  }, React.createElement("div", {
    style: debugHeaderContainer()
  }, React.createElement("div", {
    style: debugHeader()
  }, "Styles"), !(0, _isEmpty2.default)(debugData.componentStyles) && React.createElement("div", {
    style: debugPanelSelectContainer()
  }, React.createElement("select", {
    value: slot,
    onChange: function onChange(e) {
      return setSlot(e.target.value);
    }
  }, styleSlots.map(function (val) {
    return React.createElement("option", {
      value: val,
      key: val
    }, "Slot: ", val);
  })))), !(0, _isEmpty2.default)(debugData.componentStyles) ? React.createElement(_DebugPanelItem.default, {
    data: debugData.componentStyles[slot],
    valueKey: "styles",
    idKey: "debugId"
  }) : React.createElement("div", {
    style: debugNoData()
  }, "None in use")), React.createElement("div", {
    style: debugPanel
  }, React.createElement("div", {
    style: debugHeaderContainer()
  }, React.createElement("div", {
    style: debugHeader()
  }, "Variables")), !(0, _isEmpty2.default)(debugData.componentVariables) ? React.createElement(_DebugPanelItem.default, {
    data: debugData.componentVariables,
    valueKey: "resolved",
    idKey: "debugId",
    commentKey: "input",
    commentKeyPredicate: function commentKeyPredicate(val) {
      return typeof val === 'string' && val.indexOf('siteVariables.') > -1;
    }
  }) : React.createElement("div", {
    style: debugNoData()
  }, "None in use")), React.createElement("div", {
    style: debugPanel
  }, React.createElement("div", {
    style: debugHeaderContainer()
  }, React.createElement("div", {
    style: debugHeader()
  }, "Site variables")), !(0, _isEmpty2.default)(siteVariablesData) && !(0, _isEmpty2.default)(uniqUsedSiteVariables) ? React.createElement(_DebugPanelItem.default, {
    data: siteVariablesData,
    valueKey: "resolved",
    idKey: "debugId"
  }) : React.createElement("div", {
    style: debugNoData()
  }, "None in use"))), !(0, _isEmpty2.default)(cssStyles) && React.createElement("div", {
    style: debugPanel
  }, React.createElement("div", {
    style: debugHeader()
  }, "HTML Styles"), React.createElement("div", {
    style: {
      clear: 'both'
    }
  }, cssStyles.map(function (l) {
    return React.createElement("pre", {
      key: l
    }, l);
  }))), React.createElement("div", {
    style: {
      padding: '50px 0'
    }
  })));
};

var debugPanelHeader = {
  position: 'sticky',
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  padding: '2px 2px 4px',
  top: '0',
  background: '#f3f3f3',
  zIndex: 1
};
var commonIconStyle = {
  display: 'inline-block',
  cursor: 'pointer',
  color: '#555',
  lineHeight: 1,
  margin: '0 4px'
};
var debugPanelCloseIcon = Object.assign({}, commonIconStyle, {
  fontSize: '20px',
  outline: '0',
  cursor: 'pointer'
});
var debugPanelArrowIcon = Object.assign({}, commonIconStyle, {
  fontSize: '24px',
  marginTop: '-4px',
  outline: '0'
});

var debugPanelIcon = function debugPanelIcon(left, isLeftActive) {
  var _Object$assign;

  return Object.assign({}, commonIconStyle, (_Object$assign = {
    borderWidth: '2px',
    borderStyle: 'solid ',
    borderColor: '#555'
  }, (0, _defineProperty2.default)(_Object$assign, left ? 'borderLeftWidth' : 'borderRightWidth', '6px'), (0, _defineProperty2.default)(_Object$assign, "width", '16px'), (0, _defineProperty2.default)(_Object$assign, "height", '14px'), _Object$assign), left === isLeftActive && {
    borderColor: '#6495ed'
  });
};

var debugPanelRoot = function debugPanelRoot(left) {
  var _ref;

  return _ref = {
    position: 'fixed'
  }, (0, _defineProperty2.default)(_ref, left ? 'left' : 'right', 0), (0, _defineProperty2.default)(_ref, "top", 0), (0, _defineProperty2.default)(_ref, "zIndex", 999999999), (0, _defineProperty2.default)(_ref, "width", '350px'), (0, _defineProperty2.default)(_ref, "height", '100vh'), (0, _defineProperty2.default)(_ref, "color", '#313941'), (0, _defineProperty2.default)(_ref, "background", '#fff'), (0, _defineProperty2.default)(_ref, "lineHeight", 1.1), (0, _defineProperty2.default)(_ref, "fontSize", '12px'), (0, _defineProperty2.default)(_ref, "overflowY", 'scroll'), (0, _defineProperty2.default)(_ref, left ? 'borderRight' : 'borderLeft', '1px solid rgba(0, 0, 0, 0.2)'), (0, _defineProperty2.default)(_ref, "boxShadow", '0 0 8px rgba(0, 0, 0, .1)'), _ref;
};

var debugHeaderContainer = function debugHeaderContainer() {
  return {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    margin: '0 -4px 4px',
    overflow: 'hidden',
    background: '#f3f3f3',
    borderTop: '1px solid #d0d0d0',
    borderBottom: '1px solid #d0d0d0'
  };
};

var debugHeader = function debugHeader() {
  return {
    fontSize: '14px',
    fontWeight: 'bold'
  };
};

var debugNoData = function debugNoData() {
  return {
    padding: '8px',
    color: 'rgba(0, 0, 0, 0.75)',
    textAlign: 'center',
    background: 'rgba(0, 0, 0, 0.05)',
    marginBottom: '4px'
  };
};

var debugPanelSelectContainer = function debugPanelSelectContainer() {
  return {
    width: 'auto'
  };
};

var debugPanelBody = {
  overflowWrap: 'break-word',
  wordWrap: 'break-word',
  wordBreak: 'break-all',
  hyphens: 'auto'
};
var debugPanel = {
  padding: '0 4px'
};
var _default = DebugPanel;
exports.default = _default;
//# sourceMappingURL=DebugPanel.js.map
