{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","unhandledProps","handledProps","accessibility","navigation","active","children","content","className","design","styles","variables","ElementType","getA11yProps","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","mapPropsToBehavior","mapPropsToInlineStyles","rtl","classes","element","root","screenReaderContainerStyles","propTypes","commonPropTypes","createCommon","PropTypes","bool","string","defaultProps","carouselItemBehavior","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { useAccessibility, useTelemetry, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\nexport const CarouselItem: React.FC<WithAsProp<CarouselItemProps>> &\n  FluentComponentStaticProps<CarouselItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport default withSafeTypeForAs<typeof CarouselItem, CarouselItemProps, 'div'>(CarouselItem);\n"],"file":"CarouselItem.js"}