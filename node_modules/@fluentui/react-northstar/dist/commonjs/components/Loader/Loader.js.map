{"version":3,"sources":["components/Loader/Loader.tsx"],"names":["loaderClassName","loaderSlotClassNames","indicator","label","svg","Loader","props","context","state","visible","delay","labelId","delayTimer","setTimeout","setState","clearTimeout","ElementType","classes","accessibility","variables","styles","unhandledProps","svgElement","Box","create","defaultProps","className","root","attributes","children","Text","id","UIComponent","commonPropTypes","createCommon","content","PropTypes","number","customPropTypes","itemShorthand","inline","bool","labelPosition","oneOf","size","loaderBehavior","Component","mappedProp","shorthandConfig"],"mappings":"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","sourcesContent":["import { Accessibility, loaderBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  SizeValue,\n  ShorthandFactory,\n  getOrGenerateIdFromShorthand,\n  ShorthandConfig,\n} from '../../utils';\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\n\nexport interface LoaderSlotClassNames {\n  indicator: string;\n  label: string;\n  svg: string;\n}\n\nexport interface LoaderProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Time in milliseconds after component mount before spinner is visible. */\n  delay?: number;\n\n  /** A loader can contain an indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** Loaders can appear inline with content. */\n  inline?: boolean;\n\n  /** A loader can contain a label. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A label in the loader can have different positions. */\n  labelPosition?: 'above' | 'below' | 'start' | 'end';\n\n  /** A size of the loader. */\n  size?: SizeValue;\n\n  /** A loader can contain a custom svg element. */\n  svg?: ShorthandValue<BoxProps>;\n}\n\nexport interface LoaderState {\n  visible: boolean;\n  labelId: string;\n}\n\nexport const loaderClassName = 'ui-loader';\nexport const loaderSlotClassNames: LoaderSlotClassNames = {\n  indicator: `${loaderClassName}__indicator`,\n  label: `${loaderClassName}__label`,\n  svg: `${loaderClassName}__svg`,\n};\n\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n */\nclass Loader extends UIComponent<WithAsProp<LoaderProps>, LoaderState> {\n  static create: ShorthandFactory<LoaderProps>;\n  static displayName = 'Loader';\n  static deprecated_className = loaderClassName;\n  static shorthandConfig: ShorthandConfig<LoaderProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    delay: PropTypes.number,\n    indicator: customPropTypes.itemShorthand,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n    size: customPropTypes.size,\n    svg: customPropTypes.itemShorthand,\n  };\n\n  static defaultProps = {\n    accessibility: loaderBehavior,\n    delay: 0,\n    indicator: {},\n    labelPosition: 'below',\n    svg: '',\n    size: 'medium',\n  };\n\n  delayTimer: number;\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      visible: this.props.delay === 0,\n      labelId: '',\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      labelId: getOrGenerateIdFromShorthand('loader-label-', props.label, state.labelId),\n    };\n  }\n\n  componentDidMount() {\n    const { delay } = this.props;\n\n    if (delay > 0) {\n      // @ts-ignore We have a collision between types from DOM and @types/node\n      this.delayTimer = setTimeout(() => {\n        this.setState({ visible: true });\n      }, delay);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.delayTimer);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, variables, styles, unhandledProps }) {\n    const { indicator, label, svg } = this.props;\n    const { visible, labelId } = this.state;\n\n    const svgElement = Box.create(svg, {\n      defaultProps: () => ({ className: loaderSlotClassNames.svg, styles: styles.svg }),\n    });\n\n    return (\n      visible && (\n        <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n          {Box.create(indicator, {\n            defaultProps: () => ({\n              children: svgElement,\n              className: loaderSlotClassNames.indicator,\n              styles: styles.indicator,\n            }),\n          })}\n          {Text.create(label, {\n            defaultProps: () => ({\n              className: loaderSlotClassNames.label,\n              styles: styles.label,\n              id: labelId,\n            }),\n          })}\n        </ElementType>\n      )\n    );\n  }\n}\n\nLoader.create = createShorthandFactory({ Component: Loader, mappedProp: 'label' });\nLoader.shorthandConfig = { mappedProp: 'label' };\n\n/**\n * A Loader alerts a user to wait for an activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\nexport default withSafeTypeForAs<typeof Loader, LoaderProps>(Loader);\n"],"file":"Loader.js"}