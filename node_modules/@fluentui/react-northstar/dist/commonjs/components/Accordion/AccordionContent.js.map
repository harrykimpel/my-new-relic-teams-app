{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["accordionContentClassName","AccordionContent","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","children","content","accordionTitleId","active","className","design","styles","variables","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","mapPropsToBehavior","rtl","handleClick","e","mapPropsToStyles","mapPropsToInlineStyles","classes","element","root","onClick","rtlTextContainer","getAttributes","forElements","shorthandConfig","mappedProp","propTypes","commonPropTypes","createCommon","PropTypes","string","bool","func","defaultProps","accordionContentBehavior","as","Object","keys","create","Component"],"mappings":"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","sourcesContent":["import { accordionContentBehavior, Accessibility, AccordionContentBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { useTelemetry, getElementType, useAccessibility, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionContentBehaviorProps>;\n\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nexport const accordionContentClassName = 'ui-accordion__content';\n\nexport type AccordionContentStylesProps = Required<Pick<AccordionContentProps, 'active'>>;\n\nexport const AccordionContent: React.FC<WithAsProp<AccordionContentProps>> &\n  FluentComponentStaticProps<AccordionContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(AccordionContent.displayName, context.telemetry);\n\n  setStart();\n  const { children, content, accordionTitleId, active, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: () => ({\n      accordionTitleId,\n    }),\n    rtl: context.rtl,\n  });\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const { classes } = useStyles<AccordionContentStylesProps>(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: () => ({\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordionContent.displayName = 'AccordionContent';\n\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'dd',\n};\n\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes) as any;\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport default withSafeTypeForAs<typeof AccordionContent, AccordionContentProps>(AccordionContent);\n"],"file":"AccordionContent.js"}