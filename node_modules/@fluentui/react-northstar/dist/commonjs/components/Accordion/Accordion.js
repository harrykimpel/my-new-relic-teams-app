"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Accordion = exports.accordionSlotClassNames = exports.accordionClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _without2 = _interopRequireDefault(require("lodash/without"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _AccordionTitle = _interopRequireDefault(require("./AccordionTitle"));

var _AccordionContent = _interopRequireDefault(require("./AccordionContent"));

var _types = require("../../types");

var _FocusContainer = require("../../utils/accessibility/FocusHandling/FocusContainer");

var _reactBindings = require("@fluentui/react-bindings");

var _reactFela = require("react-fela");

// @ts-ignore
var accordionClassName = 'ui-accordion';
exports.accordionClassName = accordionClassName;
var accordionSlotClassNames = {
  content: "".concat(accordionClassName, "__content"),
  title: "".concat(accordionClassName, "__title")
};
exports.accordionSlotClassNames = accordionSlotClassNames;

var Accordion = function Accordion(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Accordion.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var expanded = props.expanded,
      exclusive = props.exclusive,
      accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      panels = props.panels,
      renderPanelContent = props.renderPanelContent,
      renderPanelTitle = props.renderPanelTitle;
  var alwaysActiveIndex = expanded ? 0 : -1;

  var _useAutoControlled = (0, _reactBindings.useAutoControlled)({
    defaultValue: props.defaultActiveIndex,
    value: props.activeIndex,
    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]
  }),
      _useAutoControlled2 = (0, _slicedToArray2.default)(_useAutoControlled, 2),
      activeIndex = _useAutoControlled2[0],
      setActiveIndex = _useAutoControlled2[1];

  var actionHandlers = {
    moveNext: function moveNext(e) {
      e.preventDefault();
      focusHandler.moveNext();
    },
    movePrevious: function movePrevious(e) {
      e.preventDefault();
      focusHandler.movePrevious();
    },
    moveFirst: function moveFirst(e) {
      e.preventDefault();
      focusHandler.moveFirst();
    },
    moveLast: function moveLast(e) {
      e.preventDefault();
      focusHandler.moveLast();
    }
  };
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Accordion.displayName,
    actionHandlers: actionHandlers,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Accordion.displayName, {
    className: accordionClassName,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var _React$useState = React.useState(),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      focusedIndex = _React$useState2[0],
      setfocusedIndex = _React$useState2[1];

  var handleNavigationFocus = function handleNavigationFocus(index) {
    setfocusedIndex(index);
  };

  React.useEffect(function () {
    var targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;
    targetComponent && targetComponent.focus();
  }, [focusedIndex]);

  var getNavigationItemsSize = function getNavigationItemsSize() {
    return props.panels.length;
  };

  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Accordion.handledProps, props);
  var ElementType = (0, _reactBindings.getElementType)(props);
  var focusHandler = new _FocusContainer.ContainerFocusHandler(getNavigationItemsSize, handleNavigationFocus, true);
  var itemRefs = React.useMemo(function () {
    return Array.from({
      length: panels === null || panels === void 0 ? void 0 : panels.length
    }, function () {
      return React.createRef();
    });
  }, [panels === null || panels === void 0 ? void 0 : panels.length]);
  var defaultAccordionTitleId = React.useMemo(function () {
    return (0, _uniqueId2.default)('accordion-title-');
  }, []);
  var defaultAccordionContentId = React.useMemo(function () {
    return (0, _uniqueId2.default)('accordion-content-');
  }, []);

  var computeNewIndex = function computeNewIndex(index) {
    if (!isIndexActionable(index)) {
      return activeIndex;
    }

    if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it

    return (0, _includes2.default)(activeIndex, index) ? (0, _without2.default)(activeIndex, index) : [].concat((0, _toConsumableArray2.default)(activeIndex), [index]);
  };

  var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, titleProps) {
        var index = titleProps.index;
        var activeIndex = computeNewIndex(index);
        setActiveIndex(activeIndex);
        setfocusedIndex(index);
        (0, _invoke2.default)(props, 'onActiveIndexChange', e, Object.assign({}, props, {
          activeIndex: activeIndex
        }));
        (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
        (0, _invoke2.default)(props, 'onTitleClick', e, titleProps);
      },
      onFocus: function onFocus(e, titleProps) {
        (0, _invoke2.default)(predefinedProps, 'onFocus', e, titleProps);
        setfocusedIndex(predefinedProps.index);
      }
    };
  };

  var isIndexActive = function isIndexActive(index) {
    return exclusive ? activeIndex === index : (0, _includes2.default)(activeIndex, index);
  };
  /**
   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,
   * when at least a panel needs to stay active. Will return false if expanded prop is true,
   * index is active and either it's an exclusive accordion or if there are no other active
   * panels open besides this one.
   *
   * @param index - The index of the panel.
   * @returns If the panel can be set active/inactive.
   */


  var isIndexActionable = function isIndexActionable(index) {
    if (!isIndexActive(index)) {
      return true;
    }

    return !expanded || !exclusive && activeIndex.length > 1;
  };

  var renderPanels = function renderPanels() {
    var children = [];
    focusHandler.syncFocusedIndex(focusedIndex);
    (0, _each2.default)(panels, function (panel, index) {
      var content = panel.content,
          title = panel.title;
      var active = isIndexActive(+index);
      var canBeCollapsed = isIndexActionable(+index);
      var titleId = title['id'] || "".concat(defaultAccordionTitleId).concat(index);
      var contentId = content['id'] || "".concat(defaultAccordionContentId).concat(index);
      var contentRef = itemRefs[index];
      children.push((0, _utils.createShorthand)(_AccordionTitle.default, title, {
        defaultProps: function defaultProps() {
          return {
            className: accordionSlotClassNames.title,
            active: active,
            index: +index,
            contentRef: contentRef,
            canBeCollapsed: canBeCollapsed,
            id: titleId,
            accordionContentId: contentId
          };
        },
        overrideProps: handleTitleOverrides,
        render: renderPanelTitle
      }));
      children.push((0, _utils.createShorthand)(_AccordionContent.default, content, {
        defaultProps: function defaultProps() {
          return {
            className: accordionSlotClassNames.content,
            active: active,
            id: contentId,
            accordionTitleId: titleId
          };
        },
        render: renderPanelContent
      }));
    });
    return children;
  };

  var element = React.createElement(ElementType, (0, _extends2.default)({}, getA11yProps('root', Object.assign({
    className: classes.root
  }, unhandledProps)), _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  })), (0, _utils.childrenExist)(children) ? children : renderPanels());
  setEnd();
  return element;
};

exports.Accordion = Accordion;
Accordion.displayName = 'Accordion';
Accordion.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  exclusive: PropTypes.bool,
  expanded: PropTypes.bool,
  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),
  onActiveIndexChange: PropTypes.func,
  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({
    content: customPropTypes.itemShorthand,
    title: customPropTypes.itemShorthand
  }))]),
  renderPanelTitle: PropTypes.func,
  renderPanelContent: PropTypes.func
});
Accordion.defaultProps = {
  accessibility: _accessibility.accordionBehavior,
  as: 'dl'
};
Accordion.handledProps = Object.keys(Accordion.propTypes);
Accordion.Title = _AccordionTitle.default;
Accordion.Content = _AccordionContent.default;
Accordion.create = (0, _utils.createShorthandFactory)({
  Component: Accordion
});
/**
 * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.
 *
 * @accessibility
 * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).
 */

var _default = (0, _types.withSafeTypeForAs)(Accordion);

exports.default = _default;
//# sourceMappingURL=Accordion.js.map
