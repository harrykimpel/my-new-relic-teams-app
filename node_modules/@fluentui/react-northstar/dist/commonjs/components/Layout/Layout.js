"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.layoutSlotClassNames = exports.layoutClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _types = require("../../types");

var layoutClassName = 'ui-layout';
exports.layoutClassName = layoutClassName;
var layoutSlotClassNames = {
  start: "".concat(layoutClassName, "__start"),
  main: "".concat(layoutClassName, "__main"),
  end: "".concat(layoutClassName, "__end"),
  gap: "".concat(layoutClassName, "__gap"),
  reducedStart: "".concat(layoutClassName, "--reduced__start"),
  reducedMain: "".concat(layoutClassName, "--reduced__main"),
  reducedEnd: "".concat(layoutClassName, "--reduced__end")
};
exports.layoutSlotClassNames = layoutSlotClassNames;

var Layout =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(Layout, _UIComponent);

  function Layout() {
    (0, _classCallCheck2.default)(this, Layout);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Layout).apply(this, arguments));
  }

  (0, _createClass2.default)(Layout, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          reducing = _this$props.reducing,
          disappearing = _this$props.disappearing,
          start = _this$props.start,
          main = _this$props.main,
          end = _this$props.end,
          renderStartArea = _this$props.renderStartArea,
          renderMainArea = _this$props.renderMainArea,
          renderEndArea = _this$props.renderEndArea,
          renderGap = _this$props.renderGap;
      var startArea = renderStartArea(Object.assign({}, this.props, {
        classes: classes
      }));
      var mainArea = renderMainArea(Object.assign({}, this.props, {
        classes: classes
      }));
      var endArea = renderEndArea(Object.assign({}, this.props, {
        classes: classes
      }));

      if (!startArea && !mainArea && !endArea) {
        return React.createElement(ElementType, (0, _extends2.default)({}, unhandledProps, {
          className: classes.root
        }));
      }

      var activeAreas = [startArea, mainArea, endArea].filter(Boolean);
      var isSingleArea = activeAreas.length === 1; // disappear: render the content directly without wrapping layout or area elements

      if (disappearing && isSingleArea) {
        return start || main || end;
      }

      if (reducing && isSingleArea) {
        var composedClasses = (0, _classnames.default)(classes.root, startArea && layoutSlotClassNames.reducedStart, mainArea && layoutSlotClassNames.reducedMain, endArea && layoutSlotClassNames.reducedEnd);
        return React.createElement(ElementType, (0, _extends2.default)({}, unhandledProps, {
          className: composedClasses
        }), start || main || end);
      }

      return React.createElement(ElementType, (0, _extends2.default)({}, unhandledProps, {
        className: classes.root
      }), startArea, startArea && mainArea && renderGap(Object.assign({}, this.props, {
        classes: classes
      })), mainArea, (startArea || mainArea) && endArea && renderGap(Object.assign({}, this.props, {
        classes: classes
      })), endArea);
    }
  }]);
  return Layout;
}(_utils.UIComponent);
/**
 * (DEPRECATED) A layout is a utility for arranging the content of a component.
 */


(0, _defineProperty2.default)(Layout, "deprecated_className", layoutClassName);
(0, _defineProperty2.default)(Layout, "displayName", 'Layout');
(0, _defineProperty2.default)(Layout, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon({
  accessibility: false,
  children: false,
  content: false
}), {
  debug: PropTypes.bool,
  renderStartArea: PropTypes.func,
  renderMainArea: PropTypes.func,
  renderEndArea: PropTypes.func,
  renderGap: PropTypes.func,
  rootCSS: PropTypes.object,
  start: PropTypes.any,
  startCSS: PropTypes.object,
  startSize: PropTypes.string,
  main: PropTypes.any,
  mainCSS: PropTypes.object,
  mainSize: PropTypes.string,
  end: PropTypes.any,
  endCSS: PropTypes.object,
  endSize: PropTypes.string,
  justifyItems: PropTypes.any,
  alignItems: PropTypes.any,
  gap: PropTypes.string,
  reducing: PropTypes.bool,
  disappearing: PropTypes.bool,
  vertical: PropTypes.bool
}));
(0, _defineProperty2.default)(Layout, "defaultProps", {
  startSize: 'auto',
  mainSize: '1fr',
  endSize: 'auto',
  // TODO: when an area is another Layout, do not wrap them in an extra div
  // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root
  renderStartArea: function renderStartArea(_ref2) {
    var start = _ref2.start,
        classes = _ref2.classes;
    return start && React.createElement("div", (0, _extends2.default)({
      className: (0, _classnames.default)(layoutSlotClassNames.start, classes.start)
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [start]
    })), start);
  },
  renderMainArea: function renderMainArea(_ref3) {
    var main = _ref3.main,
        classes = _ref3.classes;
    return main && React.createElement("div", (0, _extends2.default)({
      className: (0, _classnames.default)(layoutSlotClassNames.main, classes.main)
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [main]
    })), main);
  },
  renderEndArea: function renderEndArea(_ref4) {
    var end = _ref4.end,
        classes = _ref4.classes;
    return end && React.createElement("div", (0, _extends2.default)({
      className: (0, _classnames.default)(layoutSlotClassNames.end, classes.end)
    }, _utils.rtlTextContainer.getAttributes({
      forElements: [end]
    })), end);
  },
  // Heads up!
  // IE11 Doesn't support grid-gap, insert virtual columns instead
  renderGap: function renderGap(_ref5) {
    var gap = _ref5.gap,
        classes = _ref5.classes;
    return gap && React.createElement("span", {
      className: (0, _classnames.default)(layoutSlotClassNames.gap, classes.gap)
    });
  }
});

var _default = (0, _types.withSafeTypeForAs)(Layout);

exports.default = _default;
//# sourceMappingURL=Layout.js.map
