"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.radioGroupClassName = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _findIndex2 = _interopRequireDefault(require("lodash/findIndex"));

var _accessibility = require("@fluentui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _RadioGroupItem = _interopRequireDefault(require("./RadioGroupItem"));

var _types = require("../../types");

// TODO:
// vertical - padding variable?
var radioGroupClassName = 'ui-radiogroup';
exports.radioGroupClassName = radioGroupClassName;

var RadioGroup =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(RadioGroup, _AutoControlledCompon);

  function RadioGroup() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, RadioGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      nextItem: function nextItem(event) {
        return _this.setCheckedItem(event, 1);
      },
      prevItem: function prevItem(event) {
        return _this.setCheckedItem(event, -1);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemProps", function (item) {
      return item.props || item;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setCheckedItem", function (event, direction) {
      var nextItem = _this.findNextEnabledCheckedItem(direction);

      if (nextItem) {
        _this.setCheckedValue({
          checkedValue: nextItem.value,
          shouldFocus: true,
          event: event,
          props: nextItem
        });
      }

      event.preventDefault();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "findNextEnabledCheckedItem", function (direction) {
      if (!_this.props.items || !_this.props.items.length) {
        return undefined;
      }

      var currentIndex = // if none of the values selected, set current index to the first item
      _this.state.checkedValue !== undefined ? (0, _findIndex2.default)(_this.props.items, function (item) {
        return _this.getItemProps(item).value === _this.state.checkedValue;
      }) : 0;

      for (var newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {
        if (newIndex < 0) {
          newIndex = _this.props.items.length - 1;
        } else if (newIndex >= _this.props.items.length) {
          newIndex = 0;
        }

        if (newIndex === currentIndex) {
          return undefined;
        }

        var itemProps = _this.getItemProps(_this.props.items[newIndex]);

        if (!itemProps.disabled) {
          return itemProps;
        }
      }

      return undefined;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleItemOverrides", function (predefinedProps) {
      return {
        checked: typeof _this.state.checkedValue !== 'undefined' && _this.state.checkedValue === predefinedProps.value,
        onClick: function onClick(event, itemProps) {
          var value = itemProps.value,
              disabled = itemProps.disabled;

          if (!disabled && value !== _this.state.checkedValue) {
            _this.setCheckedValue({
              checkedValue: value,
              shouldFocus: false,
              event: event,
              props: itemProps
            });
          }

          (0, _invoke2.default)(predefinedProps, 'onClick', event, itemProps);
        },
        shouldFocus: _this.state.shouldFocus
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderItems", function (vertical) {
      var items = _this.props.items;
      var isNoneValueSelected = _this.state.checkedValue === undefined;
      return (0, _map2.default)(items, function (item, index) {
        return _RadioGroupItem.default.create(item, {
          defaultProps: function defaultProps() {
            return Object.assign({
              vertical: vertical
            }, index === 0 && isNoneValueSelected && {
              tabIndex: 0
            });
          },
          overrideProps: _this.handleItemOverrides
        });
      });
    });
    return _this;
  }

  (0, _createClass2.default)(RadioGroup, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          vertical = _this$props.vertical;
      return React.createElement(ElementType, (0, _extends2.default)({}, accessibility.attributes.root, _utils.rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), (0, _utils.childrenExist)(children) ? children : this.renderItems(vertical));
    }
  }, {
    key: "setCheckedValue",
    value: function setCheckedValue(_ref2) {
      var checkedValue = _ref2.checkedValue,
          shouldFocus = _ref2.shouldFocus,
          event = _ref2.event,
          props = _ref2.props;
      this.setState({
        checkedValue: checkedValue,
        shouldFocus: shouldFocus
      });
      (0, _invoke2.default)(this.props, 'onCheckedValueChange', event, props);
    }
  }]);
  return RadioGroup;
}(_utils.AutoControlledComponent);
/**
 * A RadioGroup allows user to select a value from a small set of mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.
 */


(0, _defineProperty2.default)(RadioGroup, "displayName", 'RadioGroup');
(0, _defineProperty2.default)(RadioGroup, "deprecated_className", radioGroupClassName);
(0, _defineProperty2.default)(RadioGroup, "create", void 0);
(0, _defineProperty2.default)(RadioGroup, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  items: customPropTypes.collectionShorthand,
  onCheckedValueChange: PropTypes.func,
  vertical: PropTypes.bool
}));
(0, _defineProperty2.default)(RadioGroup, "defaultProps", {
  as: 'div',
  accessibility: _accessibility.radioGroupBehavior
});
(0, _defineProperty2.default)(RadioGroup, "autoControlledProps", ['checkedValue']);
(0, _defineProperty2.default)(RadioGroup, "Item", _RadioGroupItem.default);

var _default = (0, _types.withSafeTypeForAs)(RadioGroup);

exports.default = _default;
//# sourceMappingURL=RadioGroup.js.map
