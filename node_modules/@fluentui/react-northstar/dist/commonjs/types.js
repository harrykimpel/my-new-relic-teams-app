"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNSAFE_typed = exports.withSafeTypeForAs = void 0;

// Temporary workaround for @lodash dependency
// ========================================================
// Utilities
// ========================================================
// ========================================================
// Components
// ========================================================
// ========================================================
// Props
// ========================================================
// ========================================================
// Shorthand Factories
// ========================================================
// The ReactFragment here is replaced from the original typings with ReactNodeArray because of incorrect inheriting of the type when it is defined as {}
// ========================================================
// Types for As prop support
// ========================================================

/**
 * TODO: introduce back this path once TS compiler issue that leads to
 * 'JS Heap Out Of Memory' exception will be fixed
 */
// type AsHtmlElement<Tag extends keyof JSX.IntrinsicElements, TProps> = {
//   as: Tag
// } & JSX.IntrinsicElements[Tag] &
//   TProps

/**
 * TODO: restrict type further once TS compiler issue that leads to
 * 'JS Heap Out Of Memory' exception will be fixed
 */
// & PropsOf<InstanceOf<C>>
var withSafeTypeForAs = function withSafeTypeForAs(componentType) {
  /**
   * TODO: introduce overload once TS compiler issue that leads to
   * 'JS Heap Out Of Memory' exception will be fixed
   */
  // function overloadedComponentType<Tag extends keyof JSX.IntrinsicElements>(
  //   x: AsHtmlElement<Tag, TProps>,
  // ): JSX.Element
  function overloadedComponentType() {
    throw new Error('Defines unreachable execution scenario');
  }

  return componentType;
};

exports.withSafeTypeForAs = withSafeTypeForAs;

var UNSAFE_typed = function UNSAFE_typed(componentType) {
  return {
    withProps: function withProps() {
      return componentType;
    }
  };
}; // ========================================================
// Provider's context
// ========================================================


exports.UNSAFE_typed = UNSAFE_typed;
//# sourceMappingURL=types.js.map
