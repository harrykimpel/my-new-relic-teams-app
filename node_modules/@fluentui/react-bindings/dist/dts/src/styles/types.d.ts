import { DebugData, ICSSInJSStyle, PropsWithVarsAndStyles, ThemeInput, ThemePrepared } from '@fluentui/styles';
import { IRenderer as FelaRenderer } from 'fela';
export declare type ComponentAnimationProp = {
    name: string;
    delay?: string;
    direction?: string;
    duration?: string;
    fillMode?: string;
    iterationCount?: string;
    playState?: string;
    timingFunction?: string;
    keyframeParams?: object;
} | string;
export declare type ComponentSlotClasses = Record<string, string>;
export declare type ComponentDesignProp = {
    display?: ICSSInJSStyle['display'];
    position?: ICSSInJSStyle['position'];
    top?: ICSSInJSStyle['top'];
    bottom?: ICSSInJSStyle['bottom'];
    left?: ICSSInJSStyle['left'];
    right?: ICSSInJSStyle['right'];
    padding?: ICSSInJSStyle['padding'];
    paddingTop?: ICSSInJSStyle['paddingTop'];
    paddingRight?: ICSSInJSStyle['paddingRight'];
    paddingBottom?: ICSSInJSStyle['paddingBottom'];
    paddingLeft?: ICSSInJSStyle['paddingLeft'];
    margin?: ICSSInJSStyle['margin'];
    marginTop?: ICSSInJSStyle['marginTop'];
    marginRight?: ICSSInJSStyle['marginRight'];
    marginBottom?: ICSSInJSStyle['marginBottom'];
    marginLeft?: ICSSInJSStyle['marginLeft'];
    width?: ICSSInJSStyle['width'];
    height?: ICSSInJSStyle['height'];
    minWidth?: ICSSInJSStyle['minWidth'];
    maxWidth?: ICSSInJSStyle['maxWidth'];
    minHeight?: ICSSInJSStyle['minHeight'];
    maxHeight?: ICSSInJSStyle['maxHeight'];
};
export declare type RendererParam = {
    theme: {
        direction: 'ltr' | 'rtl';
    };
    disableAnimations: boolean;
    displayName: string;
    sanitizeCss: boolean;
};
export declare type RendererRenderRule = (rule: () => ICSSInJSStyle, param: RendererParam) => string;
export declare type Renderer = Omit<FelaRenderer, 'renderRule'> & {
    renderRule: RendererRenderRule;
};
export interface StylesContextPerformance {
    enableSanitizeCssPlugin: boolean;
    enableStylesCaching: boolean;
    enableVariablesCaching: boolean;
    enableBooleanVariablesCaching: boolean;
}
export declare type StylesContextPerformanceInput = Partial<StylesContextPerformance>;
export declare type StylesContextInputValue<R = Renderer> = {
    rtl?: boolean;
    disableAnimations?: boolean;
    performance?: StylesContextPerformanceInput;
    renderer?: R;
    theme?: ThemeInput;
};
export declare type StylesContextValue<R = Renderer> = {
    rtl: boolean;
    disableAnimations: boolean;
    performance: StylesContextPerformance;
    renderer: R;
    theme: ThemePrepared;
};
export declare type PrimitiveProps = Record<string, boolean | number | string | undefined>;
export declare type ResolveStylesOptions = StylesContextValue<{
    renderRule: RendererRenderRule;
}> & {
    className?: string;
    displayNames: string[];
    props: PropsWithVarsAndStyles & {
        design?: ComponentDesignProp;
    };
    rtl: boolean;
    saveDebug: (debug: DebugData | null) => void;
};
