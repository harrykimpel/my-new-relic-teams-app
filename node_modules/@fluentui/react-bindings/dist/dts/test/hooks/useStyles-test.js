"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_bindings_1 = require("@fluentui/react-bindings");
var enzyme_1 = require("enzyme");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var TestComponent = function (props) {
    var className = props.className, color = props.color, styles = props.styles, variables = props.variables;
    var classes = react_bindings_1.useStyles('Test', {
        className: 'ui-test',
        mapPropsToStyles: function () { return ({ color: color }); },
        mapPropsToInlineStyles: function () { return ({ className: className, styles: styles, variables: variables }); },
    }).classes;
    return React.createElement("div", { className: classes.root });
};
var createTheme = function (styles) { return ({
    componentStyles: {
        Test: { root: styles },
    },
    componentVariables: {},
}); };
var TestProvider = function (props) {
    var children = props.children, theme = props.theme;
    return (React.createElement(react_fela_1.ThemeContext.Provider, { value: {
            performance: {},
            theme: theme,
        } }, children));
};
describe('useStyles', function () {
    describe('className', function () {
        it('applies "className" from options', function () {
            var wrapper = enzyme_1.shallow(React.createElement(TestComponent, null));
            expect(wrapper.find('div').prop('className')).toContain('ui-test');
        });
        it('applies "className" from props', function () {
            var wrapper = enzyme_1.shallow(React.createElement(TestComponent, { className: "foo" }));
            expect(wrapper.find('div').prop('className')).toContain('foo');
        });
    });
    describe('styles', function () {
        it('passes props mapped via "mapPropsToStyles" to styles functions', function () {
            var styles = jest.fn();
            enzyme_1.mount(React.createElement(TestComponent, { color: "green" }), {
                wrappingComponent: TestProvider,
                wrappingComponentProps: { theme: createTheme(styles) },
            });
            expect(styles).toBeCalledWith(expect.objectContaining({
                props: { color: 'green' },
            }));
        });
    });
});
