{"version":3,"sources":["hooks/useStyles.ts"],"names":["emptyTheme","React","ThemeContext","getStyles","defaultContext","rtl","disableAnimations","performance","enableSanitizeCssPlugin","process","env","NODE_ENV","enableStylesCaching","enableVariablesCaching","enableBooleanVariablesCaching","renderer","renderRule","theme","useStyles","displayName","options","context","useContext","className","composeOptions","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","componentStylesProps","composeProps","composeStylesProps","mapPropsToStylesPropsChain","reduce","acc","fn","debug","useRef","fluentUIDebug","displayNames","props","saveDebug","current","classes","resolvedStyles","styles"],"mappings":"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","sourcesContent":["import { ComposePreparedOptions } from '@fluentui/react-compose';\nimport {\n  ComponentSlotStyle,\n  ComponentSlotStylesResolved,\n  ComponentVariablesInput,\n  DebugData,\n  emptyTheme,\n} from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore We have this export in package, but it is not present in typings\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ComponentDesignProp,\n  ComponentSlotClasses,\n  PrimitiveProps,\n  RendererRenderRule,\n  StylesContextValue,\n} from '../styles/types';\nimport getStyles from '../styles/getStyles';\n\ntype UseStylesOptions<StyleProps extends PrimitiveProps> = {\n  /** A classname that will be added by default to all instances of a component on the `root` slot. */\n  className?: string;\n\n  /** An options from compose(), should be used only if component was created by `compose()`. */\n  composeOptions?: ComposePreparedOptions;\n\n  /**\n   * A mapping from component's props to styles functions props. Can be only primitive types as they will be used for\n   * cache keys.\n   */\n  mapPropsToStyles?: () => StyleProps;\n\n  /**\n   * A set props of that contain mapping for props that perform inline styles overrides, for example `styles` or\n   * `variables`.\n   */\n  mapPropsToInlineStyles?: () => InlineStyleProps<StyleProps>;\n\n  /**\n   * All components props, should be used only if component was created by `compose()`. Will be replaced in future with\n   * better approach.\n   */\n  unstable_props?: Record<string, any>;\n\n  /** A current mode for text direction (ltr or rtl). */\n  rtl?: boolean;\n};\n\ntype UseStylesResult = {\n  classes: ComponentSlotClasses;\n  styles: ComponentSlotStylesResolved;\n};\n\ntype InlineStyleProps<StyleProps> = {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  design?: ComponentDesignProp;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<StyleProps, any>; // TODO: see if we can improve it\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n};\n\nconst defaultContext: StylesContextValue<{ renderRule: RendererRenderRule }> = {\n  rtl: false,\n  disableAnimations: false,\n  performance: {\n    enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n    enableStylesCaching: true,\n    enableVariablesCaching: true,\n    enableBooleanVariablesCaching: false,\n  },\n  renderer: { renderRule: () => '' },\n  theme: emptyTheme,\n};\n\nconst useStyles = <StyleProps extends PrimitiveProps>(\n  displayName: string,\n  options: UseStylesOptions<StyleProps>,\n): UseStylesResult => {\n  const context: StylesContextValue<{ renderRule: RendererRenderRule }> =\n    React.useContext(ThemeContext) || defaultContext;\n\n  const {\n    className = process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n    composeOptions,\n    mapPropsToStyles = () => ({} as StyleProps),\n    mapPropsToInlineStyles = () => ({} as InlineStyleProps<StyleProps>),\n    unstable_props = {},\n    rtl = false,\n  } = options;\n  const componentStylesProps = mapPropsToStyles();\n\n  // `composeProps` should include all props including stylesProps as they can contain state\n  const composeProps = { ...unstable_props, ...componentStylesProps };\n  const composeStylesProps = composeOptions?.mapPropsToStylesPropsChain?.reduce(\n    (acc, fn) => ({ ...acc, ...fn(composeProps) }),\n    {},\n  );\n\n  // Stores debug information for component.\n  const debug = React.useRef<{ fluentUIDebug: DebugData | null }>({ fluentUIDebug: null });\n  const { classes, styles: resolvedStyles } = getStyles({\n    // Input values\n    className: composeOptions?.className || className,\n    displayNames: composeOptions?.displayNames || [displayName],\n    props: {\n      ...componentStylesProps,\n      ...mapPropsToInlineStyles(),\n      ...composeStylesProps,\n    },\n\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl,\n    saveDebug: fluentUIDebug => (debug.current = { fluentUIDebug }),\n    theme: context.theme,\n    performance: context.performance,\n  });\n\n  return { classes, styles: resolvedStyles };\n};\n\nexport default useStyles;\n"],"file":"useStyles.js"}