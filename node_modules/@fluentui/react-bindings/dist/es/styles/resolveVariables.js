import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { callable, mergeComponentVariables, withDebugId } from '@fluentui/styles';
var variablesCache = new WeakMap();

var resolveVariables = function resolveVariables(displayNames, theme, variables, enabledVariablesCaching) {
  var componentThemeVariables; // Filter out components that doesn't have defined variables in theme

  var effectiveDisplayNames = displayNames.filter(function (displayName) {
    return !!theme.componentVariables[displayName];
  }); //
  // Simple caching model, works only if there is no `props.variables`
  // Resolves variables for this component, cache the result in provider
  //

  if (enabledVariablesCaching) {
    if (!variablesCache.has(theme)) {
      variablesCache.set(theme, {});
    }

    var variablesThemeCache = variablesCache.get(theme) || {}; // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }
    // This allows to avoid creating useless cache entries for `Bar` & `Baz` components

    var handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];

    if (!variablesThemeCache[handlingDisplayName]) {
      variablesThemeCache[handlingDisplayName] = mergeComponentVariables.apply(void 0, _toConsumableArray(effectiveDisplayNames.map(function (displayName) {
        return theme.componentVariables[displayName];
      })))(theme.siteVariables);
      variablesCache.set(theme, variablesThemeCache);
    }

    componentThemeVariables = variablesThemeCache[handlingDisplayName];
  } else if (effectiveDisplayNames.length === 1) {
    componentThemeVariables = callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};
  } else {
    componentThemeVariables = mergeComponentVariables.apply(void 0, _toConsumableArray(effectiveDisplayNames.map(function (displayName) {
      return theme.componentVariables[displayName];
    })))(theme.siteVariables);
  }

  if (variables === undefined) {
    return componentThemeVariables;
  }

  return mergeComponentVariables(componentThemeVariables, withDebugId(variables, 'props.variables'))(theme.siteVariables);
};

export default resolveVariables;
//# sourceMappingURL=resolveVariables.js.map
