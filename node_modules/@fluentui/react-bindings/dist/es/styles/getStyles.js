import _isEmpty from "lodash/isEmpty";
import _filter from "lodash/filter";
import { isDebugEnabled } from '@fluentui/styles';
import resolveVariables from './resolveVariables';
import resolveStyles from './resolveStyles';

var getStyles = function getStyles(options) {
  //
  // To compute styles we are going through three stages:
  // - resolve variables (siteVariables => componentVariables + props.variables)
  // - resolve styles (with resolvedVariables & props.styles & props.design)
  // - compute classes (with resolvedStyles)
  // - conditionally add sources for evaluating debug information to component
  var resolvedVariables = resolveVariables(options.displayNames, options.theme, options.props.variables, options.performance.enableVariablesCaching);

  var _resolveStyles = resolveStyles(options, resolvedVariables),
      classes = _resolveStyles.classes,
      resolvedStyles = _resolveStyles.resolvedStyles,
      resolvedStylesDebug = _resolveStyles.resolvedStylesDebug; // conditionally add sources for evaluating debug information to component


  if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {
    options.saveDebug({
      componentName: options.displayNames.join(':'),
      componentVariables: _filter(resolvedVariables._debug, function (variables) {
        return !_isEmpty(variables.resolved);
      }),
      componentStyles: resolvedStylesDebug,
      siteVariables: _filter(options.theme.siteVariables._debug, function (siteVars) {
        if (_isEmpty(siteVars) || _isEmpty(siteVars.resolved)) {
          return false;
        }

        var keys = Object.keys(siteVars.resolved);

        if (keys.length === 1 && keys.pop() === 'fontSizes' && _isEmpty(siteVars.resolved['fontSizes'])) {
          return false;
        }

        return true;
      })
    });
  }

  return {
    classes: classes,
    variables: resolvedVariables,
    styles: resolvedStyles,
    theme: options.theme
  };
};

export default getStyles;
//# sourceMappingURL=getStyles.js.map
