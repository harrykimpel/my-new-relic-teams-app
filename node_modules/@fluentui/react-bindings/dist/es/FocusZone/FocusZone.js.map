{"version":3,"sources":["FocusZone/FocusZone.tsx"],"names":["FocusZoneDirection","FocusZoneTabbableElements","IS_FOCUSABLE_ATTRIBUTE","React","cx","keyboardKey","ReactDOM","PropTypes","elementContains","findScrollableParent","getDocument","getParent","getWindow","shouldWrapFocus","getElementType","getUnhandledProps","getNextElement","getPreviousElement","isElementFocusZone","isElementFocusSubZone","isElementTabbable","getElementIndexPath","getFocusableByIndexPath","FOCUSZONE_ID_ATTRIBUTE","TABINDEX","NO_VERTICAL_WRAP","NO_HORIZONTAL_WRAP","LARGE_DISTANCE_FROM_CENTER","LARGE_NEGATIVE_DISTANCE_FROM_CENTER","_allInstances","_outerZones","Set","ALLOWED_INPUT_TYPES","ALLOW_VIRTUAL_ELEMENTS","FocusZone","size","props","current","elem","_root","findDOMNode","setParkedFocus","ev","onActiveElementChanged","stopFocusPropagation","shouldFocusInnerElementWhenReceivedFocus","defaultTabbableElement","newActiveElement","isImmediateDescendant","isImmediateDescendantOfZone","target","parentElement","maybeElementToFocus","focus","_activeElement","setFocusAlignment","updateTabIndexes","stopPropagation","getCode","Tab","forEach","zone","disabled","path","push","length","pop","setActiveElement","direction","shouldEnterInnerZone","pagingSupportDisabled","undefined","doc","onKeyDown","activeElement","_isInnerZone","isDefaultPrevented","innerZone","getFirstInnerZone","focusElement","firstChild","altKey","Spacebar","tryInvokeClickForFocusable","ArrowLeft","vertical","preventDefaultWhenHandled","moveFocusLeft","ArrowRight","moveFocusRight","ArrowUp","horizontal","moveFocusUp","ArrowDown","moveFocusDown","PageDown","moveFocusPaging","PageUp","handleTabKey","all","inputOnly","isElementInput","focusChanged","_processingTabKey","shiftKey","tabWithDirection","isRtl","shouldResetActiveElementWhenTabFromZone","Home","isContentEditableElement","shouldInputLoseFocus","End","lastChild","Enter","preventDefault","isForward","activeRect","targetRect","leftAlignment","_focusAlignment","left","targetRectTop","Math","floor","top","activeRectBottom","bottom","targetRectBottom","activeRectTop","isValidCandidateOnpagingDown","isValidCandidateOnpagingUp","width","abs","_id","setRef","windowElement","body","nodeType","add","addEventListener","_onKeyDownCapture","_onBlur","querySelector","shouldFocusOnMount","_lastIndexPath","preventFocusRestoration","elementToFocus","delete","removeEventListener","_defaultFocusElement","className","ElementType","unhandledProps","propTypes","evaluateFocusBeforeRender","_onKeyDown","_onFocus","_onMouseDown","children","forceIntoFirstElement","getAttribute","ownerZoneElement","getOwnerZone","ownerZone","element","shouldReceiveFocus","focusedElement","shouldRestoreFocus","isParked","_isParked","allowFocusRoot","_parkedTabIndex","setAttribute","removeAttribute","forceAlignemnt","previousActiveElement","tabIndex","forRootElement","rootElement","child","firstElementChild","match","nextElementSibling","getDistanceFromCenter","useDefaultWrap","candidateDistance","candidateElement","changedFocus","isBidirectional","bidirectional","getBoundingClientRect","elementDistance","isCircularNavigation","lastElementChild","targetTop","moveFocus","distance","shouldWrap","topBottomComparison","parseFloat","toFixed","right","scrollableParent","targetBottom","pagesize","clientHeight","getHorizontalDistanceFromCenter","isElementPassedPageSizeOnPagingDown","isElementPassedPageSizeOnPagingUp","isHorizontal","isVertical","rect","height","onElement","childNodes","childIndex","tagName","toLowerCase","type","indexOf","selectionStart","selectionEnd","isRangeSelected","inputValue","value","isReadonly","readOnly","shouldInputLoseFocusOnArrowKey","noWrapDataAttribute","checkForNoWrap","Component","string","number","func","bool","as","elementType","onFocus"],"mappings":"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","sourcesContent":["import { FocusZoneDirection, FocusZoneTabbableElements, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport * as keyboardKey from 'keyboard-key';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  elementContains,\n  findScrollableParent,\n  getDocument,\n  getParent,\n  getWindow,\n  shouldWrapFocus,\n} from '@uifabric/utilities';\n\nimport getElementType from '../utils/getElementType';\nimport getUnhandledProps from '../utils/getUnhandledProps';\nimport { FocusZoneProps, IFocusZone } from './FocusZone.types';\nimport {\n  getNextElement,\n  getPreviousElement,\n  isElementFocusZone,\n  isElementFocusSubZone,\n  isElementTabbable,\n  getElementIndexPath,\n  getFocusableByIndexPath,\n  FOCUSZONE_ID_ATTRIBUTE,\n} from './focusUtilities';\n\nconst TABINDEX = 'tabindex';\nconst NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nconst NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nconst LARGE_DISTANCE_FROM_CENTER = 999999999;\nconst LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\n\nconst _allInstances: {\n  [key: string]: FocusZone;\n} = {};\n\nconst _outerZones: Set<FocusZone> = new Set();\n\ninterface Point {\n  left: number;\n  top: number;\n}\nconst ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\n\nconst ALLOW_VIRTUAL_ELEMENTS = false;\n\nexport default class FocusZone extends React.Component<FocusZoneProps> implements IFocusZone {\n  static propTypes = {\n    className: PropTypes.string,\n    direction: PropTypes.number,\n    defaultTabbableElement: PropTypes.func,\n    shouldFocusOnMount: PropTypes.bool,\n    shouldResetActiveElementWhenTabFromZone: PropTypes.bool,\n    shouldFocusInnerElementWhenReceivedFocus: PropTypes.bool,\n    disabled: PropTypes.bool,\n    as: PropTypes.elementType as PropTypes.Requireable<React.ElementType>,\n    isCircularNavigation: PropTypes.bool,\n    shouldEnterInnerZone: PropTypes.func,\n    onActiveElementChanged: PropTypes.func,\n    shouldReceiveFocus: PropTypes.func,\n    handleTabKey: PropTypes.number,\n    shouldInputLoseFocusOnArrowKey: PropTypes.func,\n    stopFocusPropagation: PropTypes.bool,\n    onFocus: PropTypes.func,\n    preventDefaultWhenHandled: PropTypes.bool,\n    isRtl: PropTypes.bool,\n    preventFocusRestoration: PropTypes.bool,\n    pagingSupportDisabled: PropTypes.bool,\n  };\n\n  static defaultProps: FocusZoneProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    as: 'div',\n    preventDefaultWhenHandled: true,\n  };\n\n  static displayName = 'FocusZone';\n  static className = 'ms-FocusZone';\n\n  /** Used for testing purposes only. */\n  static getOuterZones(): number {\n    return _outerZones.size;\n  }\n\n  _root: { current: HTMLElement | null } = { current: null };\n  _id: string;\n  /** The most recently focused child element. */\n  _activeElement: HTMLElement | null;\n\n  /**\n   * The index path to the last focused child element.\n   */\n  _lastIndexPath: number[] | undefined;\n\n  /**\n   * Flag to define when we've intentionally parked focus on the root element to temporarily\n   * hold focus until items appear within the zone.\n   */\n  _isParked: boolean = false;\n  _parkedTabIndex: string | null | undefined;\n\n  /** The child element with tabindex=0. */\n  _defaultFocusElement: HTMLElement | null;\n  _focusAlignment: Point;\n  _isInnerZone: boolean;\n\n  /** Used to allow us to move to next focusable element even when we're focusing on a input element when pressing tab */\n  _processingTabKey: boolean;\n\n  windowElement: Window | null;\n\n  constructor(props: FocusZoneProps) {\n    super(props);\n\n    this._id = _.uniqueId('FocusZone');\n\n    this._focusAlignment = {\n      left: 0,\n      top: 0,\n    };\n\n    this._processingTabKey = false;\n  }\n\n  componentDidMount(): void {\n    _allInstances[this._id] = this;\n\n    this.setRef(this); // called here to support functional components, we only need HTMLElement ref anyway\n\n    if (!this._root.current) {\n      return;\n    }\n\n    // @ts-ignore\n    this.windowElement = getWindow(this._root.current);\n    let parentElement = getParent(this._root.current, ALLOW_VIRTUAL_ELEMENTS);\n    const doc = getDocument(this._root.current);\n\n    // @ts-ignore\n    while (parentElement && parentElement !== doc.body && parentElement.nodeType === 1) {\n      if (isElementFocusZone(parentElement)) {\n        this._isInnerZone = true;\n        break;\n      }\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    if (!this._isInnerZone) {\n      _outerZones.add(this);\n\n      if (this.windowElement && _outerZones.size === 1) {\n        this.windowElement.addEventListener('keydown', this._onKeyDownCapture, true);\n      }\n    }\n\n    this._root.current.addEventListener('blur', this._onBlur, true);\n\n    // Assign initial tab indexes so that we can set initial focus as appropriate.\n    this.updateTabIndexes();\n\n    if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n      this._activeElement = this.getDocument().querySelector(this.props.defaultTabbableElement) as HTMLElement;\n    }\n\n    if (this.props.shouldFocusOnMount) {\n      this.focus();\n    }\n  }\n\n  componentDidUpdate(): void {\n    if (!this._root.current) {\n      return;\n    }\n    const doc = getDocument(this._root.current);\n\n    if (\n      doc &&\n      this._lastIndexPath &&\n      (doc.activeElement === doc.body ||\n        doc.activeElement === null ||\n        (!this.props.preventFocusRestoration && doc.activeElement === this._root.current))\n    ) {\n      // The element has been removed after the render, attempt to restore focus.\n      const elementToFocus = getFocusableByIndexPath(this._root.current as HTMLElement, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this.setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this.setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this.setParkedFocus(true);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n\n      if (this.windowElement && _outerZones.size === 0) {\n        this.windowElement.removeEventListener('keydown', this._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  }\n\n  render() {\n    const { className } = this.props;\n\n    const ElementType = getElementType(this.props);\n    const unhandledProps = getUnhandledProps(_.keys(FocusZone.propTypes) as any, this.props);\n\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this.evaluateFocusBeforeRender();\n\n    return (\n      <ElementType\n        {...unhandledProps}\n        className={cx(FocusZone.className, className)}\n        data-focuszone-id={this._id}\n        onKeyDown={this._onKeyDown}\n        onFocus={this._onFocus}\n        onMouseDownCapture={this._onMouseDown}\n      >\n        {this.props.children}\n      </ElementType>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._root.current) {\n      if (\n        !forceIntoFirstElement &&\n        this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        this._isInnerZone\n      ) {\n        const ownerZoneElement = this.getOwnerZone(this._root.current) as HTMLElement;\n\n        if (ownerZoneElement !== this._root.current) {\n          const ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      }\n      if (\n        !forceIntoFirstElement &&\n        this._activeElement &&\n        elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) &&\n        isElementTabbable(this._activeElement)\n      ) {\n        this._activeElement.focus();\n        return true;\n      }\n\n      const firstChild = this._root.current.firstChild as HTMLElement;\n\n      return this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement);\n    }\n    return false;\n  }\n\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focusLast(): boolean {\n    if (this._root.current) {\n      const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement);\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focusElement(element: HTMLElement): boolean {\n    const { shouldReceiveFocus } = this.props;\n\n    if (shouldReceiveFocus && !shouldReceiveFocus(element)) {\n      return false;\n    }\n\n    if (element) {\n      this.setActiveElement(element);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  setRef = (elem: React.ReactInstance): void => {\n    // findDOMNode needed to get correct DOM ref with react-hot-loader, see https://github.com/gaearon/react-hot-loader/issues/964\n    this._root.current = ReactDOM.findDOMNode(elem) as HTMLElement;\n  };\n\n  // Record if focus was in the zone, what the index path to the element is at this time.\n  evaluateFocusBeforeRender(): void {\n    if (!this._root.current) {\n      return;\n    }\n    const doc = getDocument(this._root.current);\n\n    if (!doc) {\n      return;\n    }\n\n    const focusedElement = doc.activeElement as HTMLElement;\n\n    // Only update the index path if we are not parked on the root.\n    if (focusedElement !== this._root.current) {\n      const shouldRestoreFocus = elementContains(this._root.current, focusedElement, ALLOW_VIRTUAL_ELEMENTS);\n\n      this._lastIndexPath = shouldRestoreFocus\n        ? getElementIndexPath(this._root.current as HTMLElement, doc.activeElement as HTMLElement)\n        : undefined;\n    }\n  }\n\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  setParkedFocus(isParked: boolean): void {\n    if (this._root.current && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = this._root.current.getAttribute('tabindex');\n          this._root.current.setAttribute('tabindex', '-1');\n        }\n        this._root.current.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          this._root.current.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          this._root.current.removeAttribute('tabindex');\n        }\n      }\n    }\n  }\n\n  _onBlur = () => {\n    this.setParkedFocus(false);\n  };\n\n  _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const {\n      onActiveElementChanged,\n      stopFocusPropagation,\n      shouldFocusInnerElementWhenReceivedFocus,\n      defaultTabbableElement,\n    } = this.props;\n\n    let newActiveElement: HTMLElement | null | undefined;\n    const isImmediateDescendant = this.isImmediateDescendantOfZone(ev.target as HTMLElement);\n\n    if (isImmediateDescendant) {\n      newActiveElement = ev.target as HTMLElement;\n    } else {\n      let parentElement = ev.target as HTMLElement;\n\n      while (parentElement && parentElement !== this._root.current) {\n        if (isElementTabbable(parentElement) && this.isImmediateDescendantOfZone(parentElement)) {\n          newActiveElement = parentElement;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n      }\n    }\n\n    // If an inner focusable element should be focused when FocusZone container receives focus\n    if (shouldFocusInnerElementWhenReceivedFocus && ev.target === this._root.current) {\n      const maybeElementToFocus =\n        defaultTabbableElement &&\n        typeof defaultTabbableElement === 'function' &&\n        defaultTabbableElement(this._root.current);\n\n      // try to focus defaultTabbable element\n      if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n        newActiveElement = maybeElementToFocus;\n        maybeElementToFocus.focus();\n      } else {\n        // force focus on first focusable element\n        this.focus(true);\n        if (this._activeElement) {\n          // set to null as new active element was handled in method above\n\n          newActiveElement = null;\n        }\n      }\n    }\n\n    if (newActiveElement && newActiveElement !== this._activeElement) {\n      this._activeElement = newActiveElement;\n\n      if (isImmediateDescendant) {\n        this.setFocusAlignment(this._activeElement);\n        this.updateTabIndexes();\n      }\n    }\n\n    if (onActiveElementChanged) {\n      onActiveElementChanged(this._activeElement as HTMLElement, ev);\n    }\n\n    if (stopFocusPropagation) {\n      ev.stopPropagation();\n    }\n\n    _.invoke(this.props, 'onFocus', ev);\n  };\n\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   */\n  _onKeyDownCapture = (ev: KeyboardEvent) => {\n    if (keyboardKey.getCode(ev) === keyboardKey.Tab) {\n      _outerZones.forEach(zone => zone.updateTabIndexes());\n    }\n  };\n\n  _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    const path: HTMLElement[] = [];\n\n    while (target && target !== this._root.current) {\n      path.push(target);\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    }\n\n    while (path.length) {\n      target = path.pop() as HTMLElement;\n\n      if (target && isElementTabbable(target)) {\n        this.setActiveElement(target, true);\n      }\n\n      if (isElementFocusZone(target)) {\n        // Stop here since the focus zone will take care of its own children.\n        break;\n      }\n    }\n  };\n\n  setActiveElement(element: HTMLElement, forceAlignemnt?: boolean): void {\n    const previousActiveElement = this._activeElement;\n\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this.updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignemnt) {\n        this.setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  }\n\n  preventDefaultWhenHandled(ev: React.KeyboardEvent<HTMLElement>): void {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  }\n\n  /**\n   * Handle the keystrokes.\n   */\n  _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    const { direction, disabled, shouldEnterInnerZone, pagingSupportDisabled } = this.props;\n\n    if (disabled) {\n      return undefined;\n    }\n\n    const doc = getDocument(this._root.current);\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // @ts-ignore\n    if (doc.activeElement === this._root.current && this._isInnerZone) {\n      // If this element has focus, it is being controlled by a parent.\n      // Ignore the keystroke.\n      return undefined;\n    }\n\n    // If the default has been prevented, do not process keyboard events.\n    if (ev.isDefaultPrevented()) {\n      return undefined;\n    }\n\n    if (\n      shouldEnterInnerZone &&\n      shouldEnterInnerZone(ev) &&\n      this.isImmediateDescendantOfZone(ev.target as HTMLElement)\n    ) {\n      // Try to focus\n      const innerZone = this.getFirstInnerZone();\n\n      if (innerZone) {\n        if (!innerZone.focus(true)) {\n          return undefined;\n        }\n      } else if (isElementFocusSubZone(ev.target as HTMLElement)) {\n        if (\n          !this.focusElement(\n            getNextElement(\n              ev.target as HTMLElement,\n              (ev.target as HTMLElement).firstChild as HTMLElement,\n              true,\n            ) as HTMLElement,\n          )\n        ) {\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    } else if (ev.altKey) {\n      return undefined;\n    } else {\n      switch (keyboardKey.getCode(ev)) {\n        case keyboardKey.Spacebar:\n          // @ts-ignore\n          if (this.tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.ArrowLeft:\n          if (direction !== FocusZoneDirection.vertical) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusLeft()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowRight:\n          if (direction !== FocusZoneDirection.vertical) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusRight()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowUp:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusUp()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowDown:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusDown()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.PageDown:\n          if (!pagingSupportDisabled && this.moveFocusPaging(true)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.PageUp:\n          if (!pagingSupportDisabled && this.moveFocusPaging(false)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.Tab:\n          if (\n            this.props.handleTabKey === FocusZoneTabbableElements.all ||\n            (this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n              this.isElementInput(ev.target as HTMLElement))\n          ) {\n            let focusChanged = false;\n            this._processingTabKey = true;\n            if (\n              direction === FocusZoneDirection.vertical ||\n              !this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP)\n            ) {\n              focusChanged = ev.shiftKey ? this.moveFocusUp() : this.moveFocusDown();\n            } else {\n              const tabWithDirection = this.props.isRtl ? !ev.shiftKey : ev.shiftKey;\n              focusChanged = tabWithDirection ? this.moveFocusLeft() : this.moveFocusRight();\n            }\n            this._processingTabKey = false;\n            if (focusChanged) {\n              break;\n            }\n          } else if (this.props.shouldResetActiveElementWhenTabFromZone) {\n            this._activeElement = null;\n          }\n          return undefined;\n\n        case keyboardKey.Home:\n          if (\n            this.isContentEditableElement(ev.target as HTMLElement) ||\n            (this.isElementInput(ev.target as HTMLElement) &&\n              !this.shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n          const firstChild = this._root.current && (this._root.current.firstChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            firstChild &&\n            this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.End:\n          if (\n            this.isContentEditableElement(ev.target as HTMLElement) ||\n            (this.isElementInput(ev.target as HTMLElement) &&\n              !this.shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n\n          const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.Enter:\n          // @ts-ignore\n          if (this.tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return undefined;\n\n        default:\n          return undefined;\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    return undefined;\n  };\n\n  /**\n   * Walk up the dom try to find a focusable element.\n   * TODO\n   */\n  tryInvokeClickForFocusable(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverse to find first child zone.\n   */\n  getFirstInnerZone(forRootElement?: HTMLElement | null): FocusZone | null {\n    const rootElement = forRootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n    }\n\n    let child = rootElement.firstElementChild as HTMLElement | null;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n      }\n      const match = this.getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling as HTMLElement | null;\n    }\n\n    return null;\n  }\n\n  moveFocus(\n    isForward: boolean,\n    getDistanceFromCenter: (activeRect: ClientRect, targetRect: ClientRect) => number,\n    // @ts-ignore\n    ev?: Event,\n    useDefaultWrap: boolean = true,\n  ): boolean {\n    let element = this._activeElement;\n    let candidateDistance = -1;\n    let candidateElement: HTMLElement | undefined = undefined;\n    let changedFocus = false;\n    const isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this.isElementInput(element)) {\n      if (!this.shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n\n    const activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = (isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element)) as HTMLElement;\n\n      if (isBidirectional) {\n        if (element) {\n          const targetRect = element.getBoundingClientRect();\n          const elementDistance = getDistanceFromCenter(activeRect as ClientRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n\n    return changedFocus;\n  }\n\n  moveFocusDown(): boolean {\n    let targetTop = -1;\n    const leftAlignment = this._focusAlignment.left;\n\n    if (\n      this.moveFocus(true, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusUp(): boolean {\n    let targetTop = -1;\n    const leftAlignment = this._focusAlignment.left;\n\n    if (\n      this.moveFocus(false, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusLeft(): boolean {\n    const shouldWrap = this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this.moveFocus(\n        // @ts-ignore\n        this.props.isRtl,\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (this.props.isRtl) {\n            // When in RTL, this comparison should be the same as the one in moveFocusRight for LTR.\n            // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n            // This is important, because we want to be comparing the top of the target rect\n            // with the bottom of the active rect.\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.right <= activeRect.right &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = activeRect.right - targetRect.right;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /* ev */,\n        shouldWrap,\n      )\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusRight(): boolean {\n    const shouldWrap = this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this.moveFocus(\n        !this.props.isRtl,\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (this.props.isRtl) {\n            // When in RTL, this comparison should be the same as the one in moveFocusLeft for LTR.\n            // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n            // This is important, because we want to be comparing the bottom of the target rect\n            // with the top of the active rect.\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.left >= activeRect.left &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = targetRect.left - activeRect.left;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /* ev */,\n        shouldWrap,\n      )\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  getHorizontalDistanceFromCenter = (isForward: boolean, activeRect: ClientRect, targetRect: ClientRect): number => {\n    const leftAlignment = this._focusAlignment.left;\n    // ClientRect values can be floats that differ by very small fractions of a decimal.\n    // If the difference between top and bottom are within a pixel then we should treat\n    // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n    // but without Math.Floor they will be handled incorrectly.\n    const targetRectTop = Math.floor(targetRect.top);\n    const activeRectBottom = Math.floor(activeRect.bottom);\n    const targetRectBottom = Math.floor(targetRect.bottom);\n    const activeRectTop = Math.floor(activeRect.top);\n    const isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n    const isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n    if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n      if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n        return 0;\n      }\n      return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n    }\n\n    if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n      return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n    }\n    return LARGE_DISTANCE_FROM_CENTER;\n  };\n\n  moveFocusPaging(isForward: boolean, useDefaultWrap: boolean = true): boolean {\n    let element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this.isElementInput(element)) {\n      if (!this.shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n    const scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    let candidateDistance = -1;\n    let candidateElement = undefined;\n    let targetTop = -1;\n    let targetBottom = -1;\n    const pagesize = scrollableParent.clientHeight;\n    const activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element);\n      if (element) {\n        const targetRect = element.getBoundingClientRect();\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const activeRectTop = Math.floor(activeRect.top);\n        const elementDistance = this.getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        const isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        const isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    let changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this.setFocusAlignment(candidateElement as HTMLElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n    return changedFocus;\n  }\n\n  setFocusAlignment(element: HTMLElement, isHorizontal?: boolean, isVertical?: boolean) {\n    if (\n      this.props.direction === FocusZoneDirection.bidirectional &&\n      (!this._focusAlignment || isHorizontal || isVertical)\n    ) {\n      const rect = element.getBoundingClientRect();\n      const left = rect.left + rect.width / 2;\n      const top = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = { left, top };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top;\n      }\n    }\n  }\n\n  isImmediateDescendantOfZone(element?: HTMLElement): boolean {\n    return this.getOwnerZone(element) === this._root.current;\n  }\n\n  getOwnerZone(element?: HTMLElement): HTMLElement | null {\n    const doc = getDocument(this._root.current);\n    let parentElement = getParent(element as HTMLElement, ALLOW_VIRTUAL_ELEMENTS);\n\n    // @ts-ignore\n    while (parentElement && parentElement !== this._root.current && parentElement !== doc.body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return this._root.current;\n  }\n\n  updateTabIndexes(onElement?: HTMLElement) {\n    let element = onElement;\n\n    if (\n      !this._activeElement &&\n      this.props.defaultTabbableElement &&\n      typeof this.props.defaultTabbableElement === 'function'\n    ) {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current as HTMLElement);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement, ALLOW_VIRTUAL_ELEMENTS)) {\n        this._activeElement = null;\n      }\n    }\n\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    const childNodes = element && element.children;\n\n    for (let childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      const child = childNodes[childIndex] as HTMLElement;\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (\n            !this._isInnerZone &&\n            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n          ) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (\n          !this._isInnerZone &&\n          ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n        ) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this.updateTabIndexes(child);\n    }\n  }\n\n  isContentEditableElement(element: HTMLElement): boolean {\n    return element && element.getAttribute('contenteditable') === 'true';\n  }\n\n  isElementInput(element: HTMLElement): boolean {\n    if (\n      element &&\n      element.tagName &&\n      (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  shouldInputLoseFocus(element: HTMLInputElement, isForward?: boolean) {\n    // If a tab was used, we want to focus on the next element.\n    if (\n      !this._processingTabKey &&\n      element &&\n      element.type &&\n      ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1\n    ) {\n      const selectionStart = element.selectionStart;\n      const selectionEnd = element.selectionEnd;\n      const isRangeSelected = selectionStart !== selectionEnd;\n      const inputValue = element.value;\n      const isReadonly = element.readOnly;\n\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length and it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit tab)\n      // and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is determined by calling the\n      // callback shouldInputLoseFocusOnArrowKey\n      if (\n        isRangeSelected ||\n        (selectionStart! > 0 && !isForward && !isReadonly) ||\n        (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n        (!!this.props.handleTabKey &&\n          !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  shouldWrapFocus(\n    element: HTMLElement,\n    noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n  ): boolean {\n    return !!this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  }\n\n  getDocument(): Document {\n    return getDocument(this._root.current)!;\n  }\n}\n"],"file":"FocusZone.js"}