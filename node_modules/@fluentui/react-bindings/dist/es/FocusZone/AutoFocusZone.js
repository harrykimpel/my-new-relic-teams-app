import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _keys from "lodash/keys";
import { Ref } from '@fluentui/react-component-ref';
import { callable } from '@fluentui/styles';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import getElementType from '../utils/getElementType';
import getUnhandledProps from '../utils/getUnhandledProps';
import { getNextElement, focusAsync } from './focusUtilities';
/** AutoFocusZone is used to focus inner element on mount. */

var AutoFocusZone =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AutoFocusZone, _React$Component);

  function AutoFocusZone() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AutoFocusZone);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoFocusZone)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "root", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "findElementAndFocusAsync", function () {
      if (!_this.root.current) return;
      var firstFocusableSelector = _this.props.firstFocusableSelector;
      var focusSelector = callable(firstFocusableSelector)();
      var firstFocusableChild = focusSelector ? _this.root.current.querySelector(focusSelector) : getNextElement(_this.root.current, _this.root.current.firstChild, true, false, false, true);
      firstFocusableChild && focusAsync(firstFocusableChild);
    });

    return _this;
  }

  _createClass(AutoFocusZone, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.findElementAndFocusAsync();
    }
  }, {
    key: "render",
    value: function render() {
      var unhandledProps = getUnhandledProps(AutoFocusZone.handledProps, this.props);
      var ElementType = getElementType(this.props);
      return React.createElement(Ref, {
        innerRef: this.root
      }, React.createElement(ElementType, unhandledProps, this.props.children));
    }
  }]);

  return AutoFocusZone;
}(React.Component);

_defineProperty(AutoFocusZone, "propTypes", {
  as: PropTypes.elementType,
  firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string])
});

_defineProperty(AutoFocusZone, "handledProps", _keys(AutoFocusZone.propTypes));

export { AutoFocusZone as default };
//# sourceMappingURL=AutoFocusZone.js.map
