"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var _styles = require("@fluentui/styles");

var _resolveVariables = _interopRequireDefault(require("./resolveVariables"));

var _resolveStyles2 = _interopRequireDefault(require("./resolveStyles"));

var getStyles = function getStyles(options) {
  //
  // To compute styles we are going through three stages:
  // - resolve variables (siteVariables => componentVariables + props.variables)
  // - resolve styles (with resolvedVariables & props.styles & props.design)
  // - compute classes (with resolvedStyles)
  // - conditionally add sources for evaluating debug information to component
  var resolvedVariables = (0, _resolveVariables.default)(options.displayNames, options.theme, options.props.variables, options.performance.enableVariablesCaching);

  var _resolveStyles = (0, _resolveStyles2.default)(options, resolvedVariables),
      classes = _resolveStyles.classes,
      resolvedStyles = _resolveStyles.resolvedStyles,
      resolvedStylesDebug = _resolveStyles.resolvedStylesDebug; // conditionally add sources for evaluating debug information to component


  if (process.env.NODE_ENV !== 'production' && _styles.isDebugEnabled) {
    options.saveDebug({
      componentName: options.displayNames.join(':'),
      componentVariables: (0, _filter2.default)(resolvedVariables._debug, function (variables) {
        return !(0, _isEmpty2.default)(variables.resolved);
      }),
      componentStyles: resolvedStylesDebug,
      siteVariables: (0, _filter2.default)(options.theme.siteVariables._debug, function (siteVars) {
        if ((0, _isEmpty2.default)(siteVars) || (0, _isEmpty2.default)(siteVars.resolved)) {
          return false;
        }

        var keys = Object.keys(siteVars.resolved);

        if (keys.length === 1 && keys.pop() === 'fontSizes' && (0, _isEmpty2.default)(siteVars.resolved['fontSizes'])) {
          return false;
        }

        return true;
      })
    });
  }

  return {
    classes: classes,
    variables: resolvedVariables,
    styles: resolvedStyles,
    theme: options.theme
  };
};

var _default = getStyles;
exports.default = _default;
//# sourceMappingURL=getStyles.js.map
