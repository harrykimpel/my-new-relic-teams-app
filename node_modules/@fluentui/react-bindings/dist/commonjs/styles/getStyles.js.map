{"version":3,"sources":["styles/getStyles.ts"],"names":["getStyles","options","resolvedVariables","displayNames","theme","props","variables","performance","enableVariablesCaching","classes","resolvedStyles","resolvedStylesDebug","process","env","NODE_ENV","isDebugEnabled","saveDebug","componentName","join","componentVariables","_debug","resolved","componentStyles","siteVariables","siteVars","keys","Object","length","pop","styles"],"mappings":";;;;;;;;;;;;;AAAA;;AAKA;;AACA;;AASA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAoD;AACpE;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,iBAAiB,GAAG,+BACxBD,OAAO,CAACE,YADgB,EAExBF,OAAO,CAACG,KAFgB,EAGxBH,OAAO,CAACI,KAAR,CAAcC,SAHU,EAIxBL,OAAO,CAACM,WAAR,CAAoBC,sBAJI,CAA1B;;AARoE,uBAcX,6BAAcP,OAAd,EAAuBC,iBAAvB,CAdW;AAAA,MAc5DO,OAd4D,kBAc5DA,OAd4D;AAAA,MAcnDC,cAdmD,kBAcnDA,cAdmD;AAAA,MAcnCC,mBAdmC,kBAcnCA,mBAdmC,EAgBpE;;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,sBAA7C,EAA6D;AAC3Dd,IAAAA,OAAO,CAACe,SAAR,CAAkB;AAChBC,MAAAA,aAAa,EAAEhB,OAAO,CAACE,YAAR,CAAqBe,IAArB,CAA0B,GAA1B,CADC;AAEhBC,MAAAA,kBAAkB,EAAE,sBAASjB,iBAAiB,CAACkB,MAA3B,EAAmC,UAAAd,SAAS;AAAA,eAAI,CAAC,uBAAUA,SAAS,CAACe,QAApB,CAAL;AAAA,OAA5C,CAFJ;AAGhBC,MAAAA,eAAe,EAAEX,mBAHD;AAIhBY,MAAAA,aAAa,EAAE,sBAAStB,OAAO,CAACG,KAAR,CAAcmB,aAAd,CAA4BH,MAArC,EAA6C,UAAAI,QAAQ,EAAI;AACtE,YAAI,uBAAUA,QAAV,KAAuB,uBAAUA,QAAQ,CAACH,QAAnB,CAA3B,EAAyD;AACvD,iBAAO,KAAP;AACD;;AAED,YAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,QAAQ,CAACH,QAArB,CAAb;;AACA,YAAII,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBF,IAAI,CAACG,GAAL,OAAe,WAApC,IAAmD,uBAAUJ,QAAQ,CAACH,QAAT,CAAkB,WAAlB,CAAV,CAAvD,EAAkG;AAChG,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD,OAXc;AAJC,KAAlB;AAiBD;;AAED,SAAO;AACLZ,IAAAA,OAAO,EAAPA,OADK;AAELH,IAAAA,SAAS,EAAEJ,iBAFN;AAGL2B,IAAAA,MAAM,EAAEnB,cAHH;AAILN,IAAAA,KAAK,EAAEH,OAAO,CAACG;AAJV,GAAP;AAMD,CA3CD;;eA6CeJ,S","sourcesContent":["import { ComponentSlotStylesResolved, ComponentVariablesObject, isDebugEnabled } from '@fluentui/styles';\n\nimport * as _ from 'lodash';\n\nimport { ComponentSlotClasses, ResolveStylesOptions, StylesContextValue } from '../styles/types';\nimport resolveVariables from './resolveVariables';\nimport resolveStyles from './resolveStyles';\n\nexport type GetStylesResult = {\n  classes: ComponentSlotClasses;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  theme: StylesContextValue['theme'];\n};\n\nconst getStyles = (options: ResolveStylesOptions): GetStylesResult => {\n  //\n  // To compute styles we are going through three stages:\n  // - resolve variables (siteVariables => componentVariables + props.variables)\n  // - resolve styles (with resolvedVariables & props.styles & props.design)\n  // - compute classes (with resolvedStyles)\n  // - conditionally add sources for evaluating debug information to component\n\n  const resolvedVariables = resolveVariables(\n    options.displayNames,\n    options.theme,\n    options.props.variables,\n    options.performance.enableVariablesCaching,\n  );\n  const { classes, resolvedStyles, resolvedStylesDebug } = resolveStyles(options, resolvedVariables);\n\n  // conditionally add sources for evaluating debug information to component\n  if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n    options.saveDebug({\n      componentName: options.displayNames.join(':'),\n      componentVariables: _.filter(resolvedVariables._debug, variables => !_.isEmpty(variables.resolved)),\n      componentStyles: resolvedStylesDebug,\n      siteVariables: _.filter(options.theme.siteVariables._debug, siteVars => {\n        if (_.isEmpty(siteVars) || _.isEmpty(siteVars.resolved)) {\n          return false;\n        }\n\n        const keys = Object.keys(siteVars.resolved);\n        if (keys.length === 1 && keys.pop() === 'fontSizes' && _.isEmpty(siteVars.resolved['fontSizes'])) {\n          return false;\n        }\n\n        return true;\n      }),\n    });\n  }\n\n  return {\n    classes,\n    variables: resolvedVariables,\n    styles: resolvedStyles,\n    theme: options.theme,\n  };\n};\n\nexport default getStyles;\n"],"file":"getStyles.js"}