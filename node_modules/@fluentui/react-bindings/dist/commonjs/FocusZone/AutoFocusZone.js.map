{"version":3,"sources":["FocusZone/AutoFocusZone.tsx"],"names":["AutoFocusZone","React","createRef","root","current","firstFocusableSelector","props","focusSelector","firstFocusableChild","querySelector","firstChild","findElementAndFocusAsync","unhandledProps","handledProps","ElementType","children","Component","as","PropTypes","elementType","oneOfType","func","string","propTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAEA;;AAEA;IACqBA,a;;;;;;;;;;;;;;;;;uFACZC,KAAK,CAACC,SAAN,E;2GAwBoB,YAAM;AAC/B,UAAI,CAAC,MAAKC,IAAL,CAAUC,OAAf,EAAwB;AADO,UAEvBC,sBAFuB,GAEI,MAAKC,KAFT,CAEvBD,sBAFuB;AAI/B,UAAME,aAAa,GAAG,sBAASF,sBAAT,GAAtB;AAEA,UAAMG,mBAAmB,GAAGD,aAAa,GACpC,MAAKJ,IAAL,CAAUC,OAAV,CAAkBK,aAAlB,CAAgCF,aAAhC,CADoC,GAErC,oCAAe,MAAKJ,IAAL,CAAUC,OAAzB,EAAkC,MAAKD,IAAL,CAAUC,OAAV,CAAkBM,UAApD,EAA+E,IAA/E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,IAAnG,CAFJ;AAIAF,MAAAA,mBAAmB,IAAI,gCAAWA,mBAAX,CAAvB;AACD,K;;;;;;wCA1ByB;AACxB,WAAKG,wBAAL;AACD;;;6BAEqB;AACpB,UAAMC,cAAc,GAAG,gCAAkBZ,aAAa,CAACa,YAAhC,EAA8C,KAAKP,KAAnD,CAAvB;AACA,UAAMQ,WAAW,GAAG,6BAAe,KAAKR,KAApB,CAApB;AAEA,aACE,oBAAC,sBAAD;AAAK,QAAA,QAAQ,EAAE,KAAKH;AAApB,SACE,oBAAC,WAAD,EAAiBS,cAAjB,EAAkC,KAAKN,KAAL,CAAWS,QAA7C,CADF,CADF;AAKD;;;EAvBwCd,KAAK,CAACe,S;;;8BAA5BhB,a,eAGA;AACjBiB,EAAAA,EAAE,EAAEC,SAAS,CAACC,WADG;AAEjBd,EAAAA,sBAAsB,EAAEa,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACI,MAA3B,CAApB;AAFP,C;8BAHAtB,a,kBAQG,oBAAOA,aAAa,CAACuB,SAArB,C","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport getElementType from '../utils/getElementType';\nimport getUnhandledProps from '../utils/getUnhandledProps';\nimport { AutoFocusZoneProps } from './AutoFocusZone.types';\nimport { getNextElement, focusAsync } from './focusUtilities';\n\n/** AutoFocusZone is used to focus inner element on mount. */\nexport default class AutoFocusZone extends React.Component<AutoFocusZoneProps> {\n  root = React.createRef<HTMLElement>();\n\n  static propTypes = {\n    as: PropTypes.elementType,\n    firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  };\n\n  static handledProps = _.keys(AutoFocusZone.propTypes) as any;\n\n  componentDidMount(): void {\n    this.findElementAndFocusAsync();\n  }\n\n  render(): JSX.Element {\n    const unhandledProps = getUnhandledProps(AutoFocusZone.handledProps, this.props);\n    const ElementType = getElementType(this.props);\n\n    return (\n      <Ref innerRef={this.root}>\n        <ElementType {...unhandledProps}>{this.props.children}</ElementType>\n      </Ref>\n    );\n  }\n\n  findElementAndFocusAsync = () => {\n    if (!this.root.current) return;\n    const { firstFocusableSelector } = this.props;\n\n    const focusSelector = callable(firstFocusableSelector)();\n\n    const firstFocusableChild = focusSelector\n      ? (this.root.current.querySelector(focusSelector) as HTMLElement)\n      : getNextElement(this.root.current, this.root.current.firstChild as HTMLElement, true, false, false, true);\n\n    firstFocusableChild && focusAsync(firstFocusableChild);\n  };\n}\n"],"file":"AutoFocusZone.js"}