"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styles = require("@fluentui/styles");

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _getStyles2 = _interopRequireDefault(require("../styles/getStyles"));

// @ts-ignore We have this export in package, but it is not present in typings
var defaultContext = {
  rtl: false,
  disableAnimations: false,
  performance: {
    enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',
    enableStylesCaching: true,
    enableVariablesCaching: true,
    enableBooleanVariablesCaching: false
  },
  renderer: {
    renderRule: function renderRule() {
      return '';
    }
  },
  theme: _styles.emptyTheme
};

var useStyles = function useStyles(displayName, options) {
  var _composeOptions$mapPr;

  var context = React.useContext(_reactFela.ThemeContext) || defaultContext;
  var _options$className = options.className,
      className = _options$className === void 0 ? process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰' : _options$className,
      composeOptions = options.composeOptions,
      _options$mapPropsToSt = options.mapPropsToStyles,
      mapPropsToStyles = _options$mapPropsToSt === void 0 ? function () {
    return {};
  } : _options$mapPropsToSt,
      _options$mapPropsToIn = options.mapPropsToInlineStyles,
      mapPropsToInlineStyles = _options$mapPropsToIn === void 0 ? function () {
    return {};
  } : _options$mapPropsToIn,
      _options$unstable_pro = options.unstable_props,
      unstable_props = _options$unstable_pro === void 0 ? {} : _options$unstable_pro,
      _options$rtl = options.rtl,
      rtl = _options$rtl === void 0 ? false : _options$rtl;
  var componentStylesProps = mapPropsToStyles(); // `composeProps` should include all props including stylesProps as they can contain state

  var composeProps = Object.assign({}, unstable_props, {}, componentStylesProps);
  var composeStylesProps = composeOptions === null || composeOptions === void 0 ? void 0 : (_composeOptions$mapPr = composeOptions.mapPropsToStylesPropsChain) === null || _composeOptions$mapPr === void 0 ? void 0 : _composeOptions$mapPr.reduce(function (acc, fn) {
    return Object.assign({}, acc, {}, fn(composeProps));
  }, {}); // Stores debug information for component.

  var debug = React.useRef({
    fluentUIDebug: null
  });

  var _getStyles = (0, _getStyles2.default)({
    // Input values
    className: (composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.className) || className,
    displayNames: (composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.displayNames) || [displayName],
    props: Object.assign({}, componentStylesProps, {}, mapPropsToInlineStyles(), {}, composeStylesProps),
    // Context values
    disableAnimations: context.disableAnimations,
    renderer: context.renderer,
    rtl: rtl,
    saveDebug: function saveDebug(fluentUIDebug) {
      return debug.current = {
        fluentUIDebug: fluentUIDebug
      };
    },
    theme: context.theme,
    performance: context.performance
  }),
      classes = _getStyles.classes,
      resolvedStyles = _getStyles.styles;

  return {
    classes: classes,
    styles: resolvedStyles
  };
};

var _default = useStyles;
exports.default = _default;
//# sourceMappingURL=useStyles.js.map
