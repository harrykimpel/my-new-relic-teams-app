{"version":3,"sources":["hooks/useUnhandledProps.ts"],"names":["useUnhandledProps","handledProps","props","process","env","NODE_ENV"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;AAQA,SAASA,iBAAT,CAA2BC,YAA3B,EAAmDC,KAAnD,EAAoG;AAClG,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,gCAAkBJ,YAAlB,oBACFC,KADE;AAEL,kCAA4B;AAFvB,OAAP;AAID;;AAED,SAAO,gCAAkBD,YAAlB,EAAgCC,KAAhC,CAAP;AACD;;eAEcF,iB","sourcesContent":["import getUnhandledProps from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nfunction useUnhandledProps(handledProps: string[], props: Record<string, any>): Record<string, any> {\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps(handledProps, {\n      ...props,\n      'data-uses-unhanded-props': true,\n    } as Record<string, any>);\n  }\n\n  return getUnhandledProps(handledProps, props);\n}\n\nexport default useUnhandledProps;\n"],"file":"useUnhandledProps.js"}