"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _getAccessibility = _interopRequireDefault(require("../accessibility/getAccessibility"));

var _FocusZone = _interopRequireDefault(require("../FocusZone/FocusZone"));

var _useIsomorphicLayoutEffect = _interopRequireDefault(require("./useIsomorphicLayoutEffect"));

var useAccessibility = function useAccessibility(behavior) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actionHandlers = options.actionHandlers,
      _options$debugName = options.debugName,
      debugName = _options$debugName === void 0 ? 'Undefined' : _options$debugName,
      _options$mapPropsToBe = options.mapPropsToBehavior,
      mapPropsToBehavior = _options$mapPropsToBe === void 0 ? function () {
    return {};
  } : _options$mapPropsToBe,
      _options$rtl = options.rtl,
      rtl = _options$rtl === void 0 ? false : _options$rtl;
  var definition = (0, _getAccessibility.default)(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);
  var latestDefinition = React.useRef();
  var slotHandlers = React.useRef({});
  var slotProps = React.useRef({});
  (0, _useIsomorphicLayoutEffect.default)(function () {
    latestDefinition.current = definition;
  });

  var getA11yProps = function getA11yProps(slotName, userProps) {
    var hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);
    var childBehavior = definition.childBehaviors ? definition.childBehaviors[slotName] : undefined;
    slotProps.current[slotName] = userProps; // We want to avoid adding event handlers until it's really needed

    if (hasKeyDownHandlers) {
      if (!slotHandlers.current[slotName]) {
        slotHandlers.current[slotName] = function (e) {
          var _latestDefinition$cur, _latestDefinition$cur2;

          var accessibilityHandler = (_latestDefinition$cur = latestDefinition.current) === null || _latestDefinition$cur === void 0 ? void 0 : (_latestDefinition$cur2 = _latestDefinition$cur.keyHandlers[slotName]) === null || _latestDefinition$cur2 === void 0 ? void 0 : _latestDefinition$cur2.onKeyDown;
          var userHandler = slotProps.current[slotName].onKeyDown;
          if (accessibilityHandler) accessibilityHandler(e);

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (userHandler) userHandler.apply(void 0, [e].concat(args));
        };
      }
    } else {
      delete slotHandlers.current[slotName];
    }

    var finalProps = Object.assign({}, childBehavior && {
      accessibility: childBehavior
    }, {}, definition.attributes[slotName], {}, userProps, {
      onKeyDown: slotHandlers.current[slotName]
    });
    return finalProps;
  }; // Provides an experimental handling for FocusZone definition in behaviors


  getA11yProps.unstable_wrapWithFocusZone = function (element) {
    if (definition.focusZone) {
      var child = element;

      if (process.env.NODE_ENV !== 'production') {
        child = React.Children.only(element);
      }

      return React.createElement(_FocusZone.default, Object.assign({}, definition.focusZone.props, {}, child.props, {
        as: child.type,
        isRtl: rtl
      }));
    }

    return element;
  };

  return getA11yProps;
};

var _default = useAccessibility;
exports.default = _default;
//# sourceMappingURL=useAccessibility.js.map
