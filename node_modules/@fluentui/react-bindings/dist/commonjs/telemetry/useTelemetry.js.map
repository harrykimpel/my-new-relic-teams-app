{"version":3,"sources":["telemetry/useTelemetry.ts"],"names":["getTelemetry","displayName","telemetry","start","end","setStart","enabled","performance","now","setEnd","duration","count","msTotal","msMin","Math","min","msMax","max","useTelemetry"],"mappings":";;;;;;;AAEO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAAsBC,SAAtB,EAA+E;AACzG,MAAIC,KAAa,GAAG,CAAC,CAArB;AACA,MAAIC,GAAW,GAAG,CAAC,CAAnB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBF,IAAAA,KAAK,GAAGD,SAAS,IAAIA,SAAS,CAACI,OAAvB,GAAiCC,WAAW,CAACC,GAAZ,EAAjC,GAAqD,CAAC,CAA9D;AACD,GAFD;;AAIA,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAIP,SAAS,IAAIA,SAAS,CAACI,OAAvB,IAAkCH,KAAK,KAAK,CAAC,CAAjD,EAAoD;AAClDC,MAAAA,GAAG,GAAGG,WAAW,CAACC,GAAZ,EAAN;AACA,UAAME,QAAQ,GAAGN,GAAG,GAAGD,KAAvB;;AACA,UAAID,SAAS,CAACK,WAAV,CAAsBN,WAAtB,CAAJ,EAAwC;AACtCC,QAAAA,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCU,KAAnC;AACAT,QAAAA,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCW,OAAnC,IAA8CF,QAA9C;AACAR,QAAAA,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCY,KAAnC,GAA2CC,IAAI,CAACC,GAAL,CAASL,QAAT,EAAmBR,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCY,KAAtD,CAA3C;AACAX,QAAAA,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCe,KAAnC,GAA2CF,IAAI,CAACG,GAAL,CAASP,QAAT,EAAmBR,SAAS,CAACK,WAAV,CAAsBN,WAAtB,EAAmCe,KAAtD,CAA3C;AACD,OALD,MAKO;AACLd,QAAAA,SAAS,CAACK,WAAV,CAAsBN,WAAtB,IAAqC;AACnCU,UAAAA,KAAK,EAAE,CAD4B;AAEnCC,UAAAA,OAAO,EAAEF,QAF0B;AAGnCG,UAAAA,KAAK,EAAEH,QAH4B;AAInCM,UAAAA,KAAK,EAAEN;AAJ4B,SAArC;AAMD;AACF;AACF,GAlBD;;AAoBA,SAAO;AAAEL,IAAAA,QAAQ,EAARA,QAAF;AAAYI,IAAAA,MAAM,EAANA;AAAZ,GAAP;AACD,CA7BM;;;;AA+BP,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAACjB,WAAD,EAAsBC,SAAtB,EAA+E;AAClG,SAAOF,YAAY,CAACC,WAAD,EAAcC,SAAd,CAAnB;AACD,CAFD;;eAIegB,Y","sourcesContent":["import { Telemetry, UseTelemetryResult } from './types';\n\nexport const getTelemetry = (displayName: string, telemetry: Telemetry | undefined): UseTelemetryResult => {\n  let start: number = -1;\n  let end: number = -1;\n\n  const setStart = () => {\n    start = telemetry && telemetry.enabled ? performance.now() : -1;\n  };\n\n  const setEnd = () => {\n    if (telemetry && telemetry.enabled && start !== -1) {\n      end = performance.now();\n      const duration = end - start;\n      if (telemetry.performance[displayName]) {\n        telemetry.performance[displayName].count++;\n        telemetry.performance[displayName].msTotal += duration;\n        telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);\n        telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);\n      } else {\n        telemetry.performance[displayName] = {\n          count: 1,\n          msTotal: duration,\n          msMin: duration,\n          msMax: duration,\n        };\n      }\n    }\n  };\n\n  return { setStart, setEnd };\n};\n\nconst useTelemetry = (displayName: string, telemetry: Telemetry | undefined): UseTelemetryResult => {\n  return getTelemetry(displayName, telemetry);\n};\n\nexport default useTelemetry;\n"],"file":"useTelemetry.js"}