{"version":3,"file":"compose.js","sourceRoot":"../src/","sources":["compose.ts"],"names":[],"mappings":";;;IAKA,SAAS,OAAO,CACd,KAA2B,EAC3B,YAAkF;QAAlF,6BAAA,EAAA,iBAAkF;QAElF,IAAM,cAAc,GAAG,2BAAmB,CACxC,KAAc,EACb,YAA0C,EAC3C,6BAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CACrE,CAAC;QAEF,IAAM,SAAS,GAAI,KAAK,CAAC,UAAU,CAA2D,UAAC,KAAK,EAAE,GAAG;YACvG,OAAO,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,GAAuB,EAAE,cAAc,CAAC,CAAC;QAC/E,CAAC,CAA6D,CAAC;QAE/D,SAAS,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAEnD,IAAK,KAA+B,CAAC,YAAY,EAAE;YACjD,SAAS,CAAC,YAAY,GAAI,KAA+B,CAAC,YAAY,CAAC;SACxE;QAEC,SAA2C,CAAC,mBAAmB,GAAG,cAAc,CAAC;QAEnF,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,kBAAe,OAAO,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './types';\nimport { mergeComposeOptions, wasComposedPreviously } from './utils';\n\nfunction compose<T extends React.ElementType, InputProps, InputStylesProps, ParentProps, ParentStylesProps>(\n  input: Input<T, InputProps>,\n  inputOptions: ComposeOptions<InputProps, InputStylesProps, ParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<T, InputProps & ParentProps & { as?: React.ElementType }>((props, ref) => {\n    return composeOptions.render(props, ref as React.Ref<'div'>, composeOptions);\n  }) as unknown) as ComponentWithAs<T, InputProps & ParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\nexport default compose;\n"]}