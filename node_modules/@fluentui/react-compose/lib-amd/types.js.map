{"version":3,"file":"types.js","sourceRoot":"../src/","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\n//\n// \"as\" type safety\n//\n\nexport type PropsOfElement<\n  // tslint:disable-next-line:no-any\n  E extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>\n> = JSX.LibraryManagedAttributes<E, React.ComponentPropsWithRef<E>>;\n\n// tslint:disable-next-line:interface-name\nexport interface ComponentWithAs<E extends React.ElementType = 'div', P = {}> extends React.FunctionComponent {\n  <EE extends React.ElementType = E>(\n    props: Omit<PropsOfElement<EE>, 'as' | keyof P> & { as?: EE } & P,\n  ): JSX.Element | null;\n  displayName?: string;\n\n  defaultProps?: Partial<P & { as: E }>;\n  propTypes?: React.WeakValidationMap<P> & {\n    // tslint:disable-next-line:no-any\n    as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;\n  };\n}\n\n//\n// Compose types\n//\n\nexport type ComposedComponent<P = {}> = React.FunctionComponent<P> & {\n  fluentComposeConfig: ComposePreparedOptions;\n};\n\nexport type InputComposeComponent<P = {}> = React.FunctionComponent<P> & {\n  fluentComposeConfig?: ComposePreparedOptions;\n};\n\nexport type Input<T extends React.ElementType = 'div', P = {}> =\n  | InputComposeComponent<P>\n  | ComposeRenderFunction<T, P & { as?: React.ElementType }>;\n\nexport type ComposeRenderFunction<T extends React.ElementType = 'div', P = {}> = (\n  props: P,\n  ref: React.Ref<T>,\n  composeOptions: ComposePreparedOptions,\n) => React.ReactElement | null;\n\nexport type ComposeOptions<InputProps = {}, InputStylesProps = {}, ParentStylesProps = {}> = {\n  className?: string;\n  displayName?: string;\n\n  mapPropsToStylesProps?: (props: ParentStylesProps & InputProps) => InputStylesProps;\n\n  handledProps?: (keyof InputProps | 'as')[];\n  overrideStyles?: boolean;\n\n  slots?: Record<string, React.ElementType>;\n\n  mapPropsToSlotProps?: (props: InputProps) => Record<string, object>;\n};\n\nexport type ComposePreparedOptions<Props = {}> = {\n  className: string;\n  displayName: string;\n  displayNames: string[];\n\n  mapPropsToStylesPropsChain: ((props: object) => object)[];\n  render: ComposeRenderFunction;\n\n  handledProps: (keyof Props)[];\n  overrideStyles: boolean;\n\n  slots: Record<string, React.ElementType>;\n  mapPropsToSlotPropsChain: ((props: Props) => Record<string, object>)[];\n\n  resolveSlotProps: <P>(props: P) => Record<string, object>;\n};\n"]}