import * as React from 'react';
export declare type PropsOfElement<E extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> = JSX.LibraryManagedAttributes<E, React.ComponentPropsWithRef<E>>;
export interface ComponentWithAs<E extends React.ElementType = 'div', P = {}> extends React.FunctionComponent {
    <EE extends React.ElementType = E>(props: Omit<PropsOfElement<EE>, 'as' | keyof P> & {
        as?: EE;
    } & P): JSX.Element | null;
    displayName?: string;
    defaultProps?: Partial<P & {
        as: E;
    }>;
    propTypes?: React.WeakValidationMap<P> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
}
export declare type ComposedComponent<P = {}> = React.FunctionComponent<P> & {
    fluentComposeConfig: ComposePreparedOptions;
};
export declare type InputComposeComponent<P = {}> = React.FunctionComponent<P> & {
    fluentComposeConfig?: ComposePreparedOptions;
};
export declare type Input<T extends React.ElementType = 'div', P = {}> = InputComposeComponent<P> | ComposeRenderFunction<T, P & {
    as?: React.ElementType;
}>;
export declare type ComposeRenderFunction<T extends React.ElementType = 'div', P = {}> = (props: P, ref: React.Ref<T>, composeOptions: ComposePreparedOptions) => React.ReactElement | null;
export declare type ComposeOptions<InputProps = {}, InputStylesProps = {}, ParentStylesProps = {}> = {
    className?: string;
    displayName?: string;
    mapPropsToStylesProps?: (props: ParentStylesProps & InputProps) => InputStylesProps;
    handledProps?: (keyof InputProps | 'as')[];
    overrideStyles?: boolean;
    slots?: Record<string, React.ElementType>;
    mapPropsToSlotProps?: (props: InputProps) => Record<string, object>;
};
export declare type ComposePreparedOptions<Props = {}> = {
    className: string;
    displayName: string;
    displayNames: string[];
    mapPropsToStylesPropsChain: ((props: object) => object)[];
    render: ComposeRenderFunction;
    handledProps: (keyof Props)[];
    overrideStyles: boolean;
    slots: Record<string, React.ElementType>;
    mapPropsToSlotPropsChain: ((props: Props) => Record<string, object>)[];
    resolveSlotProps: <P>(props: P) => Record<string, object>;
};
