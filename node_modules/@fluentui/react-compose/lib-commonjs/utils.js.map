{"version":3,"file":"utils.js","sourceRoot":"../src/","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport { ComposedComponent, ComposeOptions, ComposePreparedOptions, Input } from './types';\n\nfunction computeDisplayNames(inputOptions: ComposeOptions, parentOptions: ComposePreparedOptions): string[] {\n  if (inputOptions.overrideStyles) {\n    return [inputOptions.displayName].filter(Boolean) as string[];\n  }\n\n  // To support styles composition we need to properly pick up display names\n  return inputOptions.displayName\n    ? parentOptions.displayNames.concat(inputOptions.displayName)\n    : parentOptions.displayNames;\n}\n\nexport const defaultComposeOptions: ComposePreparedOptions = {\n  className: process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n  displayName: '',\n  displayNames: [],\n\n  mapPropsToStylesPropsChain: [],\n  render: () => null,\n\n  handledProps: [] as never[],\n  overrideStyles: false,\n  slots: {},\n  mapPropsToSlotPropsChain: [],\n  resolveSlotProps: () => ({}),\n};\n\nexport function mergeComposeOptions(\n  input: Input,\n  inputOptions: ComposeOptions,\n  parentOptions: ComposePreparedOptions = defaultComposeOptions,\n): ComposePreparedOptions {\n  const mapPropsToSlotPropsChain = inputOptions.mapPropsToSlotProps\n    ? [...parentOptions.mapPropsToSlotPropsChain, inputOptions.mapPropsToSlotProps]\n    : parentOptions.mapPropsToSlotPropsChain;\n\n  const resolveSlotProps = <P = {}>(props: P) =>\n    mapPropsToSlotPropsChain.reduce<Record<string, object>>((acc, definition) => {\n      const nextProps = { ...definition(props) };\n      const slots: string[] = [...Object.keys(acc), ...Object.keys(nextProps)];\n\n      const mergedSlotProps: Record<string, object> = {};\n\n      slots.forEach(slot => {\n        if (!mergedSlotProps[slot]) {\n          mergedSlotProps[slot] = {\n            ...acc[slot],\n            ...nextProps[slot],\n          };\n        }\n      });\n\n      return mergedSlotProps;\n    }, {});\n\n  return {\n    className: inputOptions.className || parentOptions.className,\n    displayName: inputOptions.displayName || parentOptions.displayName,\n    displayNames: computeDisplayNames(inputOptions, parentOptions),\n\n    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps\n      ? [...parentOptions.mapPropsToStylesPropsChain, inputOptions.mapPropsToStylesProps]\n      : parentOptions.mapPropsToStylesPropsChain,\n    render: typeof input === 'function' ? input : parentOptions.render,\n\n    handledProps: [...parentOptions.handledProps, ...((inputOptions.handledProps as never[]) || ([] as never[]))],\n    overrideStyles: inputOptions.overrideStyles || false,\n\n    slots: {\n      ...parentOptions.slots,\n      ...inputOptions.slots,\n    },\n    mapPropsToSlotPropsChain,\n    resolveSlotProps,\n  };\n}\n\n/**\n * compose() allows you to pass two inputs:\n * - React.forwardRef + static fluentComposeConfig, i.e. previously composed component\n * - a function\n */\nexport function wasComposedPreviously<T extends React.ElementType = 'div', P = {}>(\n  input: Input<T, P>,\n): input is ComposedComponent<P> {\n  const isForwardRef: boolean = (input as React.ExoticComponent).$$typeof === ReactIs.ForwardRef;\n\n  return isForwardRef && !!(input as ComposedComponent<P>).fluentComposeConfig;\n}\n"]}