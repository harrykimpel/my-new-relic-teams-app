"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ReactIs = require("react-is");
function computeDisplayNames(inputOptions, parentOptions) {
    if (inputOptions.overrideStyles) {
        return [inputOptions.displayName].filter(Boolean);
    }
    // To support styles composition we need to properly pick up display names
    return inputOptions.displayName
        ? parentOptions.displayNames.concat(inputOptions.displayName)
        : parentOptions.displayNames;
}
exports.defaultComposeOptions = {
    className: process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',
    displayName: '',
    displayNames: [],
    mapPropsToStylesPropsChain: [],
    render: function () { return null; },
    handledProps: [],
    overrideStyles: false,
    slots: {},
    mapPropsToSlotPropsChain: [],
    resolveSlotProps: function () { return ({}); },
};
function mergeComposeOptions(input, inputOptions, parentOptions) {
    if (parentOptions === void 0) { parentOptions = exports.defaultComposeOptions; }
    var mapPropsToSlotPropsChain = inputOptions.mapPropsToSlotProps
        ? tslib_1.__spreadArrays(parentOptions.mapPropsToSlotPropsChain, [inputOptions.mapPropsToSlotProps]) : parentOptions.mapPropsToSlotPropsChain;
    var resolveSlotProps = function (props) {
        return mapPropsToSlotPropsChain.reduce(function (acc, definition) {
            var nextProps = tslib_1.__assign({}, definition(props));
            var slots = tslib_1.__spreadArrays(Object.keys(acc), Object.keys(nextProps));
            var mergedSlotProps = {};
            slots.forEach(function (slot) {
                if (!mergedSlotProps[slot]) {
                    mergedSlotProps[slot] = tslib_1.__assign(tslib_1.__assign({}, acc[slot]), nextProps[slot]);
                }
            });
            return mergedSlotProps;
        }, {});
    };
    return {
        className: inputOptions.className || parentOptions.className,
        displayName: inputOptions.displayName || parentOptions.displayName,
        displayNames: computeDisplayNames(inputOptions, parentOptions),
        mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps
            ? tslib_1.__spreadArrays(parentOptions.mapPropsToStylesPropsChain, [inputOptions.mapPropsToStylesProps]) : parentOptions.mapPropsToStylesPropsChain,
        render: typeof input === 'function' ? input : parentOptions.render,
        handledProps: tslib_1.__spreadArrays(parentOptions.handledProps, (inputOptions.handledProps || [])),
        overrideStyles: inputOptions.overrideStyles || false,
        slots: tslib_1.__assign(tslib_1.__assign({}, parentOptions.slots), inputOptions.slots),
        mapPropsToSlotPropsChain: mapPropsToSlotPropsChain,
        resolveSlotProps: resolveSlotProps,
    };
}
exports.mergeComposeOptions = mergeComposeOptions;
/**
 * compose() allows you to pass two inputs:
 * - React.forwardRef + static fluentComposeConfig, i.e. previously composed component
 * - a function
 */
function wasComposedPreviously(input) {
    var isForwardRef = input.$$typeof === ReactIs.ForwardRef;
    return isForwardRef && !!input.fluentComposeConfig;
}
exports.wasComposedPreviously = wasComposedPreviously;
//# sourceMappingURL=utils.js.map