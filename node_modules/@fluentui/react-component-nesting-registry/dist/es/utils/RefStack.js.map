{"version":3,"sources":["utils/RefStack.ts"],"names":["RefStack","Set","ref","nodes","Array","from","set","refId","indexOf","slice","add","delete"],"mappings":";;;IAEqBA,Q;;;;;+BACL,IAAIC,GAAJ,E;;0CAEU,UAACC,GAAD,EAA6B;AACnD,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAI,CAACC,GAAhB,CAAd;AACA,QAAMC,KAAK,GAAGJ,KAAK,CAACK,OAAN,CAAcN,GAAd,CAAd;AAEA,WAAOC,KAAK,CAACM,KAAN,CAAYF,KAAZ,CAAP;AACD,G;;oCAEiB,UAACL,GAAD,EAAwB;AACxC,IAAA,KAAI,CAACI,GAAL,CAASI,GAAT,CAAaR,GAAb;AACD,G;;sCAEmB,UAACA,GAAD,EAAwB;AAC1C,IAAA,KAAI,CAACI,GAAL,CAASK,MAAT,CAAgBT,GAAhB;AACD,G;;;SAhBkBF,Q","sourcesContent":["import { NodeRef } from '../types';\n\nexport default class RefStack {\n  private set = new Set<NodeRef>();\n\n  public getContextRefs = (ref: NodeRef): NodeRef[] => {\n    const nodes = Array.from(this.set);\n    const refId = nodes.indexOf(ref);\n\n    return nodes.slice(refId);\n  };\n\n  public register = (ref: NodeRef): void => {\n    this.set.add(ref);\n  };\n\n  public unregister = (ref: NodeRef): void => {\n    this.set.delete(ref);\n  };\n}\n"],"file":"RefStack.js"}