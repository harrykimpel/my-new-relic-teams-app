import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import RefStack from './utils/RefStack';
import NestingContext from './NestingContext';

var NestingRoot =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NestingRoot, _React$Component);

  function NestingRoot() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, NestingRoot);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NestingRoot)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "registry", new RefStack());

    _defineProperty(_assertThisInitialized(_this), "parentRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "getRefs", function () {
      return _this.registry.getContextRefs(_this.parentRef);
    });

    return _this;
  }

  _createClass(NestingRoot, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.registry.register(this.parentRef);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.registry.unregister(this.parentRef);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(NestingContext.Provider, {
        value: this.registry
      }, this.props.children(this.getRefs, this.parentRef));
    }
  }]);

  return NestingRoot;
}(React.Component);

export default NestingRoot;
//# sourceMappingURL=NestingRoot.js.map
