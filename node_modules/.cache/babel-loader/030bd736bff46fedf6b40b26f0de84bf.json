{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\nexport var toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\nvar ToolbarMenuDivider = function ToolbarMenuDivider(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarMenuDivider.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuDivider.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarMenuDivider.displayName, {\n    className: toolbarMenuDividerClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergeComponentVariables(parentVariables, variables)\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarMenuDivider.handledProps, props);\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    className: classes.root\n  })));\n  setEnd();\n  return element;\n};\n\nToolbarMenuDivider.displayName = 'ToolbarMenuDivider';\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li'\n};\nToolbarMenuDivider.handledProps = Object.keys(ToolbarMenuDivider.propTypes);\nToolbarMenuDivider.create = createShorthandFactory({\n  Component: ToolbarMenuDivider,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\n\nexport default withSafeTypeForAs(ToolbarMenuDivider);","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["toolbarMenuDividerClassName","ToolbarMenuDivider","context","React","setStart","setEnd","useTelemetry","accessibility","className","design","styles","variables","props","parentVariables","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","mergeComponentVariables","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","commonPropTypes","as","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\nexport const toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\nconst ToolbarMenuDivider: React.FC<WithAsProp<ToolbarMenuDividerProps>> &\n  FluentComponentStaticProps<ToolbarMenuDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenuDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarMenuDividerStylesProps>(ToolbarMenuDivider.displayName, {\n    className: toolbarMenuDividerClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenuDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarMenuDivider.displayName = 'ToolbarMenuDivider';\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n};\nToolbarMenuDivider.handledProps = Object.keys(ToolbarMenuDivider.propTypes) as any;\n\nToolbarMenuDivider.create = createShorthandFactory({\n  Component: ToolbarMenuDivider,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenuDivider, ToolbarMenuDividerProps, 'li'>(ToolbarMenuDivider);\n"]},"metadata":{},"sourceType":"module"}