{"ast":null,"code":"import _map from \"lodash/map\";\nimport { chatBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport ChatItem from './ChatItem';\nimport ChatMessage from './ChatMessage';\nexport var chatClassName = 'ui-chat';\nexport var chatSlotClassNames = {\n  item: \"\".concat(chatClassName, \"__item\")\n};\n\nvar Chat = function Chat(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Chat.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      design = props.design,\n      items = props.items,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Chat.handledProps, props);\n  var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), {}, unhandledProps)), childrenExist(children) ? children : _map(items, function (item) {\n    return ChatItem.create(item, {\n      defaultProps: function defaultProps() {\n        return {\n          className: chatSlotClassNames.item\n        };\n      }\n    });\n  })));\n  setEnd();\n  return element;\n};\n\nChat.displayName = 'Chat';\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul'\n};\nChat.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand)\n});\nChat.handledProps = Object.keys(Chat.propTypes);\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.create = createShorthandFactory({\n  Component: Chat\n});\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\n\nexport default withSafeTypeForAs(Chat);","map":{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatClassName","chatSlotClassNames","item","Chat","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","design","items","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","defaultProps","as","content","PropTypes","customPropTypes","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport ChatItem, { ChatItemProps } from './ChatItem';\nimport ChatMessage from './ChatMessage';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\nconst Chat: React.FC<WithAsProp<ChatProps>> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: chatSlotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\n\nChat.create = createShorthandFactory({ Component: Chat });\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport default withSafeTypeForAs<typeof Chat, ChatProps, 'ul'>(Chat);\n"]},"metadata":{},"sourceType":"module"}