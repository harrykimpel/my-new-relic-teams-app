{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { tableRowBehavior } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { childrenExist, commonPropTypes, createShorthandFactory } from '../../utils';\nimport TableCell from './TableCell';\n\nvar handleVariablesOverrides = function handleVariablesOverrides(variables) {\n  return function (predefinedProps) {\n    return {\n      variables: mergeComponentVariables(variables, predefinedProps.variables)\n    };\n  };\n};\n\nexport var tableRowClassName = 'ui-table__row';\n\nvar TableRow = function TableRow(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TableRow.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var rowRef = React.useRef();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      items = props.items,\n      header = props.header,\n      compact = props.compact,\n      children = props.children,\n      accessibility = props.accessibility,\n      variables = props.variables,\n      selected = props.selected;\n  var hasChildren = childrenExist(children);\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TableRow.handledProps, props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: TableRow.displayName,\n    actionHandlers: {\n      // https://github.com/microsoft/fluent-ui-react/issues/2150\n      unsetRowTabbable: function unsetRowTabbable(e) {\n        rowRef.current.setAttribute('tabindex', '-1');\n      },\n      performClick: function performClick(e) {\n        handleClick(e);\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        selected: selected,\n        header: header\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TableRow.displayName, {\n    className: tableRowClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        header: header,\n        compact: compact\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleClick = function handleClick(e) {\n    if (e.currentTarget === e.target) {\n      _invoke(props, 'onClick', e, props);\n\n      e.preventDefault();\n    }\n  };\n\n  var renderCells = function renderCells() {\n    return _map(items, function (item, index) {\n      var overrideProps = handleVariablesOverrides(variables);\n      return TableCell.create(item, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('cell', Object.assign({}, overrideProps));\n        }\n      });\n    });\n  };\n\n  var element = React.createElement(Ref, {\n    innerRef: rowRef\n  }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), hasChildren && children, !hasChildren && renderCells())));\n  setEnd();\n  return element;\n};\n\nTableRow.displayName = 'TableRow';\nTableRow.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  items: customPropTypes.collectionShorthand,\n  header: PropTypes.bool,\n  compact: PropTypes.bool,\n  selected: PropTypes.bool,\n  onClick: PropTypes.func\n});\nTableRow.handledProps = Object.keys(TableRow.propTypes);\nTableRow.defaultProps = {\n  accessibility: tableRowBehavior\n};\nTableRow.create = createShorthandFactory({\n  Component: TableRow,\n  mappedArrayProp: 'items'\n});\n/**\n * Component represents a single row in a tabular structure\n */\n\nexport default withSafeTypeForAs(TableRow);","map":{"version":3,"sources":["components/Table/TableRow.tsx"],"names":["handleVariablesOverrides","variables","mergeComponentVariables","predefinedProps","tableRowClassName","TableRow","context","React","setStart","setEnd","useTelemetry","rowRef","className","design","styles","items","header","compact","children","accessibility","selected","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","unsetRowTabbable","performClick","handleClick","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","e","renderCells","overrideProps","defaultProps","element","onClick","content","customPropTypes","PropTypes","func","Object","tableRowBehavior","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":";;AAAA,SAAA,gBAAA,QAAA,yBAAA;AACA,SAAA,cAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,EAAA,iBAAA,QAAA,0BAAA;AACA,SAAA,GAAA,QAAA,+BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,SAAA,uBAAA,QAAA,kBAAA,C,CAEA;;AACA,SAAA,YAAA,QAAA,YAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,QAAA,aAAA;AAQA,SAAA,aAAA,EAAA,eAAA,EAAA,sBAAA,QAAA,aAAA;AACA,OAAA,SAAA,MAAA,aAAA;;AAqCA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,SAAA,EAAS;AAAA,SAAI,UAAA,eAAA,EAAe;AAAA,WAAK;AAChEC,MAAAA,SAAS,EAAEC,uBAAuB,CAAA,SAAA,EAAYC,eAAe,CAA3B,SAAA;AAD8B,KAAL;AAAnB,GAAA;AAA1C,CAAA;;AAIA,OAAO,IAAMC,iBAAiB,GAAvB,eAAA;;AAIP,IAAMC,QAAyF,GAAG,SAA5FA,QAA4F,CAAA,KAAA,EAAS;AACzG,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AADyG,MAAA,aAAA,GAE5EG,YAAY,CAACL,QAAQ,CAAT,WAAA,EAAuBC,OAAO,CAFkC,SAEhE,CAFgE;AAAA,MAEjGE,QAFiG,GAAA,aAAA,CAAA,QAAA;AAAA,MAEvFC,MAFuF,GAAA,aAAA,CAAA,MAAA;;AAGzGD,EAAAA,QAAQ;AACR,MAAMG,MAAM,GAAGJ,KAAK,CAApB,MAAeA,EAAf;AAJyG,MAKjGK,SALiG,GAKGS,KALH,CAAA,SAAA;AAAA,MAKtFR,MALsF,GAKGQ,KALH,CAAA,MAAA;AAAA,MAK9EP,MAL8E,GAKGO,KALH,CAAA,MAAA;AAAA,MAKtEN,KALsE,GAKGM,KALH,CAAA,KAAA;AAAA,MAK/DL,MAL+D,GAKGK,KALH,CAAA,MAAA;AAAA,MAKvDJ,OALuD,GAKGI,KALH,CAAA,OAAA;AAAA,MAK9CH,QAL8C,GAKGG,KALH,CAAA,QAAA;AAAA,MAKpCF,aALoC,GAKGE,KALH,CAAA,aAAA;AAAA,MAKrBpB,SALqB,GAKGoB,KALH,CAAA,SAAA;AAAA,MAKVD,QALU,GAKGC,KALH,CAAA,QAAA;AAOzG,MAAMC,WAAW,GAAGC,aAAa,CAAjC,QAAiC,CAAjC;AACA,MAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACtB,QAAQ,CAAT,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMuB,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AACnDC,IAAAA,SAAS,EAAEzB,QAAQ,CADgC,WAAA;AAEnD0B,IAAAA,cAAc,EAAE;AACd;AACAC,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,CAAA,EAAK;AACrBrB,QAAAA,MAAM,CAANA,OAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EAAAA,IAAAA;AAHY,OAAA;AAKdsB,MAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAK;AACjBC,QAAAA,WAAW,CAAXA,CAAW,CAAXA;AACD;AAPa,KAFmC;AAWnDC,IAAAA,kBAAkB,EAAE,SAAA,kBAAA,GAAA;AAAA,aAAO;AACzBf,QAAAA,QAAQ,EADiB,QAAA;AAEzBJ,QAAAA,MAAM,EAANA;AAFyB,OAAP;AAX+B,KAAA;AAenDoB,IAAAA,GAAG,EAAE9B,OAAO,CAAC8B;AAfsC,GAAhB,CAArC;;AAVyG,MAAA,UAAA,GA4BrFE,SAAS,CAAsBjC,QAAQ,CAA9B,WAAA,EAA4C;AACvEO,IAAAA,SAAS,EAD8D,iBAAA;AAEvE2B,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AACvBvB,QAAAA,MAAM,EADiB,MAAA;AAEvBC,QAAAA,OAAO,EAAPA;AAFuB,OAAP;AAFqD,KAAA;AAMvEuB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7B5B,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7Bb,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAN+C,KAAA;AAYvEmC,IAAAA,GAAG,EAAE9B,OAAO,CAAC8B;AAZ0D,GAA5C,CA5B4E;AAAA,MA4BjGC,OA5BiG,GAAA,UAAA,CAAA,OAAA;;AA2CzG,MAAMH,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA6B;AAC/C,QAAIO,CAAC,CAADA,aAAAA,KAAoBA,CAAC,CAAzB,MAAA,EAAkC;AAChC,MAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;;AACAA,MAAAA,CAAC,CAADA,cAAAA;AACD;AAJH,GAAA;;AAOA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,WAAO,IAAA,CAAA,KAAA,EAAa,UAAA,IAAA,EAAA,KAAA,EAAyC;AAC3D,UAAMC,aAAa,GAAG3C,wBAAwB,CAA9C,SAA8C,CAA9C;AACA,aAAO,SAAS,CAAT,MAAA,CAAA,IAAA,EAAuB;AAC5B4C,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBACZhB,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EADA,aACA,CAAA,CADA;AAAA;AADc,OAAvB,CAAP;AAFF,KAAO,CAAP;AADF,GAAA;;AAYA,MAAMiB,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,QAAQ,EAAElC;AAAf,GAAA,EACGiB,YAAY,CAAZA,0BAAAA,CACC,KAAA,CAAA,aAAA,CAAA,WAAA,EACMA,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdhB,IAAAA,SAAS,EAAEyB,OAAO,CADJ,IAAA;AAEdS,IAAAA,OAAO,EAAEZ;AAFK,GAAA,EADlB,cACkB,CAAA,CADlB,EAOGZ,WAAW,IAPd,QAAA,EAQG,CAAA,WAAA,IAAgBoB,WAXzB,EAGM,CADDd,CADH,CADF;AAgBAnB,EAAAA,MAAM;AACN,SAAA,OAAA;AA/EF,CAAA;;AAkFAJ,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AAEAA,QAAQ,CAARA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9B0C,EAAAA,OAAO,EAAE;AADqB,CAA7B,CADL1C,EAAAA;AAIEU,EAAAA,KAAK,EAAEiC,eAAe,CAJxB3C,mBAAAA;AAKEW,EAAAA,MAAM,EAAEiC,SAAS,CALnB5C,IAAAA;AAMEY,EAAAA,OAAO,EAAEgC,SAAS,CANpB5C,IAAAA;AAOEe,EAAAA,QAAQ,EAAE6B,SAAS,CAPrB5C,IAAAA;AAQEyC,EAAAA,OAAO,EAAEG,SAAS,CAACC;AARrB7C,CAAAA,CAAAA;AAWAA,QAAQ,CAARA,YAAAA,GAAwB8C,MAAM,CAANA,IAAAA,CAAY9C,QAAQ,CAA5CA,SAAwB8C,CAAxB9C;AAEAA,QAAQ,CAARA,YAAAA,GAAwB;AACtBc,EAAAA,aAAa,EAAEiC;AADO,CAAxB/C;AAIAA,QAAQ,CAARA,MAAAA,GAAkBgD,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,QAAA;AAAuBC,EAAAA,eAAe,EAAE;AAAxC,CAAD,CAAxClD;AAEA;;;;AAGA,eAAemD,iBAAiB,CAAhC,QAAgC,CAAhC","sourcesContent":["import { Accessibility, tableRowBehavior, GridRowBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n  ComponentEventHandler,\n} from '../../types';\nimport { childrenExist, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\nimport TableCell, { TableCellProps } from './TableCell';\n\nexport interface TableRowProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<GridRowBehaviorProps>;\n\n  /**\n   * Row cells\n   */\n  items?: ShorthandCollection<TableCellProps>;\n\n  /**\n   * Is the row a table header\n   */\n  header?: boolean;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * Whether a row is currently selected or not.\n   */\n  selected?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TableRowProps>;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nexport const tableRowClassName = 'ui-table__row';\n\nexport type TableRowStylesProps = Pick<TableRowProps, 'header' | 'compact'>;\n\nconst TableRow: React.FC<WithAsProp<TableRowProps>> & FluentComponentStaticProps<TableRowProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TableRow.displayName, context.telemetry);\n  setStart();\n  const rowRef = React.useRef<HTMLElement>();\n  const { className, design, styles, items, header, compact, children, accessibility, variables, selected } = props;\n\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableRow.handledProps, props);\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: TableRow.displayName,\n    actionHandlers: {\n      // https://github.com/microsoft/fluent-ui-react/issues/2150\n      unsetRowTabbable: e => {\n        rowRef.current.setAttribute('tabindex', '-1');\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      selected,\n      header,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableRowStylesProps>(TableRow.displayName, {\n    className: tableRowClassName,\n    mapPropsToStyles: () => ({\n      header,\n      compact,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const renderCells = () => {\n    return _.map(items, (item: TableCellProps, index: number) => {\n      const overrideProps = handleVariablesOverrides(variables);\n      return TableCell.create(item, {\n        defaultProps: () =>\n          getA11yProps('cell', {\n            ...overrideProps,\n          }),\n      });\n    });\n  };\n\n  const element = (\n    <Ref innerRef={rowRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren && children}\n          {!hasChildren && renderCells()}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableRow.displayName = 'TableRow';\n\nTableRow.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: customPropTypes.collectionShorthand,\n  header: PropTypes.bool,\n  compact: PropTypes.bool,\n  selected: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nTableRow.handledProps = Object.keys(TableRow.propTypes) as any;\n\nTableRow.defaultProps = {\n  accessibility: tableRowBehavior,\n};\n\nTableRow.create = createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });\n\n/**\n * Component represents a single row in a tabular structure\n */\nexport default withSafeTypeForAs<typeof TableRow, TableRowProps, 'div'>(TableRow);\n"]},"metadata":{},"sourceType":"module"}