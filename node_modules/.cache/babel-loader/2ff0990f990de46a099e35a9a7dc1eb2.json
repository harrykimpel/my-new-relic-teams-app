{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\n\nvar DebugRect = /*#__PURE__*/function (_React$Component) {\n  _inherits(DebugRect, _React$Component);\n\n  function DebugRect() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DebugRect);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DebugRect)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"selectorRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"setDebugSelectorPosition\", function () {\n      var fiberNav = _this.props.fiberNav;\n\n      if (fiberNav && fiberNav.domNode && fiberNav.domNode.getBoundingClientRect && typeof fiberNav.domNode.getBoundingClientRect === 'function' && _this.selectorRef.current) {\n        var rect = fiberNav.domNode.getBoundingClientRect();\n        _this.selectorRef.current.style.top = \"\".concat(rect.top, \"px\");\n        _this.selectorRef.current.style.left = \"\".concat(rect.left, \"px\");\n        _this.selectorRef.current.style.width = \"\".concat(rect.width, \"px\");\n        _this.selectorRef.current.style.height = \"\".concat(rect.height, \"px\");\n        requestAnimationFrame(_this.setDebugSelectorPosition);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(DebugRect, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setDebugSelectorPosition();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      this.setDebugSelectorPosition();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fiberNav = this.props.fiberNav;\n\n      if (!fiberNav) {\n        return null;\n      }\n\n      return React.createElement(\"pre\", {\n        ref: this.selectorRef,\n        style: {\n          position: 'fixed',\n          padding: 0,\n          margin: 0,\n          background: '#6495ed22',\n          border: '1px solid #6495edcc',\n          zIndex: 99999999,\n          pointerEvents: 'none',\n          userSelect: 'none'\n        }\n      }, React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          padding: '2px 4px',\n          margin: '-1px 0 0 -1px',\n          bottom: '100%',\n          left: 0,\n          color: '#fff',\n          background: '#6495ed'\n        }\n      }, React.createElement(\"span\", {\n        style: {\n          fontWeight: 'bold'\n        }\n      }, \"<\".concat(fiberNav.name, \" />\"))), fiberNav.domNode && React.createElement(\"div\", {\n        style: {\n          fontSize: '0.9em',\n          position: 'absolute',\n          padding: '2px 4px',\n          margin: '0 0 1px -1px',\n          top: '100%',\n          left: 0,\n          background: '#6495ed'\n        }\n      }, React.createElement(\"strong\", {\n        style: {\n          fontWeight: 'bold',\n          color: 'hsl(160, 100%, 80%)'\n        }\n      }, fiberNav.domNode.tagName && fiberNav.domNode.tagName.toLowerCase()), fiberNav.domNode.hasAttribute && typeof fiberNav.domNode.hasAttribute === 'function' && fiberNav.domNode.hasAttribute('class') && React.createElement(\"span\", {\n        style: {\n          color: 'rgba(255, 255, 255, 0.75)'\n        }\n      }, \".\", (fiberNav.domNode.getAttribute('class') || '').replace(/ +/g, '.'))));\n    }\n  }]);\n\n  return DebugRect;\n}(React.Component);\n\nexport default DebugRect;","map":{"version":3,"sources":["components/Debug/DebugRect.tsx"],"names":["DebugRect","React","Component","prevProps","prevState","snapshot","fiberNav","rect","requestAnimationFrame","position","padding","margin","background","border","zIndex","pointerEvents","userSelect","bottom","left","color","fontWeight","fontSize","top"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport FiberNavigator from './FiberNavigator';\n\ninterface DebugRectProps {\n  fiberNav: FiberNavigator;\n}\n\nclass DebugRect extends React.Component<DebugRectProps> {\n  selectorRef = React.createRef<HTMLPreElement>();\n\n  componentDidMount() {\n    this.setDebugSelectorPosition();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.setDebugSelectorPosition();\n  }\n\n  setDebugSelectorPosition = () => {\n    const { fiberNav } = this.props;\n\n    if (\n      fiberNav &&\n      fiberNav.domNode &&\n      fiberNav.domNode.getBoundingClientRect &&\n      typeof fiberNav.domNode.getBoundingClientRect === 'function' &&\n      this.selectorRef.current\n    ) {\n      const rect = fiberNav.domNode.getBoundingClientRect();\n\n      this.selectorRef.current.style.top = `${rect.top}px`;\n      this.selectorRef.current.style.left = `${rect.left}px`;\n      this.selectorRef.current.style.width = `${rect.width}px`;\n      this.selectorRef.current.style.height = `${rect.height}px`;\n\n      requestAnimationFrame(this.setDebugSelectorPosition);\n    }\n  };\n\n  render() {\n    const { fiberNav } = this.props;\n\n    if (!fiberNav) {\n      return null;\n    }\n\n    return (\n      <pre\n        ref={this.selectorRef}\n        style={{\n          position: 'fixed',\n          padding: 0,\n          margin: 0,\n          background: '#6495ed22',\n          border: '1px solid #6495edcc',\n          zIndex: 99999999,\n          pointerEvents: 'none',\n          userSelect: 'none',\n        }}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            padding: '2px 4px',\n            margin: '-1px 0 0 -1px',\n            bottom: '100%',\n            left: 0,\n            color: '#fff',\n            background: '#6495ed',\n          }}\n        >\n          <span style={{ fontWeight: 'bold' }}>{`<${fiberNav.name} />`}</span>\n        </div>\n        {fiberNav.domNode && (\n          <div\n            style={{\n              fontSize: '0.9em',\n              position: 'absolute',\n              padding: '2px 4px',\n              margin: '0 0 1px -1px',\n              top: '100%',\n              left: 0,\n              background: '#6495ed',\n            }}\n          >\n            <strong style={{ fontWeight: 'bold', color: 'hsl(160, 100%, 80%)' }}>\n              {fiberNav.domNode.tagName && fiberNav.domNode.tagName.toLowerCase()}\n            </strong>\n            {fiberNav.domNode.hasAttribute &&\n              typeof fiberNav.domNode.hasAttribute === 'function' &&\n              fiberNav.domNode.hasAttribute('class') && (\n                <span style={{ color: 'rgba(255, 255, 255, 0.75)' }}>\n                  .{(fiberNav.domNode.getAttribute('class') || '').replace(/ +/g, '.')}\n                </span>\n              )}\n          </div>\n        )}\n      </pre>\n    );\n  }\n}\n\nexport default DebugRect;\n"]},"metadata":{},"sourceType":"module"}