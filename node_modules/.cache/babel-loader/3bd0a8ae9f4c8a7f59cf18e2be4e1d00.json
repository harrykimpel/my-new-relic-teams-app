{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport { IS_FOCUSABLE_ATTRIBUTE, chatMessageBehavior, menuAsToolbarBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { getScrollParent, Popper, getPopperPropsFromShorthand } from '../../utils/positioner';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport Label from '../Label/Label';\nimport Menu from '../Menu/Menu';\nimport Text from '../Text/Text';\nimport Reaction from '../Reaction/Reaction';\nimport { ChatItemContext } from './chatItemContext';\nexport var chatMessageClassName = 'ui-chat__message';\nexport var chatMessageSlotClassNames = {\n  actionMenu: \"\".concat(chatMessageClassName, \"__actions\"),\n  author: \"\".concat(chatMessageClassName, \"__author\"),\n  timestamp: \"\".concat(chatMessageClassName, \"__timestamp\"),\n  badge: \"\".concat(chatMessageClassName, \"__badge\"),\n  content: \"\".concat(chatMessageClassName, \"__content\"),\n  reactionGroup: \"\".concat(chatMessageClassName, \"__reactions\")\n};\n\nvar ChatMessage = function ChatMessage(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ChatMessage.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var parentAttached = useContextSelector(ChatItemContext, function (v) {\n    return v.attached;\n  });\n  var accessibility = props.accessibility,\n      actionMenu = props.actionMenu,\n      _props$attached = props.attached,\n      attached = _props$attached === void 0 ? parentAttached : _props$attached,\n      author = props.author,\n      badge = props.badge,\n      badgePosition = props.badgePosition,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      mine = props.mine,\n      positionActionMenu = props.positionActionMenu,\n      reactionGroup = props.reactionGroup,\n      reactionGroupPosition = props.reactionGroupPosition,\n      timestamp = props.timestamp,\n      styles = props.styles,\n      variables = props.variables,\n      overflow = props.unstable_overflow;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      messageNode = _React$useState4[0],\n      setMessageNode = _React$useState4[1];\n\n  var updateActionsMenuPosition = React.useRef(null);\n  var getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: function preventDefault(event) {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n      focus: function focus(event) {\n        if (messageNode) {\n          messageNode.focus();\n          event.stopPropagation();\n        }\n      }\n    }\n  });\n\n  var _useStyles = useStyles(ChatMessage.displayName, {\n    className: chatMessageClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        attached: attached,\n        badgePosition: badgePosition,\n        focused: focused,\n        mine: mine,\n        hasBadge: !!badge,\n        hasReactionGroup: !!reactionGroup\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleFocus = function handleFocus(e) {\n    _invoke(updateActionsMenuPosition, 'current');\n\n    setFocused(true);\n\n    _invoke(props, 'onFocus', e, props);\n  };\n\n  var handleBlur = function handleBlur(e) {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    var shouldPreserveFocusState = _invoke(e, 'currentTarget.contains', e.relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n\n    _invoke(props, 'onBlur', e, props);\n  };\n\n  var handleMouseEnter = function handleMouseEnter(e) {\n    _invoke(updateActionsMenuPosition, 'current');\n\n    _invoke(props, 'onMouseEnter', e, props);\n  };\n\n  var renderActionMenu = function renderActionMenu() {\n    var actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: function defaultProps() {\n        var _ref;\n\n        return _ref = {}, _defineProperty(_ref, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_ref, \"accessibility\", menuAsToolbarBehavior), _defineProperty(_ref, \"className\", chatMessageSlotClassNames.actionMenu), _defineProperty(_ref, \"styles\", resolvedStyles.actionMenu), _ref;\n      }\n    });\n\n    if (!actionMenuElement) {\n      return actionMenuElement;\n    }\n\n    var modifiers = positionActionMenu && [// https://popper.js.org/docs/v2/modifiers/flip/\n    // Forces to flip only in \"top-*\" positions\n    {\n      name: 'flip',\n      options: {\n        fallbackPlacements: ['top']\n      }\n    }, overflow && {\n      name: 'preventOverflow',\n      options: {\n        boundary: getScrollParent(messageNode)\n      }\n    }];\n    return React.createElement(Popper, _extends({\n      enabled: positionActionMenu,\n      align: \"end\",\n      modifiers: modifiers,\n      position: \"above\",\n      positionFixed: overflow,\n      targetRef: messageNode\n    }, getPopperPropsFromShorthand(actionMenu)), function (_ref2) {\n      var scheduleUpdate = _ref2.scheduleUpdate;\n      updateActionsMenuPosition.current = scheduleUpdate;\n      return actionMenuElement;\n    });\n  };\n\n  var childrenPropExists = childrenExist(children);\n  var rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n  var badgeElement = Label.create(badge, {\n    defaultProps: function defaultProps() {\n      return {\n        className: chatMessageSlotClassNames.badge,\n        styles: resolvedStyles.badge\n      };\n    }\n  });\n  var reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: function defaultProps() {\n      return {\n        className: chatMessageSlotClassNames.reactionGroup,\n        styles: resolvedStyles.reactionGroup\n      };\n    }\n  });\n  var actionMenuElement = renderActionMenu();\n  var authorElement = Text.create(author, {\n    defaultProps: function defaultProps() {\n      return {\n        size: 'small',\n        styles: resolvedStyles.author,\n        className: chatMessageSlotClassNames.author\n      };\n    }\n  });\n  var timestampElement = Text.create(timestamp, {\n    defaultProps: function defaultProps() {\n      return {\n        size: 'small',\n        styles: resolvedStyles.timestamp,\n        timestamp: true,\n        className: chatMessageSlotClassNames.timestamp\n      };\n    }\n  });\n  var messageContent = Box.create(content, {\n    defaultProps: function defaultProps() {\n      return {\n        className: chatMessageSlotClassNames.content,\n        styles: resolvedStyles.content\n      };\n    }\n  });\n  var element = React.createElement(Ref, {\n    innerRef: setMessageNode\n  }, getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: rootClasses,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onMouseEnter: handleMouseEnter\n  }, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), {}, unhandledProps)), childrenPropExists ? children : React.createElement(React.Fragment, null, actionMenuElement, badgePosition === 'start' && badgeElement, authorElement, timestampElement, reactionGroupPosition === 'start' && reactionGroupElement, messageContent, reactionGroupPosition === 'end' && reactionGroupElement, badgePosition === 'end' && badgeElement))));\n  setEnd();\n  return element;\n};\n\nChatMessage.displayName = 'ChatMessage';\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  positionActionMenu: true,\n  reactionGroupPosition: 'start'\n};\nChatMessage.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  mine: PropTypes.bool,\n  timestamp: customPropTypes.itemShorthand,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  unstable_overflow: PropTypes.bool\n});\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes);\nChatMessage.create = createShorthandFactory({\n  Component: ChatMessage,\n  mappedProp: 'content'\n});\n/**\n * A ChatMessage represents a single message in chat.\n */\n\nexport default withSafeTypeForAs(ChatMessage);","map":{"version":3,"sources":["components/Chat/ChatMessage.tsx"],"names":["chatMessageClassName","chatMessageSlotClassNames","actionMenu","author","timestamp","badge","content","reactionGroup","ChatMessage","context","React","setStart","setEnd","useTelemetry","parentAttached","useContextSelector","v","accessibility","attached","badgePosition","children","className","design","mine","positionActionMenu","reactionGroupPosition","styles","variables","overflow","props","focused","setFocused","messageNode","setMessageNode","updateActionsMenuPosition","getA11Props","useAccessibility","actionHandlers","preventDefault","event","focus","classes","resolvedStyles","useStyles","mapPropsToStyles","hasBadge","hasReactionGroup","mapPropsToInlineStyles","rtl","handleFocus","handleBlur","shouldPreserveFocusState","e","handleMouseEnter","renderActionMenu","actionMenuElement","defaultProps","modifiers","name","options","fallbackPlacements","boundary","getScrollParent","getPopperPropsFromShorthand","scheduleUpdate","childrenPropExists","childrenExist","rootClasses","cx","ElementType","getElementType","unhandledProps","useUnhandledProps","badgeElement","reactionGroupElement","authorElement","size","timestampElement","messageContent","element","onBlur","onFocus","onMouseEnter","forElements","PropTypes","customPropTypes","unstable_overflow","bool","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  IS_FOCUSABLE_ATTRIBUTE,\n  chatMessageBehavior,\n  menuAsToolbarBehavior,\n  ChatMessageBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  getScrollParent,\n  Popper,\n  PopperShorthandProps,\n  getPopperPropsFromShorthand,\n  PopperModifiers,\n} from '../../utils/positioner';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Label, { LabelProps } from '../Label/Label';\nimport Menu, { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport Text, { TextProps } from '../Text/Text';\nimport Reaction, { ReactionProps } from '../Reaction/Reaction';\nimport { ReactionGroupProps } from '../Reaction/ReactionGroup';\nimport { ChatItemContext } from './chatItemContext';\n\nexport interface ChatMessageSlotClassNames {\n  actionMenu: string;\n  author: string;\n  timestamp: string;\n  badge: string;\n  content: string;\n  reactionGroup: string;\n}\n\nexport interface ChatMessageProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatMessageBehaviorProps>;\n\n  /** Menu with actions of the message. */\n  actionMenu?: ShorthandValue<MenuProps & { popper?: PopperShorthandProps }> | ShorthandCollection<MenuItemProps>;\n\n  /** Controls messages's relation to other chat messages. Is automatically set by the ChatItem. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Author of the message. */\n  author?: ShorthandValue<TextProps>;\n\n  /** Indicates whether message belongs to the current user. */\n  mine?: boolean;\n\n  /** Timestamp of the message. */\n  timestamp?: ShorthandValue<TextProps>;\n\n  /** Badge attached to the message. */\n  badge?: ShorthandValue<LabelProps>;\n\n  /** A message can format the badge to appear at the start or the end of the message. */\n  badgePosition?: 'start' | 'end';\n\n  /**\n   * Called after user's blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user enters by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<ChatMessageProps>;\n\n  /** Allows suppression of action menu positioning for performance reasons */\n  positionActionMenu?: boolean;\n\n  /** Reaction group applied to the message. */\n  reactionGroup?: ShorthandValue<ReactionGroupProps> | ShorthandCollection<ReactionProps>;\n\n  /** A message can format the reactions group to appear at the start or the end of the message. */\n  reactionGroupPosition?: 'start' | 'end';\n\n  /** Positions an actionMenu slot in \"fixed\" mode. */\n  unstable_overflow?: boolean;\n}\n\nexport type ChatMessageStylesProps = Pick<ChatMessageProps, 'attached' | 'badgePosition' | 'mine'> & {\n  focused: boolean;\n  hasBadge: boolean;\n  hasReactionGroup: boolean;\n};\n\nexport const chatMessageClassName = 'ui-chat__message';\nexport const chatMessageSlotClassNames: ChatMessageSlotClassNames = {\n  actionMenu: `${chatMessageClassName}__actions`,\n  author: `${chatMessageClassName}__author`,\n  timestamp: `${chatMessageClassName}__timestamp`,\n  badge: `${chatMessageClassName}__badge`,\n  content: `${chatMessageClassName}__content`,\n  reactionGroup: `${chatMessageClassName}__reactions`,\n};\n\nconst ChatMessage: React.FC<WithAsProp<ChatMessageProps>> & FluentComponentStaticProps<ChatMessageProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatMessage.displayName, context.telemetry);\n  setStart();\n\n  const parentAttached = useContextSelector(ChatItemContext, v => v.attached);\n  const {\n    accessibility,\n    actionMenu,\n    attached = parentAttached,\n    author,\n    badge,\n    badgePosition,\n    children,\n    className,\n    content,\n    design,\n    mine,\n    positionActionMenu,\n    reactionGroup,\n    reactionGroupPosition,\n    timestamp,\n    styles,\n    variables,\n    unstable_overflow: overflow,\n  } = props;\n\n  const [focused, setFocused] = React.useState<boolean>(false);\n  const [messageNode, setMessageNode] = React.useState<HTMLElement | null>(null);\n\n  const updateActionsMenuPosition = React.useRef<(() => void) | null>(null);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: event => {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n\n      focus: event => {\n        if (messageNode) {\n          messageNode.focus();\n          event.stopPropagation();\n        }\n      },\n    },\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatMessageStylesProps>(ChatMessage.displayName, {\n    className: chatMessageClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      badgePosition,\n      focused,\n      mine,\n      hasBadge: !!badge,\n      hasReactionGroup: !!reactionGroup,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n\n    setFocused(true);\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    const shouldPreserveFocusState = _.invoke(e, 'currentTarget.contains', (e as any).relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleMouseEnter = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const renderActionMenu = () => {\n    const actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: () => ({\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        accessibility: menuAsToolbarBehavior,\n        className: chatMessageSlotClassNames.actionMenu,\n        styles: resolvedStyles.actionMenu,\n      }),\n    });\n\n    if (!actionMenuElement) {\n      return actionMenuElement;\n    }\n\n    const modifiers: PopperModifiers | undefined = positionActionMenu && [\n      // https://popper.js.org/docs/v2/modifiers/flip/\n      // Forces to flip only in \"top-*\" positions\n      { name: 'flip', options: { fallbackPlacements: ['top'] } },\n      overflow && {\n        name: 'preventOverflow',\n        options: { boundary: getScrollParent(messageNode) },\n      },\n    ];\n\n    return (\n      <Popper\n        enabled={positionActionMenu}\n        align=\"end\"\n        modifiers={modifiers}\n        position=\"above\"\n        positionFixed={overflow}\n        targetRef={messageNode}\n        {...getPopperPropsFromShorthand(actionMenu)}\n      >\n        {({ scheduleUpdate }) => {\n          updateActionsMenuPosition.current = scheduleUpdate;\n\n          return actionMenuElement;\n        }}\n      </Popper>\n    );\n  };\n\n  const childrenPropExists = childrenExist(children);\n  const rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n\n  const badgeElement = Label.create(badge, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.badge,\n      styles: resolvedStyles.badge,\n    }),\n  });\n\n  const reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.reactionGroup,\n      styles: resolvedStyles.reactionGroup,\n    }),\n  });\n\n  const actionMenuElement = renderActionMenu();\n\n  const authorElement = Text.create(author, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.author,\n      className: chatMessageSlotClassNames.author,\n    }),\n  });\n\n  const timestampElement = Text.create(timestamp, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.timestamp,\n      timestamp: true,\n      className: chatMessageSlotClassNames.timestamp,\n    }),\n  });\n\n  const messageContent = Box.create(content, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const element = (\n    <Ref innerRef={setMessageNode}>\n      {getA11Props.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11Props('root', {\n            className: rootClasses,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onMouseEnter: handleMouseEnter,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenPropExists ? (\n            children\n          ) : (\n            <>\n              {actionMenuElement}\n              {badgePosition === 'start' && badgeElement}\n              {authorElement}\n              {timestampElement}\n              {reactionGroupPosition === 'start' && reactionGroupElement}\n              {messageContent}\n              {reactionGroupPosition === 'end' && reactionGroupElement}\n              {badgePosition === 'end' && badgeElement}\n            </>\n          )}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatMessage.displayName = 'ChatMessage';\n\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  positionActionMenu: true,\n  reactionGroupPosition: 'start',\n};\nChatMessage.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  mine: PropTypes.bool,\n  timestamp: customPropTypes.itemShorthand,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  unstable_overflow: PropTypes.bool,\n};\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes) as any;\n\nChatMessage.create = createShorthandFactory({ Component: ChatMessage, mappedProp: 'content' });\n\n/**\n * A ChatMessage represents a single message in chat.\n */\nexport default withSafeTypeForAs<typeof ChatMessage, ChatMessageProps>(ChatMessage);\n"]},"metadata":{},"sourceType":"module"}