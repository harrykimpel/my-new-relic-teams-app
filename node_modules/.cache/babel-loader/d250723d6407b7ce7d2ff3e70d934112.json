{"ast":null,"code":"import { statusBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nexport var statusClassName = 'ui-status';\n\nvar Status = function Status(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Status.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      color = props.color,\n      icon = props.icon,\n      size = props.size,\n      state = props.state,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n\n  var _useStyles = useStyles(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        color: color,\n        size: size,\n        state: state\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl\n  });\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Status.handledProps, props);\n  var iconElement = Box.create(icon, {\n    defaultProps: function defaultProps() {\n      return getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span'\n      });\n    }\n  });\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), iconElement);\n  setEnd();\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown'])\n});\nStatus.handledProps = Object.keys(Status.propTypes);\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown'\n};\nStatus.create = createShorthandFactory({\n  Component: Status,\n  mappedProp: 'state'\n});\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\n\nexport default withSafeTypeForAs(Status);","map":{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusClassName","Status","context","React","setStart","setEnd","useTelemetry","className","color","icon","size","state","design","styles","variables","props","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","getA11Props","useAccessibility","debugName","ElementType","getElementType","unhandledProps","useUnhandledProps","iconElement","defaultProps","as","element","root","children","content","PropTypes","customPropTypes","Object","accessibility","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\nconst Status: React.FC<WithAsProp<StatusProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport default withSafeTypeForAs<typeof Status, StatusProps, 'span'>(Status);\n"]},"metadata":{},"sourceType":"module"}