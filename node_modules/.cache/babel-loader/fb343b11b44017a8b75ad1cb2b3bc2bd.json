{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport { useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { commonPropTypes } from '../../utils';\n\nvar applyStyles = function applyStyles(element, styles, classes) {\n  if (!styles) {\n    return element;\n  } // if element is DOM element\n\n\n  if (typeof element.type === 'string') {\n    return React.cloneElement(element, {\n      className: cx(element.props.className, classes.root)\n    });\n  } // assuming element is Fluent UI element\n\n\n  return React.cloneElement(element, {\n    styles: mergeStyles(styles.root || {}, element.props.styles)\n  });\n};\n\nexport var flexItemClassName = 'ui-flex__item';\n/**\n * A FlexItem is a layout component that customizes alignment of Flex child.\n */\n\nvar FlexItem = function FlexItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(FlexItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var align = props.align,\n      children = props.children,\n      className = props.className,\n      design = props.design,\n      grow = props.grow,\n      flexDirection = props.flexDirection,\n      push = props.push,\n      shrink = props.shrink,\n      size = props.size,\n      styles = props.styles,\n      variables = props.variables;\n\n  var _useStyles = useStyles(FlexItem.displayName, {\n    className: flexItemClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        align: align,\n        grow: grow,\n        flexDirection: flexDirection,\n        push: push,\n        shrink: shrink,\n        size: size\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var element; // pass calculated bits using Render Props pattern\n\n  if (typeof children === 'function') {\n    element = children({\n      styles: resolvedStyles.root,\n      classes: classes.root\n    });\n  } else if (_isNil(children)) {\n    element = null;\n  } else {\n    element = applyStyles(React.Children.only(children), resolvedStyles, classes);\n  }\n\n  setEnd();\n  return element;\n};\n\nFlexItem.displayName = 'FlexItem';\nFlexItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  accessibility: false,\n  content: false\n}), {\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),\n  size: PropTypes.oneOfType([PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']), PropTypes.string]),\n  shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  push: PropTypes.bool,\n\n  /**\n   * Will be automatically set by parent Flex component\n   */\n  flexDirection: PropTypes.oneOf(['row', 'column'])\n}); // Boolean flag for now, Symbol-based approach may be used instead.\n// However, there are  concerns related to browser compatibility if Symbols will be used.\n// Completely alternative approach - check class name of React element (and generalize this logic).\n\nFlexItem.__isFlexItem = true;\nexport default FlexItem;","map":{"version":3,"sources":["components/Flex/FlexItem.tsx"],"names":["applyStyles","element","className","cx","classes","styles","mergeStyles","flexItemClassName","FlexItem","context","React","setStart","setEnd","useTelemetry","align","children","design","grow","flexDirection","push","shrink","size","variables","props","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","root","accessibility","content","PropTypes"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { ComponentSlotStylesPrepared, ComponentSlotStylesResolved, mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport { ProviderContextPrepared } from '../../types';\n\ntype ChildrenFunction = (params: { styles: ComponentSlotStylesPrepared; classes: string }) => React.ReactElement;\n\nexport type FlexItemChildren = React.ReactElement | ChildrenFunction;\n\nexport interface FlexItemProps extends UIComponentProps, ChildrenComponentProps<FlexItemChildren> {\n  /** Controls item's alignment. */\n  align?: 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n\n  /** Defines size of the item. */\n  size?: 'size.half' | 'size.quarter' | 'size.small' | 'size.medium' | 'size.large' | string;\n\n  /**\n   * Item can fill remaining space of the container.\n   * If numeric value is provided, remaining space will be distributed proportionally between all the items.\n   * */\n  grow?: boolean | number;\n\n  /**\n   * Controls item's ability to shrink.\n   * */\n  shrink?: boolean | number;\n\n  /**\n   * Item can be pushed towards opposite side in the container's direction.\n   */\n  push?: boolean;\n\n  /**\n   * IGNORE (will be refactored and not exposed via API).\n   * Value is automatically set by parent Flex component.\n   */\n  flexDirection?: 'row' | 'column';\n}\n\nexport type FlexItemStylesProps = Pick<FlexItemProps, 'align' | 'grow' | 'flexDirection' | 'push' | 'shrink' | 'size'>;\n\nconst applyStyles = (\n  element: React.ReactElement,\n  styles: ComponentSlotStylesResolved,\n  classes: ComponentSlotClasses,\n): React.ReactElement => {\n  if (!styles) {\n    return element;\n  }\n\n  // if element is DOM element\n  if (typeof element.type === 'string') {\n    return React.cloneElement(element, {\n      className: cx(element.props.className, classes.root),\n    });\n  }\n\n  // assuming element is Fluent UI element\n  return React.cloneElement(element, {\n    styles: mergeStyles(styles.root || {}, element.props.styles),\n  });\n};\n\nexport const flexItemClassName = 'ui-flex__item';\n\n/**\n * A FlexItem is a layout component that customizes alignment of Flex child.\n */\nconst FlexItem: React.FC<FlexItemProps> & { __isFlexItem: boolean } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(FlexItem.displayName, context.telemetry);\n  setStart();\n\n  const { align, children, className, design, grow, flexDirection, push, shrink, size, styles, variables } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles<FlexItemStylesProps>(FlexItem.displayName, {\n    className: flexItemClassName,\n    mapPropsToStyles: () => ({\n      align,\n      grow,\n      flexDirection,\n      push,\n      shrink,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  let element: React.ReactElement;\n\n  // pass calculated bits using Render Props pattern\n  if (typeof children === 'function') {\n    element = children({\n      styles: resolvedStyles.root,\n      classes: classes.root,\n    });\n  } else if (_.isNil(children)) {\n    element = null;\n  } else {\n    element = applyStyles(React.Children.only(children) as React.ReactElement, resolvedStyles, classes);\n  }\n\n  setEnd();\n\n  return element;\n};\n\nFlexItem.displayName = 'FlexItem';\n\nFlexItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    accessibility: false,\n    content: false,\n  }),\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']),\n    PropTypes.string,\n  ]),\n  shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n  push: PropTypes.bool,\n\n  /**\n   * Will be automatically set by parent Flex component\n   */\n  flexDirection: PropTypes.oneOf(['row', 'column']),\n};\n\n// Boolean flag for now, Symbol-based approach may be used instead.\n// However, there are  concerns related to browser compatibility if Symbols will be used.\n// Completely alternative approach - check class name of React element (and generalize this logic).\nFlexItem.__isFlexItem = true;\n\nexport default FlexItem;\n"]},"metadata":{},"sourceType":"module"}