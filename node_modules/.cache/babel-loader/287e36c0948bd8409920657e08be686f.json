{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as keyboardKey from 'keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @description\n *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.\n *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.\n *  @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Triggers 'performClick' action with 'Spacebar' on 'root'.\n */\n\nvar treeTitleBehavior = function treeTitleBehavior(props) {\n  var _ref;\n\n  return {\n    attributes: {\n      root: Object.assign({}, !props.hasSubtree && (_ref = {\n        tabIndex: -1\n      }, _defineProperty(_ref, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_ref, \"role\", 'treeitem'), _defineProperty(_ref, 'aria-setsize', props.treeSize), _defineProperty(_ref, 'aria-posinset', props.index), _defineProperty(_ref, 'aria-level', props.level), _defineProperty(_ref, 'aria-selected', props.selectable ? props.selected || false : undefined), _ref))\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Spacebar\n          }]\n        }\n      }\n    }\n  };\n};\n\nexport default treeTitleBehavior;","map":{"version":3,"sources":["behaviors/Tree/treeTitleBehavior.ts"],"names":["treeTitleBehavior","attributes","root","props","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Spacebar"],"mappings":";AAAA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;AAYA,IAAMA,iBAAwD,GAAG,SAA3DA,iBAA2D,CAAA,KAAA,EAAK;AAAA,MAAA,IAAA;;AAAA,SAAK;AACzEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,CAACC,KAAK,CAAN,UAAA,KAAA,IAAA,GAAA;AACFC,QAAAA,QAAQ,EAAE,CAAC;AADT,OAAA,EAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAIcD,KAAK,CAJnB,QAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAKeA,KAAK,CALpB,KAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAMYA,KAAK,CANjB,KAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAOeA,KAAK,CAALA,UAAAA,GAAmBA,KAAK,CAALA,QAAAA,IAAnBA,KAAAA,GAPf,SAAA,CAAA,EADF,IACE,CADF;AADM,KAD6D;AAczEE,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAE;AACJI,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADL;AADV;AADI;AAd6D,GAAL;AAAtE,CAAA;;AAuBA,eAAA,iBAAA","sourcesContent":["import * as keyboardKey from 'keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.\n *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.\n *  @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Triggers 'performClick' action with 'Spacebar' on 'root'.\n */\nconst treeTitleBehavior: Accessibility<TreeTitleBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      ...(!props.hasSubtree && {\n        tabIndex: -1,\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        role: 'treeitem',\n        'aria-setsize': props.treeSize,\n        'aria-posinset': props.index,\n        'aria-level': props.level,\n        'aria-selected': props.selectable ? props.selected || false : undefined,\n      }),\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Spacebar }],\n      },\n    },\n  },\n});\n\nexport default treeTitleBehavior;\n\nexport type TreeTitleBehaviorProps = {\n  /** Indicated if tree title has a subtree */\n  hasSubtree?: boolean;\n  level?: number;\n  treeSize?: number;\n  index?: number;\n  selected?: boolean;\n  selectable?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}