{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { radioGroupItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { AutoControlledComponent, createShorthandFactory, commonPropTypes, applyAccessibilityKeyHandlers } from '../../utils';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nexport var radioGroupItemClassName = 'ui-radiogroup__item';\nexport var radioGroupItemSlotClassNames = {\n  indicator: \"\".concat(radioGroupItemClassName, \"__indicator\")\n};\n\nvar RadioGroupItem = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(RadioGroupItem, _AutoControlledCompon);\n\n  function RadioGroupItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RadioGroupItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroupItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"elementRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      performClick: function performClick(e) {\n        e.preventDefault();\n\n        _this.handleClick(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {\n        checked: _this.state.checked\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(RadioGroupItem, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var checked = this.state.checked;\n\n      if (checked !== prevState.checked) {\n        checked && this.props.shouldFocus && this.elementRef.current.focus();\n\n        _invoke(this.props, 'onChange', undefined, Object.assign({}, this.props, {\n          checked: checked\n        }));\n      }\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          accessibility = _ref.accessibility;\n      var _this$props = this.props,\n          label = _this$props.label,\n          indicator = _this$props.indicator;\n      return React.createElement(Ref, {\n        innerRef: this.elementRef\n      }, React.createElement(ElementType, _extends({\n        onClick: this.handleClick,\n        onChange: this.handleChange,\n        className: classes.root\n      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), Box.create(indicator, {\n        defaultProps: function defaultProps() {\n          return {\n            className: radioGroupItemSlotClassNames.indicator,\n            styles: styles.indicator\n          };\n        }\n      }), Box.create(label, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'span'\n          };\n        }\n      })));\n    }\n  }]);\n\n  return RadioGroupItem;\n}(AutoControlledComponent);\n\n_defineProperty(RadioGroupItem, \"create\", void 0);\n\n_defineProperty(RadioGroupItem, \"displayName\", 'RadioGroupItem');\n\n_defineProperty(RadioGroupItem, \"deprecated_className\", radioGroupItemClassName);\n\n_defineProperty(RadioGroupItem, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  shouldFocus: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool\n}));\n\n_defineProperty(RadioGroupItem, \"defaultProps\", {\n  accessibility: radioGroupItemBehavior,\n  indicator: {}\n});\n\n_defineProperty(RadioGroupItem, \"autoControlledProps\", ['checked']);\n\nRadioGroupItem.create = createShorthandFactory({\n  Component: RadioGroupItem,\n  mappedProp: 'label'\n});\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\n\nexport default withSafeTypeForAs(RadioGroupItem);","map":{"version":3,"sources":["components/RadioGroup/RadioGroupItem.tsx"],"names":["radioGroupItemClassName","radioGroupItemSlotClassNames","indicator","RadioGroupItem","AutoControlledComponent","React","content","checked","PropTypes","bool","defaultChecked","disabled","customPropTypes","shorthandAllowingChildren","label","itemShorthand","name","string","onClick","func","onChange","shouldFocus","value","vertical","accessibility","performClick","e","prevProps","prevState","ElementType","classes","unhandledProps","styles","elementRef","root","applyAccessibilityKeyHandlers","defaultProps","className","as","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, radioGroupItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  AutoControlledComponent,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\n\nexport interface RadioGroupItemSlotClassNames {\n  indicator: string;\n}\n\nexport interface RadioGroupItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Whether or not radio item is checked. */\n  checked?: boolean;\n\n  /**\n   * Called after radio item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** The label of the radio item. */\n  label?: ShorthandValue<BoxProps>;\n\n  /** Initial checked value. */\n  defaultChecked?: boolean;\n\n  /** A radio item can appear disabled and be unable to change states. */\n  disabled?: boolean;\n\n  /** The radio item indicator can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /**\n   * Called after radio item is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Whether should focus when checked */\n  shouldFocus?: boolean; // TODO: RFC #306\n\n  /** The HTML input value. */\n  value?: string | number;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport interface RadioGroupItemState {\n  checked: boolean;\n}\n\nexport const radioGroupItemClassName = 'ui-radiogroup__item';\nexport const radioGroupItemSlotClassNames: RadioGroupItemSlotClassNames = {\n  indicator: `${radioGroupItemClassName}__indicator`,\n};\n\nclass RadioGroupItem extends AutoControlledComponent<WithAsProp<RadioGroupItemProps>, RadioGroupItemState> {\n  elementRef = React.createRef<HTMLElement>();\n\n  static create: ShorthandFactory<RadioGroupItemProps>;\n\n  static displayName = 'RadioGroupItem';\n\n  static deprecated_className = radioGroupItemClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    checked: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    label: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n    shouldFocus: PropTypes.bool,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: radioGroupItemBehavior,\n    indicator: {},\n  };\n\n  static autoControlledProps = ['checked'];\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = e => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  handleChange = (e: React.ChangeEvent) => {\n    // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(this.props, 'onChange', e, { ...this.props, checked: this.state.checked });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const checked = this.state.checked;\n    if (checked !== prevState.checked) {\n      checked && this.props.shouldFocus && this.elementRef.current.focus();\n      _.invoke(this.props, 'onChange', undefined, { ...this.props, checked });\n    }\n  }\n\n  renderComponent({ ElementType, classes, unhandledProps, styles, accessibility }) {\n    const { label, indicator } = this.props;\n\n    return (\n      <Ref innerRef={this.elementRef}>\n        <ElementType\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n          className={classes.root}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {Box.create(indicator, {\n            defaultProps: () => ({\n              className: radioGroupItemSlotClassNames.indicator,\n              styles: styles.indicator,\n            }),\n          })}\n          {Box.create(label, {\n            defaultProps: () => ({\n              as: 'span',\n            }),\n          })}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nRadioGroupItem.create = createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });\n\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\nexport default withSafeTypeForAs<typeof RadioGroupItem, RadioGroupItemProps>(RadioGroupItem);\n"]},"metadata":{},"sourceType":"module"}