{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { find, isOverridden } from './utils';\n\nvar DebugPanelData = function DebugPanelData(props) {\n  var data = props.data,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 2 : _props$indent,\n      highlightKey = props.highlightKey,\n      overrides = props.overrides,\n      comments = props.comments,\n      commentKeyPredicate = props.commentKeyPredicate;\n  var isValidComment = typeof comments === 'string' && commentKeyPredicate && commentKeyPredicate(comments);\n\n  if (typeof data === 'undefined') {\n    return isValidComment ? React.createElement(\"abbr\", {\n      title: comments\n    }, \"undefined\") : React.createElement(\"span\", null, \"undefined\");\n  }\n\n  if (data === null || _typeof(data) !== 'object') {\n    return isValidComment ? React.createElement(\"abbr\", {\n      title: comments\n    }, JSON.stringify(data)) : React.createElement(\"span\", null, JSON.stringify(data));\n  }\n\n  return React.createElement(React.Fragment, null, '{', Object.keys(data).map(function (key, idx) {\n    var value = data[key];\n    var comment = comments && comments[key];\n    var highlight = find(data, key, highlightKey);\n    var overridden = isOverridden(data, key, overrides);\n    return React.createElement(\"div\", {\n      key: key\n    }, React.createElement(\"span\", {\n      style: {\n        background: highlight ? 'rgb(255,255,224)' : ''\n      }\n    }, ' '.repeat(indent), React.createElement(\"span\", {\n      style: {\n        textDecoration: overridden ? 'line-through' : 'none'\n      }\n    }, React.createElement(\"span\", {\n      style: {\n        color: _typeof(value) === 'object' ? 'grey' : '#b82519'\n      }\n    }, key), ': ', React.createElement(DebugPanelData, {\n      data: value,\n      comments: comment,\n      commentKeyPredicate: commentKeyPredicate,\n      indent: indent + 2,\n      overrides: overrides ? overrides[key] : null,\n      highlightKey: highlightKey\n    })), ','));\n  }), \"\".concat(indent > 2 ? ' '.repeat(indent - 2) : '', \"}\"));\n};\n\nexport default DebugPanelData;","map":{"version":3,"sources":["components/Debug/DebugPanelData.tsx"],"names":["DebugPanelData","data","indent","highlightKey","overrides","comments","commentKeyPredicate","props","isValidComment","JSON","value","comment","highlight","find","overridden","isOverridden","key","background","textDecoration","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { find, isOverridden } from './utils';\n\ninterface DebugPanelDataProps {\n  data: any;\n  overrides?: any;\n  comments?: any;\n  indent?: number;\n  highlightKey?: string;\n  commentKeyPredicate?: (val: any) => boolean;\n}\n\nconst DebugPanelData: React.FC<DebugPanelDataProps> = props => {\n  const { data, indent = 2, highlightKey, overrides, comments, commentKeyPredicate } = props;\n\n  const isValidComment = typeof comments === 'string' && commentKeyPredicate && commentKeyPredicate(comments);\n\n  if (typeof data === 'undefined') {\n    return isValidComment ? <abbr title={comments}>undefined</abbr> : <span>undefined</span>;\n  }\n\n  if (data === null || typeof data !== 'object') {\n    return isValidComment ? <abbr title={comments}>{JSON.stringify(data)}</abbr> : <span>{JSON.stringify(data)}</span>;\n  }\n\n  return (\n    <>\n      {'{'}\n      {Object.keys(data).map((key, idx) => {\n        const value = data[key];\n\n        const comment = comments && comments[key];\n\n        const highlight = find(data, key, highlightKey);\n        const overridden = isOverridden(data, key, overrides);\n\n        return (\n          <div key={key}>\n            <span style={{ background: highlight ? 'rgb(255,255,224)' : '' }}>\n              {' '.repeat(indent)}\n              <span style={{ textDecoration: overridden ? 'line-through' : 'none' }}>\n                <span style={{ color: typeof value === 'object' ? 'grey' : '#b82519' }}>{key}</span>\n                {': '}\n                <DebugPanelData\n                  data={value}\n                  comments={comment}\n                  commentKeyPredicate={commentKeyPredicate}\n                  indent={indent + 2}\n                  overrides={overrides ? overrides[key] : null}\n                  highlightKey={highlightKey}\n                />\n              </span>\n              {','}\n            </span>\n          </div>\n        );\n      })}\n      {`${indent > 2 ? ' '.repeat(indent - 2) : ''}}`}\n    </>\n  );\n};\n\nexport default DebugPanelData;\n"]},"metadata":{},"sourceType":"module"}