{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport { FocusZone, getElementType, deprecated_getTelemetry as getTelemetry, getUnhandledProps, unstable_getAccessibility as getAccessibility, unstable_getStyles as getStyles } from '@fluentui/react-bindings';\nimport { emptyTheme } from '@fluentui/styles';\nimport logProviderMissingWarning from './providerMissingHandler';\n\nvar renderComponent = function renderComponent(config, context) {\n  var className = config.className,\n      displayName = config.displayName,\n      handledProps = config.handledProps,\n      props = config.props,\n      state = config.state,\n      actionHandlers = config.actionHandlers,\n      render = config.render,\n      _config$saveDebug = config.saveDebug,\n      saveDebug = _config$saveDebug === void 0 ? function () {} : _config$saveDebug;\n\n  if (_isEmpty(context)) {\n    logProviderMissingWarning();\n  }\n\n  var _getTelemetry = getTelemetry(displayName, context.telemetry),\n      setStart = _getTelemetry.setStart,\n      setEnd = _getTelemetry.setEnd;\n\n  var rtl = context.rtl || false;\n  setStart();\n  var ElementType = getElementType(props);\n  var unhandledProps = getUnhandledProps(handledProps, props);\n  var stateAndProps = Object.assign({}, state, {}, props);\n  var accessibility = getAccessibility(displayName, props.accessibility, stateAndProps, rtl, actionHandlers);\n\n  var _getStyles = getStyles({\n    className: className,\n    disableAnimations: context.disableAnimations || false,\n    displayNames: [displayName],\n    props: stateAndProps,\n    renderer: context.renderer || {\n      renderRule: function renderRule() {\n        return '';\n      }\n    },\n    rtl: rtl,\n    saveDebug: saveDebug,\n    theme: context.theme || emptyTheme,\n    performance: Object.assign({}, context.performance, {\n      // we cannot enable caching for class components\n      enableStylesCaching: false,\n      enableBooleanVariablesCaching: false\n    })\n  }),\n      classes = _getStyles.classes,\n      variables = _getStyles.variables,\n      styles = _getStyles.styles,\n      theme = _getStyles.theme;\n\n  var resolvedConfig = {\n    ElementType: ElementType,\n    unhandledProps: unhandledProps,\n    classes: classes,\n    variables: variables,\n    styles: styles,\n    accessibility: accessibility,\n    rtl: rtl,\n    theme: theme\n  };\n\n  if (accessibility.focusZone) {\n    var originalElementType = resolvedConfig.ElementType;\n    resolvedConfig.ElementType = FocusZone;\n    resolvedConfig.unhandledProps = Object.assign({}, resolvedConfig.unhandledProps, {}, accessibility.focusZone.props);\n    resolvedConfig.unhandledProps.as = originalElementType;\n    resolvedConfig.unhandledProps.isRtl = resolvedConfig.rtl;\n  }\n\n  var element = render(resolvedConfig);\n  setEnd();\n  return element;\n};\n\nexport default renderComponent;","map":{"version":3,"sources":["utils/renderComponent.tsx"],"names":["deprecated_getTelemetry","unstable_getAccessibility","unstable_getStyles","renderComponent","className","displayName","handledProps","props","state","actionHandlers","render","saveDebug","config","logProviderMissingWarning","setStart","setEnd","getTelemetry","context","rtl","ElementType","getElementType","unhandledProps","getUnhandledProps","stateAndProps","accessibility","getAccessibility","classes","variables","styles","theme","getStyles","disableAnimations","displayNames","renderer","renderRule","performance","enableStylesCaching","enableBooleanVariablesCaching","resolvedConfig","originalElementType","element"],"mappings":"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","sourcesContent":["import {\n  AccessibilityActionHandlers,\n  ComponentSlotClasses,\n  FocusZone,\n  getElementType,\n  deprecated_getTelemetry as getTelemetry,\n  getUnhandledProps,\n  ReactAccessibilityBehavior,\n  unstable_getAccessibility as getAccessibility,\n  unstable_getStyles as getStyles,\n} from '@fluentui/react-bindings';\nimport {\n  emptyTheme,\n  ComponentSlotStylesResolved,\n  ComponentVariablesObject,\n  DebugData,\n  PropsWithVarsAndStyles,\n  ThemePrepared,\n} from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as React from 'react';\n\nimport { Props, ProviderContextPrepared } from '../types';\nimport logProviderMissingWarning from './providerMissingHandler';\n\nexport interface RenderResultConfig<P> {\n  ElementType: React.ElementType<P>;\n  classes: ComponentSlotClasses;\n  unhandledProps: Props;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  accessibility: ReactAccessibilityBehavior;\n  rtl: boolean;\n  theme: ThemePrepared;\n}\n\nexport type RenderComponentCallback<P> = (config: RenderResultConfig<P>) => any;\n\nexport interface RenderConfig<P> {\n  className?: string;\n  displayName: string;\n  handledProps: string[];\n  props: PropsWithVarsAndStyles;\n  state: Record<string, any>;\n  actionHandlers: AccessibilityActionHandlers;\n  render: RenderComponentCallback<P>;\n  saveDebug: (debug: DebugData | null) => void;\n}\n\nconst renderComponent = <P extends {}>(\n  config: RenderConfig<P>,\n  context?: ProviderContextPrepared,\n): React.ReactElement<P> => {\n  const { className, displayName, handledProps, props, state, actionHandlers, render, saveDebug = () => {} } = config;\n\n  if (_.isEmpty(context)) {\n    logProviderMissingWarning();\n  }\n\n  const { setStart, setEnd } = getTelemetry(displayName, context.telemetry);\n  const rtl = context.rtl || false;\n\n  setStart();\n\n  const ElementType = getElementType(props) as React.ReactType<P>;\n  const unhandledProps = getUnhandledProps(handledProps, props);\n  const stateAndProps = { ...state, ...props };\n\n  const accessibility: ReactAccessibilityBehavior = getAccessibility(\n    displayName,\n    props.accessibility,\n    stateAndProps,\n    rtl,\n    actionHandlers,\n  );\n  const { classes, variables, styles, theme } = getStyles({\n    className,\n    disableAnimations: context.disableAnimations || false,\n    displayNames: [displayName],\n    props: stateAndProps,\n    renderer: context.renderer || { renderRule: () => '' },\n    rtl,\n    saveDebug,\n    theme: context.theme || emptyTheme,\n    performance: {\n      ...context.performance,\n      // we cannot enable caching for class components\n      enableStylesCaching: false,\n      enableBooleanVariablesCaching: false,\n    },\n  });\n\n  const resolvedConfig: RenderResultConfig<P> = {\n    ElementType,\n    unhandledProps,\n    classes,\n    variables,\n    styles,\n    accessibility,\n    rtl,\n    theme,\n  };\n\n  if (accessibility.focusZone) {\n    const originalElementType = resolvedConfig.ElementType;\n\n    resolvedConfig.ElementType = FocusZone as any;\n    resolvedConfig.unhandledProps = {\n      ...resolvedConfig.unhandledProps,\n      ...accessibility.focusZone.props,\n    };\n    resolvedConfig.unhandledProps.as = originalElementType;\n    resolvedConfig.unhandledProps.isRtl = resolvedConfig.rtl;\n  }\n\n  const element = render(resolvedConfig);\n  setEnd();\n\n  return element;\n};\n\nexport default renderComponent;\n"]},"metadata":{},"sourceType":"module"}