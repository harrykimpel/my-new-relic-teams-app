{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { listBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useAutoControlled, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { ListContextProvider } from './listContext';\nimport ListItem from './ListItem';\nexport var listClassName = 'ui-list';\n\nvar List = function List(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(List.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      as = props.as,\n      children = props.children,\n      className = props.className,\n      debug = props.debug,\n      design = props.design,\n      horizontal = props.horizontal,\n      items = props.items,\n      navigable = props.navigable,\n      selectable = props.selectable,\n      styles = props.styles,\n      truncateContent = props.truncateContent,\n      truncateHeader = props.truncateHeader,\n      variables = props.variables,\n      wrap = props.wrap;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultSelectedIndex,\n    value: props.selectedIndex,\n    initialValue: -1\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      selectedIndex = _useAutoControlled2[0],\n      setSelectedIndex = _useAutoControlled2[1];\n\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: List.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        horizontal: horizontal,\n        navigable: navigable,\n        selectable: selectable\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(List.displayName, {\n    className: listClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        isListTag: as === 'ol' || as === 'ul',\n        debug: debug,\n        horizontal: horizontal\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var latestProps = React.useRef(props);\n  latestProps.current = props;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(List.handledProps, props);\n  var hasContent = childrenExist(children) || items && items.length > 0;\n  var onItemClick = React.useCallback(function (e, itemIndex) {\n    if (selectable) {\n      setSelectedIndex(itemIndex);\n\n      _invoke(latestProps.current, 'onSelectedIndexChange', e, Object.assign({}, latestProps.current, {\n        selectedIndex: itemIndex\n      }));\n    }\n  }, [latestProps, setSelectedIndex]);\n  var childProps = {\n    debug: debug,\n    navigable: navigable,\n    onItemClick: onItemClick,\n    selectable: selectable,\n    selectedIndex: selectedIndex,\n    truncateContent: truncateContent,\n    truncateHeader: truncateHeader,\n    variables: variables\n  };\n\n  var renderItems = function renderItems() {\n    return _map(items, function (item, index) {\n      return ListItem.create(item, {\n        defaultProps: function defaultProps() {\n          return {\n            index: index\n          };\n        }\n      });\n    });\n  };\n\n  var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), {}, unhandledProps)), React.createElement(ListContextProvider, {\n    value: childProps\n  }, hasContent && wrap(childrenExist(children) ? children : renderItems()))));\n  setEnd();\n  return element;\n};\n\nList.displayName = 'List';\nList.defaultProps = {\n  as: 'ul',\n  accessibility: listBehavior,\n  wrap: function wrap(children) {\n    return children;\n  }\n};\nList.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  debug: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),\n  navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),\n  truncateContent: PropTypes.bool,\n  truncateHeader: PropTypes.bool,\n  selectedIndex: PropTypes.number,\n  defaultSelectedIndex: PropTypes.number,\n  onSelectedIndexChange: PropTypes.func,\n  horizontal: PropTypes.bool,\n  wrap: PropTypes.func\n});\nList.handledProps = Object.keys(List.propTypes);\nList.Item = ListItem;\nList.create = createShorthandFactory({\n  Component: List,\n  mappedArrayProp: 'items'\n});\n/**\n * A List displays a group of related sequential items.\n *\n * @accessibility\n * List may follow one of the following accessibility semantics:\n * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.\n * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.\n */\n\nexport default withSafeTypeForAs(List);","map":{"version":3,"sources":["components/List/List.tsx"],"names":["listClassName","List","context","React","setStart","setEnd","useTelemetry","accessibility","as","children","className","debug","design","horizontal","items","navigable","selectable","styles","truncateContent","truncateHeader","variables","wrap","props","selectedIndex","setSelectedIndex","useAutoControlled","defaultValue","value","initialValue","getA11Props","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","isListTag","mapPropsToInlineStyles","latestProps","ElementType","getElementType","unhandledProps","useUnhandledProps","hasContent","childrenExist","onItemClick","itemIndex","childProps","renderItems","defaultProps","index","element","root","forElements","content","PropTypes","customPropTypes","defaultSelectedIndex","onSelectedIndexChange","func","Object","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, listBehavior, ListBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useAutoControlled,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ReactChildren,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { ListContextProvider, ListContextValue } from './listContext';\nimport ListItem, { ListItemProps } from './ListItem';\n\nexport interface ListProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ListBehaviorProps>;\n\n  /** Toggle debug mode */\n  debug?: boolean;\n\n  /** Shorthand array of props for ListItem. */\n  items?: ShorthandCollection<ListItemProps>;\n\n  /** A selectable list formats list items as possible choices. */\n  selectable?: boolean;\n\n  /** A navigable list allows user to navigate through items. */\n  navigable?: boolean;\n\n  /** Index of the currently selected item. */\n  selectedIndex?: number;\n\n  /** Initial selectedIndex value. */\n  defaultSelectedIndex?: number;\n\n  /**\n   * Event for request to change 'selectedIndex' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onSelectedIndexChange?: ComponentEventHandler<ListProps>;\n\n  /** Truncates content */\n  truncateContent?: boolean;\n\n  /** Truncates header */\n  truncateHeader?: boolean;\n\n  /** A horizontal list displays elements horizontally. */\n  horizontal?: boolean;\n\n  /** An optional wrapper function. */\n  wrap?: (children: ReactChildren) => React.ReactNode;\n}\n\nexport type ListStylesProps = Pick<ListProps, 'debug' | 'horizontal'> & { isListTag: boolean };\nexport const listClassName = 'ui-list';\n\nconst List: React.FC<WithAsProp<ListProps>> &\n  FluentComponentStaticProps<ListProps> & {\n    Item: typeof ListItem;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(List.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    as,\n    children,\n    className,\n    debug,\n    design,\n    horizontal,\n    items,\n    navigable,\n    selectable,\n    styles,\n    truncateContent,\n    truncateHeader,\n    variables,\n    wrap,\n  } = props;\n\n  const [selectedIndex, setSelectedIndex] = useAutoControlled({\n    defaultValue: props.defaultSelectedIndex,\n    value: props.selectedIndex,\n    initialValue: -1,\n  });\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: List.displayName,\n    mapPropsToBehavior: () => ({\n      horizontal,\n      navigable,\n      selectable,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ListStylesProps>(List.displayName, {\n    className: listClassName,\n    mapPropsToStyles: () => ({ isListTag: as === 'ol' || as === 'ul', debug, horizontal }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const latestProps = React.useRef<ListProps>(props);\n  latestProps.current = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(List.handledProps, props);\n\n  const hasContent = childrenExist(children) || (items && items.length > 0);\n  const onItemClick = React.useCallback(\n    (e, itemIndex) => {\n      if (selectable) {\n        setSelectedIndex(itemIndex);\n        _.invoke(latestProps.current, 'onSelectedIndexChange', e, {\n          ...latestProps.current,\n          selectedIndex: itemIndex,\n        });\n      }\n    },\n    [latestProps, setSelectedIndex],\n  );\n\n  const childProps: ListContextValue = {\n    debug,\n    navigable,\n    onItemClick,\n    selectable,\n    selectedIndex,\n    truncateContent,\n    truncateHeader,\n    variables,\n  };\n  const renderItems = () => _.map(items, (item, index) => ListItem.create(item, { defaultProps: () => ({ index }) }));\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      <ListContextProvider value={childProps}>\n        {hasContent && wrap(childrenExist(children) ? children : renderItems())}\n      </ListContextProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nList.displayName = 'List';\n\nList.defaultProps = {\n  as: 'ul',\n  accessibility: listBehavior,\n  wrap: children => children,\n};\nList.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  debug: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),\n  navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),\n  truncateContent: PropTypes.bool,\n  truncateHeader: PropTypes.bool,\n  selectedIndex: PropTypes.number,\n  defaultSelectedIndex: PropTypes.number,\n  onSelectedIndexChange: PropTypes.func,\n  horizontal: PropTypes.bool,\n  wrap: PropTypes.func,\n};\n\nList.handledProps = Object.keys(List.propTypes) as any;\nList.Item = ListItem;\n\nList.create = createShorthandFactory({ Component: List, mappedArrayProp: 'items' });\n\n/**\n * A List displays a group of related sequential items.\n *\n * @accessibility\n * List may follow one of the following accessibility semantics:\n * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.\n * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof List, ListProps, 'ul'>(List);\n"]},"metadata":{},"sourceType":"module"}