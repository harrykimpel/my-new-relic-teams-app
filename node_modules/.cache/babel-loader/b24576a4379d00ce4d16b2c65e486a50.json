{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { createShorthandFactory, childrenExist, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\nexport var toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\nvar ToolbarCustomItem = function ToolbarCustomItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarCustomItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      fitted = props.fitted,\n      focusable = props.focusable,\n      styles = props.styles,\n      variables = props.variables;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarCustomItem.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarCustomItem.displayName, {\n    className: toolbarCustomItemClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        fitted: fitted\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergeComponentVariables(parentVariables, variables)\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarCustomItem.handledProps, props);\n\n  var handleBlur = function handleBlur(e) {\n    if (focusable) {\n      _invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (focusable) {\n      _invoke(props, 'onFocus', e, props);\n    }\n  };\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign(_defineProperty({}, IS_FOCUSABLE_ATTRIBUTE, focusable), unhandledProps, {\n    className: classes.root,\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  })), childrenExist(children) ? children : content);\n  setEnd();\n  return element;\n};\n\nToolbarCustomItem.displayName = 'ToolbarCustomItem';\nToolbarCustomItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  fitted: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n});\nToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes);\nToolbarCustomItem.create = createShorthandFactory({\n  Component: ToolbarCustomItem,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\n\nexport default withSafeTypeForAs(ToolbarCustomItem);","map":{"version":3,"sources":["components/Toolbar/ToolbarCustomItem.tsx"],"names":["toolbarCustomItemClassName","ToolbarCustomItem","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","fitted","focusable","styles","variables","props","parentVariables","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","mergeComponentVariables","ElementType","getElementType","unhandledProps","useUnhandledProps","handleBlur","handleFocus","element","onBlur","onFocus","childrenExist","commonPropTypes","PropTypes","func","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A custom item can remove element padding, vertically or horizontally. */\n  fitted?: boolean | 'horizontally' | 'vertically';\n\n  /** A custom item can be focused. */\n  focusable?: boolean;\n\n  /** A custom item can't be actionable. */\n  onClick?: never;\n\n  /**\n   * Called after user's focus. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;\n\n  /**\n   * Called after item blur. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;\n}\n\nexport type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;\nexport const toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\nconst ToolbarCustomItem: React.FC<WithAsProp<ToolbarCustomItemProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarCustomItem.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, content, design, fitted, focusable, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarCustomItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarCustomItemStylesProps>(ToolbarCustomItem.displayName, {\n    className: toolbarCustomItemClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarCustomItem.handledProps, props);\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    if (focusable) {\n      _.invoke(props, 'onFocus', e, props);\n    }\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        [IS_FOCUSABLE_ATTRIBUTE]: focusable,\n        ...unhandledProps,\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarCustomItem.displayName = 'ToolbarCustomItem';\n\nToolbarCustomItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'horizontally' | 'vertically'>(['horizontally', 'vertically']),\n  ]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n};\nToolbarCustomItem.handledProps = Object.keys(ToolbarCustomItem.propTypes) as any;\n\nToolbarCustomItem.create = createShorthandFactory({\n  Component: ToolbarCustomItem,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\nexport default withSafeTypeForAs<typeof ToolbarCustomItem, ToolbarCustomItemProps>(ToolbarCustomItem);\n"]},"metadata":{},"sourceType":"module"}