{"ast":null,"code":"// @ts-ignore\nimport * as keyboardKey from 'keyboard-key';\n\nvar isKeyModifiersMatch = function isKeyModifiersMatch(modifierValue, combinationValue) {\n  if (combinationValue === undefined) {\n    return true;\n  }\n\n  return modifierValue === combinationValue;\n};\n\nvar shouldHandleOnKeys = function shouldHandleOnKeys(event, keysCombinations) {\n  return keysCombinations.some(function (keysCombination) {\n    return keysCombination.keyCode === keyboardKey.getCode(event) && isKeyModifiersMatch(event.altKey, keysCombination.altKey) && isKeyModifiersMatch(event.shiftKey, keysCombination.shiftKey) && isKeyModifiersMatch(event.metaKey, keysCombination.metaKey) && isKeyModifiersMatch(event.ctrlKey, keysCombination.ctrlKey);\n  });\n};\n\nexport default shouldHandleOnKeys;","map":{"version":3,"sources":["accessibility/shouldHandleOnKeys.ts"],"names":["isKeyModifiersMatch","combinationValue","modifierValue","shouldHandleOnKeys","keysCombination","keyboardKey","event"],"mappings":"AACA;AACA,OAAO,KAAP,WAAA,MAAA,cAAA;;AAGA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,aAAA,EAAA,gBAAA,EAAwD;AAClF,MAAIC,gBAAgB,KAApB,SAAA,EAAoC;AAClC,WAAA,IAAA;AACD;;AAED,SAAOC,aAAa,KAApB,gBAAA;AALF,CAAA;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAA,gBAAA,EAAA;AAAA,SACzB,gBAAgB,CAAhB,IAAA,CACE,UAAA,eAAA,EAAe;AAAA,WACbC,eAAe,CAAfA,OAAAA,KAA4BC,WAAW,CAAXA,OAAAA,CAA5BD,KAA4BC,CAA5BD,IACAJ,mBAAmB,CAACM,KAAK,CAAN,MAAA,EAAeF,eAAe,CADjDA,MACmB,CADnBA,IAEAJ,mBAAmB,CAACM,KAAK,CAAN,QAAA,EAAiBF,eAAe,CAFnDA,QAEmB,CAFnBA,IAGAJ,mBAAmB,CAACM,KAAK,CAAN,OAAA,EAAgBF,eAAe,CAHlDA,OAGmB,CAHnBA,IAIAJ,mBAAmB,CAACM,KAAK,CAAN,OAAA,EAAgBF,eAAe,CALrC,OAKM,CALN;AAFQ,GACzB,CADyB;AAA3B,CAAA;;AAUA,eAAA,kBAAA","sourcesContent":["import { KeyCombinations } from '@fluentui/accessibility';\n// @ts-ignore\nimport * as keyboardKey from 'keyboard-key';\nimport * as React from 'react';\n\nconst isKeyModifiersMatch = (modifierValue: boolean, combinationValue?: boolean) => {\n  if (combinationValue === undefined) {\n    return true;\n  }\n\n  return modifierValue === combinationValue;\n};\n\nconst shouldHandleOnKeys = (event: React.KeyboardEvent, keysCombinations: KeyCombinations[]): boolean =>\n  keysCombinations.some(\n    keysCombination =>\n      keysCombination.keyCode === keyboardKey.getCode(event) &&\n      isKeyModifiersMatch(event.altKey, keysCombination.altKey) &&\n      isKeyModifiersMatch(event.shiftKey, keysCombination.shiftKey) &&\n      isKeyModifiersMatch(event.metaKey, keysCombination.metaKey) &&\n      isKeyModifiersMatch(event.ctrlKey, keysCombination.ctrlKey),\n  );\n\nexport default shouldHandleOnKeys;\n"]},"metadata":{},"sourceType":"module"}