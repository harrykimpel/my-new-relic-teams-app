{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as keyboardKey from 'keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @specification\n *  Adds role='radio'. This allows screen readers to handle the component as a radio button.\n *  Adds attribute 'aria-checked=true' based on the property 'checked'.\n *  Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n *  Adds attribute 'data-is-focusable=true' based on the property 'checked'.\n *  Triggers 'performClick' action with 'Spacebar' on 'root'.\n *  Implements roving tabIndex.\n */\n\nvar radioGroupItemBehavior = function radioGroupItemBehavior(props) {\n  return {\n    attributes: {\n      root: Object.assign({\n        role: 'radio',\n        tabIndex: props.checked ? 0 : -1\n      }, props.checked && _defineProperty({}, IS_FOCUSABLE_ATTRIBUTE, true), {\n        'aria-checked': props.checked,\n        'aria-disabled': props.disabled\n      })\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Spacebar\n          }]\n        }\n      }\n    }\n  };\n};\n\nexport default radioGroupItemBehavior;","map":{"version":3,"sources":["behaviors/Radio/radioGroupItemBehavior.ts"],"names":["radioGroupItemBehavior","attributes","root","role","tabIndex","props","disabled","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Spacebar"],"mappings":";AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AACA,SAAA,sBAAA,QAAA,kBAAA;AAEA;;;;;;;;;;AASA,IAAMA,sBAAkE,GAAG,SAArEA,sBAAqE,CAAA,KAAA,EAAK;AAAA,SAAK;AACnFC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACFC,QAAAA,IAAI,EADF,OAAA;AAEFC,QAAAA,QAAQ,EAAEC,KAAK,CAALA,OAAAA,GAAAA,CAAAA,GAAoB,CAAC;AAF7B,OAAA,EAGEA,KAAK,CAALA,OAAAA,IAAAA,eAAAA,CAAAA,EAAAA,EAAAA,sBAAAA,EAHF,IAGEA,CAHF,EAAA;AAIF,wBAAgBA,KAAK,CAJnB,OAAA;AAKF,yBAAiBA,KAAK,CAACC;AALrB,OAAA;AADM,KADuE;AAWnFC,IAAAA,UAAU,EAAE;AACVL,MAAAA,IAAI,EAAE;AACJM,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADL;AADV;AADI;AAXuE,GAAL;AAAhF,CAAA;;AAoBA,eAAA,sBAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport * as keyboardKey from 'keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n\n/**\n * @specification\n *  Adds role='radio'. This allows screen readers to handle the component as a radio button.\n *  Adds attribute 'aria-checked=true' based on the property 'checked'.\n *  Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n *  Adds attribute 'data-is-focusable=true' based on the property 'checked'.\n *  Triggers 'performClick' action with 'Spacebar' on 'root'.\n *  Implements roving tabIndex.\n */\nconst radioGroupItemBehavior: Accessibility<RadioGroupItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'radio',\n      tabIndex: props.checked ? 0 : -1,\n      ...(props.checked && { [IS_FOCUSABLE_ATTRIBUTE]: true }),\n      'aria-checked': props.checked,\n      'aria-disabled': props.disabled,\n    },\n  },\n\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Spacebar }],\n      },\n    },\n  },\n});\n\nexport default radioGroupItemBehavior;\n\ntype RadioGroupItemBehaviorProps = {\n  /** Indicates if radio item is selected. */\n  checked?: boolean;\n  /** Indicates if radio item is disabled. */\n  disabled?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}