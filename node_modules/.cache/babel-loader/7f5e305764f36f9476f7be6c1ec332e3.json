{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior } from '@fluentui/accessibility';\nimport { commonPropTypes, childrenExist, createShorthandFactory } from '../../utils'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { withSafeTypeForAs } from '../../types';\nimport { useAccessibility, useTelemetry, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var carouselItemClassName = 'ui-carousel__item';\nexport var carouselItemSlotClassNames = {\n  itemPositionText: \"\".concat(carouselItemClassName, \"__itemPositionText\")\n};\nexport var CarouselItem = function CarouselItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CarouselItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  var accessibility = props.accessibility,\n      navigation = props.navigation,\n      active = props.active,\n      children = props.children,\n      itemPositionText = props.itemPositionText,\n      content = props.content,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var ElementType = getElementType(props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: function arrowKeysNavigationStopPropagation(e) {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        navigation: navigation,\n        active: active\n      };\n    }\n  });\n\n  var _useStyles = useStyles(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), childrenExist(children) ? children : content, React.createElement(\"div\", {\n    className: carouselItemSlotClassNames.itemPositionText,\n    style: screenReaderContainerStyles\n  }, itemPositionText));\n  setEnd();\n  return element;\n};\nCarouselItem.displayName = 'CarouselItem';\nCarouselItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string\n});\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior\n};\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes);\nCarouselItem.create = createShorthandFactory({\n  Component: CarouselItem,\n  mappedProp: 'content'\n});\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\n\nexport default withSafeTypeForAs(CarouselItem);","map":{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["carouselItemClassName","carouselItemSlotClassNames","itemPositionText","CarouselItem","context","React","setStart","setEnd","useTelemetry","unhandledProps","useUnhandledProps","accessibility","navigation","active","children","content","className","design","styles","variables","props","ElementType","getElementType","getA11yProps","useAccessibility","debugName","actionHandlers","arrowKeysNavigationStopPropagation","e","mapPropsToBehavior","classes","useStyles","mapPropsToInlineStyles","rtl","element","root","childrenExist","screenReaderContainerStyles","commonPropTypes","PropTypes","string","carouselItemBehavior","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior, CarouselItemBehaviorProps, Accessibility } from '@fluentui/accessibility';\n\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { useAccessibility, useTelemetry, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CarouselItemBehaviorProps>;\n\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nexport type CarouselItemStylesProps = never;\n\nexport const carouselItemClassName = 'ui-carousel__item';\nexport const carouselItemSlotClassNames: CarouselItemSlotClassNames = {\n  itemPositionText: `${carouselItemClassName}__itemPositionText`,\n};\n\nexport const CarouselItem: React.FC<WithAsProp<CarouselItemProps>> &\n  FluentComponentStaticProps<CarouselItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CarouselItem.displayName, context.telemetry);\n  setStart();\n  const unhandledProps = useUnhandledProps(CarouselItem.handledProps, props);\n  const {\n    accessibility,\n    navigation,\n    active,\n    children,\n    itemPositionText,\n    content,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const getA11yProps = useAccessibility<CarouselItemBehaviorProps>(accessibility, {\n    debugName: CarouselItem.displayName,\n    actionHandlers: {\n      arrowKeysNavigationStopPropagation: e => {\n        // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n        if (e.currentTarget !== e.target) {\n          e.stopPropagation();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      navigation,\n      active,\n    }),\n  });\n\n  const { classes } = useStyles<CarouselItemStylesProps>(CarouselItem.displayName, {\n    className: carouselItemClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n      <div className={carouselItemSlotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n        {itemPositionText}\n      </div>\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselItem.displayName = 'CarouselItem';\n\nCarouselItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  navigation: PropTypes.bool,\n  itemPositionText: PropTypes.string,\n};\n\nCarouselItem.defaultProps = {\n  accessibility: carouselItemBehavior,\n};\n\nCarouselItem.handledProps = Object.keys(CarouselItem.propTypes) as any;\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport default withSafeTypeForAs<typeof CarouselItem, CarouselItemProps, 'div'>(CarouselItem);\n"]},"metadata":{},"sourceType":"module"}