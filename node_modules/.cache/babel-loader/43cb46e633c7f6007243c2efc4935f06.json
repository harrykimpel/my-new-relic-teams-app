{"ast":null,"code":"import * as React from 'react';\nimport { mergeComposeOptions, wasComposedPreviously } from './utils';\n\nfunction compose(input, inputOptions) {\n  if (inputOptions === void 0) {\n    inputOptions = {};\n  }\n\n  var composeOptions = mergeComposeOptions(input, inputOptions, wasComposedPreviously(input) ? input.fluentComposeConfig : undefined);\n  var Component = React.forwardRef(function (props, ref) {\n    return composeOptions.render(props, ref, composeOptions);\n  });\n  Component.displayName = composeOptions.displayName;\n\n  if (input.defaultProps) {\n    Component.defaultProps = input.defaultProps;\n  }\n\n  Component.fluentComposeConfig = composeOptions;\n  return Component;\n}\n\nexport default compose;","map":{"version":3,"sources":["compose.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAS,mBAAT,EAA8B,qBAA9B,QAA2D,SAA3D;;AAEA,SAAS,OAAT,CACE,KADF,EAEE,YAFF,EAEoF;AAAlF,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,EAAA;AAAkF;;AAElF,MAAM,cAAc,GAAG,mBAAmB,CACxC,KADwC,EAEvC,YAFuC,EAGxC,qBAAqB,CAAC,KAAD,CAArB,GAA+B,KAAK,CAAC,mBAArC,GAA2D,SAHnB,CAA1C;AAMA,MAAM,SAAS,GAAI,KAAK,CAAC,UAAN,CAA2E,UAAC,KAAD,EAAQ,GAAR,EAAW;AACvG,WAAO,cAAc,CAAC,MAAf,CAAsB,KAAtB,EAA6B,GAA7B,EAAsD,cAAtD,CAAP;AACD,GAFkB,CAAnB;AAIA,EAAA,SAAS,CAAC,WAAV,GAAwB,cAAc,CAAC,WAAvC;;AAEA,MAAK,KAA+B,CAAC,YAArC,EAAmD;AACjD,IAAA,SAAS,CAAC,YAAV,GAA0B,KAA+B,CAAC,YAA1D;AACD;;AAEC,EAAA,SAA2C,CAAC,mBAA5C,GAAkE,cAAlE;AAEF,SAAO,SAAP;AACD;;AAED,eAAe,OAAf","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './types';\nimport { mergeComposeOptions, wasComposedPreviously } from './utils';\n\nfunction compose<T extends React.ElementType, InputProps, InputStylesProps, ParentProps, ParentStylesProps>(\n  input: Input<T, InputProps>,\n  inputOptions: ComposeOptions<InputProps, InputStylesProps, ParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<T, InputProps & ParentProps & { as?: React.ElementType }>((props, ref) => {\n    return composeOptions.render(props, ref as React.Ref<'div'>, composeOptions);\n  }) as unknown) as ComponentWithAs<T, InputProps & ParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\nexport default compose;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}