{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { alertBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { commonPropTypes, childrenExist, createShorthandFactory } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport Text from '../Text/Text';\nimport ButtonGroup from '../Button/ButtonGroup';\nimport AlertDismissAction from './AlertDismissAction';\nimport { useAccessibility, getElementType, useStyles, useTelemetry, useUnhandledProps, useAutoControlled } from '@fluentui/react-bindings';\nexport var alertClassName = 'ui-alert';\nexport var alertSlotClassNames = {\n  content: \"\".concat(alertClassName, \"__content\"),\n  actions: \"\".concat(alertClassName, \"__actions\"),\n  icon: \"\".concat(alertClassName, \"__icon\"),\n  header: \"\".concat(alertClassName, \"__header\"),\n  body: \"\".concat(alertClassName, \"__body\")\n};\nexport var Alert = function Alert(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Alert.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var warning = props.warning,\n      danger = props.danger,\n      info = props.info,\n      success = props.success,\n      attached = props.attached,\n      fitted = props.fitted,\n      dismissible = props.dismissible,\n      variables = props.variables,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      children = props.children,\n      actions = props.actions,\n      dismissAction = props.dismissAction,\n      content = props.content,\n      icon = props.icon,\n      header = props.header,\n      body = props.body;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultVisible,\n    value: props.visible,\n    initialValue: true\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      visible = _useAutoControlled2[0],\n      setVisible = _useAutoControlled2[1];\n\n  var _React$useState = React.useState(_uniqueId('alert-body-')),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      bodyId = _React$useState2[0];\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Alert.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Alert.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        warning: warning,\n        danger: danger,\n        bodyId: bodyId,\n        visible: visible\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Alert.displayName, {\n    className: alertClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        warning: warning,\n        danger: danger,\n        info: info,\n        success: success,\n        attached: attached,\n        fitted: fitted,\n        dismissible: dismissible,\n        visible: visible\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleDismissOverrides = function handleDismissOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, buttonProps) {\n        _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n        _invoke(props, 'onVisibleChange', e, Object.assign({}, props, {\n          visible: false\n        }));\n\n        setVisible(false);\n      }\n    };\n  };\n\n  var handleFocus = function handleFocus(e) {\n    _invoke(props, 'onFocus', e, props);\n  };\n\n  var renderContent = function renderContent() {\n    var bodyContent = React.createElement(React.Fragment, null, Text.create(header, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('header', {\n          className: alertSlotClassNames.header,\n          styles: resolvedStyles.header\n        });\n      }\n    }), Box.create(content, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('content', {\n          className: alertSlotClassNames.content,\n          styles: resolvedStyles.content\n        });\n      }\n    }));\n    return React.createElement(React.Fragment, null, Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('icon', {\n          className: alertSlotClassNames.icon,\n          styles: resolvedStyles.icon\n        });\n      }\n    }), Box.create(body, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('body', {\n          className: alertSlotClassNames.body,\n          styles: resolvedStyles.body,\n          id: bodyId\n        });\n      },\n      overrideProps: {\n        children: bodyContent\n      }\n    }), ButtonGroup.create(actions, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('actions', {\n          className: alertSlotClassNames.actions,\n          styles: resolvedStyles.actions\n        });\n      }\n    }), dismissible && AlertDismissAction.create(dismissAction, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('dismissAction', {\n          danger: danger,\n          warning: warning,\n          info: info,\n          success: success,\n          variables: variables\n        });\n      },\n      overrideProps: handleDismissOverrides\n    }));\n  };\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onFocus: handleFocus\n  }, unhandledProps)), childrenExist(children) ? children : renderContent());\n  setEnd();\n  return element;\n};\nAlert.defaultProps = {\n  accessibility: alertBehavior,\n  dismissAction: {},\n  body: {}\n};\nAlert.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  icon: customPropTypes.shorthandAllowingChildren,\n  header: customPropTypes.itemShorthand,\n  attached: PropTypes.oneOf([true, false, 'top', 'bottom']),\n  fitted: PropTypes.bool,\n  danger: PropTypes.bool,\n  defaultVisible: PropTypes.bool,\n  dismissible: PropTypes.bool,\n  dismissAction: customPropTypes.shorthandAllowingChildren,\n  info: PropTypes.bool,\n  onVisibleChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  success: PropTypes.bool,\n  visible: PropTypes.bool,\n  warning: PropTypes.bool,\n  body: customPropTypes.shorthandAllowingChildren\n});\nAlert.displayName = 'Alert';\nAlert.handledProps = Object.keys(Alert.propTypes);\nAlert.create = createShorthandFactory({\n  Component: Alert\n});\nAlert.DismissAction = AlertDismissAction;\n/**\n * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.\n *\n * @accessibility\n * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.\n */\n\nexport default withSafeTypeForAs(Alert);","map":{"version":3,"sources":["components/Alert/Alert.tsx"],"names":["alertClassName","alertSlotClassNames","content","actions","icon","header","body","Alert","context","React","setStart","setEnd","useTelemetry","warning","danger","info","success","attached","fitted","dismissible","variables","className","design","styles","children","dismissAction","props","visible","setVisible","useAutoControlled","defaultValue","value","initialValue","bodyId","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleDismissOverrides","onClick","handleFocus","renderContent","bodyContent","defaultProps","id","overrideProps","element","onFocus","childrenExist","accessibility","PropTypes","customPropTypes","defaultVisible","onVisibleChange","shorthandAllowingChildren","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, alertBehavior, AlertBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  UIComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  childrenExist,\n  createShorthandFactory,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ButtonProps } from '../Button/Button';\nimport Text, { TextProps } from '../Text/Text';\n\nimport ButtonGroup, { ButtonGroupProps } from '../Button/ButtonGroup';\nimport AlertDismissAction, { AlertDismissActionProps } from './AlertDismissAction';\nimport {\n  useAccessibility,\n  getElementType,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  useAutoControlled,\n} from '@fluentui/react-bindings';\n\nexport interface AlertSlotClassNames {\n  content: string;\n  actions: string;\n  icon: string;\n  header: string;\n  body: string;\n}\n\nexport interface AlertProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available alertWarningBehavior\n   */\n  accessibility?: Accessibility<AlertBehaviorProps>;\n\n  /** An alert can contain action buttons. */\n  actions?: ShorthandValue<ButtonGroupProps> | ShorthandCollection<ButtonProps>;\n\n  /** An alert may contain an icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An alert may contain a header. */\n  header?: ShorthandValue<TextProps>;\n\n  /** An alert's position relative to neighboring items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** An alert can only take up the width of its content. */\n  fitted?: boolean;\n\n  /** An alert may be formatted to display a danger message. */\n  danger?: boolean;\n\n  /** A default value for the `visible` prop. */\n  defaultVisible?: boolean;\n\n  /** An alert can be dismissible. */\n  dismissible?: boolean;\n\n  /**\n   * A button shorthand for the dismiss action slot. To use this slot the alert should be\n   * dismissible.\n   */\n  dismissAction?: ShorthandValue<AlertDismissActionProps>;\n\n  /** An alert may be formatted to display information. */\n  info?: boolean;\n\n  /**\n   * Called after user will dismiss the alert.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onVisibleChange?: ComponentEventHandler<AlertProps>;\n\n  /**\n   * Called after the alert is focused.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AlertProps>;\n\n  /** An alert can be formatted to display a successful message. */\n  success?: boolean;\n\n  /** An alert can be set to visible to force itself to be shown. */\n  visible?: boolean;\n\n  /** An alert can be formatted to display a warning message. */\n  warning?: boolean;\n\n  /** An alert can have a body that contains header and content elements. */\n  body?: ShorthandValue<BoxProps>;\n}\n\nexport type AlertStylesProps = Required<\n  Pick<AlertProps, 'danger' | 'warning' | 'info' | 'success' | 'attached' | 'fitted' | 'dismissible' | 'visible'>\n>;\n\nexport const alertClassName = 'ui-alert';\nexport const alertSlotClassNames: AlertSlotClassNames = {\n  content: `${alertClassName}__content`,\n  actions: `${alertClassName}__actions`,\n  icon: `${alertClassName}__icon`,\n  header: `${alertClassName}__header`,\n  body: `${alertClassName}__body`,\n};\n\nexport const Alert: React.FC<WithAsProp<AlertProps>> &\n  FluentComponentStaticProps<AlertProps> & {\n    DismissAction: typeof AlertDismissAction;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Alert.displayName, context.telemetry);\n  setStart();\n  const {\n    warning,\n    danger,\n    info,\n    success,\n    attached,\n    fitted,\n    dismissible,\n    variables,\n    className,\n    design,\n    styles,\n    children,\n    actions,\n    dismissAction,\n    content,\n    icon,\n    header,\n    body,\n  } = props;\n\n  const [visible, setVisible] = useAutoControlled({\n    defaultValue: props.defaultVisible,\n    value: props.visible,\n    initialValue: true,\n  });\n\n  const [bodyId] = React.useState(_.uniqueId('alert-body-'));\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Alert.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Alert.displayName,\n    mapPropsToBehavior: () => ({\n      warning,\n      danger,\n      bodyId,\n      visible,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AlertStylesProps>(Alert.displayName, {\n    className: alertClassName,\n    mapPropsToStyles: () => ({\n      warning,\n      danger,\n      info,\n      success,\n      attached,\n      fitted,\n      dismissible,\n      visible,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleDismissOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(props, 'onVisibleChange', e, { ...props, visible: false });\n      setVisible(false);\n    },\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const renderContent = () => {\n    const bodyContent = (\n      <>\n        {Text.create(header, {\n          defaultProps: () =>\n            getA11yProps('header', {\n              className: alertSlotClassNames.header,\n              styles: resolvedStyles.header,\n            }),\n        })}\n        {Box.create(content, {\n          defaultProps: () =>\n            getA11yProps('content', {\n              className: alertSlotClassNames.content,\n              styles: resolvedStyles.content,\n            }),\n        })}\n      </>\n    );\n\n    return (\n      <>\n        {Box.create(icon, {\n          defaultProps: () =>\n            getA11yProps('icon', {\n              className: alertSlotClassNames.icon,\n              styles: resolvedStyles.icon,\n            }),\n        })}\n        {Box.create(body, {\n          defaultProps: () =>\n            getA11yProps('body', {\n              className: alertSlotClassNames.body,\n              styles: resolvedStyles.body,\n              id: bodyId,\n            }),\n          overrideProps: {\n            children: bodyContent,\n          },\n        })}\n\n        {ButtonGroup.create(actions, {\n          defaultProps: () =>\n            getA11yProps('actions', {\n              className: alertSlotClassNames.actions,\n              styles: resolvedStyles.actions,\n            }),\n        })}\n        {dismissible &&\n          AlertDismissAction.create(dismissAction, {\n            defaultProps: () =>\n              getA11yProps('dismissAction', {\n                danger,\n                warning,\n                info,\n                success,\n                variables,\n              }),\n            overrideProps: handleDismissOverrides,\n          })}\n      </>\n    );\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onFocus: handleFocus,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAlert.defaultProps = {\n  accessibility: alertBehavior,\n  dismissAction: {},\n  body: {},\n};\n\nAlert.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  icon: customPropTypes.shorthandAllowingChildren,\n  header: customPropTypes.itemShorthand,\n  attached: PropTypes.oneOf([true, false, 'top', 'bottom']),\n  fitted: PropTypes.bool,\n  danger: PropTypes.bool,\n  defaultVisible: PropTypes.bool,\n  dismissible: PropTypes.bool,\n  dismissAction: customPropTypes.shorthandAllowingChildren,\n  info: PropTypes.bool,\n  onVisibleChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  success: PropTypes.bool,\n  visible: PropTypes.bool,\n  warning: PropTypes.bool,\n  body: customPropTypes.shorthandAllowingChildren,\n};\n\nAlert.displayName = 'Alert';\n\nAlert.handledProps = Object.keys(Alert.propTypes) as any;\n\nAlert.create = createShorthandFactory({\n  Component: Alert,\n});\n\nAlert.DismissAction = AlertDismissAction;\n/**\n * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.\n *\n * @accessibility\n * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.\n */\nexport default withSafeTypeForAs<typeof Alert, AlertProps>(Alert);\n"]},"metadata":{},"sourceType":"module"}