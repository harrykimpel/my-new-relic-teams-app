{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _invoke from \"lodash/invoke\";\nimport { attachmentBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes, createShorthand } from '../../utils';\nimport AttachmentAction from './AttachmentAction';\nimport AttachmentBody from './AttachmentBody';\nimport AttachmentDescription from './AttachmentDescription';\nimport AttachmentHeader from './AttachmentHeader';\nimport AttachmentIcon from './AttachmentIcon';\nexport var attachmentClassName = 'ui-attachment'; // mergeComponentVariables is always creating a function even if the arguments are undefined\n// we have this temporary fix in place to avoid creating empty function because it is breaking caching\n// we should either fix mergeComponentVariables, or handle this in a more generic way\n\nvar mergeShorthandVariables = function mergeShorthandVariables(variables, shorthandVariables) {\n  return (variables || shorthandVariables) && mergeComponentVariables(variables, shorthandVariables);\n};\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\n\n\nvar Attachment = compose(function (props, ref, composeOptions) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      action = props.action,\n      actionable = props.actionable,\n      body = props.body,\n      className = props.className,\n      description = props.description,\n      design = props.design,\n      disabled = props.disabled,\n      header = props.header,\n      icon = props.icon,\n      onClick = props.onClick,\n      progress = props.progress,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: composeOptions.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        if (e.currentTarget === e.target) {\n          e.stopPropagation();\n          handleClick(e);\n        }\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(composeOptions.displayName, {\n    className: attachmentClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        actionable: actionable || !!onClick,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl,\n    composeOptions: composeOptions,\n    unstable_props: props\n  }),\n      classes = _useStyles.classes;\n\n  var slotProps = composeOptions.resolveSlotProps(props);\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick,\n    ref: ref\n  }, unhandledProps)), createShorthand(composeOptions.slots.icon, icon, {\n    defaultProps: function defaultProps() {\n      return slotProps.icon;\n    },\n    overrideProps: function overrideProps(predefinedProps) {\n      return {\n        variables: mergeShorthandVariables(variables, predefinedProps.variables)\n      };\n    }\n  }), (header || description) && createShorthand(composeOptions.slots.body, body, {\n    defaultProps: function defaultProps() {\n      return slotProps.body;\n    },\n    overrideProps: function overrideProps(predefinedProps) {\n      return {\n        content: React.createElement(React.Fragment, null, createShorthand(composeOptions.slots.header, header, {\n          defaultProps: function defaultProps() {\n            return slotProps.header;\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              variables: mergeShorthandVariables(variables, predefinedProps.variables)\n            };\n          }\n        }), createShorthand(composeOptions.slots.description, description, {\n          defaultProps: function defaultProps() {\n            return slotProps.description;\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              variables: mergeShorthandVariables(variables, predefinedProps.variables)\n            };\n          }\n        })),\n        variables: mergeShorthandVariables(variables, predefinedProps.variables)\n      };\n    }\n  }), createShorthand(composeOptions.slots.action, action, {\n    defaultProps: function defaultProps() {\n      return slotProps.action;\n    },\n    overrideProps: function overrideProps(predefinedProps) {\n      return {\n        variables: mergeShorthandVariables(variables, predefinedProps.variables)\n      };\n    }\n  }), !_isNil(progress) && React.createElement(\"div\", {\n    className: \"ui-attachment__progress\",\n    style: {\n      width: \"\".concat(progress, \"%\")\n    }\n  }));\n  setEnd();\n  return element;\n}, {\n  className: attachmentClassName,\n  displayName: 'Attachment',\n  slots: {\n    action: AttachmentAction,\n    body: AttachmentBody,\n    description: AttachmentDescription,\n    header: AttachmentHeader,\n    icon: AttachmentIcon\n  },\n  handledProps: ['accessibility', 'action', 'actionable', 'as', 'body', 'children', 'className', 'description', 'design', 'header', 'icon', 'onClick', 'progress', 'styles', 'variables']\n});\nAttachment.create = createShorthandFactory({\n  Component: Attachment,\n  mappedProp: 'header'\n});\nAttachment.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  body: customPropTypes.itemShorthand,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  onClick: PropTypes.func,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n});\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior,\n  body: {}\n};\nAttachment.Action = AttachmentAction;\nAttachment.Body = AttachmentBody;\nAttachment.Description = AttachmentDescription;\nAttachment.Header = AttachmentHeader;\nAttachment.Icon = AttachmentIcon;\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\n\nexport default Attachment;","map":{"version":3,"sources":["components/Attachment/Attachment.tsx"],"names":["attachmentClassName","mergeShorthandVariables","variables","mergeComponentVariables","Attachment","compose","context","React","setStart","setEnd","useTelemetry","composeOptions","accessibility","action","actionable","body","className","description","design","disabled","header","icon","onClick","progress","styles","props","getA11Props","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","slotProps","ElementType","getElementType","unhandledProps","useUnhandledProps","element","ref","createShorthand","defaultProps","overrideProps","predefinedProps","content","width","displayName","slots","AttachmentIcon","handledProps","createShorthandFactory","Component","mappedProp","customPropTypes","PropTypes"],"mappings":";;AAAA,SAAA,kBAAA,QAAA,yBAAA;AACA,SAAA,OAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,EAAA,iBAAA,QAAA,0BAAA;AASA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,SAAA,uBAAA,QAAA,kBAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAGA,SAAA,sBAAA,EAAA,eAAA,EAAA,eAAA,QAAA,aAAA;AAQA,OAAA,gBAAA,MAAA,oBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,qBAAA,MAAA,yBAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AAuCA,OAAO,IAAMA,mBAAmB,GAAzB,eAAA,C,CAEP;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,SAAA,EAAA,kBAAA,EAAmC;AACjE,SAAO,CAACC,SAAS,IAAV,kBAAA,KAAqCC,uBAAuB,CAAA,SAAA,EAAnE,kBAAmE,CAAnE;AADF,CAAA;AAIA;;;;;AAGA,IAAMC,UAAU,GAAGC,OAAO,CACxB,UAAA,KAAA,EAAA,GAAA,EAAA,cAAA,EAAgC;AAC9B,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD8B,MAAA,aAAA,GAEDG,YAAY,CAACC,cAAc,CAAf,WAAA,EAA6BL,OAAO,CAF/C,SAEW,CAFX;AAAA,MAEtBE,QAFsB,GAAA,aAAA,CAAA,QAAA;AAAA,MAEZC,MAFY,GAAA,aAAA,CAAA,MAAA;;AAG9BD,EAAAA,QAAQ;AAHsB,MAM5BI,aAN4B,GAoB1Ba,KApB0B,CAAA,aAAA;AAAA,MAO5BZ,MAP4B,GAoB1BY,KApB0B,CAAA,MAAA;AAAA,MAQ5BX,UAR4B,GAoB1BW,KApB0B,CAAA,UAAA;AAAA,MAS5BV,IAT4B,GAoB1BU,KApB0B,CAAA,IAAA;AAAA,MAU5BT,SAV4B,GAoB1BS,KApB0B,CAAA,SAAA;AAAA,MAW5BR,WAX4B,GAoB1BQ,KApB0B,CAAA,WAAA;AAAA,MAY5BP,MAZ4B,GAoB1BO,KApB0B,CAAA,MAAA;AAAA,MAa5BN,QAb4B,GAoB1BM,KApB0B,CAAA,QAAA;AAAA,MAc5BL,MAd4B,GAoB1BK,KApB0B,CAAA,MAAA;AAAA,MAe5BJ,IAf4B,GAoB1BI,KApB0B,CAAA,IAAA;AAAA,MAgB5BH,OAhB4B,GAoB1BG,KApB0B,CAAA,OAAA;AAAA,MAiB5BF,QAjB4B,GAoB1BE,KApB0B,CAAA,QAAA;AAAA,MAkB5BD,MAlB4B,GAoB1BC,KApB0B,CAAA,MAAA;AAAA,MAmB5BvB,SAnB4B,GAoB1BuB,KApB0B,CAAA,SAAA;AAsB9B,MAAMC,WAAW,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AAClDC,IAAAA,SAAS,EAAEjB,cAAc,CADyB,WAAA;AAElDkB,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAK;AACjB,YAAIC,CAAC,CAADA,aAAAA,KAAoBA,CAAC,CAAzB,MAAA,EAAkC;AAChCA,UAAAA,CAAC,CAADA,eAAAA;AACAC,UAAAA,WAAW,CAAXA,CAAW,CAAXA;AACD;AACF;AANa,KAFkC;AAUlDC,IAAAA,GAAG,EAAE3B,OAAO,CAAC2B;AAVqC,GAAhB,CAApC;;AAtB8B,MAAA,UAAA,GAmCVE,SAAS,CAAwBxB,cAAc,CAAtC,WAAA,EAAoD;AAC/EK,IAAAA,SAAS,EADsE,mBAAA;AAE/EoB,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AACvBtB,QAAAA,UAAU,EAAEA,UAAU,IAAI,CAAC,CADJ,OAAA;AAEvBK,QAAAA,QAAQ,EAARA;AAFuB,OAAP;AAF6D,KAAA;AAM/EkB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BrB,QAAAA,SAAS,EADoB,SAAA;AAE7BE,QAAAA,MAAM,EAFuB,MAAA;AAG7BM,QAAAA,MAAM,EAHuB,MAAA;AAI7BtB,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AANuD,KAAA;AAY/E+B,IAAAA,GAAG,EAAE3B,OAAO,CAZmE,GAAA;AAa/EK,IAAAA,cAAc,EAbiE,cAAA;AAc/E2B,IAAAA,cAAc,EAAEb;AAd+D,GAApD,CAnCC;AAAA,MAmCtBS,OAnCsB,GAAA,UAAA,CAAA,OAAA;;AAoD9B,MAAMK,SAAS,GAAG5B,cAAc,CAAdA,gBAAAA,CAAlB,KAAkBA,CAAlB;AAEA,MAAM6B,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAAChC,cAAc,CAAf,YAAA,EAAxC,KAAwC,CAAxC;;AAEA,MAAMqB,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA+C;AACjE,QAAA,QAAA,EAAc;AACZD,MAAAA,CAAC,CAADA,cAAAA;AACA;AACD;;AAED,IAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AANF,GAAA;;AASA,MAAMa,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EAAiBlB,WAAW,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAWV,IAAAA,SAAS,EAAEkB,OAAO,CAA7B,IAAA;AAAoCZ,IAAAA,OAAO,EAA3C,WAAA;AAA0DuB,IAAAA,GAAG,EAAHA;AAA1D,GAAA,EAA5B,cAA4B,CAAA,CAA5B,EACGC,eAAe,CAACnC,cAAc,CAAdA,KAAAA,CAAD,IAAA,EAAA,IAAA,EAAkC;AAChDoC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAMR,SAAS,CAAf,IAAA;AADkC,KAAA;AAEhDS,IAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAe;AAAA,aAAK;AACjC9C,QAAAA,SAAS,EAAED,uBAAuB,CAAA,SAAA,EAAYgD,eAAe,CAA3B,SAAA;AADD,OAAL;AAAA;AAFkB,GAAlC,CADlB,EAQG,CAAC7B,MAAM,IAAP,WAAA,KACC0B,eAAe,CAACnC,cAAc,CAAdA,KAAAA,CAAD,IAAA,EAAA,IAAA,EAAkC;AAC/CoC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAMR,SAAS,CAAf,IAAA;AADiC,KAAA;AAE/CS,IAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAe;AAAA,aAAK;AACjCE,QAAAA,OAAO,EACL,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACGJ,eAAe,CAACnC,cAAc,CAAdA,KAAAA,CAAD,MAAA,EAAA,MAAA,EAAsC;AACpDoC,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAMR,SAAS,CAAf,MAAA;AADsC,WAAA;AAEpDS,UAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAe;AAAA,mBAAK;AACjC9C,cAAAA,SAAS,EAAED,uBAAuB,CAAA,SAAA,EAAYgD,eAAe,CAA3B,SAAA;AADD,aAAL;AAAA;AAFsB,SAAtC,CADlB,EAOGH,eAAe,CAACnC,cAAc,CAAdA,KAAAA,CAAD,WAAA,EAAA,WAAA,EAAgD;AAC9DoC,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAMR,SAAS,CAAf,WAAA;AADgD,WAAA;AAE9DS,UAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAe;AAAA,mBAAK;AACjC9C,cAAAA,SAAS,EAAED,uBAAuB,CAAA,SAAA,EAAYgD,eAAe,CAA3B,SAAA;AADD,aAAL;AAAA;AAFgC,SAAhD,CAPlB,CAF+B;AAiBjC/C,QAAAA,SAAS,EAAED,uBAAuB,CAAA,SAAA,EAAYgD,eAAe,CAA3B,SAAA;AAjBD,OAAL;AAAA;AAFiB,GAAlC,CATnB,EAgCGH,eAAe,CAACnC,cAAc,CAAdA,KAAAA,CAAD,MAAA,EAAA,MAAA,EAAsC;AACpDoC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAMR,SAAS,CAAf,MAAA;AADsC,KAAA;AAEpDS,IAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAe;AAAA,aAAK;AACjC9C,QAAAA,SAAS,EAAED,uBAAuB,CAAA,SAAA,EAAYgD,eAAe,CAA3B,SAAA;AADD,OAAL;AAAA;AAFsB,GAAtC,CAhClB,EAsCG,CAAC,MAAA,CAAD,QAAC,CAAD,IAAsB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,yBAAA;AAAyC,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAA,GAAA,MAAA,CAAA,QAAA,EAAA,GAAA;AAAP;AAAhD,GAAA,CAtCzB,CADF;AA0CA1C,EAAAA,MAAM;AAEN,SAAA,OAAA;AA/GsB,CAAA,EAiHxB;AACEO,EAAAA,SAAS,EADX,mBAAA;AAEEoC,EAAAA,WAAW,EAFb,YAAA;AAGEC,EAAAA,KAAK,EAAE;AACLxC,IAAAA,MAAM,EADD,gBAAA;AAELE,IAAAA,IAAI,EAFC,cAAA;AAGLE,IAAAA,WAAW,EAHN,qBAAA;AAILG,IAAAA,MAAM,EAJD,gBAAA;AAKLC,IAAAA,IAAI,EAAEiC;AALD,GAHT;AAUEC,EAAAA,YAAY,EAAE,CAAA,eAAA,EAAA,QAAA,EAAA,YAAA,EAAA,IAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,aAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,WAAA;AAVhB,CAjHwB,CAA1B;AAsJAnD,UAAU,CAAVA,MAAAA,GAAoBoD,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,UAAA;AAAyBC,EAAAA,UAAU,EAAE;AAArC,CAAD,CAA1CtD;AAEAA,UAAU,CAAVA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9B8C,EAAAA,OAAO,EAAE;AADqB,CAA7B,CADL9C,EAAAA;AAIES,EAAAA,MAAM,EAAE8C,eAAe,CAJzBvD,aAAAA;AAKEU,EAAAA,UAAU,EAAE8C,SAAS,CALvBxD,IAAAA;AAMEW,EAAAA,IAAI,EAAE4C,eAAe,CANvBvD,aAAAA;AAOEa,EAAAA,WAAW,EAAE0C,eAAe,CAP9BvD,aAAAA;AAQEgB,EAAAA,MAAM,EAAEuC,eAAe,CARzBvD,aAAAA;AASEiB,EAAAA,IAAI,EAAEsC,eAAe,CATvBvD,yBAAAA;AAUEkB,EAAAA,OAAO,EAAEsC,SAAS,CAVpBxD,IAAAA;AAWEmB,EAAAA,QAAQ,EAAEqC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,MAAoB,CAApBA;AAXZxD,CAAAA,CAAAA;AAaAA,UAAU,CAAVA,YAAAA,GAA0B;AACxBQ,EAAAA,aAAa,EADW,kBAAA;AAExBG,EAAAA,IAAI,EAAE;AAFkB,CAA1BX;AAKAA,UAAU,CAAVA,MAAAA,GAAAA,gBAAAA;AACAA,UAAU,CAAVA,IAAAA,GAAAA,cAAAA;AACAA,UAAU,CAAVA,WAAAA,GAAAA,qBAAAA;AACAA,UAAU,CAAVA,MAAAA,GAAAA,gBAAAA;AACAA,UAAU,CAAVA,IAAAA,GAAAA,cAAAA;AAEA;;;;AAGA,eAAA,UAAA","sourcesContent":["import { Accessibility, attachmentBehavior, AttachmentBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  compose,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { ComponentEventHandler, ProviderContextPrepared, ShorthandValue } from '../../types';\nimport {\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  createShorthand,\n  ShorthandFactory,\n} from '../../utils';\nimport AttachmentAction, { AttachmentActionProps } from './AttachmentAction';\nimport AttachmentBody, { AttachmentBodyProps } from './AttachmentBody';\nimport AttachmentDescription, { AttachmentDescriptionProps } from './AttachmentDescription';\nimport AttachmentHeader, { AttachmentHeaderProps } from './AttachmentHeader';\nimport AttachmentIcon, { AttachmentIconProps } from './AttachmentIcon';\n\nexport interface AttachmentProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<AttachmentBehaviorProps>;\n\n  /** Button shorthand for the action slot. */\n  action?: ShorthandValue<AttachmentActionProps>;\n\n  /** An Attachment can be styled to indicate possible user interaction. */\n  actionable?: boolean;\n\n  /** Contains a header and a description for an Attachment. */\n  body?: ShorthandValue<AttachmentBodyProps>;\n\n  /** A string describing the attachment. */\n  description?: ShorthandValue<AttachmentDescriptionProps>;\n\n  /** An attachment can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** The name of the attachment. */\n  header?: ShorthandValue<AttachmentHeaderProps>;\n\n  /** Shorthand for the icon. */\n  icon?: ShorthandValue<AttachmentIconProps>;\n\n  /** Value indicating percent complete. */\n  progress?: string | number;\n\n  /**\n   * Called after user's click.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AttachmentProps>;\n}\n\nexport type AttachmentStylesProps = Required<Pick<AttachmentProps, 'actionable' | 'disabled'>>;\nexport const attachmentClassName = 'ui-attachment';\n\n// mergeComponentVariables is always creating a function even if the arguments are undefined\n// we have this temporary fix in place to avoid creating empty function because it is breaking caching\n// we should either fix mergeComponentVariables, or handle this in a more generic way\nconst mergeShorthandVariables = (variables, shorthandVariables) => {\n  return (variables || shorthandVariables) && mergeComponentVariables(variables, shorthandVariables);\n};\n\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\nconst Attachment = compose<'div', AttachmentProps, AttachmentStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      action,\n      actionable,\n      body,\n      className,\n      description,\n      design,\n      disabled,\n      header,\n      icon,\n      onClick,\n      progress,\n      styles,\n      variables,\n    } = props;\n\n    const getA11Props = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          if (e.currentTarget === e.target) {\n            e.stopPropagation();\n            handleClick(e);\n          }\n        },\n      },\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<AttachmentStylesProps>(composeOptions.displayName, {\n      className: attachmentClassName,\n      mapPropsToStyles: () => ({\n        actionable: actionable || !!onClick,\n        disabled,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const slotProps = composeOptions.resolveSlotProps<AttachmentProps>(props);\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const handleClick = (e: React.KeyboardEvent | React.MouseEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const element = (\n      <ElementType {...getA11Props('root', { className: classes.root, onClick: handleClick, ref, ...unhandledProps })}>\n        {createShorthand(composeOptions.slots.icon, icon, {\n          defaultProps: () => slotProps.icon,\n          overrideProps: predefinedProps => ({\n            variables: mergeShorthandVariables(variables, predefinedProps.variables),\n          }),\n        })}\n\n        {(header || description) &&\n          createShorthand(composeOptions.slots.body, body, {\n            defaultProps: () => slotProps.body,\n            overrideProps: predefinedProps => ({\n              content: (\n                <>\n                  {createShorthand(composeOptions.slots.header, header, {\n                    defaultProps: () => slotProps.header,\n                    overrideProps: predefinedProps => ({\n                      variables: mergeShorthandVariables(variables, predefinedProps.variables),\n                    }),\n                  })}\n                  {createShorthand(composeOptions.slots.description, description, {\n                    defaultProps: () => slotProps.description,\n                    overrideProps: predefinedProps => ({\n                      variables: mergeShorthandVariables(variables, predefinedProps.variables),\n                    }),\n                  })}\n                </>\n              ),\n              variables: mergeShorthandVariables(variables, predefinedProps.variables),\n            }),\n          })}\n\n        {createShorthand(composeOptions.slots.action, action, {\n          defaultProps: () => slotProps.action,\n          overrideProps: predefinedProps => ({\n            variables: mergeShorthandVariables(variables, predefinedProps.variables),\n          }),\n        })}\n        {!_.isNil(progress) && <div className=\"ui-attachment__progress\" style={{ width: `${progress}%` }} />}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: attachmentClassName,\n    displayName: 'Attachment',\n    slots: {\n      action: AttachmentAction,\n      body: AttachmentBody,\n      description: AttachmentDescription,\n      header: AttachmentHeader,\n      icon: AttachmentIcon,\n    },\n    handledProps: [\n      'accessibility',\n      'action',\n      'actionable',\n      'as',\n      'body',\n      'children',\n      'className',\n      'description',\n      'design',\n      'header',\n      'icon',\n      'onClick',\n      'progress',\n      'styles',\n      'variables',\n    ],\n  },\n) as ComponentWithAs<'div', AttachmentProps> & {\n  create: ShorthandFactory<AttachmentProps>;\n  Action: typeof AttachmentAction;\n  Body: typeof AttachmentBody;\n  Description: typeof AttachmentDescription;\n  Header: typeof AttachmentHeader;\n  Icon: typeof AttachmentIcon;\n};\n\nAttachment.create = createShorthandFactory({ Component: Attachment, mappedProp: 'header' });\n\nAttachment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  body: customPropTypes.itemShorthand,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  onClick: PropTypes.func,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior,\n  body: {},\n};\n\nAttachment.Action = AttachmentAction;\nAttachment.Body = AttachmentBody;\nAttachment.Description = AttachmentDescription;\nAttachment.Header = AttachmentHeader;\nAttachment.Icon = AttachmentIcon;\n\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\nexport default Attachment;\n"]},"metadata":{},"sourceType":"module"}