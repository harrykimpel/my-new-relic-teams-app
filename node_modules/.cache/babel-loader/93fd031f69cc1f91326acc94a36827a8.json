{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _keys from \"lodash/keys\";\nimport { FocusTrapZone } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, AutoControlledComponent, doesNodeContainClick, commonPropTypes, rtlTextContainer } from '../../utils';\nimport PortalInner from './PortalInner';\n/**\n * A Portal allows to render children outside of their parent.\n */\n\nvar Portal = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Portal, _AutoControlledCompon);\n\n  function Portal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Portal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"portalNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMount\", function () {\n      _invoke(_this.props, 'onMount', _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUnmount\", function () {\n      _invoke(_this.props, 'onUnmount', _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePortalRef\", function (portalNode) {\n      _this.portalNode = portalNode;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTriggerRef\", function (triggerNode) {\n      _this.triggerNode = triggerNode;\n      handleRef(_this.props.triggerRef, triggerNode);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTriggerClick\", function (e) {\n      var trigger = _this.props.trigger;\n\n      _invoke(_this.props, 'onTriggerClick', e); // Call handler from parent component\n\n\n      for (var _len2 = arguments.length, unhandledProps = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        unhandledProps[_key2 - 1] = arguments[_key2];\n      }\n\n      _invoke.apply(void 0, [trigger, 'props.onClick', e].concat(unhandledProps)); // Call original event handler\n\n\n      _this.setState({\n        open: !_this.state.open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (e) {\n      if (!_this.portalNode || // no portal\n      doesNodeContainClick(_this.triggerNode, e, _this.context.target) || // event happened in trigger (delegate to trigger handlers)\n      doesNodeContainClick(_this.portalNode, e, _this.context.target) // event happened in the portal\n      ) {\n          return; // ignore the click\n        }\n\n      _invoke(_this.props, 'onOutsideClick', e);\n\n      _this.setState({\n        open: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Portal, [{\n    key: \"renderComponent\",\n    value: function renderComponent() {\n      return React.createElement(React.Fragment, null, this.renderPortal(), this.renderTrigger());\n    }\n  }, {\n    key: \"renderPortal\",\n    value: function renderPortal() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          content = _this$props.content,\n          trapFocus = _this$props.trapFocus;\n      var open = this.state.open;\n      var contentToRender = childrenExist(children) ? children : content;\n      var focusTrapZoneProps = _keys(trapFocus).length && trapFocus || {};\n      return open && React.createElement(Ref, {\n        innerRef: this.handlePortalRef\n      }, React.createElement(PortalInner, _extends({\n        onMount: this.handleMount,\n        onUnmount: this.handleUnmount\n      }, rtlTextContainer.getAttributes({\n        forElements: [contentToRender]\n      })), trapFocus ? React.createElement(FocusTrapZone, focusTrapZoneProps, contentToRender) : contentToRender, React.createElement(EventListener, {\n        listener: this.handleDocumentClick,\n        target: this.context.target,\n        type: \"click\"\n      })));\n    }\n  }, {\n    key: \"renderTrigger\",\n    value: function renderTrigger() {\n      var _this$props2 = this.props,\n          trigger = _this$props2.trigger,\n          triggerAccessibility = _this$props2.triggerAccessibility;\n      return trigger && React.createElement(Ref, {\n        innerRef: this.handleTriggerRef\n      }, React.cloneElement(trigger, Object.assign({\n        onClick: this.handleTriggerClick\n      }, triggerAccessibility.attributes, {}, triggerAccessibility.keyHandlers)));\n    }\n  }]);\n\n  return Portal;\n}(AutoControlledComponent);\n\n_defineProperty(Portal, \"autoControlledProps\", ['open']);\n\n_defineProperty(Portal, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  as: false,\n  className: false,\n  styled: false\n}), {\n  defaultOpen: PropTypes.bool,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func,\n  open: PropTypes.bool,\n  trigger: PropTypes.node,\n  triggerRef: customPropTypes.ref,\n  triggerAccessibility: PropTypes.object,\n  onTriggerClick: PropTypes.func,\n  onOutsideClick: PropTypes.func,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\n}));\n\n_defineProperty(Portal, \"defaultProps\", {\n  triggerAccessibility: {}\n});\n\nexport default Portal;","map":{"version":3,"sources":["components/Portal/Portal.tsx"],"names":["Portal","AutoControlledComponent","accessibility","as","className","styled","defaultOpen","PropTypes","bool","onMount","func","onUnmount","open","trigger","node","triggerRef","customPropTypes","ref","triggerAccessibility","object","onTriggerClick","onOutsideClick","trapFocus","children","content","contentToRender","childrenExist","focusTrapZoneProps","handlePortalRef","handleUnmount","forElements","handleTriggerRef","onClick","handleTriggerClick","handleRef","unhandledProps","doesNodeContainClick"],"mappings":"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","sourcesContent":["import { AccessibilityAttributes } from '@fluentui/accessibility';\nimport { AccessibilityHandlerProps, FocusTrapZone, FocusTrapZoneProps } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  AutoControlledComponent,\n  doesNodeContainClick,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport PortalInner from './PortalInner';\n\nexport type TriggerAccessibility = {\n  attributes?: AccessibilityAttributes;\n  keyHandlers?: AccessibilityHandlerProps;\n};\n\nexport interface PortalProps extends ChildrenComponentProps, ContentComponentProps {\n  /** Initial value of open. */\n  defaultOpen?: boolean;\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalProps) => void;\n\n  /** Controls whether or not the portal is displayed. */\n  open?: boolean;\n\n  /** Element to be rendered in-place where the portal is defined. */\n  trigger?: JSX.Element;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value */\n  trapFocus?: FocusTrapZoneProps | boolean;\n\n  /** Accessibility behavior object to apply on trigger node. */\n  triggerAccessibility?: TriggerAccessibility;\n\n  /** Sets trigger node to passed ref. */\n  triggerRef?: React.Ref<any>;\n\n  /**\n   * Called when trigger node was clicked.\n   *\n   * @param data - All props.\n   */\n  onTriggerClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Called when `click` event was invoked outside portal or trigger nodes.\n   *\n   * @param data - All props.\n   */\n  onOutsideClick?: (e: React.MouseEvent) => void;\n}\n\nexport interface PortalState {\n  open?: boolean;\n}\n\n/**\n * A Portal allows to render children outside of their parent.\n */\nclass Portal extends AutoControlledComponent<PortalProps, PortalState> {\n  portalNode: HTMLElement;\n  triggerNode: HTMLElement;\n\n  static autoControlledProps = ['open'];\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      as: false,\n      className: false,\n      styled: false,\n    }),\n    defaultOpen: PropTypes.bool,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    open: PropTypes.bool,\n    trigger: PropTypes.node,\n    triggerRef: customPropTypes.ref,\n    triggerAccessibility: PropTypes.object,\n    onTriggerClick: PropTypes.func,\n    onOutsideClick: PropTypes.func,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  };\n\n  static defaultProps: PortalProps = {\n    triggerAccessibility: {},\n  };\n\n  renderComponent(): React.ReactNode {\n    return (\n      <React.Fragment>\n        {this.renderPortal()}\n        {this.renderTrigger()}\n      </React.Fragment>\n    );\n  }\n\n  renderPortal(): JSX.Element | undefined {\n    const { children, content, trapFocus } = this.props;\n    const { open } = this.state;\n\n    const contentToRender = childrenExist(children) ? children : content;\n    const focusTrapZoneProps = (_.keys(trapFocus).length && trapFocus) || {};\n\n    return (\n      open && (\n        <Ref innerRef={this.handlePortalRef}>\n          <PortalInner\n            onMount={this.handleMount}\n            onUnmount={this.handleUnmount}\n            {...rtlTextContainer.getAttributes({ forElements: [contentToRender] })}\n          >\n            {trapFocus ? <FocusTrapZone {...focusTrapZoneProps}>{contentToRender}</FocusTrapZone> : contentToRender}\n            <EventListener listener={this.handleDocumentClick} target={this.context.target} type=\"click\" />\n          </PortalInner>\n        </Ref>\n      )\n    );\n  }\n\n  renderTrigger(): JSX.Element | undefined {\n    const { trigger, triggerAccessibility } = this.props;\n\n    return (\n      trigger && (\n        <Ref innerRef={this.handleTriggerRef}>\n          {React.cloneElement(trigger, {\n            onClick: this.handleTriggerClick,\n            ...triggerAccessibility.attributes,\n            ...triggerAccessibility.keyHandlers,\n          })}\n        </Ref>\n      )\n    );\n  }\n  handleMount = () => {\n    _.invoke(this.props, 'onMount', this.props);\n  };\n\n  handleUnmount = () => {\n    _.invoke(this.props, 'onUnmount', this.props);\n  };\n\n  handlePortalRef = (portalNode: HTMLElement) => {\n    this.portalNode = portalNode;\n  };\n\n  handleTriggerRef = (triggerNode: HTMLElement) => {\n    this.triggerNode = triggerNode;\n    handleRef(this.props.triggerRef, triggerNode);\n  };\n\n  handleTriggerClick = (e: React.MouseEvent, ...unhandledProps) => {\n    const { trigger } = this.props;\n\n    _.invoke(this.props, 'onTriggerClick', e); // Call handler from parent component\n    _.invoke(trigger, 'props.onClick', e, ...unhandledProps); // Call original event handler\n    this.setState({ open: !this.state.open });\n  };\n\n  handleDocumentClick = (e: MouseEvent) => {\n    if (\n      !this.portalNode || // no portal\n      doesNodeContainClick(this.triggerNode, e, this.context.target) || // event happened in trigger (delegate to trigger handlers)\n      doesNodeContainClick(this.portalNode, e, this.context.target) // event happened in the portal\n    ) {\n      return; // ignore the click\n    }\n    _.invoke(this.props, 'onOutsideClick', e);\n    this.setState({ open: false });\n  };\n}\n\nexport default Portal;\n"]},"metadata":{},"sourceType":"module"}