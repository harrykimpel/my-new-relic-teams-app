{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport cx from 'classnames';\nimport { isDebugEnabled, mergeComponentStyles, withDebugId } from '@fluentui/styles'; // this weak map is used as cache for the classes\n\nvar classesCache = new WeakMap(); // this weak map is used as cache for the styles\n\nvar stylesCache = new WeakMap();\n/**\n * Both resolvedStyles and classes are objects of getters with lazy evaluation\n *\n * Additionally if the cacheEnabled option is provided, than the resolved styles\n * and classes are caching the results in WeakMaps. The key of the maps contains the following:\n * - theme\n * - displayName\n * - slot name\n * - styling props\n * - rtl mode\n * - disable animations mode\n */\n\nvar resolveStyles = function resolveStyles(options, resolvedVariables, renderStylesInput) {\n  var componentClassName = options.className,\n      theme = options.theme,\n      displayNames = options.displayNames,\n      props = options.props,\n      rtl = options.rtl,\n      disableAnimations = options.disableAnimations,\n      renderer = options.renderer,\n      performance = options.performance;\n\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      stylesProps = _objectWithoutProperties(props, [\"className\", \"design\", \"styles\", \"variables\"]);\n\n  var noInlineStylesOverrides = !(design || styles);\n  var noVariableOverrides = performance.enableBooleanVariablesCaching || !variables;\n  /* istanbul ignore else */\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!performance.enableStylesCaching && performance.enableBooleanVariablesCaching) {\n      throw new Error('@fluentui/react-northstar: Please check your \"performance\" settings on \"Provider\", to enable \"enableBooleanVariablesCaching\" you need to enable \"enableStylesCaching\"');\n    }\n  }\n\n  if (performance.enableBooleanVariablesCaching) {\n    if (_isPlainObject(variables)) {\n      var hasOnlyBooleanVariables = Object.keys(variables).every(function (variableName) {\n        return variables[variableName] === null || typeof variables[variableName] === 'undefined' || typeof variables[variableName] === 'boolean';\n      });\n\n      if (!hasOnlyBooleanVariables) {\n        noVariableOverrides = false;\n      }\n    } else {\n      noVariableOverrides = false;\n    }\n  }\n\n  var cacheEnabled = performance.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides; // Merge theme styles with inline overrides if any\n\n  var mergedStyles;\n\n  if (displayNames.length === 1) {\n    mergedStyles = theme.componentStyles[displayNames[0]] || {\n      root: function root() {\n        return {};\n      }\n    };\n  } else {\n    var _styles = displayNames.map(function (displayName) {\n      return theme.componentStyles[displayName];\n    }).filter(Boolean);\n\n    if (_styles.length > 0) {\n      mergedStyles = mergeComponentStyles.apply(void 0, _toConsumableArray(_styles));\n    } else {\n      mergedStyles = {\n        root: function root() {\n          return {};\n        }\n      };\n    }\n  }\n\n  if (!noInlineStylesOverrides) {\n    mergedStyles = mergeComponentStyles(mergedStyles, props.design && withDebugId({\n      root: props.design\n    }, 'props.design'), props.styles && withDebugId({\n      root: props.styles\n    }, 'props.styles'));\n  }\n\n  var styleParam = {\n    props: props,\n    variables: resolvedVariables,\n    theme: theme,\n    rtl: rtl,\n    disableAnimations: disableAnimations\n  }; // Fela plugins rely on `direction` param in `theme` prop instead of RTL\n  // Our API should be aligned with it\n  // Heads Up! Keep in sync with Design.tsx render logic\n\n  var direction = rtl ? 'rtl' : 'ltr';\n  var felaParam = {\n    theme: {\n      direction: direction\n    },\n    disableAnimations: disableAnimations,\n    displayName: displayNames.join(':'),\n    // does not affect styles, only used by useEnhancedRenderer in docs\n    sanitizeCss: performance.enableSanitizeCssPlugin\n  };\n\n  var renderStyles = renderStylesInput || function (style) {\n    return renderer.renderRule(function () {\n      return style;\n    }, felaParam);\n  };\n\n  var resolvedStyles = {};\n  var resolvedStylesDebug = {};\n  var classes = {};\n\n  if (cacheEnabled && theme) {\n    if (!stylesCache.has(theme)) {\n      stylesCache.set(theme, {});\n    }\n\n    if (!classesCache.has(theme)) {\n      classesCache.set(theme, {});\n    }\n  }\n\n  var propsCacheKey = cacheEnabled ? JSON.stringify(stylesProps) : '';\n  var variablesCacheKey = cacheEnabled && performance.enableBooleanVariablesCaching ? JSON.stringify(variables) : '';\n  var componentCacheKey = cacheEnabled ? \"\".concat(displayNames.join(':'), \":\").concat(propsCacheKey, \":\").concat(variablesCacheKey, \":\").concat(styleParam.rtl).concat(styleParam.disableAnimations) : '';\n  Object.keys(mergedStyles).forEach(function (slotName) {\n    // resolve/render slot styles once and cache\n    var lazyEvaluationKey = \"\".concat(slotName, \"__return\");\n    var slotCacheKey = componentCacheKey + slotName;\n    Object.defineProperty(resolvedStyles, slotName, {\n      enumerable: false,\n      configurable: false,\n      set: function set(val) {\n        // Add to the cache if it's enabled\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), _defineProperty({}, slotCacheKey, val)));\n        }\n\n        resolvedStyles[lazyEvaluationKey] = val;\n      },\n      get: function get() {\n        // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n        if (cacheEnabled && theme) {\n          var stylesThemeCache = stylesCache.get(theme) || {};\n\n          if (stylesThemeCache[slotCacheKey]) {\n            return stylesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (resolvedStyles[lazyEvaluationKey]) {\n          return resolvedStyles[lazyEvaluationKey];\n        } // resolve/render slot styles once and cache\n\n\n        resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);\n\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), _defineProperty({}, slotCacheKey, resolvedStyles[lazyEvaluationKey])));\n        }\n\n        if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n          resolvedStylesDebug[slotName] = resolvedStyles[slotName]['_debug'];\n          delete resolvedStyles[slotName]['_debug'];\n        }\n\n        return resolvedStyles[lazyEvaluationKey];\n      }\n    });\n    Object.defineProperty(classes, slotName, {\n      enumerable: false,\n      configurable: false,\n      set: function set(val) {\n        if (cacheEnabled && theme) {\n          classesCache.set(theme, Object.assign({}, classesCache.get(theme), _defineProperty({}, slotCacheKey, val)));\n        }\n\n        classes[lazyEvaluationKey] = val;\n      },\n      get: function get() {\n        if (cacheEnabled && theme) {\n          var classesThemeCache = classesCache.get(theme) || {};\n\n          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n            return slotName === 'root' ? cx(componentClassName, classesThemeCache[slotCacheKey], className) : classesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (classes[lazyEvaluationKey]) {\n          return slotName === 'root' ? cx(componentClassName, classes[lazyEvaluationKey], className) : classes[lazyEvaluationKey];\n        } // this resolves the getter magic\n\n\n        var styleObj = resolvedStyles[slotName];\n\n        if (renderStyles && styleObj) {\n          classes[lazyEvaluationKey] = renderStyles(styleObj);\n\n          if (cacheEnabled && theme) {\n            classesCache.set(theme, Object.assign({}, classesCache.get(theme), _defineProperty({}, slotCacheKey, classes[lazyEvaluationKey])));\n          }\n        }\n\n        return slotName === 'root' ? cx(componentClassName, classes[lazyEvaluationKey], className) : classes[lazyEvaluationKey];\n      }\n    });\n  });\n  return {\n    resolvedStyles: resolvedStyles,\n    resolvedStylesDebug: resolvedStylesDebug,\n    classes: classes\n  };\n};\n\nexport default resolveStyles;","map":{"version":3,"sources":["styles/resolveStyles.ts"],"names":["classesCache","stylesCache","resolveStyles","componentClassName","theme","displayNames","props","rtl","disableAnimations","renderer","performance","options","className","design","styles","variables","stylesProps","noInlineStylesOverrides","noVariableOverrides","process","hasOnlyBooleanVariables","cacheEnabled","mergedStyles","root","mergeComponentStyles","withDebugId","styleParam","direction","felaParam","displayName","sanitizeCss","enableSanitizeCssPlugin","renderStyles","renderStylesInput","resolvedStyles","resolvedStylesDebug","classes","propsCacheKey","JSON","variablesCacheKey","componentCacheKey","Object","lazyEvaluationKey","slotCacheKey","enumerable","configurable","set","get","stylesThemeCache","classesThemeCache","slotName","cx","styleObj"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport {\n  ComponentSlotStylesInput,\n  ComponentSlotStylesPrepared,\n  ComponentSlotStylesResolved,\n  ComponentStyleFunctionParam,\n  ComponentVariablesObject,\n  ICSSInJSStyle,\n  isDebugEnabled,\n  mergeComponentStyles,\n  ThemePrepared,\n  withDebugId,\n} from '@fluentui/styles';\nimport { ComponentSlotClasses, RendererParam, ResolveStylesOptions } from './types';\nimport * as _ from 'lodash';\n\nexport type ResolveStylesResult = {\n  resolvedStyles: ComponentSlotStylesResolved;\n  resolvedStylesDebug: Record<string, { styles: Object }[]>;\n  classes: ComponentSlotClasses;\n};\n\n// this weak map is used as cache for the classes\nconst classesCache = new WeakMap<ThemePrepared, Record<string, string>>();\n\n// this weak map is used as cache for the styles\nconst stylesCache = new WeakMap<ThemePrepared, Record<string, ICSSInJSStyle>>();\n\n/**\n * Both resolvedStyles and classes are objects of getters with lazy evaluation\n *\n * Additionally if the cacheEnabled option is provided, than the resolved styles\n * and classes are caching the results in WeakMaps. The key of the maps contains the following:\n * - theme\n * - displayName\n * - slot name\n * - styling props\n * - rtl mode\n * - disable animations mode\n */\nconst resolveStyles = (\n  options: ResolveStylesOptions,\n  resolvedVariables: ComponentVariablesObject,\n  renderStylesInput?: (styles: ICSSInJSStyle) => string,\n): ResolveStylesResult => {\n  const {\n    className: componentClassName,\n    theme,\n    displayNames,\n    props,\n    rtl,\n    disableAnimations,\n    renderer,\n    performance,\n  } = options;\n\n  const { className, design, styles, variables, ...stylesProps } = props;\n\n  const noInlineStylesOverrides = !(design || styles);\n  let noVariableOverrides = performance.enableBooleanVariablesCaching || !variables;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    if (!performance.enableStylesCaching && performance.enableBooleanVariablesCaching) {\n      throw new Error(\n        '@fluentui/react-northstar: Please check your \"performance\" settings on \"Provider\", to enable \"enableBooleanVariablesCaching\" you need to enable \"enableStylesCaching\"',\n      );\n    }\n  }\n\n  if (performance.enableBooleanVariablesCaching) {\n    if (_.isPlainObject(variables)) {\n      const hasOnlyBooleanVariables = Object.keys(variables).every(\n        variableName =>\n          variables[variableName] === null ||\n          typeof variables[variableName] === 'undefined' ||\n          typeof variables[variableName] === 'boolean',\n      );\n\n      if (!hasOnlyBooleanVariables) {\n        noVariableOverrides = false;\n      }\n    } else {\n      noVariableOverrides = false;\n    }\n  }\n\n  const cacheEnabled = performance.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides;\n\n  // Merge theme styles with inline overrides if any\n  let mergedStyles: ComponentSlotStylesPrepared;\n\n  if (displayNames.length === 1) {\n    mergedStyles = theme.componentStyles[displayNames[0]] || { root: () => ({}) };\n  } else {\n    const styles = displayNames.map(displayName => theme.componentStyles[displayName]).filter(Boolean);\n\n    if (styles.length > 0) {\n      mergedStyles = mergeComponentStyles(...styles);\n    } else {\n      mergedStyles = { root: () => ({}) };\n    }\n  }\n\n  if (!noInlineStylesOverrides) {\n    mergedStyles = mergeComponentStyles(\n      mergedStyles,\n      props.design && withDebugId({ root: props.design }, 'props.design'),\n      props.styles && withDebugId({ root: props.styles } as ComponentSlotStylesInput, 'props.styles'),\n    );\n  }\n\n  const styleParam: ComponentStyleFunctionParam = {\n    props,\n    variables: resolvedVariables,\n    theme,\n    rtl,\n    disableAnimations,\n  };\n\n  // Fela plugins rely on `direction` param in `theme` prop instead of RTL\n  // Our API should be aligned with it\n  // Heads Up! Keep in sync with Design.tsx render logic\n  const direction = rtl ? 'rtl' : 'ltr';\n  const felaParam: RendererParam = {\n    theme: { direction },\n    disableAnimations,\n    displayName: displayNames.join(':'), // does not affect styles, only used by useEnhancedRenderer in docs\n    sanitizeCss: performance.enableSanitizeCssPlugin,\n  };\n\n  const renderStyles = renderStylesInput || ((style: ICSSInJSStyle) => renderer.renderRule(() => style, felaParam));\n\n  const resolvedStyles: Record<string, ICSSInJSStyle> = {};\n  const resolvedStylesDebug: Record<string, { styles: Object }[]> = {};\n  const classes: Record<string, string> = {};\n\n  if (cacheEnabled && theme) {\n    if (!stylesCache.has(theme)) {\n      stylesCache.set(theme, {});\n    }\n    if (!classesCache.has(theme)) {\n      classesCache.set(theme, {});\n    }\n  }\n\n  const propsCacheKey = cacheEnabled ? JSON.stringify(stylesProps) : '';\n  const variablesCacheKey = cacheEnabled && performance.enableBooleanVariablesCaching ? JSON.stringify(variables) : '';\n  const componentCacheKey = cacheEnabled\n    ? `${displayNames.join(':')}:${propsCacheKey}:${variablesCacheKey}:${styleParam.rtl}${styleParam.disableAnimations}`\n    : '';\n\n  Object.keys(mergedStyles).forEach(slotName => {\n    // resolve/render slot styles once and cache\n    const lazyEvaluationKey = `${slotName}__return`;\n    const slotCacheKey = componentCacheKey + slotName;\n\n    Object.defineProperty(resolvedStyles, slotName, {\n      enumerable: false,\n      configurable: false,\n      set(val: ICSSInJSStyle) {\n        // Add to the cache if it's enabled\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, {\n            ...stylesCache.get(theme),\n            [slotCacheKey]: val,\n          });\n        }\n\n        resolvedStyles[lazyEvaluationKey] = val;\n      },\n      get(): ICSSInJSStyle {\n        // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n        if (cacheEnabled && theme) {\n          const stylesThemeCache = stylesCache.get(theme) || {};\n          if (stylesThemeCache[slotCacheKey]) {\n            return stylesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (resolvedStyles[lazyEvaluationKey]) {\n          return resolvedStyles[lazyEvaluationKey];\n        }\n\n        // resolve/render slot styles once and cache\n        resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);\n\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, {\n            ...stylesCache.get(theme),\n            [slotCacheKey]: resolvedStyles[lazyEvaluationKey],\n          });\n        }\n\n        if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n          resolvedStylesDebug[slotName] = resolvedStyles[slotName]['_debug'];\n          delete resolvedStyles[slotName]['_debug'];\n        }\n\n        return resolvedStyles[lazyEvaluationKey];\n      },\n    });\n\n    Object.defineProperty(classes, slotName, {\n      enumerable: false,\n      configurable: false,\n      set(val: string) {\n        if (cacheEnabled && theme) {\n          classesCache.set(theme, {\n            ...classesCache.get(theme),\n            [slotCacheKey]: val,\n          });\n        }\n\n        classes[lazyEvaluationKey] = val;\n      },\n      get(): string {\n        if (cacheEnabled && theme) {\n          const classesThemeCache = classesCache.get(theme) || {};\n\n          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n            return slotName === 'root'\n              ? cx(componentClassName, classesThemeCache[slotCacheKey], className)\n              : classesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (classes[lazyEvaluationKey]) {\n          return slotName === 'root'\n            ? cx(componentClassName, classes[lazyEvaluationKey], className)\n            : classes[lazyEvaluationKey];\n        }\n\n        // this resolves the getter magic\n        const styleObj = resolvedStyles[slotName];\n\n        if (renderStyles && styleObj) {\n          classes[lazyEvaluationKey] = renderStyles(styleObj);\n\n          if (cacheEnabled && theme) {\n            classesCache.set(theme, {\n              ...classesCache.get(theme),\n              [slotCacheKey]: classes[lazyEvaluationKey],\n            });\n          }\n        }\n\n        return slotName === 'root'\n          ? cx(componentClassName, classes[lazyEvaluationKey], className)\n          : classes[lazyEvaluationKey];\n      },\n    });\n  });\n\n  return {\n    resolvedStyles,\n    resolvedStylesDebug,\n    classes,\n  };\n};\n\nexport default resolveStyles;\n"]},"metadata":{},"sourceType":"module"}