{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { treeItemBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport TreeTitle from './TreeTitle';\nimport { hasSubtree, TreeContext } from './utils';\nexport var treeItemClassName = 'ui-tree__item';\n\nvar TreeItem = function TreeItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TreeItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      contentRef = props.contentRef,\n      design = props.design,\n      title = props.title,\n      renderItemTitle = props.renderItemTitle,\n      expanded = props.expanded,\n      level = props.level,\n      index = props.index,\n      styles = props.styles,\n      variables = props.variables,\n      treeSize = props.treeSize,\n      selectionIndicator = props.selectionIndicator,\n      selectableParent = props.selectableParent,\n      selected = props.selected,\n      selectable = props.selectable,\n      indeterminate = props.indeterminate,\n      id = props.id;\n  var hasSubtreeItem = hasSubtree(props);\n\n  var _React$useContext = React.useContext(TreeContext),\n      onFocusParent = _React$useContext.onFocusParent,\n      onSiblingsExpand = _React$useContext.onSiblingsExpand,\n      onFocusFirstChild = _React$useContext.onFocusFirstChild,\n      onTitleClick = _React$useContext.onTitleClick;\n\n  var getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleTitleClick(e);\n      },\n      focusParent: function focusParent(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleFocusParent(e);\n      },\n      collapse: function collapse(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleTitleClick(e);\n      },\n      expand: function expand(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleTitleClick(e);\n      },\n      focusFirstChild: function focusFirstChild(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleFocusFirstChild(e);\n      },\n      expandSiblings: function expandSiblings(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleSiblingsExpand(e);\n      },\n      performSelection: function performSelection(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleSelection(e);\n      }\n    },\n    debugName: TreeItem.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        expanded: expanded,\n        level: level,\n        index: index,\n        hasSubtree: hasSubtreeItem,\n        treeSize: treeSize,\n        selected: selected,\n        selectable: selectable,\n        selectableParent: selectableParent\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TreeItem.displayName, {\n    className: treeItemClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        level: level\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleSelection = function handleSelection(e) {\n    onTitleClick(e, props, true);\n\n    _invoke(props, 'onTitleClick', e, props);\n  };\n\n  var handleTitleClick = function handleTitleClick(e) {\n    onTitleClick(e, props);\n\n    _invoke(props, 'onTitleClick', e, props);\n  };\n\n  var handleFocusFirstChild = function handleFocusFirstChild(e) {\n    _invoke(props, 'onFocusFirstChild', e, props);\n\n    onFocusFirstChild(props.id);\n  };\n\n  var handleFocusParent = function handleFocusParent(e) {\n    _invoke(props, 'onFocusParent', e, props);\n\n    onFocusParent(props.parent);\n  };\n\n  var handleSiblingsExpand = function handleSiblingsExpand(e) {\n    _invoke(props, 'onSiblingsExpand', e, props);\n\n    onSiblingsExpand(e, props);\n  };\n\n  var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, titleProps) {\n        handleTitleClick(e);\n\n        _invoke(predefinedProps, 'onClick', e, titleProps);\n      }\n    };\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TreeItem.handledProps, props);\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    id: id,\n    selected: selected\n  }, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), {}, unhandledProps)), childrenExist(children) ? children : TreeTitle.create(title, {\n    defaultProps: function defaultProps() {\n      return getA11Props('title', Object.assign({\n        hasSubtree: hasSubtreeItem,\n        as: hasSubtreeItem ? 'span' : 'a',\n        level: level,\n        treeSize: treeSize,\n        expanded: expanded,\n        index: index,\n        selected: selected,\n        selectable: selectable\n      }, hasSubtreeItem && !selectableParent && {\n        selectable: false\n      }, {}, selectableParent && {\n        indeterminate: indeterminate\n      }, {\n        selectableParent: selectableParent,\n        selectionIndicator: selectionIndicator\n      }));\n    },\n    render: renderItemTitle,\n    overrideProps: handleTitleOverrides\n  }));\n  var elementWithRef = contentRef ? React.createElement(Ref, {\n    innerRef: contentRef\n  }, element) : element;\n  setEnd();\n  return elementWithRef;\n};\n\nTreeItem.displayName = 'TreeItem';\nTreeItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  contentRef: customPropTypes.ref,\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  level: PropTypes.number,\n  onFocusFirstChild: PropTypes.func,\n  onFocusParent: PropTypes.func,\n  onTitleClick: PropTypes.func,\n  onSiblingsExpand: PropTypes.func,\n  expanded: PropTypes.bool,\n  parent: PropTypes.string,\n  renderItemTitle: PropTypes.func,\n  treeSize: PropTypes.number,\n  title: customPropTypes.itemShorthand,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  indeterminate: PropTypes.bool\n});\nTreeItem.defaultProps = {\n  accessibility: treeItemBehavior\n};\nTreeItem.handledProps = Object.keys(TreeItem.propTypes);\nTreeItem.create = createShorthandFactory({\n  Component: TreeItem,\n  mappedProp: 'title'\n});\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\n\nexport default withSafeTypeForAs(TreeItem);","map":{"version":3,"sources":["components/Tree/TreeItem.tsx"],"names":["treeItemClassName","TreeItem","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","contentRef","design","title","renderItemTitle","expanded","level","index","styles","variables","treeSize","selectionIndicator","selectableParent","selected","selectable","indeterminate","id","props","hasSubtreeItem","hasSubtree","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","getA11Props","useAccessibility","actionHandlers","performClick","e","handleTitleClick","focusParent","handleFocusParent","collapse","expand","focusFirstChild","handleFocusFirstChild","expandSiblings","handleSiblingsExpand","performSelection","handleSelection","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleTitleOverrides","onClick","ElementType","getElementType","unhandledProps","useUnhandledProps","element","forElements","childrenExist","defaultProps","as","render","overrideProps","elementWithRef","content","customPropTypes","PropTypes","items","parent","bool","treeItemBehavior","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, treeItemBehavior, TreeItemBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport TreeTitle, { TreeTitleProps } from './TreeTitle';\nimport { BoxProps } from '../Box/Box';\nimport { hasSubtree, TreeContext } from './utils';\n\nexport interface TreeItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeItemBehaviorProps>;\n\n  /** Ref for the item DOM element. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /** Id needed to identify this item inside the Tree. */\n  id: string;\n\n  /** The index of the item among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Array of props for sub tree. */\n  items?: ShorthandCollection<TreeItemProps>;\n\n  /** Level of the tree/subtree that contains this item. */\n  level?: number;\n\n  /** Called when the item's first child is about to be focused. */\n  onFocusFirstChild?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's parent is about to be focused. */\n  onFocusParent?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when a tree title is clicked. */\n  onTitleClick?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's siblings are about to be expanded. */\n  onSiblingsExpand?: ComponentEventHandler<TreeItemProps>;\n\n  /** Whether or not the item is in the expanded state. Only makes sense if item has children items. */\n  expanded?: boolean;\n\n  /** The id of the parent tree item, if any. */\n  parent?: string;\n\n  /**\n   * A custom render iterator for rendering each tree title.\n   * The default component, props, and children are available for each tree title.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /** Size of the tree/subtree that contains this item. */\n  treeSize?: number;\n\n  /** Properties for TreeTitle. */\n  title?: ShorthandValue<TreeTitleProps>;\n\n  /** Whether or not the item can be selectable. */\n  selectable?: boolean;\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** Whether or not tree item is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  indeterminate?: boolean;\n}\n\nexport type TreeItemStylesProps = Required<Pick<TreeItemProps, 'level'>>;\nexport const treeItemClassName = 'ui-tree__item';\n\nconst TreeItem: React.FC<WithAsProp<TreeItemProps>> & FluentComponentStaticProps<TreeItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TreeItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    contentRef,\n    design,\n    title,\n    renderItemTitle,\n    expanded,\n    level,\n    index,\n    styles,\n    variables,\n    treeSize,\n    selectionIndicator,\n    selectableParent,\n    selected,\n    selectable,\n    indeterminate,\n    id,\n  } = props;\n\n  const hasSubtreeItem = hasSubtree(props);\n\n  const { onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick } = React.useContext(TreeContext);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      focusParent: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusParent(e);\n      },\n      collapse: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      expand: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      focusFirstChild: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusFirstChild(e);\n      },\n      expandSiblings: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleSiblingsExpand(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleSelection(e);\n      },\n    },\n    debugName: TreeItem.displayName,\n    mapPropsToBehavior: () => ({\n      expanded,\n      level,\n      index,\n      hasSubtree: hasSubtreeItem,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TreeItemStylesProps>(TreeItem.displayName, {\n    className: treeItemClassName,\n    mapPropsToStyles: () => ({\n      level,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const handleSelection = e => {\n    onTitleClick(e, props, true);\n    _.invoke(props, 'onTitleClick', e, props);\n  };\n\n  const handleTitleClick = e => {\n    onTitleClick(e, props);\n    _.invoke(props, 'onTitleClick', e, props);\n  };\n  const handleFocusFirstChild = e => {\n    _.invoke(props, 'onFocusFirstChild', e, props);\n    onFocusFirstChild(props.id);\n  };\n  const handleFocusParent = e => {\n    _.invoke(props, 'onFocusParent', e, props);\n    onFocusParent(props.parent);\n  };\n  const handleSiblingsExpand = e => {\n    _.invoke(props, 'onSiblingsExpand', e, props);\n    onSiblingsExpand(e, props);\n  };\n  const handleTitleOverrides = (predefinedProps: TreeTitleProps) => ({\n    onClick: (e, titleProps) => {\n      handleTitleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeItem.handledProps, props);\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        id,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : TreeTitle.create(title, {\n            defaultProps: () =>\n              getA11Props('title', {\n                hasSubtree: hasSubtreeItem,\n                as: hasSubtreeItem ? 'span' : 'a',\n                level,\n                treeSize,\n                expanded,\n                index,\n                selected,\n                selectable,\n                ...(hasSubtreeItem && !selectableParent && { selectable: false }),\n                ...(selectableParent && { indeterminate }),\n                selectableParent,\n                selectionIndicator,\n              }),\n            render: renderItemTitle,\n            overrideProps: handleTitleOverrides,\n          })}\n    </ElementType>\n  );\n\n  const elementWithRef = contentRef ? <Ref innerRef={contentRef}>{element}</Ref> : element;\n  setEnd();\n\n  return elementWithRef;\n};\n\nTreeItem.displayName = 'TreeItem';\n\nTreeItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  contentRef: customPropTypes.ref,\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  level: PropTypes.number,\n  onFocusFirstChild: PropTypes.func,\n  onFocusParent: PropTypes.func,\n  onTitleClick: PropTypes.func,\n  onSiblingsExpand: PropTypes.func,\n  expanded: PropTypes.bool,\n  parent: PropTypes.string,\n  renderItemTitle: PropTypes.func,\n  treeSize: PropTypes.number,\n  title: customPropTypes.itemShorthand,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n};\nTreeItem.defaultProps = {\n  accessibility: treeItemBehavior,\n};\nTreeItem.handledProps = Object.keys(TreeItem.propTypes) as any;\n\nTreeItem.create = createShorthandFactory({\n  Component: TreeItem,\n  mappedProp: 'title',\n});\n\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport default withSafeTypeForAs<typeof TreeItem, TreeItemProps, 'li'>(TreeItem);\n"]},"metadata":{},"sourceType":"module"}