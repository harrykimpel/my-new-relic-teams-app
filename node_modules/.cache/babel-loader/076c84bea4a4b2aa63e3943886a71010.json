{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponent, childrenExist, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nexport var segmentClassName = 'ui-segment';\n\nvar Segment = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Segment, _UIComponent);\n\n  function Segment() {\n    _classCallCheck(this, Segment);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Segment).apply(this, arguments));\n  }\n\n  _createClass(Segment, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          content = _this$props.content;\n      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), accessibility.attributes.root, unhandledProps, {\n        className: classes.root\n      }), childrenExist(children) ? children : Box.create(content));\n    }\n  }]);\n\n  return Segment;\n}(UIComponent);\n/**\n * A Segment visually groups related content.\n */\n\n\n_defineProperty(Segment, \"deprecated_className\", segmentClassName);\n\n_defineProperty(Segment, \"displayName\", 'Segment');\n\n_defineProperty(Segment, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand',\n  color: true\n}), {\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n  rtlAttributes: PropTypes.func\n}));\n\n_defineProperty(Segment, \"defaultProps\", {\n  as: 'div'\n});\n\nexport default withSafeTypeForAs(Segment);","map":{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["segmentClassName","Segment","UIComponent","content","color","disabled","PropTypes","bool","inverted","rtlAttributes","func","as","accessibility","ElementType","classes","unhandledProps","children","forElements","root","childrenExist","Box","withSafeTypeForAs"],"mappings":";;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,SAAA,WAAA,EAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAYA,SAAA,iBAAA,QAAA,aAAA;AACA,OAAA,GAAA,MAAA,YAAA;AAmBA,OAAO,IAAMA,gBAAgB,GAAtB,YAAA;;IAEDC,O;;;;;;;;;;;0CAmBqE;AAAA,UAAvDW,aAAuD,GAAA,IAAA,CAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,GAAA,IAAA,CAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,GAAA,IAAA,CAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAAA,UAAA,WAAA,GACzC,KADyC,KAAA;AAAA,UAC/DC,QAD+D,GAAA,WAAA,CAAA,QAAA;AAAA,UACrDb,OADqD,GAAA,WAAA,CAAA,OAAA;AAGvE,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEc,QAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,OAA/B,CADN,EAEML,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAAA,cAAA,EAAA;AAIE,QAAA,SAAS,EAAEE,OAAO,CAACI;AAJrB,OAAA,CAAA,EAMGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAAqCC,GAAG,CAAHA,MAAAA,CAP1C,OAO0CA,CANxC,CADF;AAUD;;;;EAhCmBlB,W;AAmCtB;;;;;gBAnCMD,O,0BAC0BD,gB;;gBAD1BC,O,iBAGiB,S;;gBAHjBA,O,iCAMC,eAAe,CAAf,YAAA,CAA6B;AAC9BE,EAAAA,OAAO,EADuB,WAAA;AAE9BC,EAAAA,KAAK,EAAE;AAFuB,CAA7B,C;AAIHC,EAAAA,QAAQ,EAAEC,SAAS,CAACC,I;AACpBC,EAAAA,QAAQ,EAAEF,SAAS,CAACC,I;AACpBE,EAAAA,aAAa,EAAEH,SAAS,CAACI;;;gBAZvBT,O,kBAekB;AACpBU,EAAAA,EAAE,EAAE;AADgB,C;;AAuBxB,eAAeU,iBAAiB,CAAhC,OAAgC,CAAhC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport const segmentClassName = 'ui-segment';\n\nclass Segment extends UIComponent<WithAsProp<SegmentProps>, any> {\n  static deprecated_className = segmentClassName;\n\n  static displayName = 'Segment';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: 'shorthand',\n      color: true,\n    }),\n    disabled: PropTypes.bool,\n    inverted: PropTypes.bool,\n    rtlAttributes: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : Box.create(content)}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * A Segment visually groups related content.\n */\nexport default withSafeTypeForAs<typeof Segment, SegmentProps>(Segment);\n"]},"metadata":{},"sourceType":"module"}