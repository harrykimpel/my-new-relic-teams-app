{"ast":null,"code":"import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getElementType, useStyles, useUnhandledProps, useTelemetry, useAccessibility } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var videoClassName = 'ui-video';\nexport var Video = function Video(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Video.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var controls = props.controls,\n      autoPlay = props.autoPlay,\n      loop = props.loop,\n      poster = props.poster,\n      src = props.src,\n      muted = props.muted,\n      variables = props.variables,\n      className = props.className,\n      design = props.design,\n      styles = props.styles;\n  var ElementType = getElementType(props);\n  var videoRef = React.createRef();\n  var unhandledProps = useUnhandledProps(Video.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName\n  });\n  React.useEffect(function () {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  var _useStyles = useStyles(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        variables: variables,\n        design: design,\n        styles: styles\n      };\n    }\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(Ref, {\n    innerRef: videoRef\n  }, React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    autoPlay: autoPlay,\n    controls: controls,\n    loop: loop,\n    poster: poster,\n    src: src\n  }, unhandledProps))));\n  setEnd();\n  return element;\n};\nVideo.create = createShorthandFactory({\n  Component: Video,\n  mappedProp: 'src'\n});\nVideo.displayName = 'Video';\nVideo.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string\n});\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false\n};\nVideo.handledProps = Object.keys(Video.propTypes);\n/**\n * A Video provides ability to embed video content.\n */\n\nexport default withSafeTypeForAs(Video);","map":{"version":3,"sources":["components/Video/Video.tsx"],"names":["videoClassName","Video","context","React","setStart","setEnd","useTelemetry","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","props","ElementType","getElementType","videoRef","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","displayName","classes","useStyles","mapPropsToInlineStyles","element","createShorthandFactory","Component","mappedProp","children","content","PropTypes","string","as","accessibility","Object","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { getElementType, useStyles, useUnhandledProps, useTelemetry, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\nexport const Video: React.FC<WithAsProp<VideoProps>> & FluentComponentStaticProps<VideoProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const ElementType = getElementType(props);\n  const videoRef = React.createRef<HTMLVideoElement>();\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport default withSafeTypeForAs<typeof Video, VideoProps, 'video'>(Video);\n"]},"metadata":{},"sourceType":"module"}