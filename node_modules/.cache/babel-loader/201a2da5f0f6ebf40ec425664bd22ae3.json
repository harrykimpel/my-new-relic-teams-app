{"ast":null,"code":"import * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var cardBodyClassName = 'ui-card__body';\n\nvar CardBody = function CardBody(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CardBody.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      fitted = props.fitted;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(CardBody.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardBody.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(CardBody.displayName, {\n    className: cardBodyClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        fitted: fitted\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), children);\n  setEnd();\n  return element;\n};\n\nCardBody.displayName = 'CardBody';\nCardBody.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  fitted: PropTypes.bool\n});\nCardBody.handledProps = Object.keys(CardBody.propTypes);\nCardBody.create = createShorthandFactory({\n  Component: CardBody\n});\n/**\n * A CardBody is used to display data in Card body.\n */\n\nexport default withSafeTypeForAs(CardBody);","map":{"version":3,"sources":["components/Card/CardBody.tsx"],"names":["cardBodyClassName","CardBody","context","React","setStart","setEnd","useTelemetry","className","design","styles","variables","children","fitted","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","commonPropTypes","PropTypes","bool","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,QAAA,aAAA;AAEA,SAAA,eAAA,EAAA,sBAAA,QAAA,aAAA;AACA,SAAA,YAAA,EAAA,SAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,QAAA,0BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAaA,OAAO,IAAMA,iBAAiB,GAAvB,eAAA;;AAEP,IAAMC,QAAyF,GAAG,SAA5FA,QAA4F,CAAA,KAAA,EAAS;AACzG,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AADyG,MAAA,aAAA,GAE5EG,YAAY,CAACL,QAAQ,CAAT,WAAA,EAAuBC,OAAO,CAFkC,SAEhE,CAFgE;AAAA,MAEjGE,QAFiG,GAAA,aAAA,CAAA,QAAA;AAAA,MAEvFC,MAFuF,GAAA,aAAA,CAAA,MAAA;;AAGzGD,EAAAA,QAAQ;AAHiG,MAKjGG,SALiG,GAKtCM,KALsC,CAAA,SAAA;AAAA,MAKtFL,MALsF,GAKtCK,KALsC,CAAA,MAAA;AAAA,MAK9EJ,MAL8E,GAKtCI,KALsC,CAAA,MAAA;AAAA,MAKtEH,SALsE,GAKtCG,KALsC,CAAA,SAAA;AAAA,MAK3DF,QAL2D,GAKtCE,KALsC,CAAA,QAAA;AAAA,MAKjDD,MALiD,GAKtCC,KALsC,CAAA,MAAA;AAMzG,MAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAAChB,QAAQ,CAAT,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMiB,YAAY,GAAGC,gBAAgB,CAACN,KAAK,CAAN,aAAA,EAAsB;AACzDO,IAAAA,SAAS,EAAEnB,QAAQ,CADsC,WAAA;AAEzDoB,IAAAA,GAAG,EAAEnB,OAAO,CAACmB;AAF4C,GAAtB,CAArC;;AARyG,MAAA,UAAA,GAarFE,SAAS,CAAsBtB,QAAQ,CAA9B,WAAA,EAA4C;AACvEM,IAAAA,SAAS,EAD8D,iBAAA;AAEvEiB,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AAAEZ,QAAAA,MAAM,EAANA;AAAF,OAAP;AAFqD,KAAA;AAGvEa,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BlB,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAH+C,KAAA;AASvEW,IAAAA,GAAG,EAAEnB,OAAO,CAACmB;AAT0D,GAA5C,CAb4E;AAAA,MAajGC,OAbiG,GAAA,UAAA,CAAA,OAAA;;AAyBzG,MAAMI,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMR,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdX,IAAAA,SAAS,EAAEe,OAAO,CAACK;AADL,GAAA,EADlB,cACkB,CAAA,CADlB,EADF,QACE,CADF;AAUAtB,EAAAA,MAAM;AACN,SAAA,OAAA;AApCF,CAAA;;AAuCAJ,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AAEAA,QAAQ,CAARA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK2B,eAAe,CADpB3B,YACK2B,EADL3B,EAAAA;AAEEW,EAAAA,MAAM,EAAEiB,SAAS,CAACC;AAFpB7B,CAAAA,CAAAA;AAKAA,QAAQ,CAARA,YAAAA,GAAwB8B,MAAM,CAANA,IAAAA,CAAY9B,QAAQ,CAA5CA,SAAwB8B,CAAxB9B;AAEAA,QAAQ,CAARA,MAAAA,GAAkB+B,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAEhC;AAAb,CAAD,CAAxCA;AAEA;;;;AAGA,eAAeiC,iBAAiB,CAAhC,QAAgC,CAAhC","sourcesContent":["import * as React from 'react';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface CardBodyProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A body can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardBodyStylesProps = Pick<CardBodyProps, 'fitted'>;\nexport const cardBodyClassName = 'ui-card__body';\n\nconst CardBody: React.FC<WithAsProp<CardBodyProps>> & FluentComponentStaticProps<CardBodyProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardBody.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardBody.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardBody.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardBodyStylesProps>(CardBody.displayName, {\n    className: cardBodyClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardBody.displayName = 'CardBody';\n\nCardBody.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.bool,\n};\n\nCardBody.handledProps = Object.keys(CardBody.propTypes) as any;\n\nCardBody.create = createShorthandFactory({ Component: CardBody });\n\n/**\n * A CardBody is used to display data in Card body.\n */\nexport default withSafeTypeForAs<typeof CardBody, CardBodyProps, 'div'>(CardBody);\n"]},"metadata":{},"sourceType":"module"}