{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport _isArray from \"lodash/isArray\";\nimport _invoke from \"lodash/invoke\";\nimport { hierarchicalTreeBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport HierarchicalTreeItem from './HierarchicalTreeItem';\nimport { AutoControlledComponent, childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nexport var hierarchicalTreeClassName = 'ui-hierarchicaltree';\n\nvar HierarchicalTree = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(HierarchicalTree, _AutoControlledCompon);\n\n  function HierarchicalTree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HierarchicalTree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HierarchicalTree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      expandSiblings: function expandSiblings(e) {\n        var _this$props = _this.props,\n            items = _this$props.items,\n            exclusive = _this$props.exclusive;\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (exclusive) {\n          return;\n        }\n\n        var activeIndex = items ? items.reduce(function (acc, item, index) {\n          if (item['items']) {\n            return [].concat(_toConsumableArray(acc), [index]);\n          }\n\n          return acc;\n        }, []) : [];\n\n        _this.trySetActiveIndexAndTriggerEvent(e, activeIndex);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trySetActiveIndexAndTriggerEvent\", function (e, activeIndex) {\n      _this.setState({\n        activeIndex: activeIndex\n      });\n\n      _invoke(_this.props, 'onActiveIndexChange', e, Object.assign({}, _this.props, {\n        activeIndex: activeIndex\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeNewIndex\", function (treeItemProps) {\n      var index = treeItemProps.index,\n          items = treeItemProps.items;\n\n      var activeIndexes = _this.getActiveIndexes();\n\n      var exclusive = _this.props.exclusive;\n\n      if (!items) {\n        return activeIndexes;\n      }\n\n      if (exclusive) return index; // check to see if index is in array, and remove it, if not then add it\n\n      return _includes(activeIndexes, index) ? _without(activeIndexes, index) : [].concat(_toConsumableArray(activeIndexes), [index]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTreeItemOverrides\", function (predefinedProps) {\n      return {\n        onTitleClick: function onTitleClick(e, treeItemProps) {\n          _this.trySetActiveIndexAndTriggerEvent(e, _this.computeNewIndex(treeItemProps));\n\n          _invoke(predefinedProps, 'onTitleClick', e, treeItemProps);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(HierarchicalTree, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState(_ref) {\n      var exclusive = _ref.exclusive;\n      return {\n        activeIndex: exclusive ? -1 : []\n      };\n    }\n  }, {\n    key: \"getActiveIndexes\",\n    value: function getActiveIndexes() {\n      var activeIndex = this.state.activeIndex;\n      return _isArray(activeIndex) ? activeIndex : [activeIndex];\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          renderItemTitle = _this$props2.renderItemTitle,\n          exclusive = _this$props2.exclusive;\n      var activeIndex = this.state.activeIndex;\n      var activeIndexes = this.getActiveIndexes();\n      return _map(items, function (item, index) {\n        return HierarchicalTreeItem.create(item, {\n          defaultProps: function defaultProps() {\n            return {\n              index: index,\n              exclusive: exclusive,\n              renderItemTitle: renderItemTitle,\n              open: exclusive ? index === activeIndex : _includes(activeIndexes, index)\n            };\n          },\n          overrideProps: _this2.handleTreeItemOverrides\n        });\n      });\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref2) {\n      var ElementType = _ref2.ElementType,\n          classes = _ref2.classes,\n          accessibility = _ref2.accessibility,\n          unhandledProps = _ref2.unhandledProps,\n          styles = _ref2.styles,\n          variables = _ref2.variables;\n      var children = this.props.children;\n      return React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderContent());\n    }\n  }]);\n\n  return HierarchicalTree;\n}(AutoControlledComponent);\n\n_defineProperty(HierarchicalTree, \"create\", void 0);\n\n_defineProperty(HierarchicalTree, \"displayName\", 'HierarchicalTree');\n\n_defineProperty(HierarchicalTree, \"deprecated_className\", hierarchicalTreeClassName);\n\n_defineProperty(HierarchicalTree, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  exclusive: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  renderItemTitle: PropTypes.func,\n  onActiveIndexChange: PropTypes.func\n}));\n\n_defineProperty(HierarchicalTree, \"defaultProps\", {\n  as: 'ul',\n  accessibility: hierarchicalTreeBehavior\n});\n\n_defineProperty(HierarchicalTree, \"autoControlledProps\", ['activeIndex']);\n\nHierarchicalTree.create = createShorthandFactory({\n  Component: HierarchicalTree,\n  mappedArrayProp: 'items'\n});\n/**\n * (DEPRECATED) A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\n\nexport default withSafeTypeForAs(HierarchicalTree);","map":{"version":3,"sources":["components/HierarchicalTree/HierarchicalTree.tsx"],"names":["hierarchicalTreeClassName","HierarchicalTree","AutoControlledComponent","content","activeIndex","customPropTypes","PropTypes","defaultActiveIndex","exclusive","bool","items","collectionShorthand","renderItemTitle","func","onActiveIndexChange","as","accessibility","hierarchicalTreeBehavior","expandSiblings","e","item","index","treeItemProps","activeIndexes","onTitleClick","defaultProps","open","overrideProps","handleTreeItemOverrides","ElementType","classes","unhandledProps","styles","variables","children","root","forElements","applyAccessibilityKeyHandlers","childrenExist","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":";;;;;;;;;;;;;;AAAA,SAAA,wBAAA,QAAA,yBAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,oBAAA,MAAA,wBAAA;AAEA,SAAA,uBAAA,EAAA,aAAA,EAAA,eAAA,EAAA,sBAAA,EAAA,gBAAA,EAAA,6BAAA,QAAA,aAAA;AAWA,SAAA,iBAAA,QAAA,aAAA;AA8CA,OAAO,IAAMA,yBAAyB,GAA/B,qBAAA;;IAEDC,gB;;;;;;;;;;;;;;;;qEAgCa;AACfiB,MAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,CAAA,EAAK;AAAA,YAAA,WAAA,GACU,KAAA,CADV,KAAA;AAAA,YACXR,KADW,GAAA,WAAA,CAAA,KAAA;AAAA,YACJF,SADI,GAAA,WAAA,CAAA,SAAA;AAEnBW,QAAAA,CAAC,CAADA,cAAAA;AACAA,QAAAA,CAAC,CAADA,eAAAA;;AAEA,YAAA,SAAA,EAAe;AACb;AACD;;AACD,YAAMf,WAAW,GAAGM,KAAK,GACrB,KAAK,CAAL,MAAA,CAAuB,UAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAsB;AAC3C,cAAIU,IAAI,CAAR,OAAQ,CAAR,EAAmB;AACjB,mBAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA;AACD;;AACD,iBAAA,GAAA;AAJF,SAAA,EADqB,EACrB,CADqB,GAAzB,EAAA;;AAQA,QAAA,KAAA,CAAA,gCAAA,CAAA,CAAA,EAAA,WAAA;AACD;AAlBc,K;;uFAqBkB,UAAA,CAAA,EAAA,WAAA,EAAoB;AACrD,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEhB,QAAAA,WAAW,EAAXA;AAAF,OAAd;;AACA,MAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAoD,KAAA,CAApD,KAAA,EAAA;AAAgEA,QAAAA,WAAW,EAAXA;AAAhE,OAAA,CAAA,CAAA;;;sEAcgB,UAAA,aAAA,EAA8C;AAAA,UACtDiB,KADsD,GACrCC,aADqC,CAAA,KAAA;AAAA,UAC/CZ,KAD+C,GACrCY,aADqC,CAAA,KAAA;;AAE9D,UAAMC,aAAa,GAAG,KAAA,CAAtB,gBAAsB,EAAtB;;AAF8D,UAGtDf,SAHsD,GAGxC,KAAA,CAHwC,KAGxC,CAHwC,SAAA;;AAI9D,UAAI,CAAJ,KAAA,EAAY;AACV,eAAA,aAAA;AACD;;AAED,UAAA,SAAA,EAAe,OAR+C,KAQ/C,CAR+C,CAU9D;;AACA,aAAO,SAAA,CAAA,aAAA,EAAA,KAAA,CAAA,GAAmC,QAAA,CAAA,aAAA,EAAnC,KAAmC,CAAnC,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,EAAA,CAAP,KAAO,CAAA,CAAP;;;8EAGwB,UAAA,eAAA,EAAA;AAAA,aAAiD;AACzEgB,QAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAA,aAAA,EAAuE;AACnF,UAAA,KAAA,CAAA,gCAAA,CAAA,CAAA,EAAyC,KAAA,CAAA,eAAA,CAAzC,aAAyC,CAAzC;;AACA,UAAA,OAAA,CAAA,eAAA,EAAA,cAAA,EAAA,CAAA,EAAA,aAAA,CAAA;AACD;AAJwE,OAAjD;;;;;;;;wDAzB0C;AAAA,UAApChB,SAAoC,GAAA,IAAA,CAApCA,SAAoC;AAClE,aAAO;AACLJ,QAAAA,WAAW,EAAEI,SAAS,GAAG,CAAH,CAAA,GAAQ;AADzB,OAAP;AAGD;;;uCAE4B;AAAA,UACnBJ,WADmB,GACH,KADG,KACH,CADG,WAAA;AAE3B,aAAO,QAAA,CAAA,WAAA,CAAA,GAAA,WAAA,GAAuC,CAA9C,WAA8C,CAA9C;AACD;;;oCAuBe;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GACgC,KADhC,KAAA;AAAA,UACNM,KADM,GAAA,YAAA,CAAA,KAAA;AAAA,UACCE,eADD,GAAA,YAAA,CAAA,eAAA;AAAA,UACkBJ,SADlB,GAAA,YAAA,CAAA,SAAA;AAAA,UAENJ,WAFM,GAEU,KAFV,KAEU,CAFV,WAAA;AAGd,UAAMmB,aAAa,GAAG,KAAtB,gBAAsB,EAAtB;AAEA,aAAO,IAAA,CAAA,KAAA,EAAa,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,eAClB,oBAAoB,CAApB,MAAA,CAAA,IAAA,EAAkC;AAChCE,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAO;AACnBJ,cAAAA,KAAK,EADc,KAAA;AAEnBb,cAAAA,SAAS,EAFU,SAAA;AAGnBI,cAAAA,eAAe,EAHI,eAAA;AAInBc,cAAAA,IAAI,EAAElB,SAAS,GAAGa,KAAK,KAAR,WAAA,GAA2B,SAAA,CAAA,aAAA,EAAA,KAAA;AAJvB,aAAP;AADkB,WAAA;AAOhCM,UAAAA,aAAa,EAAE,MAAI,CAACC;AAPY,SAAlC,CADkB;AAApB,OAAO,CAAP;AAWD;;;2CAE2F;AAAA,UAA1EC,WAA0E,GAAA,KAAA,CAA1EA,WAA0E;AAAA,UAA7DC,OAA6D,GAAA,KAAA,CAA7DA,OAA6D;AAAA,UAApDd,aAAoD,GAAA,KAAA,CAApDA,aAAoD;AAAA,UAArCe,cAAqC,GAAA,KAAA,CAArCA,cAAqC;AAAA,UAArBC,MAAqB,GAAA,KAAA,CAArBA,MAAqB;AAAA,UAAbC,SAAa,GAAA,KAAA,CAAbA,SAAa;AAAA,UAClFC,QADkF,GACrE,KADqE,KACrE,CADqE,QAAA;AAG1F,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,SAAS,EAAEJ,OAAO,CAACK;AADrB,OAAA,EAEMnB,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAGM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEoB,QAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,OAA/B,CAHN,EAAA,cAAA,EAKMC,6BAA6B,CAACrB,aAAa,CAAbA,WAAAA,CAAD,IAAA,EALnC,cAKmC,CALnC,CAAA,EAOGsB,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAAqC,KAR1C,aAQ0C,EAPxC,CADF;AAWD;;;;EA1H4BpC,uB;;gBAAzBD,gB;;gBAAAA,gB,iBAGiB,kB;;gBAHjBA,gB,0BAK0BD,yB;;gBAL1BC,gB,iCAQC,eAAe,CAAf,YAAA,CAA6B;AAC9BE,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHC,EAAAA,WAAW,EAAEC,eAAe,CAAfA,KAAAA,CAAsB,CACjCA,eAAe,CAAfA,QAAAA,CAAyB,CADQ,UACR,CAAzBA,CADiC,EAEjCC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA5B,MAACA,CAAD,EAAsCA,SAAS,CAFxDD,MAES,CAApBC,CAFiC,CAAtBD,C;AAIbE,EAAAA,kBAAkB,EAAEF,eAAe,CAAfA,KAAAA,CAAsB,CACxCA,eAAe,CAAfA,QAAAA,CAAyB,CADe,UACf,CAAzBA,CADwC,EAExCC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA5B,MAACA,CAAD,EAAsCA,SAAS,CAFjDD,MAEE,CAApBC,CAFwC,CAAtBD,C;AAIpBG,EAAAA,SAAS,EAAEF,SAAS,CAACG,I;AACrBC,EAAAA,KAAK,EAAEL,eAAe,CAACM,mB;AACvBC,EAAAA,eAAe,EAAEN,SAAS,CAACO,I;AAC3BC,EAAAA,mBAAmB,EAAER,SAAS,CAACO;;;gBAtB7BZ,gB,kBAyBkB;AACpBc,EAAAA,EAAE,EADkB,IAAA;AAEpBC,EAAAA,aAAa,EAAEC;AAFK,C;;gBAzBlBhB,gB,yBA8ByB,CAAA,aAAA,C;;AA+F/BA,gBAAgB,CAAhBA,MAAAA,GAA0BsC,sBAAsB,CAAC;AAC/CC,EAAAA,SAAS,EADsC,gBAAA;AAE/CC,EAAAA,eAAe,EAAE;AAF8B,CAAD,CAAhDxC;AAKA;;;;;;;AAMA,eAAeyC,iBAAiB,CAAhC,gBAAgC,CAAhC","sourcesContent":["import { Accessibility, hierarchicalTreeBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport HierarchicalTreeItem, { HierarchicalTreeItemProps } from './HierarchicalTreeItem';\nimport { HierarchicalTreeTitleProps } from './HierarchicalTreeTitle';\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandValue,\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ComponentEventHandler,\n} from '../../types';\n\nexport interface HierarchicalTreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active subtree. */\n  activeIndex?: number[] | number;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one subtree to be open at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ShorthandCollection<HierarchicalTreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<HierarchicalTreeTitleProps>;\n\n  /** Called when activeIndex changes.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveIndexChange?: ComponentEventHandler<HierarchicalTreeProps>;\n}\n\nexport interface HierarchicalTreeState {\n  activeIndex: number[] | number;\n}\n\nexport const hierarchicalTreeClassName = 'ui-hierarchicaltree';\n\nclass HierarchicalTree extends AutoControlledComponent<WithAsProp<HierarchicalTreeProps>, HierarchicalTreeState> {\n  static create: ShorthandFactory<HierarchicalTreeProps>;\n\n  static displayName = 'HierarchicalTree';\n\n  static deprecated_className = hierarchicalTreeClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    defaultActiveIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    exclusive: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    renderItemTitle: PropTypes.func,\n    onActiveIndexChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'ul',\n    accessibility: hierarchicalTreeBehavior,\n  };\n\n  static autoControlledProps = ['activeIndex'];\n\n  actionHandlers = {\n    expandSiblings: e => {\n      const { items, exclusive } = this.props;\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (exclusive) {\n        return;\n      }\n      const activeIndex = items\n        ? items.reduce<number[]>((acc, item, index) => {\n            if (item['items']) {\n              return [...acc, index];\n            }\n            return acc;\n          }, [])\n        : [];\n      this.trySetActiveIndexAndTriggerEvent(e, activeIndex);\n    },\n  };\n\n  trySetActiveIndexAndTriggerEvent = (e, activeIndex) => {\n    this.setState({ activeIndex });\n    _.invoke(this.props, 'onActiveIndexChange', e, { ...this.props, activeIndex });\n  };\n\n  getInitialAutoControlledState({ exclusive }): HierarchicalTreeState {\n    return {\n      activeIndex: exclusive ? -1 : [],\n    };\n  }\n\n  getActiveIndexes(): number[] {\n    const { activeIndex } = this.state;\n    return _.isArray(activeIndex) ? activeIndex : [activeIndex];\n  }\n\n  computeNewIndex = (treeItemProps: HierarchicalTreeItemProps) => {\n    const { index, items } = treeItemProps;\n    const activeIndexes = this.getActiveIndexes();\n    const { exclusive } = this.props;\n    if (!items) {\n      return activeIndexes;\n    }\n\n    if (exclusive) return index;\n\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndexes, index) ? _.without(activeIndexes, index) : [...activeIndexes, index];\n  };\n\n  handleTreeItemOverrides = (predefinedProps: HierarchicalTreeItemProps) => ({\n    onTitleClick: (e: React.SyntheticEvent, treeItemProps: HierarchicalTreeItemProps) => {\n      this.trySetActiveIndexAndTriggerEvent(e, this.computeNewIndex(treeItemProps));\n      _.invoke(predefinedProps, 'onTitleClick', e, treeItemProps);\n    },\n  });\n\n  renderContent() {\n    const { items, renderItemTitle, exclusive } = this.props;\n    const { activeIndex } = this.state;\n    const activeIndexes = this.getActiveIndexes();\n\n    return _.map(items, (item: ShorthandValue<HierarchicalTreeItemProps>, index: number) =>\n      HierarchicalTreeItem.create(item, {\n        defaultProps: () => ({\n          index,\n          exclusive,\n          renderItemTitle,\n          open: exclusive ? index === activeIndex : _.includes(activeIndexes, index),\n        }),\n        overrideProps: this.handleTreeItemOverrides,\n      }),\n    );\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, variables }) {\n    const { children } = this.props;\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : this.renderContent()}\n      </ElementType>\n    );\n  }\n}\n\nHierarchicalTree.create = createShorthandFactory({\n  Component: HierarchicalTree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * (DEPRECATED) A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport default withSafeTypeForAs<typeof HierarchicalTree, HierarchicalTreeProps, 'ul'>(HierarchicalTree);\n"]},"metadata":{},"sourceType":"module"}