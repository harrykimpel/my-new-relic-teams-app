{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneTabbableElements } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\n/**\n * @description\n * Behavior for a card component with multiple focusable child elements.\n * @specification\n * Adds role='group'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Triggers 'focusCard' action with 'Escape' on 'root'.\n */\n\nvar cardChildrenFocusableBehavior = function cardChildrenFocusableBehavior(props) {\n  var _root;\n\n  return {\n    attributes: {\n      root: (_root = {\n        role: 'group',\n        tabIndex: 0\n      }, _defineProperty(_root, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_root, 'aria-disabled', props.disabled), _root)\n    },\n    focusZone: {\n      props: {\n        handleTabKey: FocusZoneTabbableElements.all,\n        isCircularNavigation: true\n      }\n    },\n    keyActions: {\n      root: {\n        focusCard: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Escape\n          }]\n        }\n      }\n    }\n  };\n};\n\nexport default cardChildrenFocusableBehavior;","map":{"version":3,"sources":["behaviors/Card/cardChildrenFocusableBehavior.ts"],"names":["cardChildrenFocusableBehavior","attributes","root","role","tabIndex","props","focusZone","handleTabKey","FocusZoneTabbableElements","isCircularNavigation","keyActions","focusCard","keyCombinations","keyCode","keyboardKey","Escape"],"mappings":";AAEA,SAAA,sBAAA,QAAA,kBAAA;AACA,SAAA,yBAAA,QAAA,uBAAA;AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA;;;;;;;;;;;AAUA,IAAMA,6BAA+D,GAAG,SAAlEA,6BAAkE,CAAA,KAAA,EAAK;AAAA,MAAA,KAAA;;AAAA,SAAK;AAChFC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,GAAA,KAAA,GAAA;AACFC,QAAAA,IAAI,EADF,OAAA;AAEFC,QAAAA,QAAQ,EAAE;AAFR,OAAA,EAAA,eAAA,CAAA,KAAA,EAAA,sBAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,eAAA,EAIeC,KAAK,CAJpB,QAAA,CAAA,EAAA,KAAA;AADM,KADoE;AAShFC,IAAAA,SAAS,EAAE;AACTD,MAAAA,KAAK,EAAE;AACLE,QAAAA,YAAY,EAAEC,yBAAyB,CADlC,GAAA;AAELC,QAAAA,oBAAoB,EAAE;AAFjB;AADE,KATqE;AAehFC,IAAAA,UAAU,EAAE;AACVR,MAAAA,IAAI,EAAE;AACJS,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADR;AADP;AADI;AAfoE,GAAL;AAA7E,CAAA;;AAwBA,eAAA,6BAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { CardBehaviorProps } from './cardBehavior';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneTabbableElements } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\n\n/**\n * @description\n * Behavior for a card component with multiple focusable child elements.\n * @specification\n * Adds role='group'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Triggers 'focusCard' action with 'Escape' on 'root'.\n */\nconst cardChildrenFocusableBehavior: Accessibility<CardBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'group',\n      tabIndex: 0,\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      'aria-disabled': props.disabled,\n    },\n  },\n  focusZone: {\n    props: {\n      handleTabKey: FocusZoneTabbableElements.all,\n      isCircularNavigation: true,\n    },\n  },\n  keyActions: {\n    root: {\n      focusCard: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n    },\n  },\n});\n\nexport default cardChildrenFocusableBehavior;\n"]},"metadata":{},"sourceType":"module"}