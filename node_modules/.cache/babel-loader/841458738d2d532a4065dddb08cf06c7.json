{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport _get from \"lodash/get\";\nimport { textAreaBehavior } from '@fluentui/accessibility';\nimport { withSafeTypeForAs } from '../../types';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useAutoControlled, getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var textAreaClassName = 'ui-textarea';\nexport var TextArea = function TextArea(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TextArea.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var disabled = props.disabled,\n      accessibility = props.accessibility,\n      inverted = props.inverted,\n      resize = props.resize,\n      fluid = props.fluid,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: ''\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      value = _useAutoControlled2[0],\n      setValue = _useAutoControlled2[1];\n\n  var unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        disabled: disabled\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        inverted: inverted,\n        resize: resize,\n        fluid: fluid,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n\n  var handleChange = function handleChange(e) {\n    var newValue = _get(e, 'target.value');\n\n    _invoke(props, 'onChange', e, Object.assign({}, props, {\n      value: newValue\n    }));\n\n    setValue(newValue);\n  };\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    value: value,\n    disabled: disabled,\n    onChange: handleChange\n  }, unhandledProps)));\n  setEnd();\n  return element;\n};\nTextArea.displayName = 'TextArea';\nTextArea.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool\n});\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior\n};\nTextArea.handledProps = Object.keys(TextArea.propTypes);\nTextArea.create = createShorthandFactory({\n  Component: TextArea\n});\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\n\nexport default withSafeTypeForAs(TextArea);","map":{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaClassName","TextArea","context","React","setStart","setEnd","useTelemetry","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","props","value","setValue","useAutoControlled","defaultValue","initialValue","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","handleChange","newValue","element","onChange","content","PropTypes","bool","as","textAreaBehavior","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\nexport const TextArea: React.FC<WithAsProp<TextAreaProps>> & FluentComponentStaticProps<TextAreaProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport default withSafeTypeForAs<typeof TextArea, TextAreaProps, 'textarea'>(TextArea);\n"]},"metadata":{},"sourceType":"module"}