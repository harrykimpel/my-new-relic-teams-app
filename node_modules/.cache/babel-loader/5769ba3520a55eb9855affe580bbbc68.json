{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { checkboxBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStateManager, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport Text from '../Text/Text';\nexport var checkboxClassName = 'ui-checkbox';\nexport var checkboxSlotClassNames = {\n  label: \"\".concat(checkboxClassName, \"__label\"),\n  indicator: \"\".concat(checkboxClassName, \"__indicator\")\n};\n\nvar Checkbox = function Checkbox(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Checkbox.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var checked = props.checked,\n      className = props.className,\n      defaultChecked = props.defaultChecked,\n      design = props.design,\n      disabled = props.disabled,\n      label = props.label,\n      labelPosition = props.labelPosition,\n      indicator = props.indicator,\n      styles = props.styles,\n      toggle = props.toggle,\n      variables = props.variables;\n\n  var _useStateManager = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: function mapPropsToInitialState() {\n      return {\n        checked: defaultChecked\n      };\n    },\n    mapPropsToState: function mapPropsToState() {\n      return {\n        checked: checked\n      };\n    }\n  }),\n      state = _useStateManager.state,\n      actions = _useStateManager.actions;\n\n  var getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        checked: state.checked,\n        disabled: disabled\n      };\n    },\n    actionHandlers: {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        handleClick(e);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        checked: state.checked,\n        disabled: disabled,\n        labelPosition: labelPosition,\n        toggle: toggle\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  var handleChange = function handleChange(e) {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      var _checked = !state.checked;\n\n      actions.toggle(_checked);\n\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        checked: _checked\n      }));\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    if (!disabled) {\n      var _checked2 = !state.checked;\n\n      actions.toggle(_checked2);\n\n      _invoke(props, 'onClick', e, Object.assign({}, props, {\n        checked: _checked2\n      }));\n\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        checked: _checked2\n      }));\n    }\n  };\n\n  var labelElement = Text.create(label, {\n    defaultProps: function defaultProps() {\n      return getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label\n      });\n    }\n  });\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick,\n    onChange: handleChange\n  }, unhandledProps)), labelPosition === 'start' && labelElement, Box.create(indicator, {\n    defaultProps: function defaultProps() {\n      return getA11Props('indicator', {\n        className: checkboxSlotClassNames.indicator,\n        styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox\n      });\n    }\n  }), labelPosition === 'end' && labelElement);\n  setEnd();\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end'\n};\nCheckbox.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool\n});\nCheckbox.handledProps = Object.keys(Checkbox.propTypes);\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label'\n});\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\n\nexport default withSafeTypeForAs(Checkbox);","map":{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","context","React","setStart","setEnd","useTelemetry","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","props","state","actions","useStateManager","mapPropsToInitialState","mapPropsToState","getA11Props","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","handleChange","labelElement","defaultProps","element","onClick","onChange","checkbox","accessibility","content","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\nconst Checkbox: React.FC<WithAsProp<CheckboxProps>> & FluentComponentStaticProps<CheckboxProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof Checkbox, CheckboxProps>(Checkbox);\n"]},"metadata":{},"sourceType":"module"}