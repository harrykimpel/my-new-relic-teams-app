{"ast":null,"code":"import _map from \"lodash/map\";\nimport _isNil from \"lodash/isNil\";\nimport { buttonGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory, createShorthand } from '../../utils';\nimport Button from './Button';\nimport { getElementType, useAccessibility, useUnhandledProps, useTelemetry, useStyles } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var buttonGroupClassName = 'ui-buttons';\nexport var ButtonGroup = function ButtonGroup(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ButtonGroup.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      buttons = props.buttons,\n      circular = props.circular,\n      content = props.content,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ButtonGroup.handledProps, props);\n\n  var _useStyles = useStyles(ButtonGroup.displayName, {\n    className: buttonGroupClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        circular: circular\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      ResolvedStyles = _useStyles.styles;\n\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: ButtonGroup.displayName,\n    rtl: context.rtl\n  });\n\n  var getStyleForButtonIndex = function getStyleForButtonIndex(styles, isFirst, isLast) {\n    var resultStyles = {};\n\n    if (isFirst) {\n      resultStyles = styles.firstButton;\n    }\n\n    if (isLast) {\n      resultStyles = Object.assign({}, resultStyles, {}, styles.lastButton);\n    }\n\n    if (!isFirst && !isLast) {\n      resultStyles = styles.middleButton;\n    }\n\n    return resultStyles;\n  };\n\n  var emptyButtons = _isNil(buttons);\n\n  var element = React.createElement(ElementType, Object.assign({}, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), {}, emptyButtons && Object.assign({}, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }))), emptyButtons ? childrenExist(children) ? children : content : _map(buttons, function (button, idx) {\n    return createShorthand(Button, button, {\n      defaultProps: function defaultProps() {\n        return {\n          circular: circular,\n          styles: getStyleForButtonIndex(ResolvedStyles, idx === 0, idx === buttons.length - 1)\n        };\n      }\n    });\n  }));\n  setEnd();\n  return element;\n};\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  buttons: customPropTypes.collectionShorthand,\n  circular: PropTypes.bool\n});\nButtonGroup.defaultProps = {\n  accessibility: buttonGroupBehavior,\n  as: 'div'\n};\nButtonGroup.handledProps = Object.keys(ButtonGroup.propTypes);\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons'\n});\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\n\nexport default withSafeTypeForAs(ButtonGroup);","map":{"version":3,"sources":["components/Button/ButtonGroup.tsx"],"names":["buttonGroupClassName","ButtonGroup","context","React","setStart","setEnd","useTelemetry","children","buttons","circular","content","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","classes","ResolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","getA11yProps","useAccessibility","debugName","getStyleForButtonIndex","resultStyles","emptyButtons","element","root","forElements","childrenExist","createShorthand","defaultProps","idx","commonPropTypes","customPropTypes","PropTypes","bool","accessibility","as","Object","createShorthandFactory","Component","mappedProp","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, ButtonGroupBehaviorProps, buttonGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  createShorthand,\n} from '../../utils';\nimport Button, { ButtonProps } from './Button';\nimport { getElementType, useAccessibility, useUnhandledProps, useTelemetry, useStyles } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface ButtonGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ButtonGroupBehaviorProps>;\n\n  /** The buttons contained inside the ButtonGroup. */\n  buttons?: ShorthandCollection<ButtonProps>;\n\n  /** The buttons inside group can appear circular. */\n  circular?: boolean;\n}\n\nexport type ButtonGroupStylesProps = Required<Pick<ButtonGroupProps, 'circular'>>;\n\nexport const buttonGroupClassName = 'ui-buttons';\n\nexport const ButtonGroup: React.FC<WithAsProp<ButtonGroupProps>> &\n  FluentComponentStaticProps<ButtonGroupProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ButtonGroup.displayName, context.telemetry);\n  setStart();\n  const { children, buttons, circular, content, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ButtonGroup.handledProps, props);\n  const { classes, styles: ResolvedStyles } = useStyles<ButtonGroupStylesProps>(ButtonGroup.displayName, {\n    className: buttonGroupClassName,\n    mapPropsToStyles: () => ({\n      circular,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<ButtonGroupBehaviorProps>(props.accessibility, {\n    debugName: ButtonGroup.displayName,\n    rtl: context.rtl,\n  });\n\n  const getStyleForButtonIndex = (styles, isFirst, isLast) => {\n    let resultStyles = {};\n    if (isFirst) {\n      resultStyles = styles.firstButton;\n    }\n    if (isLast) {\n      resultStyles = { ...resultStyles, ...styles.lastButton };\n    }\n    if (!isFirst && !isLast) {\n      resultStyles = styles.middleButton;\n    }\n    return resultStyles;\n  };\n\n  const emptyButtons = _.isNil(buttons);\n\n  const element = (\n    <ElementType\n      {...{\n        ...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        }),\n        ...(emptyButtons && { ...rtlTextContainer.getAttributes({ forElements: [children, content] }) }),\n      }}\n    >\n      {emptyButtons\n        ? childrenExist(children)\n          ? children\n          : content\n        : _.map(buttons, (button, idx) =>\n            createShorthand(Button, button, {\n              defaultProps: () => ({\n                circular,\n                styles: getStyleForButtonIndex(ResolvedStyles, idx === 0, idx === buttons.length - 1),\n              }),\n            }),\n          )}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nButtonGroup.displayName = 'ButtonGroup';\n\nButtonGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  buttons: customPropTypes.collectionShorthand,\n  circular: PropTypes.bool,\n};\n\nButtonGroup.defaultProps = {\n  accessibility: buttonGroupBehavior,\n  as: 'div',\n};\n\nButtonGroup.handledProps = Object.keys(ButtonGroup.propTypes) as any;\n\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons',\n});\n\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\nexport default withSafeTypeForAs<typeof ButtonGroup, ButtonGroupProps>(ButtonGroup);\n"]},"metadata":{},"sourceType":"module"}