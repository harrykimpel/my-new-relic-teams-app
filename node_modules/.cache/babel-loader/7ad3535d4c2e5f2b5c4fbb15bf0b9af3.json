{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponent, childrenExist, createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Text from '../Text/Text';\nimport Input from '../Input/Input';\nimport Box from '../Box/Box';\nexport var formFieldClassName = 'ui-form__field';\n\nvar FormField = /*#__PURE__*/function (_UIComponent) {\n  _inherits(FormField, _UIComponent);\n\n  function FormField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"shouldControlAppearFirst\", function () {\n      var type = _this.props.type;\n      return type && (type === 'checkbox' || type === 'radio');\n    });\n\n    return _this;\n  }\n\n  _createClass(FormField, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          control = _this$props.control,\n          id = _this$props.id,\n          label = _this$props.label,\n          message = _this$props.message,\n          name = _this$props.name,\n          required = _this$props.required,\n          type = _this$props.type;\n      var labelElement = Text.create(label, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'label',\n            htmlFor: id,\n            styles: styles.label\n          };\n        }\n      });\n      var messageElement = Text.create(message, {\n        defaultProps: function defaultProps() {\n          return {\n            styles: styles.message\n          };\n        }\n      });\n      var controlElement = Box.create(control || {}, {\n        defaultProps: function defaultProps() {\n          return {\n            required: required,\n            id: id,\n            name: name,\n            type: type,\n            styles: styles.control\n          };\n        }\n      });\n      var content = React.createElement(React.Fragment, null, this.shouldControlAppearFirst() && controlElement, labelElement, !this.shouldControlAppearFirst() && controlElement, messageElement);\n      return React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, unhandledProps), childrenExist(children) ? children : content);\n    }\n  }]);\n\n  return FormField;\n}(UIComponent);\n\n_defineProperty(FormField, \"displayName\", 'FormField');\n\n_defineProperty(FormField, \"deprecated_className\", formFieldClassName);\n\n_defineProperty(FormField, \"create\", void 0);\n\n_defineProperty(FormField, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  control: customPropTypes.itemShorthand,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string\n}));\n\n_defineProperty(FormField, \"defaultProps\", {\n  as: 'div',\n  control: {\n    as: Input\n  }\n});\n\nFormField.create = createShorthandFactory({\n  Component: FormField,\n  mappedProp: 'label'\n});\n/**\n * A FormField represents a Form element containing a label and an input.\n */\n\nexport default withSafeTypeForAs(FormField);","map":{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldClassName","FormField","UIComponent","content","control","customPropTypes","itemShorthand","id","PropTypes","string","inline","bool","label","message","name","required","type","as","Input","ElementType","classes","accessibility","styles","unhandledProps","children","labelElement","defaultProps","htmlFor","messageElement","controlElement","root","childrenExist","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Text, { TextProps } from '../Text/Text';\nimport Input from '../Input/Input';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldClassName = 'ui-form__field';\n\nclass FormField extends UIComponent<WithAsProp<FormFieldProps>, any> {\n  static displayName = 'FormField';\n\n  static deprecated_className = formFieldClassName;\n\n  static create: ShorthandFactory<FormFieldProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    control: customPropTypes.itemShorthand,\n    id: PropTypes.string,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    message: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.string,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    control: { as: Input },\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, unhandledProps }): React.ReactNode {\n    const { children, control, id, label, message, name, required, type } = this.props;\n\n    const labelElement = Text.create(label, {\n      defaultProps: () => ({\n        as: 'label',\n        htmlFor: id,\n        styles: styles.label,\n      }),\n    });\n\n    const messageElement = Text.create(message, {\n      defaultProps: () => ({\n        styles: styles.message,\n      }),\n    });\n\n    const controlElement = Box.create(control || {}, {\n      defaultProps: () => ({ required, id, name, type, styles: styles.control }),\n    });\n\n    const content = (\n      <>\n        {this.shouldControlAppearFirst() && controlElement}\n        {labelElement}\n        {!this.shouldControlAppearFirst() && controlElement}\n        {messageElement}\n      </>\n    );\n\n    return (\n      <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n\n  shouldControlAppearFirst = () => {\n    const { type } = this.props;\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n}\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport default withSafeTypeForAs<typeof FormField, FormFieldProps>(FormField);\n"]},"metadata":{},"sourceType":"module"}