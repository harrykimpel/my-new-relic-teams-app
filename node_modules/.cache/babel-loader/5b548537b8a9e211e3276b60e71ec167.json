{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _mapValues from \"lodash/mapValues\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport * as React from 'react'; // Makes sure that 'onKeyDown' is correctly overriden on the slots.\n// It should be applied after 'unhandledProps' because they can contain 'onKeyDown' from user and is handled by UTs in isConformant()\n\nvar applyAccessibilityKeyHandlers = function applyAccessibilityKeyHandlers(keyHandlers, value) {\n  var valIsPropsObject = _isPlainObject(value);\n\n  var valIsReactElement = React.isValidElement(value);\n  var slotProps = valIsReactElement && value.props || valIsPropsObject && value || {};\n  return _mapValues(keyHandlers, function (accessibilityHandler, handleName) {\n    return function (e) {\n      accessibilityHandler(e);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _invoke.apply(void 0, [slotProps, handleName, e].concat(args));\n    };\n  });\n};\n\nexport default applyAccessibilityKeyHandlers;","map":{"version":3,"sources":["utils/applyAccessibilityKeyHandlers.ts"],"names":["applyAccessibilityKeyHandlers","valIsPropsObject","valIsReactElement","React","slotProps","value","args","accessibilityHandler"],"mappings":";;;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CAIA;AACA;;AACA,IAAMA,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAA,WAAA,EAAA,KAAA,EAGmE;AACvG,MAAMC,gBAAgB,GAAG,cAAA,CAAzB,KAAyB,CAAzB;;AACA,MAAMC,iBAAiB,GAAGC,KAAK,CAALA,cAAAA,CAA1B,KAA0BA,CAA1B;AAEA,MAAMC,SAAS,GACZF,iBAAiB,IAAKG,KAAD,CAAtB,KAACH,IAAqED,gBAAgB,IAAtF,KAACC,IADH,EAAA;AAGA,SAAO,UAAA,CAAA,WAAA,EAEL,UAAA,oBAAA,EAAA,UAAA,EAAA;AAAA,WAAoE,UAAA,CAAA,EAA4C;AAC9GK,MAAAA,oBAAoB,CAApBA,CAAoB,CAApBA;;AAD8G,WAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAhBD,IAAgB,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAhBA,QAAAA,IAAgB,CAAA,IAAA,GAAA,CAAA,CAAhBA,GAAgB,SAAA,CAAA,IAAA,CAAhBA;AAAgB;;AAE9G,MAAA,OAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA;AAFF,KAAA;AAFF,GAAO,CAAP;AAVF,CAAA;;AAmBA,eAAA,6BAAA","sourcesContent":["import { AccessibilityHandlerProps, KeyboardEventHandler } from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as React from 'react';\n\nimport { Props, ShorthandValue } from '../types';\n\n// Makes sure that 'onKeyDown' is correctly overriden on the slots.\n// It should be applied after 'unhandledProps' because they can contain 'onKeyDown' from user and is handled by UTs in isConformant()\nconst applyAccessibilityKeyHandlers = (\n  keyHandlers: AccessibilityHandlerProps,\n  value: Props | ShorthandValue<Props>,\n): Partial<Record<keyof AccessibilityHandlerProps, (e: React.KeyboardEvent, ...args: any[]) => void>> => {\n  const valIsPropsObject = _.isPlainObject(value);\n  const valIsReactElement = React.isValidElement(value);\n\n  const slotProps =\n    (valIsReactElement && (value as React.ReactElement<Props>).props) || (valIsPropsObject && (value as Props)) || {};\n\n  return _.mapValues(\n    keyHandlers,\n    (accessibilityHandler: KeyboardEventHandler, handleName: string) => (e: React.KeyboardEvent, ...args: any[]) => {\n      accessibilityHandler(e);\n      _.invoke(slotProps, handleName, e, ...args);\n    },\n  );\n};\n\nexport default applyAccessibilityKeyHandlers;\n"]},"metadata":{},"sourceType":"module"}