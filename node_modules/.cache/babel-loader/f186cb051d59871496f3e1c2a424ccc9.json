{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { UIComponent, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nexport var layoutClassName = 'ui-layout';\nexport var layoutSlotClassNames = {\n  start: \"\".concat(layoutClassName, \"__start\"),\n  main: \"\".concat(layoutClassName, \"__main\"),\n  end: \"\".concat(layoutClassName, \"__end\"),\n  gap: \"\".concat(layoutClassName, \"__gap\"),\n  reducedStart: \"\".concat(layoutClassName, \"--reduced__start\"),\n  reducedMain: \"\".concat(layoutClassName, \"--reduced__main\"),\n  reducedEnd: \"\".concat(layoutClassName, \"--reduced__end\")\n};\n\nvar Layout = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Layout, _UIComponent);\n\n  function Layout() {\n    _classCallCheck(this, Layout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Layout).apply(this, arguments));\n  }\n\n  _createClass(Layout, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          reducing = _this$props.reducing,\n          disappearing = _this$props.disappearing,\n          start = _this$props.start,\n          main = _this$props.main,\n          end = _this$props.end,\n          renderStartArea = _this$props.renderStartArea,\n          renderMainArea = _this$props.renderMainArea,\n          renderEndArea = _this$props.renderEndArea,\n          renderGap = _this$props.renderGap;\n      var startArea = renderStartArea(Object.assign({}, this.props, {\n        classes: classes\n      }));\n      var mainArea = renderMainArea(Object.assign({}, this.props, {\n        classes: classes\n      }));\n      var endArea = renderEndArea(Object.assign({}, this.props, {\n        classes: classes\n      }));\n\n      if (!startArea && !mainArea && !endArea) {\n        return React.createElement(ElementType, _extends({}, unhandledProps, {\n          className: classes.root\n        }));\n      }\n\n      var activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n      var isSingleArea = activeAreas.length === 1; // disappear: render the content directly without wrapping layout or area elements\n\n      if (disappearing && isSingleArea) {\n        return start || main || end;\n      }\n\n      if (reducing && isSingleArea) {\n        var composedClasses = cx(classes.root, startArea && layoutSlotClassNames.reducedStart, mainArea && layoutSlotClassNames.reducedMain, endArea && layoutSlotClassNames.reducedEnd);\n        return React.createElement(ElementType, _extends({}, unhandledProps, {\n          className: composedClasses\n        }), start || main || end);\n      }\n\n      return React.createElement(ElementType, _extends({}, unhandledProps, {\n        className: classes.root\n      }), startArea, startArea && mainArea && renderGap(Object.assign({}, this.props, {\n        classes: classes\n      })), mainArea, (startArea || mainArea) && endArea && renderGap(Object.assign({}, this.props, {\n        classes: classes\n      })), endArea);\n    }\n  }]);\n\n  return Layout;\n}(UIComponent);\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\n\n\n_defineProperty(Layout, \"deprecated_className\", layoutClassName);\n\n_defineProperty(Layout, \"displayName\", 'Layout');\n\n_defineProperty(Layout, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false\n}), {\n  debug: PropTypes.bool,\n  renderStartArea: PropTypes.func,\n  renderMainArea: PropTypes.func,\n  renderEndArea: PropTypes.func,\n  renderGap: PropTypes.func,\n  rootCSS: PropTypes.object,\n  start: PropTypes.any,\n  startCSS: PropTypes.object,\n  startSize: PropTypes.string,\n  main: PropTypes.any,\n  mainCSS: PropTypes.object,\n  mainSize: PropTypes.string,\n  end: PropTypes.any,\n  endCSS: PropTypes.object,\n  endSize: PropTypes.string,\n  justifyItems: PropTypes.any,\n  alignItems: PropTypes.any,\n  gap: PropTypes.string,\n  reducing: PropTypes.bool,\n  disappearing: PropTypes.bool,\n  vertical: PropTypes.bool\n}));\n\n_defineProperty(Layout, \"defaultProps\", {\n  startSize: 'auto',\n  mainSize: '1fr',\n  endSize: 'auto',\n  // TODO: when an area is another Layout, do not wrap them in an extra div\n  // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n  renderStartArea: function renderStartArea(_ref2) {\n    var start = _ref2.start,\n        classes = _ref2.classes;\n    return start && React.createElement(\"div\", _extends({\n      className: cx(layoutSlotClassNames.start, classes.start)\n    }, rtlTextContainer.getAttributes({\n      forElements: [start]\n    })), start);\n  },\n  renderMainArea: function renderMainArea(_ref3) {\n    var main = _ref3.main,\n        classes = _ref3.classes;\n    return main && React.createElement(\"div\", _extends({\n      className: cx(layoutSlotClassNames.main, classes.main)\n    }, rtlTextContainer.getAttributes({\n      forElements: [main]\n    })), main);\n  },\n  renderEndArea: function renderEndArea(_ref4) {\n    var end = _ref4.end,\n        classes = _ref4.classes;\n    return end && React.createElement(\"div\", _extends({\n      className: cx(layoutSlotClassNames.end, classes.end)\n    }, rtlTextContainer.getAttributes({\n      forElements: [end]\n    })), end);\n  },\n  // Heads up!\n  // IE11 Doesn't support grid-gap, insert virtual columns instead\n  renderGap: function renderGap(_ref5) {\n    var gap = _ref5.gap,\n        classes = _ref5.classes;\n    return gap && React.createElement(\"span\", {\n      className: cx(layoutSlotClassNames.gap, classes.gap)\n    });\n  }\n});\n\nexport default withSafeTypeForAs(Layout);","map":{"version":3,"sources":["components/Layout/Layout.tsx"],"names":["layoutClassName","layoutSlotClassNames","start","main","end","gap","reducedStart","reducedMain","reducedEnd","Layout","UIComponent","accessibility","children","content","debug","PropTypes","bool","renderStartArea","func","renderMainArea","renderEndArea","renderGap","rootCSS","object","any","startCSS","startSize","string","mainCSS","mainSize","endCSS","endSize","justifyItems","alignItems","reducing","disappearing","vertical","classes","cx","forElements","ElementType","unhandledProps","startArea","mainArea","endArea","root","activeAreas","isSingleArea","composedClasses","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { UIComponent, UIComponentProps, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface LayoutSlotClassNames {\n  start: string;\n  main: string;\n  end: string;\n  gap: string;\n  reducedStart: string;\n  reducedMain: string;\n  reducedEnd: string;\n}\n\nexport interface LayoutProps extends UIComponentProps {\n  debug?: boolean;\n  renderStartArea?: (params: object) => React.ReactNode;\n  renderMainArea?: (params: object) => React.ReactNode;\n  renderEndArea?: (params: object) => React.ReactNode;\n  renderGap?: (params: object) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: ICSSInJSStyle;\n  start?: any;\n  startCSS?: ICSSInJSStyle;\n  startSize?: string;\n  main?: any;\n  mainCSS?: ICSSInJSStyle;\n  mainSize?: string;\n  end?: any;\n  endCSS?: ICSSInJSStyle;\n  endSize?: string;\n  /** How to align items on-axis within the layout (i.e. vertical or not). */\n  justifyItems?: React.CSSProperties['justifyItems'];\n  /** How to align cross-axis items within the layout (i.e. vertical or not). */\n  alignItems?: React.CSSProperties['alignItems'];\n  /** A layout can have gaps of whitespace between areas. */\n  gap?: string;\n  /** A layout can reduce to the minimum required areas. */\n  reducing?: boolean;\n  /** A layout can render its content directly if only one piece of content exists. */\n  disappearing?: boolean;\n  vertical?: boolean;\n}\n\nexport const layoutClassName = 'ui-layout';\nexport const layoutSlotClassNames: LayoutSlotClassNames = {\n  start: `${layoutClassName}__start`,\n  main: `${layoutClassName}__main`,\n  end: `${layoutClassName}__end`,\n  gap: `${layoutClassName}__gap`,\n  reducedStart: `${layoutClassName}--reduced__start`,\n  reducedMain: `${layoutClassName}--reduced__main`,\n  reducedEnd: `${layoutClassName}--reduced__end`,\n};\n\nclass Layout extends UIComponent<WithAsProp<LayoutProps>, any> {\n  static deprecated_className = layoutClassName;\n\n  static displayName = 'Layout';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    debug: PropTypes.bool,\n\n    renderStartArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    renderEndArea: PropTypes.func,\n    renderGap: PropTypes.func,\n\n    rootCSS: PropTypes.object,\n\n    start: PropTypes.any,\n    startCSS: PropTypes.object,\n    startSize: PropTypes.string,\n\n    main: PropTypes.any,\n    mainCSS: PropTypes.object,\n    mainSize: PropTypes.string,\n\n    end: PropTypes.any,\n    endCSS: PropTypes.object,\n    endSize: PropTypes.string,\n\n    justifyItems: PropTypes.any,\n\n    alignItems: PropTypes.any,\n\n    gap: PropTypes.string,\n    reducing: PropTypes.bool,\n    disappearing: PropTypes.bool,\n\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    startSize: 'auto',\n    mainSize: '1fr',\n    endSize: 'auto',\n\n    // TODO: when an area is another Layout, do not wrap them in an extra div\n    // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n    renderStartArea({ start, classes }) {\n      return (\n        start && (\n          <div\n            className={cx(layoutSlotClassNames.start, classes.start)}\n            {...rtlTextContainer.getAttributes({ forElements: [start] })}\n          >\n            {start}\n          </div>\n        )\n      );\n    },\n\n    renderMainArea({ main, classes }) {\n      return (\n        main && (\n          <div\n            className={cx(layoutSlotClassNames.main, classes.main)}\n            {...rtlTextContainer.getAttributes({ forElements: [main] })}\n          >\n            {main}\n          </div>\n        )\n      );\n    },\n\n    renderEndArea({ end, classes }) {\n      return (\n        end && (\n          <div\n            className={cx(layoutSlotClassNames.end, classes.end)}\n            {...rtlTextContainer.getAttributes({ forElements: [end] })}\n          >\n            {end}\n          </div>\n        )\n      );\n    },\n\n    // Heads up!\n    // IE11 Doesn't support grid-gap, insert virtual columns instead\n    renderGap({ gap, classes }) {\n      return gap && <span className={cx(layoutSlotClassNames.gap, classes.gap)} />;\n    },\n  };\n\n  renderComponent({ ElementType, classes, unhandledProps }) {\n    const {\n      reducing,\n      disappearing,\n      start,\n      main,\n      end,\n      renderStartArea,\n      renderMainArea,\n      renderEndArea,\n      renderGap,\n    } = this.props;\n\n    const startArea = renderStartArea({ ...this.props, classes });\n    const mainArea = renderMainArea({ ...this.props, classes });\n    const endArea = renderEndArea({ ...this.props, classes });\n\n    if (!startArea && !mainArea && !endArea) {\n      return <ElementType {...unhandledProps} className={classes.root} />;\n    }\n\n    const activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n    const isSingleArea = activeAreas.length === 1;\n\n    // disappear: render the content directly without wrapping layout or area elements\n    if (disappearing && isSingleArea) {\n      return start || main || end;\n    }\n\n    if (reducing && isSingleArea) {\n      const composedClasses = cx(\n        classes.root,\n        startArea && layoutSlotClassNames.reducedStart,\n        mainArea && layoutSlotClassNames.reducedMain,\n        endArea && layoutSlotClassNames.reducedEnd,\n      );\n      return (\n        <ElementType {...unhandledProps} className={composedClasses}>\n          {start || main || end}\n        </ElementType>\n      );\n    }\n\n    return (\n      <ElementType {...unhandledProps} className={classes.root}>\n        {startArea}\n        {startArea && mainArea && renderGap({ ...this.props, classes })}\n        {mainArea}\n        {(startArea || mainArea) && endArea && renderGap({ ...this.props, classes })}\n        {endArea}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\nexport default withSafeTypeForAs<typeof Layout, LayoutProps>(Layout);\n"]},"metadata":{},"sourceType":"module"}