{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport useEventListener from './useEventListener';\n\nfunction EventListener(props) {\n  useEventListener(props);\n  return null;\n}\n\nEventListener.displayName = 'EventListener'; // TODO: use Babel plugin for this\n\nEventListener.propTypes = process.env.NODE_ENV !== 'production' ? {\n  capture: PropTypes.bool,\n  listener: PropTypes.func.isRequired,\n  target: PropTypes.object,\n  targetRef: PropTypes.shape({\n    current: PropTypes.object\n  }),\n  type: PropTypes.string.isRequired\n} : {};\nEventListener.defaultProps = {\n  capture: false\n};\nexport default EventListener;","map":{"version":3,"sources":["EventListener.ts"],"names":["useEventListener","EventListener","capture","PropTypes","listener","target","targetRef","current","object","type","isRequired"],"mappings":"AAAA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,OAAA,gBAAA,MAAA,oBAAA;;AAGA,SAAA,aAAA,CAAA,KAAA,EAA6E;AAC3EA,EAAAA,gBAAgB,CAAhBA,KAAgB,CAAhBA;AAEA,SAAA,IAAA;AACD;;AAEDC,aAAa,CAAbA,WAAAA,GAAAA,eAAAA,C,CACA;;AACAA,aAAa,CAAbA,SAAAA,GACE,OAAO,CAAP,GAAA,CAAA,QAAA,KAAA,YAAA,GACI;AACEC,EAAAA,OAAO,EAAEC,SAAS,CADpB,IAAA;AAEEC,EAAAA,QAAQ,EAAED,SAAS,CAATA,IAAAA,CAFZ,UAAA;AAGEE,EAAAA,MAAM,EAAEF,SAAS,CAHnB,MAAA;AAIEG,EAAAA,SAAS,EAAE,SAAS,CAAT,KAAA,CAAgB;AACzBC,IAAAA,OAAO,EAAEJ,SAAS,CAACK;AADM,GAAhB,CAJb;AAOEC,EAAAA,IAAI,EAAEN,SAAS,CAATA,MAAAA,CAAiBO;AAPzB,CADJ,GADFT,EAAAA;AAYAA,aAAa,CAAbA,YAAAA,GAA6B;AAC3BC,EAAAA,OAAO,EAAE;AADkB,CAA7BD;AAIA,eAAA,aAAA","sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport useEventListener from './useEventListener';\nimport { EventListenerOptions, EventTypes, Target, TargetRef } from './types';\n\nfunction EventListener<T extends EventTypes>(props: EventListenerOptions<T>) {\n  useEventListener(props);\n\n  return null;\n}\n\nEventListener.displayName = 'EventListener';\n// TODO: use Babel plugin for this\nEventListener.propTypes =\n  process.env.NODE_ENV !== 'production'\n    ? {\n        capture: PropTypes.bool,\n        listener: PropTypes.func.isRequired,\n        target: PropTypes.object as PropTypes.Validator<Target>,\n        targetRef: PropTypes.shape({\n          current: PropTypes.object,\n        }) as PropTypes.Validator<TargetRef>,\n        type: PropTypes.string.isRequired as PropTypes.Validator<EventTypes>,\n      }\n    : {};\nEventListener.defaultProps = {\n  capture: false,\n};\n\nexport default EventListener;\n"]},"metadata":{},"sourceType":"module"}