{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _reduce from \"lodash/reduce\";\nimport _forEach from \"lodash/forEach\";\nimport { treeBehavior } from '@fluentui/accessibility';\nimport { getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport TreeItem from './TreeItem';\nimport TreeTitle from './TreeTitle';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer, applyAccessibilityKeyHandlers, AutoControlledComponent } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext } from './utils';\nexport var treeClassName = 'ui-tree';\n\nvar Tree = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Tree, _AutoControlledCompon);\n\n  function Tree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"treeRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"itemsRef\", new Map());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocusParent\", function (parent) {\n      var parentRef = _this.itemsRef.get(parent);\n\n      if (!parentRef || !parentRef.current) {\n        return;\n      }\n\n      parentRef.current.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSelectedItemIds\", function (e, selectedItemIds) {\n      _invoke(_this.props, 'onSelectedItemIdsChange', e, Object.assign({}, _this.props, {\n        selectedItemIds: selectedItemIds\n      }));\n\n      _this.setState({\n        selectedItemIds: selectedItemIds\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"processItemsForSelection\", function (e, treeItemProps, executeSelection) {\n      var selectedItemIds = _this.state.selectedItemIds;\n      var id = treeItemProps.id,\n          selectableParent = treeItemProps.selectableParent,\n          items = treeItemProps.items,\n          expanded = treeItemProps.expanded;\n      var treeItemHasSubtree = hasSubtree(treeItemProps);\n      var isExpandedSelectableParent = treeItemHasSubtree && selectableParent && expanded; // parent must be selectable and expanded in order to procced with selection, otherwise return\n\n      if (treeItemHasSubtree && !(selectableParent && expanded)) {\n        return;\n      } // if the target is equal to currentTarget it means treeItem should be collapsed, not procced with selection\n\n\n      if (treeItemHasSubtree && e.target === e.currentTarget && !executeSelection) {\n        return;\n      } // push all tree items under particular parent into selection array\n      // not parent itself, therefore not procced with selection\n\n\n      if (isExpandedSelectableParent) {\n        if (_this.isAllGroupChecked(items)) {\n          var selectedItems = _this.getAllSelectableChildrenId(items);\n\n          selectedItemIds = selectedItemIds.filter(function (id) {\n            return selectedItems.indexOf(id) === -1;\n          });\n        } else {\n          var selectItems = function selectItems(items) {\n            items.forEach(function (item) {\n              var selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n\n              if (selectedItemIds.indexOf(item.id) === -1) {\n                if (item.items) {\n                  selectItems(item.items);\n                } else if (selectble) {\n                  selectedItemIds.push(item.id);\n                }\n              }\n            });\n          };\n\n          selectItems(items);\n        }\n\n        _this.setSelectedItemIds(e, selectedItemIds);\n\n        return;\n      } // push/remove single tree item into selection array\n\n\n      if (selectedItemIds.indexOf(id) === -1) {\n        selectedItemIds.push(id);\n      } else {\n        selectedItemIds = selectedItemIds.filter(function (itemID) {\n          return itemID !== id;\n        });\n      }\n\n      _this.setSelectedItemIds(e, selectedItemIds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTitleClick\", function (e, treeItemProps) {\n      var executeSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var treeItemHasSubtree = hasSubtree(treeItemProps);\n\n      if (!treeItemProps) {\n        return;\n      }\n\n      if (treeItemProps.selectable) {\n        _this.processItemsForSelection(e, treeItemProps, executeSelection);\n      }\n\n      if (treeItemHasSubtree && !executeSelection && e.target === e.currentTarget) {\n        _this.expandItems(e, treeItemProps);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocusFirstChild\", function (itemId) {\n      var currentElement = _this.itemsRef.get(itemId);\n\n      if (!currentElement || !currentElement.current) {\n        return;\n      }\n\n      var elementToBeFocused = getNextElement(_this.treeRef.current, currentElement.current);\n\n      if (!elementToBeFocused) {\n        return;\n      }\n\n      elementToBeFocused.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSiblingsExpand\", function (e, treeItemProps) {\n      var _this$props = _this.props,\n          exclusive = _this$props.exclusive,\n          items = _this$props.items;\n\n      if (exclusive) {\n        return;\n      }\n\n      var id = treeItemProps.id;\n      var activeItemIds = _this.state.activeItemIds;\n      var siblings = getSiblings(items, id);\n      siblings.forEach(function (sibling) {\n        if (hasSubtree(sibling) && !_this.isActiveItem(sibling['id'])) {\n          activeItemIds.push(sibling['id']);\n        }\n      });\n\n      if (hasSubtree(treeItemProps) && !_this.isActiveItem(id)) {\n        activeItemIds.push(id);\n      }\n\n      _this.setActiveItemIds(e, activeItemIds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItemIds\", function (e, activeItemIds) {\n      _invoke(_this.props, 'onActiveItemIdsChange', e, Object.assign({}, _this.props, {\n        activeItemIds: activeItemIds\n      }));\n\n      _this.setState({\n        activeItemIds: activeItemIds\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllSelectableChildrenId\", function (items) {\n      return items.reduce(function (acc, item) {\n        if (item.items) {\n          return [].concat(_toConsumableArray(acc), _toConsumableArray(_this.getAllSelectableChildrenId(item.items)));\n        }\n\n        return item.hasOwnProperty('selectable') && !item.selectable ? acc : [].concat(_toConsumableArray(acc), [item.id]);\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isIndeterminate\", function (item) {\n      if (!item.selectableParent || !item.items) {\n        return false;\n      }\n\n      var items = item.items;\n\n      var selectableItemIds = _this.getAllSelectableChildrenId(items);\n\n      return !_this.isAllGroupChecked(items) && selectableItemIds.some(function (id) {\n        return _this.state.selectedItemIds.indexOf(id) > -1;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isAllGroupChecked\", function (items) {\n      var selectableItemIds = _this.getAllSelectableChildrenId(items);\n\n      return selectableItemIds.every(function (id) {\n        return _this.state.selectedItemIds.indexOf(id) > -1;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"contextValue\", {\n      onFocusParent: _this.onFocusParent,\n      onSiblingsExpand: _this.onSiblingsExpand,\n      onFocusFirstChild: _this.onFocusFirstChild,\n      onTitleClick: _this.onTitleClick\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isActiveItem\", function (id) {\n      var activeItemIds = _this.state.activeItemIds;\n      return activeItemIds.indexOf(id) > -1;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSelectedItem\", function (item) {\n      var selectedItemIds = _this.state.selectedItemIds;\n\n      if (item.selectableParent && item.items) {\n        return _this.isAllGroupChecked(item.items);\n      }\n\n      return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n    });\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        activeItemIds: [],\n        selectedItemIds: []\n      };\n    }\n  }, {\n    key: \"expandItems\",\n    value: function expandItems(e, treeItemProps) {\n      var activeItemIds = this.state.activeItemIds;\n      var id = treeItemProps.id;\n      var _this$props2 = this.props,\n          exclusive = _this$props2.exclusive,\n          items = _this$props2.items;\n      var siblings = getSiblings(items, id);\n      var activeItemIdIndex = activeItemIds.indexOf(id);\n\n      if (activeItemIdIndex > -1) {\n        activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n      } else {\n        if (exclusive) {\n          siblings.some(function (sibling) {\n            var activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n\n            if (activeSiblingIdIndex > -1) {\n              activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        activeItemIds = [].concat(_toConsumableArray(activeItemIds), [id]);\n      }\n\n      this.setActiveItemIds(e, activeItemIds);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(accessibility) {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          items = _this$props3.items,\n          renderItemTitle = _this$props3.renderItemTitle,\n          selectable = _this$props3.selectable;\n      if (!items) return null;\n\n      var renderItems = function renderItems(items) {\n        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var parent = arguments.length > 2 ? arguments[2] : undefined;\n        return items.reduce(function (renderedItems, item, index) {\n          var id = item.id;\n          var isSubtree = hasSubtree(item);\n\n          var isSubtreeExpanded = isSubtree && _this2.isActiveItem(id);\n\n          var isSelectedItem = _this2.isSelectedItem(item);\n\n          var indeterminate = _this2.isIndeterminate(item);\n\n          if (!_this2.itemsRef.has(id)) {\n            _this2.itemsRef.set(id, React.createRef());\n          }\n\n          var renderedItem = TreeItem.create(item, {\n            defaultProps: function defaultProps() {\n              return {\n                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n                expanded: isSubtreeExpanded,\n                selected: isSelectedItem,\n                selectable: selectable,\n                renderItemTitle: renderItemTitle,\n                id: id,\n                key: id,\n                parent: parent,\n                level: level,\n                index: index + 1,\n                // Used for aria-posinset and it's 1-based.\n                contentRef: _this2.itemsRef.get(id),\n                treeSize: items.length,\n                indeterminate: indeterminate\n              };\n            }\n          });\n          return [].concat(_toConsumableArray(renderedItems), [renderedItem], _toConsumableArray(isSubtreeExpanded ? renderItems(item.items, level + 1, id) : []));\n        }, []);\n      };\n\n      return renderItems(items);\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          renderedItems = _this$props4.renderedItems;\n      return React.createElement(TreeContext.Provider, {\n        value: this.contextValue\n      }, React.createElement(Ref, {\n        innerRef: this.treeRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : renderedItems ? renderedItems(this.renderContent(accessibility)) : this.renderContent(accessibility))));\n    }\n  }], [{\n    key: \"getAutoControlledStateFromProps\",\n    value: function getAutoControlledStateFromProps(nextProps, prevState) {\n      var items = nextProps.items,\n          selectable = nextProps.selectable;\n      var activeItemIds = nextProps.activeItemIds,\n          selectedItemIds = nextProps.selectedItemIds;\n\n      if (selectable && items && !selectedItemIds) {\n        if (!selectedItemIds && items) {\n          selectedItemIds = prevState.selectedItemIds;\n\n          var iterateItems = function iterateItems(items) {\n            var selectedItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : selectedItemIds;\n\n            _forEach(items, function (item) {\n              if (item['selected'] && selectedItemIds.indexOf(item['id']) === -1) {\n                selectedItems.push(item['id']);\n              }\n\n              if (item['items']) {\n                return iterateItems(item['items']);\n              }\n            });\n          };\n\n          iterateItems(items);\n        }\n      }\n\n      if (!activeItemIds && items) {\n        activeItemIds = prevState.activeItemIds;\n\n        var expandedItemsGenerator = function expandedItemsGenerator(items) {\n          var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : activeItemIds;\n          return _reduce(items, function (acc, item) {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          }, acc);\n        };\n\n        expandedItemsGenerator(items);\n      }\n\n      return {\n        activeItemIds: activeItemIds,\n        selectedItemIds: selectedItemIds\n      };\n    }\n  }]);\n\n  return Tree;\n}(AutoControlledComponent);\n\n_defineProperty(Tree, \"create\", void 0);\n\n_defineProperty(Tree, \"displayName\", 'Tree');\n\n_defineProperty(Tree, \"deprecated_className\", treeClassName);\n\n_defineProperty(Tree, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  activeItemIds: customPropTypes.collectionShorthand,\n  selectedItemIds: customPropTypes.collectionShorthand,\n  defaultActiveItemIds: customPropTypes.collectionShorthand,\n  defaultSelectedItemIds: customPropTypes.collectionShorthand,\n  exclusive: PropTypes.bool,\n  selectable: PropTypes.bool,\n  items: customPropTypes.collectionObjectShorthand,\n  onActiveItemIdsChange: PropTypes.func,\n  onSelectedItemIdsChange: PropTypes.func,\n  renderItemTitle: PropTypes.func,\n  renderedItems: PropTypes.func\n}));\n\n_defineProperty(Tree, \"defaultProps\", {\n  as: 'div',\n  accessibility: treeBehavior\n});\n\n_defineProperty(Tree, \"autoControlledProps\", ['activeItemIds', 'selectedItemIds']);\n\n_defineProperty(Tree, \"Item\", TreeItem);\n\n_defineProperty(Tree, \"Title\", TreeTitle);\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items'\n});\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs(Tree);","map":{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["treeClassName","Tree","AutoControlledComponent","content","activeItemIds","customPropTypes","collectionShorthand","selectedItemIds","defaultActiveItemIds","defaultSelectedItemIds","exclusive","PropTypes","bool","selectable","items","collectionObjectShorthand","onActiveItemIdsChange","func","onSelectedItemIdsChange","renderItemTitle","renderedItems","as","accessibility","treeBehavior","TreeItem","TreeTitle","nextProps","prevState","iterateItems","selectedItems","item","expandedItemsGenerator","acc","React","parentRef","id","selectableParent","expanded","treeItemProps","treeItemHasSubtree","hasSubtree","isExpandedSelectableParent","e","selectItems","selectble","itemID","executeSelection","siblings","getSiblings","activeItemIdIndex","removeItemAtIndex","activeSiblingIdIndex","sibling","currentElement","elementToBeFocused","getNextElement","selectableItemIds","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","renderItems","level","parent","isSubtree","isSubtreeExpanded","isSelectedItem","indeterminate","renderedItem","defaultProps","selected","key","index","contentRef","treeSize","ElementType","classes","unhandledProps","children","contextValue","treeRef","root","forElements","applyAccessibilityKeyHandlers","childrenExist","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior, getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport TreeItem, { TreeItemProps } from './TreeItem';\nimport TreeTitle, { TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ComponentEventHandler,\n  ObjectShorthandCollection,\n} from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext, TreeRenderContextValue } from './utils';\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Ids of selected items. */\n  selectedItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Called when tree item selection state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `selectedItemIds` reflecting the new state.\n   */\n  onSelectedItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n\n  /** Whether or not tree items are selectable. */\n  selectable?: boolean;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport interface TreeState {\n  activeItemIds: string[];\n  selectedItemIds: string[];\n}\n\nexport const treeClassName = 'ui-tree';\n\nclass Tree extends AutoControlledComponent<WithAsProp<TreeProps>, TreeState> {\n  static create: ShorthandFactory<TreeProps>;\n\n  static displayName = 'Tree';\n\n  static deprecated_className = treeClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeItemIds: customPropTypes.collectionShorthand,\n    selectedItemIds: customPropTypes.collectionShorthand,\n    defaultActiveItemIds: customPropTypes.collectionShorthand,\n    defaultSelectedItemIds: customPropTypes.collectionShorthand,\n    exclusive: PropTypes.bool,\n    selectable: PropTypes.bool,\n    items: customPropTypes.collectionObjectShorthand,\n    onActiveItemIdsChange: PropTypes.func,\n    onSelectedItemIdsChange: PropTypes.func,\n    renderItemTitle: PropTypes.func,\n    renderedItems: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: treeBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['activeItemIds', 'selectedItemIds'];\n\n  static Item: typeof TreeItem = TreeItem;\n  static Title: typeof TreeTitle = TreeTitle;\n\n  static getAutoControlledStateFromProps(nextProps: TreeProps, prevState: TreeState) {\n    const { items, selectable } = nextProps;\n    let { activeItemIds, selectedItemIds } = nextProps;\n\n    if (selectable && items && !selectedItemIds) {\n      if (!selectedItemIds && items) {\n        selectedItemIds = prevState.selectedItemIds;\n\n        const iterateItems = (items, selectedItems = selectedItemIds) => {\n          _.forEach(items, item => {\n            if (item['selected'] && selectedItemIds.indexOf(item['id']) === -1) {\n              selectedItems.push(item['id']);\n            }\n            if (item['items']) {\n              return iterateItems(item['items']);\n            }\n          });\n        };\n\n        iterateItems(items);\n      }\n    }\n\n    if (!activeItemIds && items) {\n      activeItemIds = prevState.activeItemIds;\n\n      const expandedItemsGenerator = (items, acc = activeItemIds) =>\n        _.reduce(\n          items,\n          (acc, item) => {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          },\n          acc,\n        );\n\n      expandedItemsGenerator(items);\n    }\n\n    return {\n      activeItemIds,\n      selectedItemIds,\n    };\n  }\n\n  getInitialAutoControlledState() {\n    return { activeItemIds: [], selectedItemIds: [] };\n  }\n\n  treeRef = React.createRef<HTMLElement>();\n  itemsRef = new Map<string, React.RefObject<HTMLElement>>();\n\n  onFocusParent = (parent: string) => {\n    const parentRef = this.itemsRef.get(parent);\n\n    if (!parentRef || !parentRef.current) {\n      return;\n    }\n\n    parentRef.current.focus();\n  };\n\n  setSelectedItemIds = (e: React.SyntheticEvent, selectedItemIds: string[]) => {\n    _.invoke(this.props, 'onSelectedItemIdsChange', e, { ...this.props, selectedItemIds });\n\n    this.setState({\n      selectedItemIds,\n    });\n  };\n\n  processItemsForSelection = (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean) => {\n    let { selectedItemIds } = this.state;\n    const { id, selectableParent, items, expanded } = treeItemProps;\n    const treeItemHasSubtree = hasSubtree(treeItemProps);\n    const isExpandedSelectableParent = treeItemHasSubtree && selectableParent && expanded;\n\n    // parent must be selectable and expanded in order to procced with selection, otherwise return\n    if (treeItemHasSubtree && !(selectableParent && expanded)) {\n      return;\n    }\n\n    // if the target is equal to currentTarget it means treeItem should be collapsed, not procced with selection\n    if (treeItemHasSubtree && e.target === e.currentTarget && !executeSelection) {\n      return;\n    }\n\n    // push all tree items under particular parent into selection array\n    // not parent itself, therefore not procced with selection\n\n    if (isExpandedSelectableParent) {\n      if (this.isAllGroupChecked(items)) {\n        const selectedItems = this.getAllSelectableChildrenId(items);\n        selectedItemIds = selectedItemIds.filter(id => selectedItems.indexOf(id) === -1);\n      } else {\n        const selectItems = items => {\n          items.forEach(item => {\n            const selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n            if (selectedItemIds.indexOf(item.id) === -1) {\n              if (item.items) {\n                selectItems(item.items);\n              } else if (selectble) {\n                selectedItemIds.push(item.id);\n              }\n            }\n          });\n        };\n        selectItems(items);\n      }\n\n      this.setSelectedItemIds(e, selectedItemIds);\n      return;\n    }\n\n    // push/remove single tree item into selection array\n    if (selectedItemIds.indexOf(id) === -1) {\n      selectedItemIds.push(id);\n    } else {\n      selectedItemIds = selectedItemIds.filter(itemID => itemID !== id);\n    }\n\n    this.setSelectedItemIds(e, selectedItemIds);\n  };\n\n  onTitleClick = (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean = false) => {\n    const treeItemHasSubtree = hasSubtree(treeItemProps);\n\n    if (!treeItemProps) {\n      return;\n    }\n\n    if (treeItemProps.selectable) {\n      this.processItemsForSelection(e, treeItemProps, executeSelection);\n    }\n\n    if (treeItemHasSubtree && !executeSelection && e.target === e.currentTarget) {\n      this.expandItems(e, treeItemProps);\n    }\n  };\n\n  expandItems(e: React.SyntheticEvent, treeItemProps: TreeItemProps) {\n    let { activeItemIds } = this.state;\n    const { id } = treeItemProps;\n    const { exclusive, items } = this.props;\n    const siblings = getSiblings(items, id);\n\n    const activeItemIdIndex = activeItemIds.indexOf(id);\n\n    if (activeItemIdIndex > -1) {\n      activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n    } else {\n      if (exclusive) {\n        siblings.some(sibling => {\n          const activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n          if (activeSiblingIdIndex > -1) {\n            activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n\n            return true;\n          }\n          return false;\n        });\n      }\n\n      activeItemIds = [...activeItemIds, id];\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  }\n\n  onFocusFirstChild = (itemId: string) => {\n    const currentElement = this.itemsRef.get(itemId);\n\n    if (!currentElement || !currentElement.current) {\n      return;\n    }\n\n    const elementToBeFocused = getNextElement(this.treeRef.current, currentElement.current);\n\n    if (!elementToBeFocused) {\n      return;\n    }\n\n    elementToBeFocused.focus();\n  };\n\n  onSiblingsExpand = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    const { exclusive, items } = this.props;\n    if (exclusive) {\n      return;\n    }\n\n    const { id } = treeItemProps;\n    const { activeItemIds } = this.state;\n    const siblings = getSiblings(items, id);\n\n    siblings.forEach(sibling => {\n      if (hasSubtree(sibling) && !this.isActiveItem(sibling['id'])) {\n        activeItemIds.push(sibling['id']);\n      }\n    });\n\n    if (hasSubtree(treeItemProps) && !this.isActiveItem(id)) {\n      activeItemIds.push(id);\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  setActiveItemIds = (e: React.SyntheticEvent, activeItemIds: string[]) => {\n    _.invoke(this.props, 'onActiveItemIdsChange', e, { ...this.props, activeItemIds });\n\n    this.setState({\n      activeItemIds,\n    });\n  };\n\n  getAllSelectableChildrenId = items => {\n    return items.reduce((acc, item) => {\n      if (item.items) {\n        return [...acc, ...this.getAllSelectableChildrenId(item.items)];\n      }\n      return item.hasOwnProperty('selectable') && !item.selectable ? acc : [...acc, item.id];\n    }, []);\n  };\n\n  isIndeterminate = (item: TreeItemProps) => {\n    if (!item.selectableParent || !item.items) {\n      return false;\n    }\n\n    const { items } = item;\n\n    const selectableItemIds = this.getAllSelectableChildrenId(items);\n\n    return !this.isAllGroupChecked(items) && selectableItemIds.some(id => this.state.selectedItemIds.indexOf(id) > -1);\n  };\n\n  isAllGroupChecked = (items: ShorthandCollection<TreeItemProps, never>) => {\n    const selectableItemIds = this.getAllSelectableChildrenId(items);\n    return selectableItemIds.every(id => this.state.selectedItemIds.indexOf(id) > -1);\n  };\n\n  contextValue: TreeRenderContextValue = {\n    onFocusParent: this.onFocusParent,\n    onSiblingsExpand: this.onSiblingsExpand,\n    onFocusFirstChild: this.onFocusFirstChild,\n    onTitleClick: this.onTitleClick,\n  };\n\n  renderContent(accessibility: ReactAccessibilityBehavior): React.ReactElement[] {\n    const { items, renderItemTitle, selectable } = this.props;\n\n    if (!items) return null;\n\n    const renderItems = (items: TreeItemProps[], level = 1, parent?: string): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: TreeItemProps, index: number) => {\n        const id = item.id;\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && this.isActiveItem(id);\n        const isSelectedItem = this.isSelectedItem(item);\n        const indeterminate = this.isIndeterminate(item);\n\n        if (!this.itemsRef.has(id)) {\n          this.itemsRef.set(id, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () => ({\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n            expanded: isSubtreeExpanded,\n            selected: isSelectedItem,\n            selectable,\n            renderItemTitle,\n            id,\n            key: id,\n            parent,\n            level,\n            index: index + 1, // Used for aria-posinset and it's 1-based.\n            contentRef: this.itemsRef.get(id),\n            treeSize: items.length,\n            indeterminate,\n          }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item.items as TreeItemProps[], level + 1, id) : ([] as any)),\n        ];\n      }, []);\n    };\n\n    return renderItems(items as TreeItemProps[]);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, renderedItems } = this.props;\n\n    return (\n      <TreeContext.Provider value={this.contextValue}>\n        <Ref innerRef={this.treeRef}>\n          <ElementType\n            className={classes.root}\n            {...accessibility.attributes.root}\n            {...rtlTextContainer.getAttributes({ forElements: [children] })}\n            {...unhandledProps}\n            {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n          >\n            {childrenExist(children)\n              ? children\n              : renderedItems\n              ? renderedItems(this.renderContent(accessibility))\n              : this.renderContent(accessibility)}\n          </ElementType>\n        </Ref>\n      </TreeContext.Provider>\n    );\n  }\n\n  isActiveItem = (id: string): boolean => {\n    const { activeItemIds } = this.state;\n    return activeItemIds.indexOf(id) > -1;\n  };\n\n  isSelectedItem = (item: TreeItemProps): boolean => {\n    const { selectedItemIds } = this.state;\n\n    if (item.selectableParent && item.items) {\n      return this.isAllGroupChecked(item.items);\n    }\n\n    return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n  };\n}\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs<typeof Tree, TreeProps, 'ul'>(Tree);\n"]},"metadata":{},"sourceType":"module"}