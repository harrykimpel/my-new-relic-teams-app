{"ast":null,"code":"import _get from \"lodash/get\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuBehavior, toolbarMenuItemCheckboxBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes, childrenExist } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport ToolbarMenuRadioGroup from './ToolbarMenuRadioGroup';\nimport ToolbarMenuDivider from './ToolbarMenuDivider';\nimport ToolbarMenuItem from './ToolbarMenuItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarMenuClassName = 'ui-toolbar__menu';\n\nvar ToolbarMenu = function ToolbarMenu(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarMenu.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      children = props.children,\n      design = props.design,\n      items = props.items,\n      submenu = props.submenu,\n      submenuIndicator = props.submenuIndicator,\n      styles = props.styles,\n      variables = props.variables;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var mergedVariables = mergeComponentVariables(parentVariables, variables);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenu.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        _invoke(props, 'onClick', e, props);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarMenu.displayName, {\n    className: toolbarMenuClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergedVariables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleItemOverrides = function handleItemOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, itemProps) {\n        _invoke(predefinedProps, 'onClick', e, itemProps);\n\n        _invoke(props, 'onItemClick', e, Object.assign({}, itemProps, {\n          menuOpen: !!itemProps.menu\n        }));\n      }\n    };\n  };\n\n  var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {\n    return {\n      onItemClick: function onItemClick(e, itemProps) {\n        _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n        _invoke(props, 'onItemClick', e, itemProps);\n      }\n    };\n  };\n\n  var renderItems = function renderItems() {\n    return _map(items, function (item) {\n      var kind = _get(item, 'kind', 'item');\n\n      switch (kind) {\n        case 'divider':\n          return ToolbarMenuDivider.create(item);\n\n        case 'group':\n          return ToolbarMenuRadioGroup.create(item, {\n            overrideProps: handleRadioGroupOverrides\n          });\n\n        case 'toggle':\n          return ToolbarMenuItem.create(item, {\n            defaultProps: function defaultProps() {\n              return {\n                accessibility: toolbarMenuItemCheckboxBehavior\n              };\n            },\n            overrideProps: handleItemOverrides\n          });\n\n        default:\n          return ToolbarMenuItem.create(item, {\n            defaultProps: function defaultProps() {\n              return {\n                submenuIndicator: submenuIndicator,\n                inSubmenu: submenu\n              };\n            },\n            overrideProps: handleItemOverrides\n          });\n      }\n    });\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarMenu.handledProps, props);\n  var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    className: classes.root\n  })), React.createElement(ToolbarVariablesProvider, {\n    value: mergedVariables\n  }, childrenExist(children) ? children : renderItems())));\n  setEnd();\n  return element;\n};\n\nToolbarMenu.displayName = 'ToolbarMenu';\nToolbarMenu.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren\n});\nToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes);\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul'\n};\nToolbarMenu.create = createShorthandFactory({\n  Component: ToolbarMenu,\n  mappedArrayProp: 'items'\n});\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\n\nexport default withSafeTypeForAs(ToolbarMenu);","map":{"version":3,"sources":["components/Toolbar/ToolbarMenu.tsx"],"names":["toolbarMenuClassName","ToolbarMenu","context","React","setStart","setEnd","useTelemetry","accessibility","className","children","design","items","submenu","submenuIndicator","styles","variables","props","parentVariables","mergedVariables","mergeComponentVariables","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","rtl","classes","useStyles","mapPropsToInlineStyles","handleItemOverrides","onClick","menuOpen","itemProps","menu","handleRadioGroupOverrides","onItemClick","renderItems","kind","ToolbarMenuDivider","overrideProps","defaultProps","toolbarMenuItemCheckboxBehavior","inSubmenu","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","childrenExist","commonPropTypes","customPropTypes","PropTypes","shorthandAllowingChildren","Object","as","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuBehavior,\n  toolbarMenuItemCheckboxBehavior,\n  ToolbarMenuBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  createShorthandFactory,\n  commonPropTypes,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  ShorthandCollection,\n  withSafeTypeForAs,\n  ShorthandValue,\n  WithAsProp,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nimport ToolbarMenuRadioGroup, { ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport ToolbarMenuDivider from './ToolbarMenuDivider';\nimport ToolbarMenuItem, { ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarMenuItemShorthandKinds = 'divider' | 'item' | 'toggle';\n\nexport interface ToolbarMenuProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuBehaviorProps>;\n\n  /** Shorthand array of props for ToolbarMenu. */\n  items?: ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Indicates whether the menu is submenu. */\n  submenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuStylesProps = never;\nexport const toolbarMenuClassName = 'ui-toolbar__menu';\n\nconst ToolbarMenu: React.FC<WithAsProp<ToolbarMenuProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenu.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, children, design, items, submenu, submenuIndicator, styles, variables } = props;\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenu.displayName,\n    actionHandlers: {\n      performClick: e => {\n        _.invoke(props, 'onClick', e, props);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarMenuStylesProps>(ToolbarMenu.displayName, {\n    className: toolbarMenuClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergedVariables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleItemOverrides = predefinedProps => ({\n    onClick: (e, itemProps) => {\n      _.invoke(predefinedProps, 'onClick', e, itemProps);\n      _.invoke(props, 'onItemClick', e, {\n        ...itemProps,\n        menuOpen: !!itemProps.menu,\n      });\n    },\n  });\n\n  const handleRadioGroupOverrides = (predefinedProps: ToolbarMenuRadioGroupProps) => ({\n    onItemClick: (e, itemProps) => {\n      _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n      _.invoke(props, 'onItemClick', e, itemProps);\n    },\n  });\n\n  const renderItems = () => {\n    return _.map(items, item => {\n      const kind = _.get(item, 'kind', 'item');\n\n      switch (kind) {\n        case 'divider':\n          return ToolbarMenuDivider.create(item);\n\n        case 'group':\n          return ToolbarMenuRadioGroup.create(item, { overrideProps: handleRadioGroupOverrides });\n\n        case 'toggle':\n          return ToolbarMenuItem.create(item, {\n            defaultProps: () => ({ accessibility: toolbarMenuItemCheckboxBehavior }),\n            overrideProps: handleItemOverrides,\n          });\n\n        default:\n          return ToolbarMenuItem.create(item, {\n            defaultProps: () => ({\n              submenuIndicator,\n              inSubmenu: submenu,\n            }),\n            overrideProps: handleItemOverrides,\n          });\n      }\n    });\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenu.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        className: classes.root,\n      })}\n    >\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {childrenExist(children) ? children : renderItems()}\n      </ToolbarVariablesProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarMenu.displayName = 'ToolbarMenu';\n\nToolbarMenu.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n};\nToolbarMenu.handledProps = Object.keys(ToolbarMenu.propTypes) as any;\n\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul',\n};\n\nToolbarMenu.create = createShorthandFactory({ Component: ToolbarMenu, mappedArrayProp: 'items' });\n\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenu, ToolbarMenuProps, 'ul'>(ToolbarMenu);\n"]},"metadata":{},"sourceType":"module"}