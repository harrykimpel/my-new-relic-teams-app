{"ast":null,"code":"import { imageBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nexport var imageClassName = 'ui-image';\n\nvar Image = function Image(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Image.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      alt = props.alt,\n      ariaLabel = props['aria-label'],\n      avatar = props.avatar,\n      circular = props.circular,\n      className = props.className,\n      design = props.design,\n      fluid = props.fluid,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        alt: alt,\n        'aria-label': ariaLabel\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        avatar: avatar,\n        circular: circular,\n        fluid: fluid\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Image.handledProps, props);\n  var result = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)));\n  setEnd();\n  return result;\n};\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior\n};\nImage.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool\n});\nImage.handledProps = Object.keys(Image.propTypes);\nImage.create = createShorthandFactory({\n  Component: Image,\n  mappedProp: 'src',\n  allowsJSX: false\n});\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\n\nexport default withSafeTypeForAs(Image);","map":{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageClassName","Image","context","React","setStart","setEnd","useTelemetry","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","props","getA11Props","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","result","root","as","imageBehavior","children","content","PropTypes","bool","Object","createShorthandFactory","Component","mappedProp","allowsJSX","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\nconst Image: React.FC<WithAsProp<ImageProps>> & FluentComponentStaticProps<ImageProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport default withSafeTypeForAs<typeof Image, ImageProps, 'img'>(Image);\n"]},"metadata":{},"sourceType":"module"}