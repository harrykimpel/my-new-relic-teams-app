{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { menuItemBehavior, submenuBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport { focusAsync } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { AutoControlledComponent, childrenExist, createShorthandFactory, doesNodeContainClick, commonPropTypes, isFromKeyboard, applyAccessibilityKeyHandlers } from '../../utils';\nimport Menu from './Menu';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nimport { Popper, getPopperPropsFromShorthand } from '../../utils/positioner';\nexport var menuItemClassName = 'ui-menu__item';\nexport var menuItemSlotClassNames = {\n  submenu: \"\".concat(menuItemClassName, \"__submenu\"),\n  wrapper: \"\".concat(menuItemClassName, \"__wrapper\"),\n  indicator: \"\".concat(menuItemClassName, \"__indicator\")\n};\n\nvar MenuItem = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(MenuItem, _AutoControlledCompon);\n\n  function MenuItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MenuItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"menuRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"itemRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWrapperBlur\", function (e) {\n      if (!_this.props.inSubmenu && !e.currentTarget.contains(e.relatedTarget)) {\n        _this.trySetMenuOpen(false, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      performClick: function performClick(event) {\n        return !event.defaultPrevented && _this.handleClick(event);\n      },\n      openMenu: function openMenu(event) {\n        return _this.openMenu(event);\n      },\n      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {\n        return _this.closeAllMenus(event);\n      },\n      closeMenu: function closeMenu(event) {\n        return _this.closeMenu(event);\n      },\n      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {\n        return _this.closeMenu(event, true);\n      },\n      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {\n        event.stopPropagation();\n      },\n      closeAllMenus: function closeAllMenus(event) {\n        return _this.closeAllMenus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"outsideClickHandler\", function (e) {\n      if (!_this.isSubmenuOpen()) return;\n\n      if (!doesNodeContainClick(_this.itemRef.current, e, _this.context.target) && !doesNodeContainClick(_this.menuRef.current, e, _this.context.target)) {\n        _this.trySetMenuOpen(false, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"performClick\", function (e) {\n      var _this$props = _this.props,\n          active = _this$props.active,\n          menu = _this$props.menu;\n\n      if (menu) {\n        if (doesNodeContainClick(_this.menuRef.current, e, _this.context.target)) {\n          // submenu was clicked => close it and propagate\n          _this.trySetMenuOpen(false, e, function () {\n            return focusAsync(_this.itemRef.current);\n          });\n        } else {\n          // the menuItem element was clicked => toggle the open/close and stop propagation\n          _this.trySetMenuOpen(active ? !_this.state.menuOpen : true, e);\n\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _this.performClick(e);\n\n      _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (e) {\n      _this.setState({\n        isFromKeyboard: false\n      });\n\n      _invoke(_this.props, 'onBlur', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (e) {\n      _this.setState({\n        isFromKeyboard: isFromKeyboard()\n      });\n\n      _invoke(_this.props, 'onFocus', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSubmenuOpen\", function () {\n      var menu = _this.props.menu;\n      var menuOpen = _this.state.menuOpen;\n      return !!(menu && menuOpen);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeAllMenus\", function (e) {\n      if (!_this.isSubmenuOpen()) {\n        return;\n      }\n\n      var inSubmenu = _this.props.inSubmenu;\n\n      _this.trySetMenuOpen(false, e, function () {\n        if (!inSubmenu) {\n          focusAsync(_this.itemRef.current);\n        }\n      }); // avoid spacebar scrolling the page\n\n\n      if (!inSubmenu) {\n        e.preventDefault();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeMenu\", function (e, forceTriggerFocus) {\n      if (!_this.isSubmenuOpen()) {\n        return;\n      }\n\n      var inSubmenu = _this.props.inSubmenu;\n      var shouldStopPropagation = inSubmenu || _this.props.vertical;\n\n      _this.trySetMenuOpen(false, e, function () {\n        if (forceTriggerFocus || shouldStopPropagation) {\n          focusAsync(_this.itemRef.current);\n        }\n      });\n\n      if (forceTriggerFocus || shouldStopPropagation) {\n        e.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openMenu\", function (e) {\n      var menu = _this.props.menu;\n      var menuOpen = _this.state.menuOpen;\n\n      if (menu && !menuOpen) {\n        _this.trySetMenuOpen(true, e);\n\n        _invoke(_this.props, 'onActiveChanged', e, Object.assign({}, _this.props, {\n          active: true\n        }));\n\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuItem, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          rtl = _ref.rtl;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          content = _this$props2.content,\n          icon = _this$props2.icon,\n          wrapper = _this$props2.wrapper,\n          menu = _this$props2.menu,\n          primary = _this$props2.primary,\n          secondary = _this$props2.secondary,\n          active = _this$props2.active,\n          vertical = _this$props2.vertical,\n          indicator = _this$props2.indicator,\n          disabled = _this$props2.disabled;\n      var menuOpen = this.state.menuOpen;\n      var menuItemInner = childrenExist(children) ? children : React.createElement(Ref, {\n        innerRef: this.itemRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root,\n        disabled: disabled,\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus\n      }, accessibility.attributes.root, accessibility.keyHandlers.root, unhandledProps, !wrapper && {\n        onClick: this.handleClick\n      }, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), Box.create(icon, {\n        defaultProps: function defaultProps() {\n          return {\n            styles: styles.icon,\n            as: 'span'\n          };\n        }\n      }), Box.create(content, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'span',\n            styles: styles.content\n          };\n        }\n      }), menu && Box.create(indicator, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'span',\n            className: menuItemSlotClassNames.indicator,\n            styles: styles.indicator,\n            accessibility: indicatorBehavior\n          };\n        }\n      })));\n      var maybeSubmenu = menu && active && menuOpen ? React.createElement(React.Fragment, null, React.createElement(Ref, {\n        innerRef: this.menuRef\n      }, React.createElement(Popper, _extends({\n        align: vertical ? 'top' : rtl ? 'end' : 'start',\n        position: vertical ? rtl ? 'before' : 'after' : 'below',\n        targetRef: this.itemRef\n      }, getPopperPropsFromShorthand(menu)), Menu.create(menu, {\n        defaultProps: function defaultProps() {\n          return {\n            accessibility: submenuBehavior,\n            className: menuItemSlotClassNames.submenu,\n            vertical: true,\n            primary: primary,\n            secondary: secondary,\n            styles: styles.menu,\n            submenu: true,\n            indicator: indicator\n          };\n        }\n      }))), React.createElement(EventListener, {\n        listener: this.outsideClickHandler,\n        target: this.context.target,\n        type: \"click\"\n      })) : null;\n\n      if (wrapper) {\n        return Box.create(wrapper, {\n          defaultProps: function defaultProps() {\n            return Object.assign({\n              className: cx(menuItemSlotClassNames.wrapper, classes.wrapper)\n            }, accessibility.attributes.wrapper, {}, applyAccessibilityKeyHandlers(accessibility.keyHandlers.wrapper, wrapper));\n          },\n          overrideProps: function overrideProps() {\n            return {\n              children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu),\n              onClick: _this2.handleClick,\n              onBlur: _this2.handleWrapperBlur\n            };\n          }\n        });\n      }\n\n      return menuItemInner;\n    }\n  }, {\n    key: \"trySetMenuOpen\",\n    value: function trySetMenuOpen(newValue, e, onStateChanged) {\n      this.setState({\n        menuOpen: newValue\n      }); // The reason why post-effect is not passed as callback to trySetState method\n      // is that in 'controlled' mode the post-effect is applied before final re-rendering\n      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n\n      onStateChanged && onStateChanged();\n\n      _invoke(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {\n        menuOpen: newValue\n      }));\n    }\n  }]);\n\n  return MenuItem;\n}(AutoControlledComponent);\n\n_defineProperty(MenuItem, \"displayName\", 'MenuItem');\n\n_defineProperty(MenuItem, \"deprecated_className\", menuItemClassName);\n\n_defineProperty(MenuItem, \"create\", void 0);\n\n_defineProperty(MenuItem, \"propTypes\", Object.assign({}, commonPropTypes.createCommon(), {\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconOnly: PropTypes.bool,\n  index: PropTypes.number,\n  itemPosition: PropTypes.number,\n  itemsCount: PropTypes.number,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  pills: PropTypes.bool,\n  pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  underlined: PropTypes.bool,\n  vertical: PropTypes.bool,\n  wrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  menuOpen: PropTypes.bool,\n  defaultMenuOpen: PropTypes.bool,\n  onActiveChanged: PropTypes.func,\n  inSubmenu: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  onMenuOpenChange: PropTypes.func\n}));\n\n_defineProperty(MenuItem, \"defaultProps\", {\n  as: 'a',\n  accessibility: menuItemBehavior,\n  wrapper: {\n    as: 'li'\n  },\n  indicator: {}\n});\n\n_defineProperty(MenuItem, \"autoControlledProps\", ['menuOpen']);\n\nMenuItem.create = createShorthandFactory({\n  Component: MenuItem,\n  mappedProp: 'content'\n});\n/**\n * A MenuItem is an actionable item within a Menu.\n */\n\nexport default withSafeTypeForAs(MenuItem);","map":{"version":3,"sources":["components/Menu/MenuItem.tsx"],"names":["menuItemClassName","menuItemSlotClassNames","submenu","wrapper","indicator","MenuItem","AutoControlledComponent","commonPropTypes","active","PropTypes","bool","disabled","icon","customPropTypes","shorthandAllowingChildren","iconOnly","index","number","itemPosition","itemsCount","onClick","func","onFocus","onBlur","pills","pointing","primary","secondary","underlined","vertical","menu","menuOpen","defaultMenuOpen","onActiveChanged","inSubmenu","onMenuOpenChange","as","accessibility","React","ElementType","classes","unhandledProps","styles","rtl","children","content","menuItemInner","childrenExist","itemRef","handleFocus","handleClick","applyAccessibilityKeyHandlers","defaultProps","className","indicatorBehavior","maybeSubmenu","menuRef","getPopperPropsFromShorthand","cx","overrideProps","handleWrapperBlur","e","performClick","event","openMenu","closeAllMenusAndFocusNextParentItem","closeMenu","closeMenuAndFocusTrigger","doNotNavigateNextParentItem","closeAllMenus","doesNodeContainClick","focusAsync","isFromKeyboard","shouldStopPropagation","forceTriggerFocus","newValue","onStateChanged","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, menuItemBehavior, submenuBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport { focusAsync } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  createShorthandFactory,\n  doesNodeContainClick,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  isFromKeyboard,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport Menu, { MenuProps, MenuShorthandKinds } from './Menu';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, ShorthandCollection, withSafeTypeForAs } from '../../types';\nimport { Popper, PopperShorthandProps, getPopperPropsFromShorthand } from '../../utils/positioner';\n\nexport interface MenuItemSlotClassNames {\n  wrapper: string;\n  submenu: string;\n  indicator: string;\n}\n\nexport interface MenuItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available menuItemAsToolbarButtonBehavior, tabBehavior\n   */\n  accessibility?: Accessibility;\n\n  /** A menu item can be active. */\n  active?: boolean;\n\n  /** A menu item can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Name or shorthand for Menu Item Icon */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** A menu may have just icons. */\n  iconOnly?: boolean;\n\n  /** MenuItem index inside Menu. */\n  index?: number;\n\n  /** MenuItem position inside Menu (skipping separators). */\n  itemPosition?: number;\n\n  /** MenuItem count inside Menu. */\n  itemsCount?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Called after item blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<MenuItemProps>;\n\n  /** A menu can adjust its appearance to de-emphasize its contents. */\n  pills?: boolean;\n\n  /**\n   * A menu can point to show its relationship to nearby content.\n   * For vertical menu, it can point to the start of the item or to the end.\n   */\n  pointing?: boolean | 'start' | 'end';\n\n  /** The menu item can have primary type. */\n  primary?: boolean;\n\n  /** The menu item can have secondary type. */\n  secondary?: boolean;\n\n  /** Menu items can by highlighted using underline. */\n  underlined?: boolean;\n\n  /** A vertical menu displays elements vertically. */\n  vertical?: boolean;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for the submenu. */\n  menu?:\n    | ShorthandValue<MenuProps & { popper?: PopperShorthandProps }>\n    | ShorthandCollection<MenuItemProps, MenuShorthandKinds>;\n\n  /** Indicates if the menu inside the item is open. */\n  menuOpen?: boolean;\n\n  /** Default menu open */\n  defaultMenuOpen?: boolean;\n\n  /** Callback for setting the current menu item as active element in the menu. */\n  onActiveChanged?: ComponentEventHandler<MenuItemProps>;\n\n  /** Indicates whether the menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onMenuOpenChange?: ComponentEventHandler<MenuItemProps>;\n}\n\nexport interface MenuItemState {\n  isFromKeyboard: boolean;\n  menuOpen: boolean;\n}\n\nexport const menuItemClassName = 'ui-menu__item';\nexport const menuItemSlotClassNames: MenuItemSlotClassNames = {\n  submenu: `${menuItemClassName}__submenu`,\n  wrapper: `${menuItemClassName}__wrapper`,\n  indicator: `${menuItemClassName}__indicator`,\n};\n\nclass MenuItem extends AutoControlledComponent<WithAsProp<MenuItemProps>, MenuItemState> {\n  static displayName = 'MenuItem';\n\n  static deprecated_className = menuItemClassName;\n\n  static create: ShorthandFactory<MenuItemProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    active: PropTypes.bool,\n    disabled: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconOnly: PropTypes.bool,\n    index: PropTypes.number,\n    itemPosition: PropTypes.number,\n    itemsCount: PropTypes.number,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    pills: PropTypes.bool,\n    pointing: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['start', 'end'])]),\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    underlined: PropTypes.bool,\n    vertical: PropTypes.bool,\n    wrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n    menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    menuOpen: PropTypes.bool,\n    defaultMenuOpen: PropTypes.bool,\n    onActiveChanged: PropTypes.func,\n    inSubmenu: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    onMenuOpenChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'a',\n    accessibility: menuItemBehavior as Accessibility,\n    wrapper: { as: 'li' },\n    indicator: {},\n  };\n\n  static autoControlledProps = ['menuOpen'];\n\n  menuRef = React.createRef<HTMLElement>();\n  itemRef = React.createRef<HTMLElement>();\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, rtl }) {\n    const {\n      children,\n      content,\n      icon,\n      wrapper,\n      menu,\n      primary,\n      secondary,\n      active,\n      vertical,\n      indicator,\n      disabled,\n    } = this.props;\n    const { menuOpen } = this.state;\n\n    const menuItemInner = childrenExist(children) ? (\n      children\n    ) : (\n      <Ref innerRef={this.itemRef}>\n        <ElementType\n          className={classes.root}\n          disabled={disabled}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          {...accessibility.attributes.root}\n          {...accessibility.keyHandlers.root}\n          {...unhandledProps}\n          {...(!wrapper && { onClick: this.handleClick })}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {Box.create(icon, {\n            defaultProps: () => ({\n              styles: styles.icon,\n              as: 'span',\n            }),\n          })}\n          {Box.create(content, {\n            defaultProps: () => ({ as: 'span', styles: styles.content }),\n          })}\n          {menu &&\n            Box.create(indicator, {\n              defaultProps: () => ({\n                as: 'span',\n                className: menuItemSlotClassNames.indicator,\n                styles: styles.indicator,\n                accessibility: indicatorBehavior,\n              }),\n            })}\n        </ElementType>\n      </Ref>\n    );\n    const maybeSubmenu =\n      menu && active && menuOpen ? (\n        <>\n          <Ref innerRef={this.menuRef}>\n            <Popper\n              align={vertical ? 'top' : rtl ? 'end' : 'start'}\n              position={vertical ? (rtl ? 'before' : 'after') : 'below'}\n              targetRef={this.itemRef}\n              {...getPopperPropsFromShorthand(menu)}\n            >\n              {Menu.create(menu, {\n                defaultProps: () => ({\n                  accessibility: submenuBehavior,\n                  className: menuItemSlotClassNames.submenu,\n                  vertical: true,\n                  primary,\n                  secondary,\n                  styles: styles.menu,\n                  submenu: true,\n                  indicator,\n                }),\n              })}\n            </Popper>\n          </Ref>\n          <EventListener listener={this.outsideClickHandler} target={this.context.target} type=\"click\" />\n        </>\n      ) : null;\n\n    if (wrapper) {\n      return Box.create(wrapper, {\n        defaultProps: () => ({\n          className: cx(menuItemSlotClassNames.wrapper, classes.wrapper),\n          ...accessibility.attributes.wrapper,\n          ...applyAccessibilityKeyHandlers(accessibility.keyHandlers.wrapper, wrapper),\n        }),\n        overrideProps: () => ({\n          children: (\n            <>\n              {menuItemInner}\n              {maybeSubmenu}\n            </>\n          ),\n          onClick: this.handleClick,\n          onBlur: this.handleWrapperBlur,\n        }),\n      });\n    }\n    return menuItemInner;\n  }\n\n  handleWrapperBlur = e => {\n    if (!this.props.inSubmenu && !e.currentTarget.contains(e.relatedTarget)) {\n      this.trySetMenuOpen(false, e);\n    }\n  };\n\n  actionHandlers = {\n    performClick: event => !event.defaultPrevented && this.handleClick(event),\n    openMenu: event => this.openMenu(event),\n    closeAllMenusAndFocusNextParentItem: event => this.closeAllMenus(event),\n    closeMenu: event => this.closeMenu(event),\n    closeMenuAndFocusTrigger: event => this.closeMenu(event, true),\n    doNotNavigateNextParentItem: event => {\n      event.stopPropagation();\n    },\n    closeAllMenus: event => this.closeAllMenus(event),\n  };\n\n  outsideClickHandler = e => {\n    if (!this.isSubmenuOpen()) return;\n    if (\n      !doesNodeContainClick(this.itemRef.current, e, this.context.target) &&\n      !doesNodeContainClick(this.menuRef.current, e, this.context.target)\n    ) {\n      this.trySetMenuOpen(false, e);\n    }\n  };\n\n  performClick = e => {\n    const { active, menu } = this.props;\n\n    if (menu) {\n      if (doesNodeContainClick(this.menuRef.current, e, this.context.target)) {\n        // submenu was clicked => close it and propagate\n        this.trySetMenuOpen(false, e, () => focusAsync(this.itemRef.current));\n      } else {\n        // the menuItem element was clicked => toggle the open/close and stop propagation\n        this.trySetMenuOpen(active ? !this.state.menuOpen : true, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  };\n\n  handleClick = (e: Event | React.SyntheticEvent) => {\n    const { disabled } = this.props;\n\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    this.performClick(e);\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  handleBlur = (e: React.SyntheticEvent) => {\n    this.setState({ isFromKeyboard: false });\n\n    _.invoke(this.props, 'onBlur', e, this.props);\n  };\n\n  handleFocus = (e: React.SyntheticEvent) => {\n    this.setState({ isFromKeyboard: isFromKeyboard() });\n\n    _.invoke(this.props, 'onFocus', e, this.props);\n  };\n\n  isSubmenuOpen = (): boolean => {\n    const { menu } = this.props;\n    const { menuOpen } = this.state;\n\n    return !!(menu && menuOpen);\n  };\n\n  closeAllMenus = (e: Event) => {\n    if (!this.isSubmenuOpen()) {\n      return;\n    }\n    const { inSubmenu } = this.props;\n    this.trySetMenuOpen(false, e, () => {\n      if (!inSubmenu) {\n        focusAsync(this.itemRef.current);\n      }\n    });\n\n    // avoid spacebar scrolling the page\n    if (!inSubmenu) {\n      e.preventDefault();\n    }\n  };\n\n  closeMenu = (e: Event, forceTriggerFocus?: boolean) => {\n    if (!this.isSubmenuOpen()) {\n      return;\n    }\n\n    const { inSubmenu } = this.props;\n    const shouldStopPropagation = inSubmenu || this.props.vertical;\n    this.trySetMenuOpen(false, e, () => {\n      if (forceTriggerFocus || shouldStopPropagation) {\n        focusAsync(this.itemRef.current);\n      }\n    });\n\n    if (forceTriggerFocus || shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n\n  openMenu = (e: Event) => {\n    const { menu } = this.props;\n    const { menuOpen } = this.state;\n    if (menu && !menuOpen) {\n      this.trySetMenuOpen(true, e);\n      _.invoke(this.props, 'onActiveChanged', e, { ...this.props, active: true });\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  trySetMenuOpen(newValue: boolean, e: Event | React.SyntheticEvent, onStateChanged?: any) {\n    this.setState({ menuOpen: newValue });\n    // The reason why post-effect is not passed as callback to trySetState method\n    // is that in 'controlled' mode the post-effect is applied before final re-rendering\n    // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n    // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n    onStateChanged && onStateChanged();\n    _.invoke(this.props, 'onMenuOpenChange', e, {\n      ...this.props,\n      menuOpen: newValue,\n    });\n  }\n}\n\nMenuItem.create = createShorthandFactory({ Component: MenuItem, mappedProp: 'content' });\n\n/**\n * A MenuItem is an actionable item within a Menu.\n */\nexport default withSafeTypeForAs<typeof MenuItem, MenuItemProps, 'a'>(MenuItem);\n"]},"metadata":{},"sourceType":"module"}