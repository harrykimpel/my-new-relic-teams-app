{"ast":null,"code":"import * as keyboardKey from 'keyboard-key';\n/**\n * @description\n * Adds attribute 'tabIndex=0' to 'root' slot if 'active' property and 'navigation' property is true. Sets the attribute to '-1' otherwise.\n * @specification\n * Adds attribute 'role=tabpanel' based on the property 'navigation' to 'root' slot.\n * Adds attribute 'aria-hidden=false' to 'root' slot if 'active' property is true. Sets the attribute to 'true' otherwise.\n * Triggers 'arrowKeysNavigationStopPropagation' action with 'ArrowRight' or 'ArrowLeft' on 'root'.\n */\n\nvar carouselItemBehavior = function carouselItemBehavior(props) {\n  return {\n    attributes: {\n      root: {\n        role: props.navigation ? 'tabpanel' : undefined,\n        'aria-hidden': props.active ? 'false' : 'true',\n        tabIndex: props.navigation ? props.active ? 0 : -1 : undefined\n      }\n    },\n    keyActions: {\n      root: {\n        arrowKeysNavigationStopPropagation: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }, {\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      }\n    }\n  };\n};\n\nexport default carouselItemBehavior;","map":{"version":3,"sources":["behaviors/Carousel/carouselItemBehavior.ts"],"names":["carouselItemBehavior","attributes","root","role","props","tabIndex","undefined","keyActions","arrowKeysNavigationStopPropagation","keyCombinations","keyCode","keyboardKey","ArrowRight","ArrowLeft"],"mappings":"AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA;;;;;;;;;AAQA,IAAMA,oBAA8D,GAAG,SAAjEA,oBAAiE,CAAA,KAAA,EAAK;AAAA,SAAK;AAC/EC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEC,KAAK,CAALA,UAAAA,GAAAA,UAAAA,GADF,SAAA;AAEJ,uBAAeA,KAAK,CAALA,MAAAA,GAAAA,OAAAA,GAFX,MAAA;AAGJC,QAAAA,QAAQ,EAAED,KAAK,CAALA,UAAAA,GAAoBA,KAAK,CAALA,MAAAA,GAAAA,CAAAA,GAAmB,CAAvCA,CAAAA,GAA6CE;AAHnD;AADI,KADmE;AAS/EC,IAAAA,UAAU,EAAE;AACVL,MAAAA,IAAI,EAAE;AACJM,QAAAA,kCAAkC,EAAE;AAClCC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAsC;AAAEF,YAAAA,OAAO,EAAEC,WAAW,CAACE;AAAvB,WAAtC;AADiB;AADhC;AADI;AATmE,GAAL;AAA5E,CAAA;;AAkBA,eAAA,oBAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport * as keyboardKey from 'keyboard-key';\n\n/**\n * @description\n * Adds attribute 'tabIndex=0' to 'root' slot if 'active' property and 'navigation' property is true. Sets the attribute to '-1' otherwise.\n * @specification\n * Adds attribute 'role=tabpanel' based on the property 'navigation' to 'root' slot.\n * Adds attribute 'aria-hidden=false' to 'root' slot if 'active' property is true. Sets the attribute to 'true' otherwise.\n * Triggers 'arrowKeysNavigationStopPropagation' action with 'ArrowRight' or 'ArrowLeft' on 'root'.\n */\nconst carouselItemBehavior: Accessibility<CarouselItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: props.navigation ? 'tabpanel' : undefined,\n      'aria-hidden': props.active ? 'false' : 'true',\n      tabIndex: props.navigation ? (props.active ? 0 : -1) : undefined,\n    },\n  },\n\n  keyActions: {\n    root: {\n      arrowKeysNavigationStopPropagation: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowRight }, { keyCode: keyboardKey.ArrowLeft }],\n      },\n    },\n  },\n});\n\nexport default carouselItemBehavior;\n\nexport type CarouselItemBehaviorProps = {\n  /** If item is visible in the carousel. */\n  active?: boolean;\n  navigation?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}