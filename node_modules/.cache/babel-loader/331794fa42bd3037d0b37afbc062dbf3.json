{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as keyboardKey from 'keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nvar CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';\n/**\n * @description\n * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.\n *\n * @specification\n * Provides arrow key navigation in vertical direction.\n * Focus is set initially on the specified default tabbable element.\n * Focused active element of the component is reset when TAB from the component.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Does not handle PageDown and PageUp.\n */\n\nvar ChatBehavior = function ChatBehavior() {\n  var _props;\n\n  return {\n    attributes: {\n      root: {}\n    },\n    focusZone: {\n      props: (_props = {\n        shouldEnterInnerZone: function shouldEnterInnerZone(event) {\n          return keyboardKey.getCode(event) === keyboardKey.Enter;\n        },\n        direction: FocusZoneDirection.vertical,\n        shouldResetActiveElementWhenTabFromZone: true,\n        defaultTabbableElement: getLastTabbableElement\n      }, _defineProperty(_props, CHAT_FOCUSZONE_ATTRIBUTE, ''), _defineProperty(_props, \"pagingSupportDisabled\", true), _props)\n    }\n  };\n};\n\nvar getLastTabbableElement = function getLastTabbableElement(root) {\n  var lastVisibleMessage = root.querySelector('[data-last-visible=\"true\"]');\n  if (lastVisibleMessage) return lastVisibleMessage;\n  var chatItemsElements = root.querySelectorAll(\"[\".concat(CHAT_FOCUSZONE_ATTRIBUTE, \"] .ui-chat__message[\").concat(IS_FOCUSABLE_ATTRIBUTE, \"=\\\"true\\\"]\"));\n  return chatItemsElements.length > 0 ? chatItemsElements[chatItemsElements.length - 1] : null;\n};\n\nexport default ChatBehavior;","map":{"version":3,"sources":["behaviors/Chat/chatBehavior.ts"],"names":["CHAT_FOCUSZONE_ATTRIBUTE","ChatBehavior","attributes","root","focusZone","props","shouldEnterInnerZone","keyboardKey","direction","FocusZoneDirection","shouldResetActiveElementWhenTabFromZone","defaultTabbableElement","getLastTabbableElement","lastVisibleMessage","chatItemsElements"],"mappings":";AAAA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAEA,SAAA,kBAAA,QAAA,uBAAA;AAEA,IAAMA,wBAAwB,GAA9B,gBAAA;AAEA;;;;;;;;;;;;AAWA,IAAMC,YAA8C,GAAG,SAAjDA,YAAiD,GAAA;AAAA,MAAA,MAAA;;AAAA,SAAO;AAC5DC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI,KADgD;AAI5DC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,GAAA,MAAA,GAAA;AACHC,QAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,KAAA,EAAK;AAAA,iBAAIC,WAAW,CAAXA,OAAAA,CAAAA,KAAAA,MAA+BA,WAAW,CAA9C,KAAA;AADxB,SAAA;AAEHC,QAAAA,SAAS,EAAEC,kBAAkB,CAF1B,QAAA;AAGHC,QAAAA,uCAAuC,EAHpC,IAAA;AAIHC,QAAAA,sBAAsB,EAAEC;AAJrB,OAAA,EAAA,eAAA,CAAA,MAAA,EAAA,wBAAA,EAAA,EAAA,CAAA,EAAA,eAAA,CAAA,MAAA,EAAA,uBAAA,EAAA,IAAA,CAAA,EAAA,MAAA;AADI;AAJiD,GAAP;AAAvD,CAAA;;AAgBA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAoC;AACjE,MAAMC,kBAAkB,GAAGV,IAAI,CAAJA,aAAAA,CAA3B,4BAA2BA,CAA3B;AACA,MAAA,kBAAA,EAAwB,OAAA,kBAAA;AAExB,MAAMW,iBAAiB,GAAGX,IAAI,CAAJA,gBAAAA,CAAAA,IAAAA,MAAAA,CAAAA,wBAAAA,EAAAA,sBAAAA,EAAAA,MAAAA,CAAAA,sBAAAA,EAA1B,YAA0BA,CAAAA,CAA1B;AAGA,SAAOW,iBAAiB,CAAjBA,MAAAA,GAAAA,CAAAA,GAAgCA,iBAAiB,CAACA,iBAAiB,CAAjBA,MAAAA,GAAlDA,CAAiD,CAAjDA,GAAP,IAAA;AAPF,CAAA;;AAYA,eAAA,YAAA","sourcesContent":["import * as keyboardKey from 'keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { FocusZoneDirection } from '../../focusZone/types';\n\nconst CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';\n\n/**\n * @description\n * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.\n *\n * @specification\n * Provides arrow key navigation in vertical direction.\n * Focus is set initially on the specified default tabbable element.\n * Focused active element of the component is reset when TAB from the component.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Does not handle PageDown and PageUp.\n */\nconst ChatBehavior: Accessibility<ChatBehaviorProps> = () => ({\n  attributes: {\n    root: {},\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => keyboardKey.getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.vertical,\n      shouldResetActiveElementWhenTabFromZone: true,\n      defaultTabbableElement: getLastTabbableElement, // select last chat message by default\n      [CHAT_FOCUSZONE_ATTRIBUTE]: '', // allows querying the default active element\n      pagingSupportDisabled: true,\n    },\n  },\n});\n\nconst getLastTabbableElement = (root: HTMLElement): HTMLElement => {\n  const lastVisibleMessage = root.querySelector('[data-last-visible=\"true\"]') as HTMLElement;\n  if (lastVisibleMessage) return lastVisibleMessage;\n\n  const chatItemsElements = root.querySelectorAll(\n    `[${CHAT_FOCUSZONE_ATTRIBUTE}] .ui-chat__message[${IS_FOCUSABLE_ATTRIBUTE}=\"true\"]`,\n  );\n  return chatItemsElements.length > 0 ? (chatItemsElements[chatItemsElements.length - 1] as HTMLElement) : null;\n};\n\nexport type ChatBehaviorProps = never;\n\nexport default ChatBehavior;\n"]},"metadata":{},"sourceType":"module"}