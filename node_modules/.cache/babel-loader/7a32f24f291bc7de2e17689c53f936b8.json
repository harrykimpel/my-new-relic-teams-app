{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getElementType, getUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { svgIconClassName, svgIconDisplayName, svgIconHandledProps } from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\n\nvar SvgIcon = function SvgIcon(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(SvgIcon.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var alt = props.alt,\n      ariaLabel = props['aria-label'],\n      bordered = props.bordered,\n      circular = props.circular,\n      className = props.className,\n      design = props.design,\n      disabled = props.disabled,\n      children = props.children,\n      outline = props.outline,\n      rotate = props.rotate,\n      size = props.size,\n      styles = props.styles,\n      variables = props.variables,\n      xSpacing = props.xSpacing;\n\n  var _useStyles = useStyles(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        bordered: bordered,\n        circular: circular,\n        disabled: disabled,\n        outline: outline,\n        rotate: rotate,\n        size: size,\n        xSpacing: xSpacing\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n  var element = React.createElement(ElementType, _extends({\n    role: \"img\",\n    \"aria-hidden\": alt || ariaLabel ? undefined : 'true',\n    \"aria-label\": ariaLabel,\n    className: classes.root\n  }, unhandledProps), callable(children)({\n    classes: classes,\n    rtl: context.rtl,\n    props: props\n  }));\n  setEnd();\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [].concat(_toConsumableArray(svgIconHandledProps), ['children']);\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0\n};\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\n\nexport default withSafeTypeForAs(SvgIcon);","map":{"version":3,"sources":["components/SvgIcon/SvgIcon.tsx"],"names":["SvgIcon","context","React","setStart","setEnd","useTelemetry","alt","ariaLabel","bordered","circular","className","design","disabled","children","outline","rotate","size","styles","variables","xSpacing","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","getUnhandledProps","element","root","as","withSafeTypeForAs"],"mappings":";;AAAA,SAAA,cAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,YAAA,QAAA,0BAAA;AACA,SAAA,gBAAA,EAAA,kBAAA,EAAA,mBAAA,QAAA,iCAAA;AAOA,SAAA,QAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAEA,SAAA,iBAAA,QAAA,aAAA;;AAMA,IAAMA,OAEL,GAAG,SAFEA,OAEF,CAAA,KAAA,EAAS;AACX,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AADW,MAAA,aAAA,GAGkBG,YAAY,CAACL,OAAO,CAAR,WAAA,EAAsBC,OAAO,CAH3D,SAG8B,CAH9B;AAAA,MAGHE,QAHG,GAAA,aAAA,CAAA,QAAA;AAAA,MAGOC,MAHP,GAAA,aAAA,CAAA,MAAA;;AAIXD,EAAAA,QAAQ;AAJG,MAOTG,GAPS,GAqBPc,KArBO,CAAA,GAAA;AAAA,MAQKb,SARL,GAqBPa,KArBO,CAAA,YAAA,CAAA;AAAA,MASTZ,QATS,GAqBPY,KArBO,CAAA,QAAA;AAAA,MAUTX,QAVS,GAqBPW,KArBO,CAAA,QAAA;AAAA,MAWTV,SAXS,GAqBPU,KArBO,CAAA,SAAA;AAAA,MAYTT,MAZS,GAqBPS,KArBO,CAAA,MAAA;AAAA,MAaTR,QAbS,GAqBPQ,KArBO,CAAA,QAAA;AAAA,MAcTP,QAdS,GAqBPO,KArBO,CAAA,QAAA;AAAA,MAeTN,OAfS,GAqBPM,KArBO,CAAA,OAAA;AAAA,MAgBTL,MAhBS,GAqBPK,KArBO,CAAA,MAAA;AAAA,MAiBTJ,IAjBS,GAqBPI,KArBO,CAAA,IAAA;AAAA,MAkBTH,MAlBS,GAqBPG,KArBO,CAAA,MAAA;AAAA,MAmBTF,SAnBS,GAqBPE,KArBO,CAAA,SAAA;AAAA,MAoBTD,QApBS,GAqBPC,KArBO,CAAA,QAAA;;AAAA,MAAA,UAAA,GAuBSE,SAAS,CAAqBtB,OAAO,CAA5B,WAAA,EAA0C;AACrEU,IAAAA,SAAS,EAD4D,gBAAA;AAErEa,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AACvBf,QAAAA,QAAQ,EADe,QAAA;AAEvBC,QAAAA,QAAQ,EAFe,QAAA;AAGvBG,QAAAA,QAAQ,EAHe,QAAA;AAIvBE,QAAAA,OAAO,EAJgB,OAAA;AAKvBC,QAAAA,MAAM,EALiB,MAAA;AAMvBC,QAAAA,IAAI,EANmB,IAAA;AAOvBG,QAAAA,QAAQ,EAARA;AAPuB,OAAP;AAFmD,KAAA;AAWrEK,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAAEd,QAAAA,SAAS,EAAX,SAAA;AAAaC,QAAAA,MAAM,EAAnB,MAAA;AAAqBM,QAAAA,MAAM,EAA3B,MAAA;AAA6BC,QAAAA,SAAS,EAATA;AAA7B,OAAP;AAX6C,KAAA;AAYrEO,IAAAA,GAAG,EAAExB,OAAO,CAACwB;AAZwD,GAA1C,CAvBlB;AAAA,MAuBHJ,OAvBG,GAAA,UAAA,CAAA,OAAA;;AAsCX,MAAMK,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAAC7B,OAAO,CAAR,YAAA,EAAxC,KAAwC,CAAxC;AAEA,MAAM8B,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,IAAA,IAAI,EADN,KAAA;AAEE,mBAAaxB,GAAG,IAAHA,SAAAA,GAAAA,SAAAA,GAFf,MAAA;AAGE,kBAHF,SAAA;AAIE,IAAA,SAAS,EAAEe,OAAO,CAACU;AAJrB,GAAA,EAAA,cAAA,CAAA,EAOG,QAAQ,CAAR,QAAQ,CAAR,CAAmB;AAAEV,IAAAA,OAAO,EAAT,OAAA;AAAWI,IAAAA,GAAG,EAAExB,OAAO,CAAvB,GAAA;AAA6BmB,IAAAA,KAAK,EAALA;AAA7B,GAAnB,CAPH,CADF;AAWAhB,EAAAA,MAAM;AAEN,SAAA,OAAA;AAxDF,CAAA;;AA2DAJ,OAAO,CAAPA,WAAAA,GAAAA,kBAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAAA,GAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,mBAAAA,CAAAA,EAAAA,CAAAA,UAAAA,CAAAA,CAAAA;AACAA,OAAO,CAAPA,YAAAA,GAAuB;AACrBgC,EAAAA,EAAE,EADmB,MAAA;AAErBhB,EAAAA,IAAI,EAFiB,QAAA;AAGrBD,EAAAA,MAAM,EAAE;AAHa,CAAvBf;AAMA;;;;AAGA,eAAeiC,iBAAiB,CAAhC,OAAgC,CAAhC","sourcesContent":["import { getElementType, getUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport {\n  SvgIconProps,\n  svgIconClassName,\n  svgIconDisplayName,\n  svgIconHandledProps,\n  SvgIconChildrenFn,\n} from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport type SvgIconStylesProps = Required<\n  Pick<SvgIconProps, 'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'>\n>;\n\nconst SvgIcon: React.FC<WithAsProp<SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }>> & {\n  handledProps: (keyof (SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }))[];\n} = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n\n  const { setStart, setEnd } = useTelemetry(SvgIcon.displayName, context.telemetry);\n  setStart();\n\n  const {\n    alt,\n    'aria-label': ariaLabel,\n    bordered,\n    circular,\n    className,\n    design,\n    disabled,\n    children,\n    outline,\n    rotate,\n    size,\n    styles,\n    variables,\n    xSpacing,\n  } = props;\n\n  const { classes } = useStyles<SvgIconStylesProps>(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: () => ({\n      bordered,\n      circular,\n      disabled,\n      outline,\n      rotate,\n      size,\n      xSpacing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n\n  const element = (\n    <ElementType\n      role=\"img\"\n      aria-hidden={alt || ariaLabel ? undefined : 'true'}\n      aria-label={ariaLabel}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {callable(children)({ classes, rtl: context.rtl, props })}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [...svgIconHandledProps, 'children'];\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0,\n};\n\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\nexport default withSafeTypeForAs<typeof SvgIcon, SvgIconProps, 'span'>(SvgIcon);\n"]},"metadata":{},"sourceType":"module"}