{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _keys from \"lodash/keys\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { FocusZoneDirection, FocusZoneTabbableElements, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport cx from 'classnames'; // @ts-ignore\n\nimport * as keyboardKey from 'keyboard-key';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { elementContains, findScrollableParent, getDocument as _getDocument, getParent, getWindow, shouldWrapFocus as _shouldWrapFocus } from '@uifabric/utilities';\nimport getElementType from '../utils/getElementType';\nimport getUnhandledProps from '../utils/getUnhandledProps';\nimport { getNextElement, getPreviousElement, isElementFocusZone, isElementFocusSubZone, isElementTabbable, getElementIndexPath, getFocusableByIndexPath, FOCUSZONE_ID_ATTRIBUTE } from './focusUtilities';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar _allInstances = {};\n\nvar _outerZones = new Set();\n\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\n\nvar FocusZone = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusZone, _React$Component);\n\n  _createClass(FocusZone, null, [{\n    key: \"getOuterZones\",\n\n    /** Used for testing purposes only. */\n    value: function getOuterZones() {\n      return _outerZones.size;\n    }\n  }]);\n\n  function FocusZone(props) {\n    var _this;\n\n    _classCallCheck(this, FocusZone);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FocusZone).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_root\", {\n      current: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_id\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_activeElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_lastIndexPath\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_isParked\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_parkedTabIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_defaultFocusElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_focusAlignment\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_isInnerZone\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_processingTabKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"windowElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"setRef\", function (elem) {\n      // findDOMNode needed to get correct DOM ref with react-hot-loader, see https://github.com/gaearon/react-hot-loader/issues/964\n      _this._root.current = ReactDOM.findDOMNode(elem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      _this.setParkedFocus(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function (ev) {\n      var _this$props = _this.props,\n          onActiveElementChanged = _this$props.onActiveElementChanged,\n          stopFocusPropagation = _this$props.stopFocusPropagation,\n          shouldFocusInnerElementWhenReceivedFocus = _this$props.shouldFocusInnerElementWhenReceivedFocus,\n          defaultTabbableElement = _this$props.defaultTabbableElement;\n      var newActiveElement;\n\n      var isImmediateDescendant = _this.isImmediateDescendantOfZone(ev.target);\n\n      if (isImmediateDescendant) {\n        newActiveElement = ev.target;\n      } else {\n        var parentElement = ev.target;\n\n        while (parentElement && parentElement !== _this._root.current) {\n          if (isElementTabbable(parentElement) && _this.isImmediateDescendantOfZone(parentElement)) {\n            newActiveElement = parentElement;\n            break;\n          }\n\n          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n      } // If an inner focusable element should be focused when FocusZone container receives focus\n\n\n      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && defaultTabbableElement(_this._root.current); // try to focus defaultTabbable element\n\n        if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n          newActiveElement = maybeElementToFocus;\n          maybeElementToFocus.focus();\n        } else {\n          // force focus on first focusable element\n          _this.focus(true);\n\n          if (_this._activeElement) {\n            // set to null as new active element was handled in method above\n            newActiveElement = null;\n          }\n        }\n      }\n\n      if (newActiveElement && newActiveElement !== _this._activeElement) {\n        _this._activeElement = newActiveElement;\n\n        if (isImmediateDescendant) {\n          _this.setFocusAlignment(_this._activeElement);\n\n          _this.updateTabIndexes();\n        }\n      }\n\n      if (onActiveElementChanged) {\n        onActiveElementChanged(_this._activeElement, ev);\n      }\n\n      if (stopFocusPropagation) {\n        ev.stopPropagation();\n      }\n\n      _invoke(_this.props, 'onFocus', ev);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onKeyDownCapture\", function (ev) {\n      if (keyboardKey.getCode(ev) === keyboardKey.Tab) {\n        _outerZones.forEach(function (zone) {\n          return zone.updateTabIndexes();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMouseDown\", function (ev) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var target = ev.target;\n      var path = [];\n\n      while (target && target !== _this._root.current) {\n        path.push(target);\n        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      while (path.length) {\n        target = path.pop();\n\n        if (target && isElementTabbable(target)) {\n          _this.setActiveElement(target, true);\n        }\n\n        if (isElementFocusZone(target)) {\n          // Stop here since the focus zone will take care of its own children.\n          break;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onKeyDown\", function (ev) {\n      var _this$props2 = _this.props,\n          direction = _this$props2.direction,\n          disabled = _this$props2.disabled,\n          shouldEnterInnerZone = _this$props2.shouldEnterInnerZone,\n          pagingSupportDisabled = _this$props2.pagingSupportDisabled;\n\n      if (disabled) {\n        return undefined;\n      }\n\n      var doc = _getDocument(_this._root.current);\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      } // @ts-ignore\n\n\n      if (doc.activeElement === _this._root.current && _this._isInnerZone) {\n        // If this element has focus, it is being controlled by a parent.\n        // Ignore the keystroke.\n        return undefined;\n      } // If the default has been prevented, do not process keyboard events.\n\n\n      if (ev.isDefaultPrevented()) {\n        return undefined;\n      }\n\n      if (shouldEnterInnerZone && shouldEnterInnerZone(ev) && _this.isImmediateDescendantOfZone(ev.target)) {\n        // Try to focus\n        var innerZone = _this.getFirstInnerZone();\n\n        if (innerZone) {\n          if (!innerZone.focus(true)) {\n            return undefined;\n          }\n        } else if (isElementFocusSubZone(ev.target)) {\n          if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n            return undefined;\n          }\n        } else {\n          return undefined;\n        }\n      } else if (ev.altKey) {\n        return undefined;\n      } else {\n        switch (keyboardKey.getCode(ev)) {\n          case keyboardKey.Spacebar:\n            // @ts-ignore\n            if (_this.tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return undefined;\n\n          case keyboardKey.ArrowLeft:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this.preventDefaultWhenHandled(ev);\n\n              if (_this.moveFocusLeft()) {\n                break;\n              }\n            }\n\n            return undefined;\n\n          case keyboardKey.ArrowRight:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this.preventDefaultWhenHandled(ev);\n\n              if (_this.moveFocusRight()) {\n                break;\n              }\n            }\n\n            return undefined;\n\n          case keyboardKey.ArrowUp:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this.preventDefaultWhenHandled(ev);\n\n              if (_this.moveFocusUp()) {\n                break;\n              }\n            }\n\n            return undefined;\n\n          case keyboardKey.ArrowDown:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this.preventDefaultWhenHandled(ev);\n\n              if (_this.moveFocusDown()) {\n                break;\n              }\n            }\n\n            return undefined;\n\n          case keyboardKey.PageDown:\n            if (!pagingSupportDisabled && _this.moveFocusPaging(true)) {\n              break;\n            }\n\n            return undefined;\n\n          case keyboardKey.PageUp:\n            if (!pagingSupportDisabled && _this.moveFocusPaging(false)) {\n              break;\n            }\n\n            return undefined;\n\n          case keyboardKey.Tab:\n            if (_this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this.isElementInput(ev.target)) {\n              var focusChanged = false;\n              _this._processingTabKey = true;\n\n              if (direction === FocusZoneDirection.vertical || !_this.shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                focusChanged = ev.shiftKey ? _this.moveFocusUp() : _this.moveFocusDown();\n              } else {\n                var tabWithDirection = _this.props.isRtl ? !ev.shiftKey : ev.shiftKey;\n                focusChanged = tabWithDirection ? _this.moveFocusLeft() : _this.moveFocusRight();\n              }\n\n              _this._processingTabKey = false;\n\n              if (focusChanged) {\n                break;\n              }\n            } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n              _this._activeElement = null;\n            }\n\n            return undefined;\n\n          case keyboardKey.Home:\n            if (_this.isContentEditableElement(ev.target) || _this.isElementInput(ev.target) && !_this.shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n\n            var firstChild = _this._root.current && _this._root.current.firstChild;\n\n            if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n              break;\n            }\n\n            return undefined;\n\n          case keyboardKey.End:\n            if (_this.isContentEditableElement(ev.target) || _this.isElementInput(ev.target) && !_this.shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n\n            var lastChild = _this._root.current && _this._root.current.lastChild;\n\n            if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n              break;\n            }\n\n            return undefined;\n\n          case keyboardKey.Enter:\n            // @ts-ignore\n            if (_this.tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return undefined;\n\n          default:\n            return undefined;\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n      return undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getHorizontalDistanceFromCenter\", function (isForward, activeRect, targetRect) {\n      var leftAlignment = _this._focusAlignment.left; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var activeRectTop = Math.floor(activeRect.top);\n      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          return 0;\n        }\n\n        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n      }\n\n      if (!_this.shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return LARGE_DISTANCE_FROM_CENTER;\n    });\n\n    _this._id = _uniqueId('FocusZone');\n    _this._focusAlignment = {\n      left: 0,\n      top: 0\n    };\n    _this._processingTabKey = false;\n    return _this;\n  }\n\n  _createClass(FocusZone, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _allInstances[this._id] = this;\n      this.setRef(this); // called here to support functional components, we only need HTMLElement ref anyway\n\n      if (!this._root.current) {\n        return;\n      } // @ts-ignore\n\n\n      this.windowElement = getWindow(this._root.current);\n      var parentElement = getParent(this._root.current, ALLOW_VIRTUAL_ELEMENTS);\n\n      var doc = _getDocument(this._root.current); // @ts-ignore\n\n\n      while (parentElement && parentElement !== doc.body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this.windowElement && _outerZones.size === 1) {\n          this.windowElement.addEventListener('keydown', this._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current.addEventListener('blur', this._onBlur, true); // Assign initial tab indexes so that we can set initial focus as appropriate.\n\n\n      this.updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this.getDocument().querySelector(this.props.defaultTabbableElement);\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this._root.current) {\n        return;\n      }\n\n      var doc = _getDocument(this._root.current);\n\n      if (doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || !this.props.preventFocusRestoration && doc.activeElement === this._root.current)) {\n        // The element has been removed after the render, attempt to restore focus.\n        var elementToFocus = getFocusableByIndexPath(this._root.current, this._lastIndexPath);\n\n        if (elementToFocus) {\n          this.setActiveElement(elementToFocus, true);\n          elementToFocus.focus();\n          this.setParkedFocus(false);\n        } else {\n          // We had a focus path to restore, but now that path is unresolvable. Park focus\n          // on the container until we can try again.\n          this.setParkedFocus(true);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      delete _allInstances[this._id];\n\n      if (!this._isInnerZone) {\n        _outerZones.delete(this);\n\n        if (this.windowElement && _outerZones.size === 0) {\n          this.windowElement.removeEventListener('keydown', this._onKeyDownCapture, true);\n        }\n      }\n\n      if (this._root.current) {\n        this._root.current.removeEventListener('blur', this._onBlur, true);\n      }\n\n      this._activeElement = null;\n      this._defaultFocusElement = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      var ElementType = getElementType(this.props);\n      var unhandledProps = getUnhandledProps(_keys(FocusZone.propTypes), this.props); // Note, right before rendering/reconciling proceeds, we need to record if focus\n      // was in the zone before the update. This helper will track this and, if focus\n      // was actually in the zone, what the index path to the element is at this time.\n      // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n      // the case the element was removed.\n\n      this.evaluateFocusBeforeRender();\n      return React.createElement(ElementType, _extends({}, unhandledProps, {\n        className: cx(FocusZone.className, className),\n        \"data-focuszone-id\": this._id,\n        onKeyDown: this._onKeyDown,\n        onFocus: this._onFocus,\n        onMouseDownCapture: this._onMouseDown\n      }), this.props.children);\n    }\n    /**\n     * Sets focus to the first tabbable item in the zone.\n     * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var forceIntoFirstElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._root.current) {\n        if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {\n          var ownerZoneElement = this.getOwnerZone(this._root.current);\n\n          if (ownerZoneElement !== this._root.current) {\n            var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n\n            return !!ownerZone && ownerZone.focusElement(this._root.current);\n          }\n\n          return false;\n        }\n\n        if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) && isElementTabbable(this._activeElement)) {\n          this._activeElement.focus();\n\n          return true;\n        }\n\n        var firstChild = this._root.current.firstChild;\n        return this.focusElement(getNextElement(this._root.current, firstChild, true));\n      }\n\n      return false;\n    }\n    /**\n     * Sets focus to the last tabbable item in the zone.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n\n  }, {\n    key: \"focusLast\",\n    value: function focusLast() {\n      if (this._root.current) {\n        var lastChild = this._root.current && this._root.current.lastChild;\n        return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n      }\n\n      return false;\n    }\n    /**\n     * Sets focus to a specific child element within the zone. This can be used in conjunction with\n     * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n     * location and then focus.)\n     * @param element - The child element within the zone to focus.\n     * @returns True if focus could be set to an active element, false if no operation was taken.\n     */\n\n  }, {\n    key: \"focusElement\",\n    value: function focusElement(element) {\n      var shouldReceiveFocus = this.props.shouldReceiveFocus;\n\n      if (shouldReceiveFocus && !shouldReceiveFocus(element)) {\n        return false;\n      }\n\n      if (element) {\n        this.setActiveElement(element);\n\n        if (this._activeElement) {\n          this._activeElement.focus();\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"evaluateFocusBeforeRender\",\n    // Record if focus was in the zone, what the index path to the element is at this time.\n    value: function evaluateFocusBeforeRender() {\n      if (!this._root.current) {\n        return;\n      }\n\n      var doc = _getDocument(this._root.current);\n\n      if (!doc) {\n        return;\n      }\n\n      var focusedElement = doc.activeElement; // Only update the index path if we are not parked on the root.\n\n      if (focusedElement !== this._root.current) {\n        var shouldRestoreFocus = elementContains(this._root.current, focusedElement, ALLOW_VIRTUAL_ELEMENTS);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(this._root.current, doc.activeElement) : undefined;\n      }\n    }\n    /**\n     * When focus is in the zone at render time but then all focusable elements are removed,\n     * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n     * focus to the closest path from previous. If the user tabs away from the parked container,\n     * we restore focusability to the pre-parked state.\n     */\n\n  }, {\n    key: \"setParkedFocus\",\n    value: function setParkedFocus(isParked) {\n      if (this._root.current && this._isParked !== isParked) {\n        this._isParked = isParked;\n\n        if (isParked) {\n          if (!this.props.allowFocusRoot) {\n            this._parkedTabIndex = this._root.current.getAttribute('tabindex');\n\n            this._root.current.setAttribute('tabindex', '-1');\n          }\n\n          this._root.current.focus();\n        } else if (!this.props.allowFocusRoot) {\n          if (this._parkedTabIndex) {\n            this._root.current.setAttribute('tabindex', this._parkedTabIndex);\n\n            this._parkedTabIndex = undefined;\n          } else {\n            this._root.current.removeAttribute('tabindex');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"setActiveElement\",\n    value: function setActiveElement(element, forceAlignemnt) {\n      var previousActiveElement = this._activeElement;\n      this._activeElement = element;\n\n      if (previousActiveElement) {\n        if (isElementFocusZone(previousActiveElement)) {\n          this.updateTabIndexes(previousActiveElement);\n        }\n\n        previousActiveElement.tabIndex = -1;\n      }\n\n      if (this._activeElement) {\n        if (!this._focusAlignment || forceAlignemnt) {\n          this.setFocusAlignment(element, true, true);\n        }\n\n        this._activeElement.tabIndex = 0;\n      }\n    }\n  }, {\n    key: \"preventDefaultWhenHandled\",\n    value: function preventDefaultWhenHandled(ev) {\n      this.props.preventDefaultWhenHandled && ev.preventDefault();\n    }\n    /**\n     * Handle the keystrokes.\n     */\n\n  }, {\n    key: \"tryInvokeClickForFocusable\",\n\n    /**\n     * Walk up the dom try to find a focusable element.\n     * TODO\n     */\n    value: function tryInvokeClickForFocusable() {\n      return false;\n    }\n    /**\n     * Traverse to find first child zone.\n     */\n\n  }, {\n    key: \"getFirstInnerZone\",\n    value: function getFirstInnerZone(forRootElement) {\n      var rootElement = forRootElement || this._activeElement || this._root.current;\n\n      if (!rootElement) {\n        return null;\n      }\n\n      if (isElementFocusZone(rootElement)) {\n        return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n      }\n\n      var child = rootElement.firstElementChild;\n\n      while (child) {\n        if (isElementFocusZone(child)) {\n          return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n        }\n\n        var match = this.getFirstInnerZone(child);\n\n        if (match) {\n          return match;\n        }\n\n        child = child.nextElementSibling;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"moveFocus\",\n    value: function moveFocus(isForward, getDistanceFromCenter, // @ts-ignore\n    ev) {\n      var useDefaultWrap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var element = this._activeElement;\n      var candidateDistance = -1;\n      var candidateElement = undefined;\n      var changedFocus = false;\n      var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n      if (!element || !this._root.current) {\n        return false;\n      }\n\n      if (this.isElementInput(element)) {\n        if (!this.shouldInputLoseFocus(element, isForward)) {\n          return false;\n        }\n      }\n\n      var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n      do {\n        element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n        if (isBidirectional) {\n          if (element) {\n            var _targetRect = element.getBoundingClientRect();\n\n            var elementDistance = getDistanceFromCenter(activeRect, _targetRect);\n\n            if (elementDistance === -1 && candidateDistance === -1) {\n              candidateElement = element;\n              break;\n            }\n\n            if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n              candidateDistance = elementDistance;\n              candidateElement = element;\n            }\n\n            if (candidateDistance >= 0 && elementDistance < 0) {\n              break;\n            }\n          }\n        } else {\n          candidateElement = element;\n          break;\n        }\n      } while (element); // Focus the closest candidate\n\n\n      if (candidateElement && candidateElement !== this._activeElement) {\n        changedFocus = true;\n        this.focusElement(candidateElement);\n      } else if (this.props.isCircularNavigation && useDefaultWrap) {\n        if (isForward) {\n          return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n        }\n\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n\n      return changedFocus;\n    }\n  }, {\n    key: \"moveFocusDown\",\n    value: function moveFocusDown() {\n      var _this2 = this;\n\n      var targetTop = -1;\n      var leftAlignment = this._focusAlignment.left;\n\n      if (this.moveFocus(true, function (activeRect, targetRect) {\n        var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!_this2.shouldWrapFocus(_this2._activeElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })) {\n        this.setFocusAlignment(this._activeElement, true, true);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"moveFocusUp\",\n    value: function moveFocusUp() {\n      var _this3 = this;\n\n      var targetTop = -1;\n      var leftAlignment = this._focusAlignment.left;\n\n      if (this.moveFocus(false, function (activeRect, targetRect) {\n        var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n\n        var targetRectBottom = Math.floor(targetRect.bottom);\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!_this3.shouldWrapFocus(_this3._activeElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })) {\n        this.setFocusAlignment(this._activeElement, true, true);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"moveFocusLeft\",\n    value: function moveFocusLeft() {\n      var _this4 = this;\n\n      var shouldWrap = this.shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n      if (this.moveFocus( // @ts-ignore\n      this.props.isRtl, function (activeRect, targetRect) {\n        var distance = -1;\n        var topBottomComparison;\n\n        if (_this4.props.isRtl) {\n          // When in RTL, this comparison should be the same as the one in moveFocusRight for LTR.\n          // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n          // This is important, because we want to be comparing the top of the target rect\n          // with the bottom of the active rect.\n          topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n        } else {\n          topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n        }\n\n        if (topBottomComparison && targetRect.right <= activeRect.right && _this4.props.direction !== FocusZoneDirection.vertical) {\n          distance = activeRect.right - targetRect.right;\n        } else if (!shouldWrap) {\n          distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return distance;\n      }, undefined\n      /* ev */\n      , shouldWrap)) {\n        this.setFocusAlignment(this._activeElement, true, false);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"moveFocusRight\",\n    value: function moveFocusRight() {\n      var _this5 = this;\n\n      var shouldWrap = this.shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n      if (this.moveFocus(!this.props.isRtl, function (activeRect, targetRect) {\n        var distance = -1;\n        var topBottomComparison;\n\n        if (_this5.props.isRtl) {\n          // When in RTL, this comparison should be the same as the one in moveFocusLeft for LTR.\n          // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n          // This is important, because we want to be comparing the bottom of the target rect\n          // with the top of the active rect.\n          topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n        } else {\n          topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n        }\n\n        if (topBottomComparison && targetRect.left >= activeRect.left && _this5.props.direction !== FocusZoneDirection.vertical) {\n          distance = targetRect.left - activeRect.left;\n        } else if (!shouldWrap) {\n          distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return distance;\n      }, undefined\n      /* ev */\n      , shouldWrap)) {\n        this.setFocusAlignment(this._activeElement, true, false);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"moveFocusPaging\",\n    value: function moveFocusPaging(isForward) {\n      var useDefaultWrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var element = this._activeElement;\n\n      if (!element || !this._root.current) {\n        return false;\n      }\n\n      if (this.isElementInput(element)) {\n        if (!this.shouldInputLoseFocus(element, isForward)) {\n          return false;\n        }\n      }\n\n      var scrollableParent = findScrollableParent(element);\n\n      if (!scrollableParent) {\n        return false;\n      }\n\n      var candidateDistance = -1;\n      var candidateElement = undefined;\n      var targetTop = -1;\n      var targetBottom = -1;\n      var pagesize = scrollableParent.clientHeight;\n      var activeRect = element.getBoundingClientRect();\n\n      do {\n        element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n        if (element) {\n          var _targetRect2 = element.getBoundingClientRect();\n\n          var targetRectTop = Math.floor(_targetRect2.top);\n          var activeRectBottom = Math.floor(activeRect.bottom);\n          var targetRectBottom = Math.floor(_targetRect2.bottom);\n          var activeRectTop = Math.floor(activeRect.top);\n          var elementDistance = this.getHorizontalDistanceFromCenter(isForward, activeRect, _targetRect2);\n          var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n          var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n          if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n            break;\n          }\n\n          if (elementDistance > -1) {\n            // for paging down\n            if (isForward && targetRectTop > targetTop) {\n              targetTop = targetRectTop;\n              candidateDistance = elementDistance;\n              candidateElement = element;\n            } else if (!isForward && targetRectBottom < targetBottom) {\n              // for paging up\n              targetBottom = targetRectBottom;\n              candidateDistance = elementDistance;\n              candidateElement = element;\n            } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n              candidateDistance = elementDistance;\n              candidateElement = element;\n            }\n          }\n        }\n      } while (element);\n\n      var changedFocus = false; // Focus the closest candidate\n\n      if (candidateElement && candidateElement !== this._activeElement) {\n        changedFocus = true;\n        this.focusElement(candidateElement);\n        this.setFocusAlignment(candidateElement, false, true);\n      } else if (this.props.isCircularNavigation && useDefaultWrap) {\n        if (isForward) {\n          return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n        }\n\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n\n      return changedFocus;\n    }\n  }, {\n    key: \"setFocusAlignment\",\n    value: function setFocusAlignment(element, isHorizontal, isVertical) {\n      if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {\n        var rect = element.getBoundingClientRect();\n        var left = rect.left + rect.width / 2;\n        var top = rect.top + rect.height / 2;\n\n        if (!this._focusAlignment) {\n          this._focusAlignment = {\n            left: left,\n            top: top\n          };\n        }\n\n        if (isHorizontal) {\n          this._focusAlignment.left = left;\n        }\n\n        if (isVertical) {\n          this._focusAlignment.top = top;\n        }\n      }\n    }\n  }, {\n    key: \"isImmediateDescendantOfZone\",\n    value: function isImmediateDescendantOfZone(element) {\n      return this.getOwnerZone(element) === this._root.current;\n    }\n  }, {\n    key: \"getOwnerZone\",\n    value: function getOwnerZone(element) {\n      var doc = _getDocument(this._root.current);\n\n      var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS); // @ts-ignore\n\n      while (parentElement && parentElement !== this._root.current && parentElement !== doc.body) {\n        if (isElementFocusZone(parentElement)) {\n          return parentElement;\n        }\n\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      return this._root.current;\n    }\n  }, {\n    key: \"updateTabIndexes\",\n    value: function updateTabIndexes(onElement) {\n      var element = onElement;\n\n      if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {\n        this._activeElement = this.props.defaultTabbableElement(this._root.current);\n      }\n\n      if (!element && this._root.current) {\n        this._defaultFocusElement = null;\n        element = this._root.current;\n\n        if (this._activeElement && !elementContains(element, this._activeElement, ALLOW_VIRTUAL_ELEMENTS)) {\n          this._activeElement = null;\n        }\n      } // If active element changes state to disabled, set it to null.\n      // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n\n\n      if (this._activeElement && !isElementTabbable(this._activeElement)) {\n        this._activeElement = null;\n      }\n\n      var childNodes = element && element.children;\n\n      for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n        var child = childNodes[childIndex];\n\n        if (!isElementFocusZone(child)) {\n          // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n          if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n\n          if (isElementTabbable(child)) {\n            if (this.props.disabled) {\n              child.setAttribute(TABINDEX, '-1');\n            } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n              this._defaultFocusElement = child;\n\n              if (child.getAttribute(TABINDEX) !== '0') {\n                child.setAttribute(TABINDEX, '0');\n              }\n            } else if (child.getAttribute(TABINDEX) !== '-1') {\n              child.setAttribute(TABINDEX, '-1');\n            }\n          } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n            // Disgusting IE hack. Sad face.\n            child.setAttribute('focusable', 'false');\n          }\n        } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n          if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n            this._defaultFocusElement = child;\n\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        }\n\n        this.updateTabIndexes(child);\n      }\n    }\n  }, {\n    key: \"isContentEditableElement\",\n    value: function isContentEditableElement(element) {\n      return element && element.getAttribute('contenteditable') === 'true';\n    }\n  }, {\n    key: \"isElementInput\",\n    value: function isElementInput(element) {\n      if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"shouldInputLoseFocus\",\n    value: function shouldInputLoseFocus(element, isForward) {\n      // If a tab was used, we want to focus on the next element.\n      if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n        var selectionStart = element.selectionStart;\n        var selectionEnd = element.selectionEnd;\n        var isRangeSelected = selectionStart !== selectionEnd;\n        var inputValue = element.value;\n        var isReadonly = element.readOnly; // We shouldn't lose focus in the following cases:\n        // 1. There is range selected.\n        // 2. When selection start is larger than 0 and it is backward and not readOnly.\n        // 3. when selection start is not the end of length and it is forward and not readOnly.\n        // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit tab)\n        // and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is determined by calling the\n        // callback shouldInputLoseFocusOnArrowKey\n\n        if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"shouldWrapFocus\",\n    value: function shouldWrapFocus(element, noWrapDataAttribute) {\n      return !!this.props.checkForNoWrap ? _shouldWrapFocus(element, noWrapDataAttribute) : true;\n    }\n  }, {\n    key: \"getDocument\",\n    value: function getDocument() {\n      return _getDocument(this._root.current);\n    }\n  }]);\n\n  return FocusZone;\n}(React.Component);\n\n_defineProperty(FocusZone, \"propTypes\", {\n  className: PropTypes.string,\n  direction: PropTypes.number,\n  defaultTabbableElement: PropTypes.func,\n  shouldFocusOnMount: PropTypes.bool,\n  shouldResetActiveElementWhenTabFromZone: PropTypes.bool,\n  shouldFocusInnerElementWhenReceivedFocus: PropTypes.bool,\n  disabled: PropTypes.bool,\n  as: PropTypes.elementType,\n  isCircularNavigation: PropTypes.bool,\n  shouldEnterInnerZone: PropTypes.func,\n  onActiveElementChanged: PropTypes.func,\n  shouldReceiveFocus: PropTypes.func,\n  handleTabKey: PropTypes.number,\n  shouldInputLoseFocusOnArrowKey: PropTypes.func,\n  stopFocusPropagation: PropTypes.bool,\n  onFocus: PropTypes.func,\n  preventDefaultWhenHandled: PropTypes.bool,\n  isRtl: PropTypes.bool,\n  preventFocusRestoration: PropTypes.bool,\n  pagingSupportDisabled: PropTypes.bool\n});\n\n_defineProperty(FocusZone, \"defaultProps\", {\n  isCircularNavigation: false,\n  direction: FocusZoneDirection.bidirectional,\n  as: 'div',\n  preventDefaultWhenHandled: true\n});\n\n_defineProperty(FocusZone, \"displayName\", 'FocusZone');\n\n_defineProperty(FocusZone, \"className\", 'ms-FocusZone');\n\nexport { FocusZone as default };","map":{"version":3,"sources":["FocusZone/FocusZone.tsx"],"names":["getDocument","shouldWrapFocus","TABINDEX","NO_VERTICAL_WRAP","NO_HORIZONTAL_WRAP","LARGE_DISTANCE_FROM_CENTER","LARGE_NEGATIVE_DISTANCE_FROM_CENTER","_allInstances","_outerZones","ALLOWED_INPUT_TYPES","ALLOW_VIRTUAL_ELEMENTS","FocusZone","React","Component","className","PropTypes","direction","defaultTabbableElement","shouldFocusOnMount","shouldResetActiveElementWhenTabFromZone","shouldFocusInnerElementWhenReceivedFocus","disabled","as","isCircularNavigation","shouldEnterInnerZone","onActiveElementChanged","shouldReceiveFocus","handleTabKey","shouldInputLoseFocusOnArrowKey","stopFocusPropagation","onFocus","preventDefaultWhenHandled","isRtl","preventFocusRestoration","pagingSupportDisabled","bool","FocusZoneDirection","current","left","top","getWindow","parentElement","getParent","doc","isElementFocusZone","elementToFocus","getFocusableByIndexPath","ElementType","getElementType","unhandledProps","getUnhandledProps","cx","_onMouseDown","forceIntoFirstElement","ownerZoneElement","ownerZone","elementContains","isElementTabbable","firstChild","getNextElement","lastChild","getPreviousElement","element","ReactDOM","focusedElement","shouldRestoreFocus","getElementIndexPath","isParked","isImmediateDescendant","ev","newActiveElement","maybeElementToFocus","keyboardKey","zone","target","path","forceAlignemnt","previousActiveElement","innerZone","isElementFocusSubZone","FocusZoneTabbableElements","focusChanged","tabWithDirection","forRootElement","rootElement","child","match","isForward","getDistanceFromCenter","useDefaultWrap","candidateDistance","candidateElement","changedFocus","isBidirectional","activeRect","targetRect","elementDistance","targetTop","leftAlignment","distance","targetRectTop","Math","activeRectBottom","targetRectBottom","activeRectTop","shouldWrap","topBottomComparison","parseFloat","undefined","isValidCandidateOnpagingDown","isValidCandidateOnpagingUp","scrollableParent","findScrollableParent","targetBottom","pagesize","isElementPassedPageSizeOnPagingDown","isElementPassedPageSizeOnPagingUp","isHorizontal","isVertical","rect","onElement","childNodes","childIndex","selectionStart","selectionEnd","isRangeSelected","inputValue","isReadonly","noWrapDataAttribute"],"mappings":"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","sourcesContent":["import { FocusZoneDirection, FocusZoneTabbableElements, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport * as keyboardKey from 'keyboard-key';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  elementContains,\n  findScrollableParent,\n  getDocument,\n  getParent,\n  getWindow,\n  shouldWrapFocus,\n} from '@uifabric/utilities';\n\nimport getElementType from '../utils/getElementType';\nimport getUnhandledProps from '../utils/getUnhandledProps';\nimport { FocusZoneProps, IFocusZone } from './FocusZone.types';\nimport {\n  getNextElement,\n  getPreviousElement,\n  isElementFocusZone,\n  isElementFocusSubZone,\n  isElementTabbable,\n  getElementIndexPath,\n  getFocusableByIndexPath,\n  FOCUSZONE_ID_ATTRIBUTE,\n} from './focusUtilities';\n\nconst TABINDEX = 'tabindex';\nconst NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nconst NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nconst LARGE_DISTANCE_FROM_CENTER = 999999999;\nconst LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\n\nconst _allInstances: {\n  [key: string]: FocusZone;\n} = {};\n\nconst _outerZones: Set<FocusZone> = new Set();\n\ninterface Point {\n  left: number;\n  top: number;\n}\nconst ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\n\nconst ALLOW_VIRTUAL_ELEMENTS = false;\n\nexport default class FocusZone extends React.Component<FocusZoneProps> implements IFocusZone {\n  static propTypes = {\n    className: PropTypes.string,\n    direction: PropTypes.number,\n    defaultTabbableElement: PropTypes.func,\n    shouldFocusOnMount: PropTypes.bool,\n    shouldResetActiveElementWhenTabFromZone: PropTypes.bool,\n    shouldFocusInnerElementWhenReceivedFocus: PropTypes.bool,\n    disabled: PropTypes.bool,\n    as: PropTypes.elementType as PropTypes.Requireable<React.ElementType>,\n    isCircularNavigation: PropTypes.bool,\n    shouldEnterInnerZone: PropTypes.func,\n    onActiveElementChanged: PropTypes.func,\n    shouldReceiveFocus: PropTypes.func,\n    handleTabKey: PropTypes.number,\n    shouldInputLoseFocusOnArrowKey: PropTypes.func,\n    stopFocusPropagation: PropTypes.bool,\n    onFocus: PropTypes.func,\n    preventDefaultWhenHandled: PropTypes.bool,\n    isRtl: PropTypes.bool,\n    preventFocusRestoration: PropTypes.bool,\n    pagingSupportDisabled: PropTypes.bool,\n  };\n\n  static defaultProps: FocusZoneProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    as: 'div',\n    preventDefaultWhenHandled: true,\n  };\n\n  static displayName = 'FocusZone';\n  static className = 'ms-FocusZone';\n\n  /** Used for testing purposes only. */\n  static getOuterZones(): number {\n    return _outerZones.size;\n  }\n\n  _root: { current: HTMLElement | null } = { current: null };\n  _id: string;\n  /** The most recently focused child element. */\n  _activeElement: HTMLElement | null;\n\n  /**\n   * The index path to the last focused child element.\n   */\n  _lastIndexPath: number[] | undefined;\n\n  /**\n   * Flag to define when we've intentionally parked focus on the root element to temporarily\n   * hold focus until items appear within the zone.\n   */\n  _isParked: boolean = false;\n  _parkedTabIndex: string | null | undefined;\n\n  /** The child element with tabindex=0. */\n  _defaultFocusElement: HTMLElement | null;\n  _focusAlignment: Point;\n  _isInnerZone: boolean;\n\n  /** Used to allow us to move to next focusable element even when we're focusing on a input element when pressing tab */\n  _processingTabKey: boolean;\n\n  windowElement: Window | null;\n\n  constructor(props: FocusZoneProps) {\n    super(props);\n\n    this._id = _.uniqueId('FocusZone');\n\n    this._focusAlignment = {\n      left: 0,\n      top: 0,\n    };\n\n    this._processingTabKey = false;\n  }\n\n  componentDidMount(): void {\n    _allInstances[this._id] = this;\n\n    this.setRef(this); // called here to support functional components, we only need HTMLElement ref anyway\n\n    if (!this._root.current) {\n      return;\n    }\n\n    // @ts-ignore\n    this.windowElement = getWindow(this._root.current);\n    let parentElement = getParent(this._root.current, ALLOW_VIRTUAL_ELEMENTS);\n    const doc = getDocument(this._root.current);\n\n    // @ts-ignore\n    while (parentElement && parentElement !== doc.body && parentElement.nodeType === 1) {\n      if (isElementFocusZone(parentElement)) {\n        this._isInnerZone = true;\n        break;\n      }\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    if (!this._isInnerZone) {\n      _outerZones.add(this);\n\n      if (this.windowElement && _outerZones.size === 1) {\n        this.windowElement.addEventListener('keydown', this._onKeyDownCapture, true);\n      }\n    }\n\n    this._root.current.addEventListener('blur', this._onBlur, true);\n\n    // Assign initial tab indexes so that we can set initial focus as appropriate.\n    this.updateTabIndexes();\n\n    if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n      this._activeElement = this.getDocument().querySelector(this.props.defaultTabbableElement) as HTMLElement;\n    }\n\n    if (this.props.shouldFocusOnMount) {\n      this.focus();\n    }\n  }\n\n  componentDidUpdate(): void {\n    if (!this._root.current) {\n      return;\n    }\n    const doc = getDocument(this._root.current);\n\n    if (\n      doc &&\n      this._lastIndexPath &&\n      (doc.activeElement === doc.body ||\n        doc.activeElement === null ||\n        (!this.props.preventFocusRestoration && doc.activeElement === this._root.current))\n    ) {\n      // The element has been removed after the render, attempt to restore focus.\n      const elementToFocus = getFocusableByIndexPath(this._root.current as HTMLElement, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this.setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this.setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this.setParkedFocus(true);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n\n      if (this.windowElement && _outerZones.size === 0) {\n        this.windowElement.removeEventListener('keydown', this._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  }\n\n  render() {\n    const { className } = this.props;\n\n    const ElementType = getElementType(this.props);\n    const unhandledProps = getUnhandledProps(_.keys(FocusZone.propTypes) as any, this.props);\n\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this.evaluateFocusBeforeRender();\n\n    return (\n      <ElementType\n        {...unhandledProps}\n        className={cx(FocusZone.className, className)}\n        data-focuszone-id={this._id}\n        onKeyDown={this._onKeyDown}\n        onFocus={this._onFocus}\n        onMouseDownCapture={this._onMouseDown}\n      >\n        {this.props.children}\n      </ElementType>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._root.current) {\n      if (\n        !forceIntoFirstElement &&\n        this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        this._isInnerZone\n      ) {\n        const ownerZoneElement = this.getOwnerZone(this._root.current) as HTMLElement;\n\n        if (ownerZoneElement !== this._root.current) {\n          const ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      }\n      if (\n        !forceIntoFirstElement &&\n        this._activeElement &&\n        elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) &&\n        isElementTabbable(this._activeElement)\n      ) {\n        this._activeElement.focus();\n        return true;\n      }\n\n      const firstChild = this._root.current.firstChild as HTMLElement;\n\n      return this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement);\n    }\n    return false;\n  }\n\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focusLast(): boolean {\n    if (this._root.current) {\n      const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement);\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  focusElement(element: HTMLElement): boolean {\n    const { shouldReceiveFocus } = this.props;\n\n    if (shouldReceiveFocus && !shouldReceiveFocus(element)) {\n      return false;\n    }\n\n    if (element) {\n      this.setActiveElement(element);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  setRef = (elem: React.ReactInstance): void => {\n    // findDOMNode needed to get correct DOM ref with react-hot-loader, see https://github.com/gaearon/react-hot-loader/issues/964\n    this._root.current = ReactDOM.findDOMNode(elem) as HTMLElement;\n  };\n\n  // Record if focus was in the zone, what the index path to the element is at this time.\n  evaluateFocusBeforeRender(): void {\n    if (!this._root.current) {\n      return;\n    }\n    const doc = getDocument(this._root.current);\n\n    if (!doc) {\n      return;\n    }\n\n    const focusedElement = doc.activeElement as HTMLElement;\n\n    // Only update the index path if we are not parked on the root.\n    if (focusedElement !== this._root.current) {\n      const shouldRestoreFocus = elementContains(this._root.current, focusedElement, ALLOW_VIRTUAL_ELEMENTS);\n\n      this._lastIndexPath = shouldRestoreFocus\n        ? getElementIndexPath(this._root.current as HTMLElement, doc.activeElement as HTMLElement)\n        : undefined;\n    }\n  }\n\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  setParkedFocus(isParked: boolean): void {\n    if (this._root.current && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = this._root.current.getAttribute('tabindex');\n          this._root.current.setAttribute('tabindex', '-1');\n        }\n        this._root.current.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          this._root.current.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          this._root.current.removeAttribute('tabindex');\n        }\n      }\n    }\n  }\n\n  _onBlur = () => {\n    this.setParkedFocus(false);\n  };\n\n  _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const {\n      onActiveElementChanged,\n      stopFocusPropagation,\n      shouldFocusInnerElementWhenReceivedFocus,\n      defaultTabbableElement,\n    } = this.props;\n\n    let newActiveElement: HTMLElement | null | undefined;\n    const isImmediateDescendant = this.isImmediateDescendantOfZone(ev.target as HTMLElement);\n\n    if (isImmediateDescendant) {\n      newActiveElement = ev.target as HTMLElement;\n    } else {\n      let parentElement = ev.target as HTMLElement;\n\n      while (parentElement && parentElement !== this._root.current) {\n        if (isElementTabbable(parentElement) && this.isImmediateDescendantOfZone(parentElement)) {\n          newActiveElement = parentElement;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n      }\n    }\n\n    // If an inner focusable element should be focused when FocusZone container receives focus\n    if (shouldFocusInnerElementWhenReceivedFocus && ev.target === this._root.current) {\n      const maybeElementToFocus =\n        defaultTabbableElement &&\n        typeof defaultTabbableElement === 'function' &&\n        defaultTabbableElement(this._root.current);\n\n      // try to focus defaultTabbable element\n      if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n        newActiveElement = maybeElementToFocus;\n        maybeElementToFocus.focus();\n      } else {\n        // force focus on first focusable element\n        this.focus(true);\n        if (this._activeElement) {\n          // set to null as new active element was handled in method above\n\n          newActiveElement = null;\n        }\n      }\n    }\n\n    if (newActiveElement && newActiveElement !== this._activeElement) {\n      this._activeElement = newActiveElement;\n\n      if (isImmediateDescendant) {\n        this.setFocusAlignment(this._activeElement);\n        this.updateTabIndexes();\n      }\n    }\n\n    if (onActiveElementChanged) {\n      onActiveElementChanged(this._activeElement as HTMLElement, ev);\n    }\n\n    if (stopFocusPropagation) {\n      ev.stopPropagation();\n    }\n\n    _.invoke(this.props, 'onFocus', ev);\n  };\n\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   */\n  _onKeyDownCapture = (ev: KeyboardEvent) => {\n    if (keyboardKey.getCode(ev) === keyboardKey.Tab) {\n      _outerZones.forEach(zone => zone.updateTabIndexes());\n    }\n  };\n\n  _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    const path: HTMLElement[] = [];\n\n    while (target && target !== this._root.current) {\n      path.push(target);\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    }\n\n    while (path.length) {\n      target = path.pop() as HTMLElement;\n\n      if (target && isElementTabbable(target)) {\n        this.setActiveElement(target, true);\n      }\n\n      if (isElementFocusZone(target)) {\n        // Stop here since the focus zone will take care of its own children.\n        break;\n      }\n    }\n  };\n\n  setActiveElement(element: HTMLElement, forceAlignemnt?: boolean): void {\n    const previousActiveElement = this._activeElement;\n\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this.updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignemnt) {\n        this.setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  }\n\n  preventDefaultWhenHandled(ev: React.KeyboardEvent<HTMLElement>): void {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  }\n\n  /**\n   * Handle the keystrokes.\n   */\n  _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    const { direction, disabled, shouldEnterInnerZone, pagingSupportDisabled } = this.props;\n\n    if (disabled) {\n      return undefined;\n    }\n\n    const doc = getDocument(this._root.current);\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // @ts-ignore\n    if (doc.activeElement === this._root.current && this._isInnerZone) {\n      // If this element has focus, it is being controlled by a parent.\n      // Ignore the keystroke.\n      return undefined;\n    }\n\n    // If the default has been prevented, do not process keyboard events.\n    if (ev.isDefaultPrevented()) {\n      return undefined;\n    }\n\n    if (\n      shouldEnterInnerZone &&\n      shouldEnterInnerZone(ev) &&\n      this.isImmediateDescendantOfZone(ev.target as HTMLElement)\n    ) {\n      // Try to focus\n      const innerZone = this.getFirstInnerZone();\n\n      if (innerZone) {\n        if (!innerZone.focus(true)) {\n          return undefined;\n        }\n      } else if (isElementFocusSubZone(ev.target as HTMLElement)) {\n        if (\n          !this.focusElement(\n            getNextElement(\n              ev.target as HTMLElement,\n              (ev.target as HTMLElement).firstChild as HTMLElement,\n              true,\n            ) as HTMLElement,\n          )\n        ) {\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    } else if (ev.altKey) {\n      return undefined;\n    } else {\n      switch (keyboardKey.getCode(ev)) {\n        case keyboardKey.Spacebar:\n          // @ts-ignore\n          if (this.tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.ArrowLeft:\n          if (direction !== FocusZoneDirection.vertical) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusLeft()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowRight:\n          if (direction !== FocusZoneDirection.vertical) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusRight()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowUp:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusUp()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.ArrowDown:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this.preventDefaultWhenHandled(ev);\n            if (this.moveFocusDown()) {\n              break;\n            }\n          }\n          return undefined;\n\n        case keyboardKey.PageDown:\n          if (!pagingSupportDisabled && this.moveFocusPaging(true)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.PageUp:\n          if (!pagingSupportDisabled && this.moveFocusPaging(false)) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.Tab:\n          if (\n            this.props.handleTabKey === FocusZoneTabbableElements.all ||\n            (this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n              this.isElementInput(ev.target as HTMLElement))\n          ) {\n            let focusChanged = false;\n            this._processingTabKey = true;\n            if (\n              direction === FocusZoneDirection.vertical ||\n              !this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP)\n            ) {\n              focusChanged = ev.shiftKey ? this.moveFocusUp() : this.moveFocusDown();\n            } else {\n              const tabWithDirection = this.props.isRtl ? !ev.shiftKey : ev.shiftKey;\n              focusChanged = tabWithDirection ? this.moveFocusLeft() : this.moveFocusRight();\n            }\n            this._processingTabKey = false;\n            if (focusChanged) {\n              break;\n            }\n          } else if (this.props.shouldResetActiveElementWhenTabFromZone) {\n            this._activeElement = null;\n          }\n          return undefined;\n\n        case keyboardKey.Home:\n          if (\n            this.isContentEditableElement(ev.target as HTMLElement) ||\n            (this.isElementInput(ev.target as HTMLElement) &&\n              !this.shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n          const firstChild = this._root.current && (this._root.current.firstChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            firstChild &&\n            this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.End:\n          if (\n            this.isContentEditableElement(ev.target as HTMLElement) ||\n            (this.isElementInput(ev.target as HTMLElement) &&\n              !this.shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n\n          const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return undefined;\n\n        case keyboardKey.Enter:\n          // @ts-ignore\n          if (this.tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return undefined;\n\n        default:\n          return undefined;\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    return undefined;\n  };\n\n  /**\n   * Walk up the dom try to find a focusable element.\n   * TODO\n   */\n  tryInvokeClickForFocusable(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverse to find first child zone.\n   */\n  getFirstInnerZone(forRootElement?: HTMLElement | null): FocusZone | null {\n    const rootElement = forRootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n    }\n\n    let child = rootElement.firstElementChild as HTMLElement | null;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n      }\n      const match = this.getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling as HTMLElement | null;\n    }\n\n    return null;\n  }\n\n  moveFocus(\n    isForward: boolean,\n    getDistanceFromCenter: (activeRect: ClientRect, targetRect: ClientRect) => number,\n    // @ts-ignore\n    ev?: Event,\n    useDefaultWrap: boolean = true,\n  ): boolean {\n    let element = this._activeElement;\n    let candidateDistance = -1;\n    let candidateElement: HTMLElement | undefined = undefined;\n    let changedFocus = false;\n    const isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this.isElementInput(element)) {\n      if (!this.shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n\n    const activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = (isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element)) as HTMLElement;\n\n      if (isBidirectional) {\n        if (element) {\n          const targetRect = element.getBoundingClientRect();\n          const elementDistance = getDistanceFromCenter(activeRect as ClientRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n\n    return changedFocus;\n  }\n\n  moveFocusDown(): boolean {\n    let targetTop = -1;\n    const leftAlignment = this._focusAlignment.left;\n\n    if (\n      this.moveFocus(true, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusUp(): boolean {\n    let targetTop = -1;\n    const leftAlignment = this._focusAlignment.left;\n\n    if (\n      this.moveFocus(false, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusLeft(): boolean {\n    const shouldWrap = this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this.moveFocus(\n        // @ts-ignore\n        this.props.isRtl,\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (this.props.isRtl) {\n            // When in RTL, this comparison should be the same as the one in moveFocusRight for LTR.\n            // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n            // This is important, because we want to be comparing the top of the target rect\n            // with the bottom of the active rect.\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.right <= activeRect.right &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = activeRect.right - targetRect.right;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /* ev */,\n        shouldWrap,\n      )\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  moveFocusRight(): boolean {\n    const shouldWrap = this.shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this.moveFocus(\n        !this.props.isRtl,\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (this.props.isRtl) {\n            // When in RTL, this comparison should be the same as the one in moveFocusLeft for LTR.\n            // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n            // This is important, because we want to be comparing the bottom of the target rect\n            // with the top of the active rect.\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.left >= activeRect.left &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = targetRect.left - activeRect.left;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /* ev */,\n        shouldWrap,\n      )\n    ) {\n      this.setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  getHorizontalDistanceFromCenter = (isForward: boolean, activeRect: ClientRect, targetRect: ClientRect): number => {\n    const leftAlignment = this._focusAlignment.left;\n    // ClientRect values can be floats that differ by very small fractions of a decimal.\n    // If the difference between top and bottom are within a pixel then we should treat\n    // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n    // but without Math.Floor they will be handled incorrectly.\n    const targetRectTop = Math.floor(targetRect.top);\n    const activeRectBottom = Math.floor(activeRect.bottom);\n    const targetRectBottom = Math.floor(targetRect.bottom);\n    const activeRectTop = Math.floor(activeRect.top);\n    const isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n    const isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n    if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n      if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n        return 0;\n      }\n      return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n    }\n\n    if (!this.shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n      return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n    }\n    return LARGE_DISTANCE_FROM_CENTER;\n  };\n\n  moveFocusPaging(isForward: boolean, useDefaultWrap: boolean = true): boolean {\n    let element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this.isElementInput(element)) {\n      if (!this.shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n    const scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    let candidateDistance = -1;\n    let candidateElement = undefined;\n    let targetTop = -1;\n    let targetBottom = -1;\n    const pagesize = scrollableParent.clientHeight;\n    const activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element);\n      if (element) {\n        const targetRect = element.getBoundingClientRect();\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const activeRectTop = Math.floor(activeRect.top);\n        const elementDistance = this.getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        const isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        const isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    let changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this.setFocusAlignment(candidateElement as HTMLElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n    return changedFocus;\n  }\n\n  setFocusAlignment(element: HTMLElement, isHorizontal?: boolean, isVertical?: boolean) {\n    if (\n      this.props.direction === FocusZoneDirection.bidirectional &&\n      (!this._focusAlignment || isHorizontal || isVertical)\n    ) {\n      const rect = element.getBoundingClientRect();\n      const left = rect.left + rect.width / 2;\n      const top = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = { left, top };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top;\n      }\n    }\n  }\n\n  isImmediateDescendantOfZone(element?: HTMLElement): boolean {\n    return this.getOwnerZone(element) === this._root.current;\n  }\n\n  getOwnerZone(element?: HTMLElement): HTMLElement | null {\n    const doc = getDocument(this._root.current);\n    let parentElement = getParent(element as HTMLElement, ALLOW_VIRTUAL_ELEMENTS);\n\n    // @ts-ignore\n    while (parentElement && parentElement !== this._root.current && parentElement !== doc.body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return this._root.current;\n  }\n\n  updateTabIndexes(onElement?: HTMLElement) {\n    let element = onElement;\n\n    if (\n      !this._activeElement &&\n      this.props.defaultTabbableElement &&\n      typeof this.props.defaultTabbableElement === 'function'\n    ) {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current as HTMLElement);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement, ALLOW_VIRTUAL_ELEMENTS)) {\n        this._activeElement = null;\n      }\n    }\n\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    const childNodes = element && element.children;\n\n    for (let childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      const child = childNodes[childIndex] as HTMLElement;\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (\n            !this._isInnerZone &&\n            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n          ) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (\n          !this._isInnerZone &&\n          ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n        ) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this.updateTabIndexes(child);\n    }\n  }\n\n  isContentEditableElement(element: HTMLElement): boolean {\n    return element && element.getAttribute('contenteditable') === 'true';\n  }\n\n  isElementInput(element: HTMLElement): boolean {\n    if (\n      element &&\n      element.tagName &&\n      (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  shouldInputLoseFocus(element: HTMLInputElement, isForward?: boolean) {\n    // If a tab was used, we want to focus on the next element.\n    if (\n      !this._processingTabKey &&\n      element &&\n      element.type &&\n      ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1\n    ) {\n      const selectionStart = element.selectionStart;\n      const selectionEnd = element.selectionEnd;\n      const isRangeSelected = selectionStart !== selectionEnd;\n      const inputValue = element.value;\n      const isReadonly = element.readOnly;\n\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length and it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit tab)\n      // and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is determined by calling the\n      // callback shouldInputLoseFocusOnArrowKey\n      if (\n        isRangeSelected ||\n        (selectionStart! > 0 && !isForward && !isReadonly) ||\n        (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n        (!!this.props.handleTabKey &&\n          !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  shouldWrapFocus(\n    element: HTMLElement,\n    noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n  ): boolean {\n    return !!this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  }\n\n  getDocument(): Document {\n    return getDocument(this._root.current)!;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}