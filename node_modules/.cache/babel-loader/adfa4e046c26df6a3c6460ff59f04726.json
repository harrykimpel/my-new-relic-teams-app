{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport { UIComponent, childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport ReactionGroup from './ReactionGroup';\nexport var reactionClassName = 'ui-reaction';\nexport var reactionSlotClassNames = {\n  icon: \"\".concat(reactionClassName, \"__icon\"),\n  content: \"\".concat(reactionClassName, \"__content\")\n};\n\nvar Reaction = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Reaction, _UIComponent);\n\n  function Reaction() {\n    _classCallCheck(this, Reaction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Reaction).apply(this, arguments));\n  }\n\n  _createClass(Reaction, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          content = _this$props.content;\n      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), accessibility.attributes.root, unhandledProps, {\n        className: classes.root\n      }), childrenExist(children) ? children : React.createElement(React.Fragment, null, Box.create(icon, {\n        defaultProps: function defaultProps() {\n          return {\n            className: reactionSlotClassNames.icon,\n            styles: styles.icon\n          };\n        }\n      }), Box.create(content, {\n        defaultProps: function defaultProps() {\n          return {\n            className: reactionSlotClassNames.content,\n            styles: styles.content\n          };\n        }\n      })));\n    }\n  }]);\n\n  return Reaction;\n}(UIComponent);\n\n_defineProperty(Reaction, \"create\", void 0);\n\n_defineProperty(Reaction, \"deprecated_className\", reactionClassName);\n\n_defineProperty(Reaction, \"displayName\", 'Reaction');\n\n_defineProperty(Reaction, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  icon: customPropTypes.shorthandAllowingChildren\n}));\n\n_defineProperty(Reaction, \"defaultProps\", {\n  as: 'span'\n});\n\n_defineProperty(Reaction, \"Group\", ReactionGroup);\n\nReaction.create = createShorthandFactory({\n  Component: Reaction,\n  mappedProp: 'content'\n});\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\n\nexport default withSafeTypeForAs(Reaction);","map":{"version":3,"sources":["components/Reaction/Reaction.tsx"],"names":["reactionClassName","reactionSlotClassNames","icon","content","Reaction","UIComponent","customPropTypes","shorthandAllowingChildren","as","ReactionGroup","accessibility","ElementType","classes","styles","unhandledProps","children","forElements","root","childrenExist","defaultProps","className","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;;;;;;AAAA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,WAAA,EAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,sBAAA,QAAA,aAAA;AAaA,SAAA,iBAAA,QAAA,aAAA;AACA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AAoBA,OAAO,IAAMA,iBAAiB,GAAvB,aAAA;AACP,OAAO,IAAMC,sBAA8C,GAAG;AAC5DC,EAAAA,IAAI,EAAA,GAAA,MAAA,CAAA,iBAAA,EADwD,QACxD,CADwD;AAE5DC,EAAAA,OAAO,EAAA,GAAA,MAAA,CAAA,iBAAA,EAAA,WAAA;AAFqD,CAAvD;;IAKDC,Q;;;;;;;;;;;0CAoB6E;AAAA,UAA/DM,aAA+D,GAAA,IAAA,CAA/DA,aAA+D;AAAA,UAAhDC,WAAgD,GAAA,IAAA,CAAhDA,WAAgD;AAAA,UAAnCC,OAAmC,GAAA,IAAA,CAAnCA,OAAmC;AAAA,UAA1BC,MAA0B,GAAA,IAAA,CAA1BA,MAA0B;AAAA,UAAlBC,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAAA,UAAA,WAAA,GAC3C,KAD2C,KAAA;AAAA,UACvEC,QADuE,GAAA,WAAA,CAAA,QAAA;AAAA,UAC7Db,IAD6D,GAAA,WAAA,CAAA,IAAA;AAAA,UACvDC,OADuD,GAAA,WAAA,CAAA,OAAA;AAG/E,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEa,QAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,OAA/B,CADN,EAEMN,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAAA,cAAA,EAAA;AAIE,QAAA,SAAS,EAAEE,OAAO,CAACK;AAJrB,OAAA,CAAA,EAMGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAGC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,GAAG,CAAH,MAAA,CAAA,IAAA,EAAiB;AAChBC,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAO;AACnBC,YAAAA,SAAS,EAAEnB,sBAAsB,CADd,IAAA;AAEnBY,YAAAA,MAAM,EAAEA,MAAM,CAACX;AAFI,WAAP;AAAA;AADE,OAAjB,CADH,EAOG,GAAG,CAAH,MAAA,CAAA,OAAA,EAAoB;AACnBiB,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAO;AACnBC,YAAAA,SAAS,EAAEnB,sBAAsB,CADd,OAAA;AAEnBY,YAAAA,MAAM,EAAEA,MAAM,CAACV;AAFI,WAAP;AAAA;AADK,OAApB,CAPH,CATJ,CADF;AA2BD;;;;EAlDoBE,W;;gBAAjBD,Q;;gBAAAA,Q,0BAG0BJ,iB;;gBAH1BI,Q,iBAKiB,U;;gBALjBA,Q,iCAQC,eAAe,CAAf,YAAA,CAA6B;AAC9BD,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHD,EAAAA,IAAI,EAAEI,eAAe,CAACC;;;gBAXpBH,Q,kBAckB;AACpBI,EAAAA,EAAE,EAAE;AADgB,C;;gBAdlBJ,Q,WAkBWK,a;;AAmCjBL,QAAQ,CAARA,MAAAA,GAAkBiB,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,QAAA;AAAuBC,EAAAA,UAAU,EAAE;AAAnC,CAAD,CAAxCnB;AAEA;;;;;AAIA,eAAeoB,iBAAiB,CAAhC,QAAgC,CAAhC","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ContentComponentProps,\n  ShorthandFactory,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport ReactionGroup from './ReactionGroup';\n\nexport interface ReactionSlotClassNames {\n  icon: string;\n  content: string;\n}\n\nexport interface ReactionProps\n  extends UIComponentProps<ReactionProps>,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A reaction can have icon for the indicator of the reaction. */\n  icon?: ShorthandValue<BoxProps>;\n}\n\nexport const reactionClassName = 'ui-reaction';\nexport const reactionSlotClassNames: ReactionSlotClassNames = {\n  icon: `${reactionClassName}__icon`,\n  content: `${reactionClassName}__content`,\n};\n\nclass Reaction extends UIComponent<WithAsProp<ReactionProps>> {\n  static create: ShorthandFactory<ReactionProps>;\n\n  static deprecated_className = reactionClassName;\n\n  static displayName = 'Reaction';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: 'shorthand',\n    }),\n    icon: customPropTypes.shorthandAllowingChildren,\n  };\n\n  static defaultProps = {\n    as: 'span',\n  };\n\n  static Group = ReactionGroup;\n\n  renderComponent({ accessibility, ElementType, classes, styles, unhandledProps }) {\n    const { children, icon, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? (\n          children\n        ) : (\n          <>\n            {Box.create(icon, {\n              defaultProps: () => ({\n                className: reactionSlotClassNames.icon,\n                styles: styles.icon,\n              }),\n            })}\n            {Box.create(content, {\n              defaultProps: () => ({\n                className: reactionSlotClassNames.content,\n                styles: styles.content,\n              }),\n            })}\n          </>\n        )}\n      </ElementType>\n    );\n  }\n}\n\nReaction.create = createShorthandFactory({ Component: Reaction, mappedProp: 'content' });\n\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\nexport default withSafeTypeForAs<typeof Reaction, ReactionProps, 'span'>(Reaction);\n"]},"metadata":{},"sourceType":"module"}