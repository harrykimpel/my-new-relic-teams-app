{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _invoke from \"lodash/invoke\";\nimport { treeTitleBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport Box from '../Box/Box';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nexport var treeTitleClassName = 'ui-tree__title';\nexport var treeTitleSlotClassNames = {\n  indicator: \"\".concat(treeTitleClassName, \"__selection-indicator\")\n};\n\nvar TreeTitle = function TreeTitle(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TreeTitle.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      hasSubtree = props.hasSubtree,\n      level = props.level,\n      index = props.index,\n      styles = props.styles,\n      treeSize = props.treeSize,\n      variables = props.variables,\n      selectionIndicator = props.selectionIndicator,\n      disabled = props.disabled,\n      selected = props.selected,\n      selectable = props.selectable,\n      selectableParent = props.selectableParent,\n      expanded = props.expanded,\n      indeterminate = props.indeterminate;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n      performSelection: function performSelection(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        hasSubtree: hasSubtree,\n        level: level,\n        index: index,\n        treeSize: treeSize,\n        selected: selected,\n        selectable: selectable,\n        selectableParent: selectableParent\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables,\n        selected: selected,\n        selectableParent: selectableParent,\n        disabled: disabled,\n        selectable: selectable,\n        indeterminate: indeterminate\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: function defaultProps() {\n      return Object.assign({\n        as: 'span',\n        selected: selected\n      }, selectableParent && !_isEmpty(selectionIndicator) && {\n        expanded: expanded\n      }, {}, getA11Props('indicator', Object.assign({\n        className: treeTitleSlotClassNames.indicator\n      }, (selectable && !hasSubtree || selectableParent && expanded) && _isEmpty(selectionIndicator) && {\n        styles: resolvedStyles.selectionIndicator\n      })));\n    }\n  });\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick,\n    selected: selected\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps)), childrenExist(children) ? children : content, selectable && selectIndicator);\n  setEnd();\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\nTreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool\n});\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes);\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content'\n});\n/**\n * A TreeTitle renders a title of TreeItem.\n */\n\nexport default withSafeTypeForAs(TreeTitle);","map":{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","selectableParent","expanded","indeterminate","props","getA11Props","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","performSelection","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","selectIndicator","defaultProps","as","element","onClick","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","bool","treeTitleBehavior","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport Box, { BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandValue,\n} from '../../types';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** Whether or not tree title is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'selectableParent' | 'indeterminate'\n>;\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\nconst TreeTitle: React.FC<WithAsProp<TreeTitleProps>> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    selectableParent,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n      selected,\n      selectableParent,\n      disabled,\n      selectable,\n      indeterminate,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...(selectableParent && !_.isEmpty(selectionIndicator) && { expanded }),\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        ...(((selectable && !hasSubtree) || (selectableParent && expanded)) &&\n          _.isEmpty(selectionIndicator) && {\n            styles: resolvedStyles.selectionIndicator,\n          }),\n      }),\n    }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n\n      {selectable && selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport default withSafeTypeForAs<typeof TreeTitle, TreeTitleProps, 'a'>(TreeTitle);\n"]},"metadata":{},"sourceType":"module"}