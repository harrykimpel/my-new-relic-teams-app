{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _noop from \"lodash/noop\";\nimport _invoke from \"lodash/invoke\";\nimport { accordionTitleBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var accordionTitleClassName = 'ui-accordion__title';\nexport var accordionTitleSlotClassNames = {\n  contentWrapper: \"\".concat(accordionTitleClassName, \"__content-wrapper\")\n};\nexport var AccordionTitle = function AccordionTitle(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(AccordionTitle.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var contentRef = props.contentRef,\n      children = props.children,\n      content = props.content,\n      indicator = props.indicator,\n      contentWrapper = props.contentWrapper,\n      disabled = props.disabled,\n      accessibility = props.accessibility,\n      canBeCollapsed = props.canBeCollapsed,\n      as = props.as,\n      active = props.active,\n      accordionContentId = props.accordionContentId,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        hasContent: !!content,\n        canBeCollapsed: canBeCollapsed,\n        as: as,\n        active: active,\n        disabled: disabled,\n        accordionContentId: accordionContentId\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        disabled: disabled,\n        content: !!content,\n        active: active\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleClick = function handleClick(e) {\n    if (!disabled) {\n      _invoke(props, 'onClick', e, props);\n    }\n  };\n\n  var handleFocus = function handleFocus(e) {\n    e.stopPropagation();\n\n    _invoke(props, 'onFocus', e, props);\n  };\n\n  var handleWrapperOverrides = function handleWrapperOverrides(predefinedProps) {\n    return {\n      onFocus: function onFocus(e) {\n        handleFocus(e);\n\n        _invoke(predefinedProps, 'onFocus', e, props);\n      },\n      onClick: function onClick(e) {\n        handleClick(e);\n\n        _invoke(predefinedProps, 'onClick', e, props);\n      }\n    };\n  };\n\n  var contentWrapperElement = React.createElement(Ref, {\n    innerRef: contentRef\n  }, Box.create(contentWrapper, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('content', {\n        className: accordionTitleSlotClassNames.contentWrapper,\n        styles: resolvedStyles.contentWrapper\n      });\n    },\n    overrideProps: function overrideProps(predefinedProps) {\n      return Object.assign({\n        children: React.createElement(React.Fragment, null, Box.create(indicator, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('indicator', {\n              styles: resolvedStyles.indicator\n            });\n          }\n        }), Box.create(content, {\n          defaultProps: function defaultProps() {\n            return {\n              styles: resolvedStyles.content\n            };\n          }\n        }))\n      }, handleWrapperOverrides(predefinedProps));\n    }\n  }));\n  var element = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps))), childrenExist(children) ? children : contentWrapperElement);\n  setEnd();\n  return element;\n};\nAccordionTitle.displayName = 'AccordionTitle';\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content'\n};\nAccordionTitle.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren\n});\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes);\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _noop,\n  indicator: {},\n  contentWrapper: {}\n};\nAccordionTitle.create = createShorthandFactory({\n  Component: AccordionTitle,\n  mappedProp: 'content'\n});\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\n\nexport default withSafeTypeForAs(AccordionTitle);","map":{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","context","React","setStart","setEnd","useTelemetry","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","mapPropsToBehavior","hasContent","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleFocus","handleWrapperOverrides","onFocus","onClick","contentWrapperElement","defaultProps","overrideProps","element","forElements","root","childrenExist","mappedProp","PropTypes","customPropTypes","index","shorthandAllowingChildren","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\nexport const AccordionTitle: React.FC<WithAsProp<AccordionTitleProps>> &\n  FluentComponentStaticProps<AccordionTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n  setStart();\n  const {\n    contentRef,\n    children,\n    content,\n    indicator,\n    contentWrapper,\n    disabled,\n    accessibility,\n    canBeCollapsed,\n    as,\n    active,\n    accordionContentId,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasContent: !!content,\n      canBeCollapsed,\n      as,\n      active,\n      disabled,\n      accordionContentId,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      content: !!content,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (!disabled) {\n      _.invoke(props, 'onClick', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, props);\n    },\n  });\n\n  const contentWrapperElement = (\n    <Ref innerRef={contentRef}>\n      {Box.create(contentWrapper, {\n        defaultProps: () =>\n          getA11yProps('content', {\n            className: accordionTitleSlotClassNames.contentWrapper,\n            styles: resolvedStyles.contentWrapper,\n          }),\n        overrideProps: predefinedProps => ({\n          children: (\n            <>\n              {Box.create(indicator, {\n                defaultProps: () =>\n                  getA11yProps('indicator', {\n                    styles: resolvedStyles.indicator,\n                  }),\n              })}\n              {Box.create(content, {\n                defaultProps: () => ({\n                  styles: resolvedStyles.content,\n                }),\n              })}\n            </>\n          ),\n          ...handleWrapperOverrides(predefinedProps),\n        }),\n      })}\n    </Ref>\n  );\n\n  const element = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : contentWrapperElement}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport default withSafeTypeForAs<typeof AccordionTitle, AccordionTitleProps>(AccordionTitle);\n"]},"metadata":{},"sourceType":"module"}