{"ast":null,"code":"import _get from \"lodash/get\";\nimport _map from \"lodash/map\";\nimport _findIndex from \"lodash/findIndex\";\nimport _filter from \"lodash/filter\";\nimport { toolbarRadioGroupBehavior, toolbarRadioGroupItemBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, childrenExist, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport ToolbarDivider from './ToolbarDivider';\nimport ToolbarItem from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\nvar ToolbarRadioGroup = function ToolbarRadioGroup(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarRadioGroup.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      activeIndex = props.activeIndex,\n      children = props.children,\n      className = props.className,\n      design = props.design,\n      items = props.items,\n      variables = props.variables,\n      styles = props.styles;\n  var itemRefs = [];\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var mergedVariables = mergeComponentVariables(parentVariables, variables);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarRadioGroup.displayName,\n    actionHandlers: {\n      nextItem: function nextItem(event) {\n        return setFocusedItem(event, 1);\n      },\n      prevItem: function prevItem(event) {\n        return setFocusedItem(event, -1);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarRadioGroup.displayName, {\n    className: toolbarRadioGroupClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergedVariables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var setFocusedItem = function setFocusedItem(event, direction) {\n    // filter items which are not disabled\n    var filteredRadioItems = _filter(itemRefs, function (item, index) {\n      var currentItem = items[index];\n      return currentItem && !currentItem.disabled;\n    }); // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n\n\n    var currentFocusedIndex = _findIndex(filteredRadioItems, function (item) {\n      return item.current.tabIndex === 0;\n    }) || 0;\n    var itemsLength = filteredRadioItems.length;\n    var nextIndex = currentFocusedIndex + direction;\n\n    if (nextIndex >= itemsLength) {\n      nextIndex = 0;\n    }\n\n    if (nextIndex < 0) {\n      nextIndex = itemsLength - 1;\n    }\n\n    var nextItemToFocus = filteredRadioItems[nextIndex].current;\n\n    if (nextItemToFocus) {\n      nextItemToFocus.focus();\n    }\n\n    if (context.target.activeElement === nextItemToFocus) {\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n  };\n\n  var renderItems = function renderItems() {\n    return _map(items, function (item, index) {\n      var kind = _get(item, 'kind', 'item');\n\n      var ref = React.createRef();\n      itemRefs[index] = ref;\n\n      if (kind === 'divider') {\n        return ToolbarDivider.create(item);\n      }\n\n      var toolbarItem = ToolbarItem.create(item, {\n        defaultProps: function defaultProps() {\n          return {\n            accessibility: toolbarRadioGroupItemBehavior,\n            active: activeIndex === index\n          };\n        }\n      });\n      return React.createElement(Ref, {\n        innerRef: ref,\n        key: toolbarItem.key\n      }, toolbarItem);\n    });\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarRadioGroup.handledProps, props);\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    className: classes.root\n  })), React.createElement(ToolbarVariablesProvider, {\n    value: mergedVariables\n  }, childrenExist(children) ? children : renderItems()));\n  setEnd();\n  return element;\n};\n\nToolbarRadioGroup.displayName = 'ToolbarRadioGroup';\nToolbarRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item'])\n});\nToolbarRadioGroup.handledProps = Object.keys(ToolbarRadioGroup.propTypes);\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior\n};\nToolbarRadioGroup.create = createShorthandFactory({\n  Component: ToolbarRadioGroup,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\n\nexport default withSafeTypeForAs(ToolbarRadioGroup);","map":{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupClassName","ToolbarRadioGroup","context","React","setStart","setEnd","useTelemetry","accessibility","activeIndex","children","className","design","items","variables","styles","props","itemRefs","parentVariables","mergedVariables","mergeComponentVariables","getA11yProps","useAccessibility","debugName","actionHandlers","nextItem","setFocusedItem","prevItem","rtl","classes","useStyles","mapPropsToInlineStyles","filteredRadioItems","currentItem","currentFocusedIndex","item","itemsLength","nextIndex","nextItemToFocus","event","renderItems","kind","ref","ToolbarDivider","toolbarItem","defaultProps","active","index","key","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","childrenExist","commonPropTypes","PropTypes","customPropTypes","Object","toolbarRadioGroupBehavior","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport {\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport ToolbarDivider from './ToolbarDivider';\nimport ToolbarItem, { ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = 'divider' | 'item';\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\nconst ToolbarRadioGroup: React.FC<WithAsProp<ToolbarRadioGroupProps>> &\n  FluentComponentStaticProps<ToolbarRadioGroupProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarRadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n  const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarRadioGroup.displayName,\n    actionHandlers: {\n      nextItem: event => setFocusedItem(event, 1),\n      prevItem: event => setFocusedItem(event, -1),\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarRadioGroupStylesProps>(ToolbarRadioGroup.displayName, {\n    className: toolbarRadioGroupClassName,\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n    rtl: context.rtl,\n  });\n\n  const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n    // filter items which are not disabled\n    const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n      const currentItem = items[index] as ToolbarItemProps;\n      return currentItem && !currentItem.disabled;\n    });\n\n    // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n    const currentFocusedIndex =\n      _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n        return item.current.tabIndex === 0;\n      }) || 0;\n\n    const itemsLength = filteredRadioItems.length;\n    let nextIndex = currentFocusedIndex + direction;\n\n    if (nextIndex >= itemsLength) {\n      nextIndex = 0;\n    }\n\n    if (nextIndex < 0) {\n      nextIndex = itemsLength - 1;\n    }\n\n    const nextItemToFocus = filteredRadioItems[nextIndex].current;\n    if (nextItemToFocus) {\n      nextItemToFocus.focus();\n    }\n\n    if (context.target.activeElement === nextItemToFocus) {\n      event.stopPropagation();\n    }\n    event.preventDefault();\n  };\n\n  const renderItems = () => {\n    return _.map(items, (item, index) => {\n      const kind = _.get(item, 'kind', 'item');\n\n      const ref = React.createRef<HTMLElement>();\n      itemRefs[index] = ref;\n\n      if (kind === 'divider') {\n        return ToolbarDivider.create(item);\n      }\n\n      const toolbarItem = ToolbarItem.create(item, {\n        defaultProps: () => ({\n          accessibility: toolbarRadioGroupItemBehavior,\n          active: activeIndex === index,\n        }),\n      });\n\n      return (\n        <Ref innerRef={ref} key={toolbarItem.key}>\n          {toolbarItem}\n        </Ref>\n      );\n    });\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarRadioGroup.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        className: classes.root,\n      })}\n    >\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {childrenExist(children) ? children : renderItems()}\n      </ToolbarVariablesProvider>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nToolbarRadioGroup.displayName = 'ToolbarRadioGroup';\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.handledProps = Object.keys(ToolbarRadioGroup.propTypes) as any;\n\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n\nToolbarRadioGroup.create = createShorthandFactory({\n  Component: ToolbarRadioGroup,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport default withSafeTypeForAs<typeof ToolbarRadioGroup, ToolbarRadioGroupProps>(ToolbarRadioGroup);\n"]},"metadata":{},"sourceType":"module"}