{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { isBrowser, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\n/**\n * A PortalInner is a container for Portal's content.\n */\n\nvar PortalInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(PortalInner, _React$Component);\n\n  function PortalInner() {\n    _classCallCheck(this, PortalInner);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PortalInner).apply(this, arguments));\n  }\n\n  _createClass(PortalInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _invoke(this.props, 'onMount', this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _invoke(this.props, 'onUnmount', this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          mountNode = _this$props.mountNode; // PortalInner should render elements even without a context\n      // eslint-disable-next-line\n\n      var target = isBrowser() ? this.context || document.body : null;\n      var container = mountNode || target;\n      return container && ReactDOM.createPortal(children, container);\n    }\n  }]);\n\n  return PortalInner;\n}(React.Component);\n\n_defineProperty(PortalInner, \"contextType\", PortalBoxContext);\n\n_defineProperty(PortalInner, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  as: false,\n  className: false,\n  content: false,\n  styled: false\n}), {\n  mountNode: PropTypes.object,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func\n}));\n\nexport default PortalInner;","map":{"version":3,"sources":["components/Portal/PortalInner.tsx"],"names":["PortalInner","React","Component","PortalBoxContext","accessibility","as","className","content","styled","mountNode","PropTypes","object","onMount","func","onUnmount","children","target","isBrowser","document","container","ReactDOM"],"mappings":";;;;;;;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,QAAA,MAAA,WAAA;AAEA,SAAA,SAAA,EAAA,eAAA,QAAA,aAAA;AACA,SAAA,gBAAA,QAAA,0BAAA;AAqBA;;;;IAGMA,W;;;;;;;;;;;wCAgBgB;AAClB,MAAA,OAAA,CAAS,KAAT,KAAA,EAAA,SAAA,EAAgC,KAAhC,KAAA,CAAA;AACD;;;2CAEsB;AACrB,MAAA,OAAA,CAAS,KAAT,KAAA,EAAA,WAAA,EAAkC,KAAlC,KAAA,CAAA;AACD;;;6BAEQ;AAAA,UAAA,WAAA,GACyB,KADzB,KAAA;AAAA,UACCe,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWN,SADX,GAAA,WAAA,CAAA,SAAA,CAAA,CAGP;AACA;;AACA,UAAMO,MAA6B,GAAGC,SAAS,KAAK,KAAA,OAAA,IAAgBC,QAAQ,CAA7B,IAAA,GAA/C,IAAA;AACA,UAAMC,SAA6B,GAAGV,SAAS,IAA/C,MAAA;AAEA,aAAOU,SAAS,IAAIC,QAAQ,CAARA,YAAAA,CAAAA,QAAAA,EAApB,SAAoBA,CAApB;AACD;;;;EAjCuBnB,KAAK,CAACC,S;;gBAA1BF,W,iBACiBG,gB;;gBADjBH,W,iCAIC,eAAe,CAAf,YAAA,CAA6B;AAC9BI,EAAAA,aAAa,EADiB,KAAA;AAE9BC,EAAAA,EAAE,EAF4B,KAAA;AAG9BC,EAAAA,SAAS,EAHqB,KAAA;AAI9BC,EAAAA,OAAO,EAJuB,KAAA;AAK9BC,EAAAA,MAAM,EAAE;AALsB,CAA7B,C;AAOHC,EAAAA,SAAS,EAAEC,SAAS,CAACC,M;AACrBC,EAAAA,OAAO,EAAEF,SAAS,CAACG,I;AACnBC,EAAAA,SAAS,EAAEJ,SAAS,CAACG;;;AAuBzB,eAAA,WAAA","sourcesContent":["import * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { isBrowser, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\n\nexport interface PortalInnerProps extends ChildrenComponentProps {\n  /** Existing element the portal should be bound to. */\n  mountNode?: HTMLElement;\n\n  /**\n   * Called when the portal is mounted on the DOM\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalInnerProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalInnerProps) => void;\n}\n\n/**\n * A PortalInner is a container for Portal's content.\n */\nclass PortalInner extends React.Component<PortalInnerProps> {\n  static contextType = PortalBoxContext;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      as: false,\n      className: false,\n      content: false,\n      styled: false,\n    }),\n    mountNode: PropTypes.object,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n  };\n\n  componentDidMount() {\n    _.invoke(this.props, 'onMount', this.props);\n  }\n\n  componentWillUnmount() {\n    _.invoke(this.props, 'onUnmount', this.props);\n  }\n\n  render() {\n    const { children, mountNode } = this.props;\n\n    // PortalInner should render elements even without a context\n    // eslint-disable-next-line\n    const target: HTMLDivElement | null = isBrowser() ? this.context || document.body : null;\n    const container: HTMLElement | null = mountNode || target;\n\n    return container && ReactDOM.createPortal(children, container);\n  }\n}\n\nexport default PortalInner;\n"]},"metadata":{},"sourceType":"module"}