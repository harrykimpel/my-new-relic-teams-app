{"ast":null,"code":"/**\n * @description\n * Image is usually only visual representation and therefore is hidden from screen readers, unless 'alt' property is provided.\n *\n * @specification\n * Adds attribute 'aria-hidden=true', if there is no 'alt' property provided.\n */\nvar imageBehavior = function imageBehavior(props) {\n  return {\n    attributes: {\n      root: {\n        'aria-hidden': props.alt || props['aria-label'] ? undefined : 'true'\n      }\n    }\n  };\n};\n\nexport default imageBehavior;","map":{"version":3,"sources":["behaviors/Image/imageBehavior.ts"],"names":["imageBehavior","attributes","root","props"],"mappings":"AAEA;;;;;;;AAQA,IAAMA,aAAgD,GAAG,SAAnDA,aAAmD,CAAA,KAAA,EAAK;AAAA,SAAK;AACjEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJ,uBAAeC,KAAK,CAALA,GAAAA,IAAaA,KAAK,CAAlBA,YAAkB,CAAlBA,GAAAA,SAAAA,GAA+C;AAD1D;AADI;AADqD,GAAL;AAA9D,CAAA;;AAQA,eAAA,aAAA","sourcesContent":["import { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @description\n * Image is usually only visual representation and therefore is hidden from screen readers, unless 'alt' property is provided.\n *\n * @specification\n * Adds attribute 'aria-hidden=true', if there is no 'alt' property provided.\n */\n\nconst imageBehavior: Accessibility<ImageBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      'aria-hidden': props.alt || props['aria-label'] ? undefined : 'true',\n    },\n  },\n});\n\nexport default imageBehavior;\n\nexport type ImageBehaviorProps = {\n  /** Alternative text. */\n  alt?: string;\n} & Pick<AccessibilityAttributes, 'aria-label'>;\n"]},"metadata":{},"sourceType":"module"}