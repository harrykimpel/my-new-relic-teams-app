{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _debounce from \"lodash/debounce\";\nimport _findIndex from \"lodash/findIndex\";\nimport _isNil from \"lodash/isNil\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isNumber from \"lodash/isNumber\";\nimport _invoke from \"lodash/invoke\";\nimport _isFunction from \"lodash/isFunction\";\nimport _map from \"lodash/map\";\nimport _differenceBy from \"lodash/differenceBy\";\nimport _isArray from \"lodash/isArray\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as keyboardKey from 'keyboard-key';\nimport { withSafeTypeForAs } from '../../types';\nimport Downshift from 'downshift';\nimport { AutoControlledComponent, commonPropTypes, isFromKeyboard, createShorthand } from '../../utils';\nimport List from '../List/List';\nimport DropdownItem from './DropdownItem';\nimport DropdownSelectedItem from './DropdownSelectedItem';\nimport DropdownSearchInput from './DropdownSearchInput';\nimport Button from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport Box from '../Box/Box';\nimport Portal from '../Portal/Portal';\nimport { ALIGNMENTS, POSITIONS, Popper, getPopperPropsFromShorthand } from '../../utils/positioner';\nexport var dropdownClassName = 'ui-dropdown';\nexport var dropdownSlotClassNames = {\n  clearIndicator: \"\".concat(dropdownClassName, \"__clear-indicator\"),\n  container: \"\".concat(dropdownClassName, \"__container\"),\n  toggleIndicator: \"\".concat(dropdownClassName, \"__toggle-indicator\"),\n  item: \"\".concat(dropdownClassName, \"__item\"),\n  itemsList: \"\".concat(dropdownClassName, \"__items-list\"),\n  searchInput: \"\".concat(dropdownClassName, \"__searchinput\"),\n  selectedItem: \"\".concat(dropdownClassName, \"__selecteditem\"),\n  selectedItems: \"\".concat(dropdownClassName, \"__selected-items\"),\n  triggerButton: \"\".concat(dropdownClassName, \"__trigger-button\")\n};\n\nvar Dropdown = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Dropdown, _AutoControlledCompon);\n\n  function Dropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"buttonRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"listRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"selectedItemsRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"containerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultTriggerButtonId\", _uniqueId('dropdown-trigger-button-'));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      // Dropdown component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {\n        value: _this.state.value\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"downshiftStateReducer\", function (state, changes) {\n      var activeElement = _this.context.target.activeElement;\n\n      switch (changes.type) {\n        case Downshift.stateChangeTypes.blurButton:\n          // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n          // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n          if (state.isOpen && activeElement === _this.listRef.current) {\n            return {}; // won't change state in this case.\n          }\n\n        default:\n          return changes;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStateChange\", function (changes) {\n      var _this$props = _this.props,\n          search = _this$props.search,\n          multiple = _this$props.multiple,\n          highlightFirstItemOnOpen = _this$props.highlightFirstItemOnOpen,\n          items = _this$props.items,\n          getA11ySelectionMessage = _this$props.getA11ySelectionMessage;\n      var _this$state = _this.state,\n          value = _this$state.value,\n          open = _this$state.open;\n      var type = changes.type;\n      var newState = {};\n\n      switch (type) {\n        case Downshift.stateChangeTypes.changeInput:\n          {\n            var shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n            newState.searchQuery = changes.inputValue;\n            newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n            if (shouldValueChange) {\n              newState.value = [];\n            }\n\n            if (open) {\n              // we clear value when in single selection user cleared the query.\n              var shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n              if (shouldMenuClose) {\n                newState.open = false;\n              }\n            } else {\n              newState.open = true;\n            }\n\n            break;\n          }\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n        case Downshift.stateChangeTypes.clickItem:\n          var shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n          var isSameItemSelected = changes.selectedItem === undefined;\n          var newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n          newState.searchQuery = _this.getSelectedItemAsString(newValue);\n          newState.open = false;\n          newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n          if (!isSameItemSelected) {\n            newState.value = multiple ? [].concat(_toConsumableArray(value), [changes.selectedItem]) : [changes.selectedItem];\n\n            if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n              _this.setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n            }\n          }\n\n          if (multiple) {\n            setTimeout(function () {\n              return _this.selectedItemsRef.current.scrollTop = _this.selectedItemsRef.current.scrollHeight;\n            }, 0);\n          }\n\n          _this.tryFocusTriggerButton();\n\n          break;\n\n        case Downshift.stateChangeTypes.keyDownEscape:\n          if (search) {\n            newState.searchQuery = '';\n\n            if (!multiple) {\n              newState.value = [];\n            }\n          }\n\n          newState.open = false;\n          newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n          break;\n\n        case Downshift.stateChangeTypes.keyDownArrowDown:\n        case Downshift.stateChangeTypes.keyDownArrowUp:\n          if (changes.isOpen !== undefined) {\n            newState.open = changes.isOpen;\n            newState.highlightedIndex = changes.highlightedIndex;\n\n            if (changes.isOpen) {\n              var highlightedIndexOnArrowKeyOpen = _this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n              if (_isNumber(highlightedIndexOnArrowKeyOpen)) {\n                newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n              }\n\n              if (!search) {\n                _this.listRef.current.focus();\n              }\n            } else {\n              newState.highlightedIndex = null;\n            }\n          }\n\n        case Downshift.stateChangeTypes['keyDownHome']:\n        case Downshift.stateChangeTypes['keyDownEnd']:\n          if (open && _isNumber(changes.highlightedIndex)) {\n            newState.highlightedIndex = changes.highlightedIndex;\n            newState.itemIsFromKeyboard = true;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.mouseUp:\n          if (open) {\n            newState.open = false;\n            newState.highlightedIndex = null;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.clickButton:\n        case Downshift.stateChangeTypes.keyDownSpaceButton:\n          newState.open = changes.isOpen;\n\n          if (changes.isOpen) {\n            var _highlightedIndexOnArrowKeyOpen = _this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_isNumber(_highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = _highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              _this.listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.itemMouseEnter:\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = false;\n          break;\n\n        case Downshift.stateChangeTypes.unknown:\n          if (changes.selectedItem) {\n            newState.value = multiple ? [].concat(_toConsumableArray(value), [changes.selectedItem]) : [changes.selectedItem];\n            newState.searchQuery = multiple ? '' : changes.inputValue;\n            newState.open = false;\n            newState.highlightedIndex = changes.highlightedIndex;\n\n            _this.tryFocusTriggerButton();\n          } else {\n            newState.open = changes.isOpen;\n          }\n\n        default:\n          break;\n      }\n\n      if (_isEmpty(newState)) {\n        return;\n      }\n\n      var handlers = [newState.value !== undefined && 'onChange', newState.highlightedIndex !== undefined && 'onHighlightedIndexChange', newState.open !== undefined && 'onOpenChange', newState.searchQuery !== undefined && 'onSearchQueryChange'].filter(Boolean);\n\n      _this.setStateAndInvokeHandler(handlers, null, newState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSelectedItemActive\", function (index) {\n      return index === _this.state.activeSelectedIndex;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleItemOverrides\", function (item, index, getItemProps, selected) {\n      return function (predefinedProps) {\n        return {\n          accessibilityItemProps: Object.assign({}, getItemProps({\n            item: item,\n            index: index,\n            disabled: item['disabled'],\n            onClick: function onClick(e) {\n              e.stopPropagation();\n              e.nativeEvent.stopImmediatePropagation();\n\n              _invoke(predefinedProps, 'onClick', e, predefinedProps);\n            }\n          }), {}, !_this.props.multiple && {\n            'aria-selected': selected\n          })\n        };\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectedItemOverrides\", function (item, rtl) {\n      return function (predefinedProps) {\n        return {\n          onRemove: function onRemove(e, dropdownSelectedItemProps) {\n            _this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n          },\n          onClick: function onClick(e, dropdownSelectedItemProps) {\n            _this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: _this.state.value.indexOf(item)\n            });\n\n            e.stopPropagation();\n\n            _invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n          },\n          onKeyDown: function onKeyDown(e, dropdownSelectedItemProps) {\n            _this.handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps, rtl);\n          }\n        };\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchInputOverrides\", function (highlightedIndex, rtl, selectItemAtIndex, toggleMenu, accessibilityComboboxProps, getInputProps) {\n      return function (predefinedProps) {\n        var handleInputBlur = function handleInputBlur(e, searchInputProps) {\n          if (!disabled) {\n            _this.setState({\n              focused: false,\n              isFromKeyboard: isFromKeyboard()\n            });\n\n            e.nativeEvent['preventDownshiftDefault'] = true;\n          }\n\n          _invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n        };\n\n        var disabled = _this.props.disabled;\n\n        var handleInputKeyDown = function handleInputKeyDown(e, searchInputProps) {\n          if (!disabled) {\n            switch (keyboardKey.getCode(e)) {\n              case keyboardKey.Tab:\n                _this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n\n                break;\n\n              case keyboardKey.ArrowLeft:\n                if (!rtl) {\n                  _this.trySetLastSelectedItemAsActive();\n                }\n\n                break;\n\n              case keyboardKey.ArrowRight:\n                if (rtl) {\n                  _this.trySetLastSelectedItemAsActive();\n                }\n\n                break;\n\n              case keyboardKey.Backspace:\n                _this.tryRemoveItemFromValue();\n\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          _invoke(predefinedProps, 'onInputKeyDown', e, Object.assign({}, searchInputProps, {\n            highlightedIndex: highlightedIndex,\n            selectItemAtIndex: selectItemAtIndex\n          }));\n        };\n\n        return {\n          // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n          // user handlers were also added to our handlers previously, at the beginning of this function.\n          accessibilityInputProps: Object.assign({}, getInputProps({\n            disabled: disabled,\n            onBlur: function onBlur(e) {\n              handleInputBlur(e, predefinedProps);\n            },\n            onKeyDown: function onKeyDown(e) {\n              handleInputKeyDown(e, predefinedProps);\n            },\n            onChange: function onChange(e) {\n              // we prevent the onChange input event to bubble up to our Dropdown handler,\n              // since in Dropdown it gets handled as onSearchQueryChange.\n              e.stopPropagation();\n            }\n          })),\n          // same story as above for getRootProps.\n          accessibilityComboboxProps: accessibilityComboboxProps,\n          onFocus: function onFocus(e, searchInputProps) {\n            if (!disabled) {\n              _this.setState({\n                focused: true,\n                isFromKeyboard: isFromKeyboard()\n              });\n            }\n\n            _invoke(predefinedProps, 'onFocus', e, searchInputProps);\n          },\n          onInputBlur: function onInputBlur(e, searchInputProps) {\n            handleInputBlur(e, searchInputProps);\n          },\n          onInputKeyDown: function onInputKeyDown(e, searchInputProps) {\n            handleInputKeyDown(e, searchInputProps);\n          }\n        };\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabSelection\", function (e, highlightedIndex, selectItemAtIndex, toggleMenu) {\n      var _this$state2 = _this.state,\n          open = _this$state2.open,\n          filteredItems = _this$state2.filteredItems;\n      var _this$props2 = _this.props,\n          moveFocusOnTab = _this$props2.moveFocusOnTab,\n          multiple = _this$props2.multiple,\n          items = _this$props2.items;\n\n      if (open) {\n        if (!_isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n          selectItemAtIndex(highlightedIndex);\n\n          if (multiple && !moveFocusOnTab) {\n            e.preventDefault();\n          }\n        } else {\n          toggleMenu();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trySetLastSelectedItemAsActive\", function () {\n      var multiple = _this.props.multiple;\n      var value = _this.state.value;\n\n      if (!multiple || _this.inputRef.current && _this.inputRef.current.selectionStart !== 0) {\n        return;\n      }\n\n      if (value.length > 0) {\n        // If last element was already active, perform a 'reset' of activeSelectedIndex.\n        if (_this.state.activeSelectedIndex === value.length - 1) {\n          _this.setState({\n            activeSelectedIndex: null\n          }, function () {\n            _this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: value.length - 1\n            });\n          });\n        } else {\n          _this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: value.length - 1\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"tryRemoveItemFromValue\", function () {\n      var multiple = _this.props.multiple;\n      var _this$state3 = _this.state,\n          searchQuery = _this$state3.searchQuery,\n          value = _this$state3.value;\n      var inputElement = _this.inputRef.current;\n\n      if (multiple && (searchQuery === '' || inputElement.selectionStart === 0 && inputElement.selectionEnd === 0) && value.length > 0) {\n        _this.removeItemFromValue();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClear\", function (e) {\n      var _this$getInitialAutoC = _this.getInitialAutoControlledState(_this.props),\n          activeSelectedIndex = _this$getInitialAutoC.activeSelectedIndex,\n          highlightedIndex = _this$getInitialAutoC.highlightedIndex,\n          open = _this$getInitialAutoC.open,\n          searchQuery = _this$getInitialAutoC.searchQuery,\n          value = _this$getInitialAutoC.value;\n\n      _this.setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n        activeSelectedIndex: activeSelectedIndex,\n        highlightedIndex: highlightedIndex,\n        open: open,\n        searchQuery: searchQuery,\n        value: value\n      });\n\n      _this.tryFocusSearchInput();\n\n      _this.tryFocusTriggerButton();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerClick\", function () {\n      _this.tryFocusSearchInput();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTriggerButtonKeyDown\", function (e, rtl) {\n      switch (keyboardKey.getCode(e)) {\n        case keyboardKey.ArrowLeft:\n          if (!rtl) {\n            _this.trySetLastSelectedItemAsActive();\n          }\n\n          return;\n\n        case keyboardKey.ArrowRight:\n          if (rtl) {\n            _this.trySetLastSelectedItemAsActive();\n          }\n\n          return;\n\n        default:\n          return;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleListKeyDown\", function (e, highlightedIndex, accessibilityInputPropsKeyDown, toggleMenu, selectItemAtIndex) {\n      var keyCode = keyboardKey.getCode(e);\n\n      switch (keyCode) {\n        case keyboardKey.Tab:\n          _this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n\n          return;\n\n        case keyboardKey.Escape:\n          accessibilityInputPropsKeyDown(e);\n\n          _this.tryFocusTriggerButton();\n\n          e.stopPropagation();\n          return;\n\n        default:\n          var keyString = String.fromCharCode(keyCode);\n\n          if (/[a-zA-Z0-9]/.test(keyString)) {\n            _this.setHighlightedIndexOnCharKeyDown(keyString);\n          }\n\n          accessibilityInputPropsKeyDown(e);\n          return;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTriggerButtonOrListFocus\", function () {\n      _this.setState({\n        focused: true,\n        isFromKeyboard: isFromKeyboard()\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTriggerButtonBlur\", function (e) {\n      if (_this.listRef.current !== e.relatedTarget) {\n        _this.setState({\n          focused: false,\n          isFromKeyboard: isFromKeyboard()\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleListBlur\", function (e) {\n      if (_this.buttonRef.current !== e.relatedTarget) {\n        _this.setState({\n          focused: false,\n          isFromKeyboard: isFromKeyboard()\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setHighlightedIndexOnCharKeyDown\", function (keyString) {\n      var _this$state4 = _this.state,\n          highlightedIndex = _this$state4.highlightedIndex,\n          filteredItemStrings = _this$state4.filteredItemStrings,\n          startingString = _this$state4.startingString;\n      var newStartingString = \"\".concat(startingString).concat(keyString.toLowerCase());\n      var newHighlightedIndex = -1;\n\n      _this.setStartingString(newStartingString);\n\n      if (_isNumber(highlightedIndex)) {\n        newHighlightedIndex = _findIndex(filteredItemStrings, function (item) {\n          return item.startsWith(newStartingString);\n        }, highlightedIndex + (startingString.length > 0 ? 0 : 1));\n      }\n\n      if (newHighlightedIndex < 0) {\n        newHighlightedIndex = _findIndex(filteredItemStrings, function (item) {\n          return item.startsWith(newStartingString);\n        });\n      }\n\n      if (newHighlightedIndex >= 0) {\n        _this.setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n          highlightedIndex: newHighlightedIndex\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setStateAndInvokeHandler\", function (handlerNames, event, newState) {\n      var proposedValue = _isNil(newState.value) ? _this.state.value : newState.value; // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n      // required as first item can be undefined\n\n      var newValue = _this.props.multiple ? proposedValue : proposedValue[0] || null;\n\n      _this.setState(newState);\n\n      handlerNames.forEach(function (handlerName) {\n        _invoke(_this.props, handlerName, event, Object.assign({}, _this.props, {}, newState, {\n          value: newValue\n        }));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"tryFocusTriggerButton\", function () {\n      if (!_this.props.search && _this.buttonRef.current) {\n        _this.buttonRef.current.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"tryFocusSearchInput\", function () {\n      if (_this.props.search && _this.inputRef.current) {\n        _this.inputRef.current.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectedItemAsString\", function (value) {\n      var _this$props3 = _this.props,\n          itemToString = _this$props3.itemToString,\n          multiple = _this$props3.multiple,\n          placeholder = _this$props3.placeholder,\n          search = _this$props3.search;\n\n      if (!value) {\n        return search ? '' : placeholder;\n      }\n\n      if (multiple) {\n        return '';\n      }\n\n      return itemToString(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getHighlightedIndexOnArrowKeyOpen\", function (changes) {\n      var _this$state5 = _this.state,\n          filteredItems = _this$state5.filteredItems,\n          highlightedIndex = _this$state5.highlightedIndex,\n          value = _this$state5.value;\n      var _this$props4 = _this.props,\n          highlightFirstItemOnOpen = _this$props4.highlightFirstItemOnOpen,\n          items = _this$props4.items,\n          multiple = _this$props4.multiple,\n          search = _this$props4.search;\n      var isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n      var isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n      var itemsLength = filteredItems.length;\n\n      if (highlightedIndex) {\n        return highlightedIndex;\n      }\n\n      if (highlightFirstItemOnOpen) {\n        // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n        return 0;\n      }\n\n      if (!multiple && !search && value.length > 0) {\n        // in single selection, if there is a selected item, highlight it.\n        var offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n        var newHighlightedIndex = items.indexOf(value[0]) + offset;\n\n        if (newHighlightedIndex >= itemsLength) {\n          return 0;\n        }\n\n        if (newHighlightedIndex < 0) {\n          return itemsLength - 1;\n        }\n\n        return newHighlightedIndex;\n      }\n\n      if (isArrowDown) {\n        return 0;\n      }\n\n      if (isArrowUp) {\n        return itemsLength - 1;\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setA11ySelectionMessage\", function (a11ySelectionStatus) {\n      _this.setState({\n        a11ySelectionStatus: a11ySelectionStatus\n      });\n\n      _this.clearA11ySelectionMessage();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setStartingString\", function (startingString) {\n      _this.setState({\n        startingString: startingString\n      });\n\n      _this.clearStartingString();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearA11ySelectionMessage\", _debounce(function () {\n      _this.setState({\n        a11ySelectionStatus: ''\n      });\n    }, Dropdown.a11yStatusCleanupTime));\n\n    _defineProperty(_assertThisInitialized(_this), \"clearStartingString\", _debounce(function () {\n      _this.setState({\n        startingString: ''\n      });\n    }, Dropdown.charKeyPressedCleanupTime));\n\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearStartingString.cancel();\n      this.clearA11ySelectionMessage.cancel();\n    }\n  }, {\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState(_ref) {\n      var multiple = _ref.multiple,\n          search = _ref.search;\n      return {\n        a11ySelectionStatus: '',\n        activeSelectedIndex: multiple ? null : undefined,\n        filteredItems: undefined,\n        filteredItemStrings: undefined,\n        focused: false,\n        startingString: search ? undefined : '',\n        open: false,\n        highlightedIndex: this.props.highlightFirstItemOnOpen ? 0 : null,\n        searchQuery: search ? '' : undefined,\n        value: [],\n        itemIsFromKeyboard: false,\n        isFromKeyboard: false\n      };\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref2) {\n      var _this$context$target,\n          _this2 = this;\n\n      var ElementType = _ref2.ElementType,\n          classes = _ref2.classes,\n          styles = _ref2.styles,\n          variables = _ref2.variables,\n          unhandledProps = _ref2.unhandledProps,\n          rtl = _ref2.rtl;\n      var _this$props5 = this.props,\n          clearable = _this$props5.clearable,\n          clearIndicator = _this$props5.clearIndicator,\n          disabled = _this$props5.disabled,\n          search = _this$props5.search,\n          multiple = _this$props5.multiple,\n          getA11yStatusMessage = _this$props5.getA11yStatusMessage,\n          itemToString = _this$props5.itemToString,\n          toggleIndicator = _this$props5.toggleIndicator;\n      var _this$state6 = this.state,\n          highlightedIndex = _this$state6.highlightedIndex,\n          open = _this$state6.open,\n          searchQuery = _this$state6.searchQuery,\n          value = _this$state6.value;\n      return React.createElement(ElementType, _extends({\n        className: classes.root,\n        onChange: this.handleChange\n      }, unhandledProps), React.createElement(Downshift, {\n        isOpen: open,\n        inputValue: search ? searchQuery : null,\n        stateReducer: this.downshiftStateReducer,\n        itemToString: itemToString // downshift does not work with arrays as selectedItem.\n        ,\n        selectedItem: multiple || !value.length ? null : value[0],\n        getA11yStatusMessage: getA11yStatusMessage,\n        highlightedIndex: highlightedIndex,\n        onStateChange: this.handleStateChange,\n        labelId: this.props['aria-labelledby'],\n        environment: (_this$context$target = this.context.target) === null || _this$context$target === void 0 ? void 0 : _this$context$target.defaultView,\n        inputId: this.props.searchInput && this.props.searchInput['id'] ? this.props.searchInput['id'] : undefined\n      }, function (_ref3) {\n        var getInputProps = _ref3.getInputProps,\n            getItemProps = _ref3.getItemProps,\n            getMenuProps = _ref3.getMenuProps,\n            getRootProps = _ref3.getRootProps,\n            getToggleButtonProps = _ref3.getToggleButtonProps,\n            toggleMenu = _ref3.toggleMenu,\n            highlightedIndex = _ref3.highlightedIndex,\n            selectItemAtIndex = _ref3.selectItemAtIndex;\n\n        var _getRootProps = getRootProps({\n          refKey: 'innerRef'\n        }, {\n          suppressRefError: true\n        }),\n            innerRef = _getRootProps.innerRef,\n            accessibilityRootPropsRest = _objectWithoutProperties(_getRootProps, [\"innerRef\"]);\n\n        var showClearIndicator = clearable && value.length > 0;\n        return React.createElement(Ref, {\n          innerRef: innerRef\n        }, React.createElement(\"div\", {\n          ref: _this2.containerRef,\n          className: cx(dropdownSlotClassNames.container, classes.container),\n          onClick: search && !open ? _this2.handleContainerClick : undefined\n        }, React.createElement(\"div\", {\n          ref: _this2.selectedItemsRef,\n          className: cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)\n        }, multiple && _this2.renderSelectedItems(variables, rtl), search ? _this2.renderSearchInput(accessibilityRootPropsRest, rtl, highlightedIndex, getInputProps, selectItemAtIndex, toggleMenu, variables) : _this2.renderTriggerButton(styles, rtl, getToggleButtonProps)), showClearIndicator ? Box.create(clearIndicator, {\n          defaultProps: function defaultProps() {\n            return Object.assign({\n              className: dropdownSlotClassNames.clearIndicator,\n              styles: styles.clearIndicator,\n              accessibility: indicatorBehavior\n            }, !search && {\n              tabIndex: 0,\n              role: 'button'\n            });\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              onClick: function onClick(e) {\n                _invoke(predefinedProps, 'onClick', e);\n\n                _this2.handleClear(e);\n              }\n            };\n          }\n        }) : Box.create(toggleIndicator, {\n          defaultProps: function defaultProps() {\n            return {\n              className: dropdownSlotClassNames.toggleIndicator,\n              styles: styles.toggleIndicator,\n              accessibility: indicatorBehavior\n            };\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              onClick: function onClick(e) {\n                if (!disabled) {\n                  getToggleButtonProps({\n                    disabled: disabled\n                  }).onClick(e);\n                }\n\n                _invoke(predefinedProps, 'onClick', e);\n              }\n            };\n          }\n        }), _this2.renderItemsList(styles, variables, highlightedIndex, toggleMenu, selectItemAtIndex, getMenuProps, getItemProps, getInputProps, rtl)));\n      }), React.createElement(Portal, {\n        open: !!this.props.getA11ySelectionMessage\n      }, React.createElement(\"div\", {\n        role: \"status\",\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions text\",\n        style: screenReaderContainerStyles\n      }, this.state.a11ySelectionStatus)));\n    }\n  }, {\n    key: \"renderTriggerButton\",\n    value: function renderTriggerButton(styles, rtl, getToggleButtonProps) {\n      var _this3 = this;\n\n      var _this$props6 = this.props,\n          triggerButton = _this$props6.triggerButton,\n          disabled = _this$props6.disabled;\n      var value = this.state.value;\n      var content = this.getSelectedItemAsString(value[0]);\n      var triggerButtonId = triggerButton['id'] || this.defaultTriggerButtonId;\n      var triggerButtonProps = getToggleButtonProps({\n        disabled: disabled,\n        onFocus: this.handleTriggerButtonOrListFocus,\n        onBlur: this.handleTriggerButtonBlur,\n        onKeyDown: function onKeyDown(e) {\n          _this3.handleTriggerButtonKeyDown(e, rtl);\n        },\n        'aria-label': undefined,\n        'aria-labelledby': [this.props['aria-labelledby'], triggerButtonId].filter(function (l) {\n          return !!l;\n        }).join(' ')\n      });\n\n      var _onClick = triggerButtonProps.onClick,\n          _onFocus = triggerButtonProps.onFocus,\n          _onBlur = triggerButtonProps.onBlur,\n          _onKeyDown = triggerButtonProps.onKeyDown,\n          restTriggerButtonProps = _objectWithoutProperties(triggerButtonProps, [\"onClick\", \"onFocus\", \"onBlur\", \"onKeyDown\"]);\n\n      return React.createElement(Ref, {\n        innerRef: this.buttonRef\n      }, createShorthand(Button, triggerButton, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dropdownSlotClassNames.triggerButton,\n            content: content,\n            disabled: disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: styles.triggerButton\n          }, restTriggerButtonProps);\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onClick: function onClick(e) {\n              _onClick(e);\n\n              _invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: function onFocus(e) {\n              _onFocus(e);\n\n              _invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: function onBlur(e) {\n              if (!disabled) {\n                _onBlur(e);\n              }\n\n              _invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: function onKeyDown(e) {\n              if (!disabled) {\n                _onKeyDown(e);\n              }\n\n              _invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            }\n          };\n        }\n      }));\n    }\n  }, {\n    key: \"renderSearchInput\",\n    value: function renderSearchInput(accessibilityComboboxProps, rtl, highlightedIndex, getInputProps, selectItemAtIndex, toggleMenu, variables) {\n      var _this4 = this;\n\n      var _this$props7 = this.props,\n          inline = _this$props7.inline,\n          searchInput = _this$props7.searchInput,\n          multiple = _this$props7.multiple,\n          placeholder = _this$props7.placeholder,\n          disabled = _this$props7.disabled;\n      var _this$state7 = this.state,\n          searchQuery = _this$state7.searchQuery,\n          value = _this$state7.value;\n      var noPlaceholder = searchQuery.length > 0 || multiple && value.length > 0;\n      return DropdownSearchInput.create(searchInput || {}, {\n        defaultProps: function defaultProps() {\n          return {\n            className: dropdownSlotClassNames.searchInput,\n            placeholder: noPlaceholder ? '' : placeholder,\n            inline: inline,\n            variables: variables,\n            inputRef: _this4.inputRef,\n            disabled: disabled\n          };\n        },\n        overrideProps: this.handleSearchInputOverrides(highlightedIndex, rtl, selectItemAtIndex, toggleMenu, accessibilityComboboxProps, getInputProps)\n      });\n    }\n  }, {\n    key: \"renderItemsList\",\n    value: function renderItemsList(styles, variables, highlightedIndex, toggleMenu, selectItemAtIndex, getMenuProps, getItemProps, getInputProps, rtl) {\n      var _this5 = this;\n\n      var _this$props8 = this.props,\n          align = _this$props8.align,\n          offset = _this$props8.offset,\n          position = _this$props8.position,\n          search = _this$props8.search,\n          unstable_pinned = _this$props8.unstable_pinned,\n          list = _this$props8.list;\n      var open = this.state.open;\n      var items = open ? this.renderItems(styles, variables, getItemProps, highlightedIndex) : [];\n\n      var _getMenuProps = getMenuProps({\n        refKey: 'innerRef'\n      }, {\n        suppressRefError: true\n      }),\n          _innerRef = _getMenuProps.innerRef,\n          accessibilityMenuProps = _objectWithoutProperties(_getMenuProps, [\"innerRef\"]); // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n\n\n      if (!search) {\n        var accessibilityInputProps = getInputProps();\n        accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n\n        accessibilityMenuProps['onKeyDown'] = function (e) {\n          _this5.handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n        };\n      }\n\n      return React.createElement(Ref, {\n        innerRef: function innerRef(listElement) {\n          handleRef(_this5.listRef, listElement);\n          handleRef(_innerRef, listElement);\n        }\n      }, React.createElement(Popper, _extends({\n        align: align,\n        position: position,\n        offset: offset,\n        rtl: rtl,\n        enabled: open,\n        targetRef: this.containerRef,\n        unstable_pinned: unstable_pinned,\n        positioningDependencies: [items.length]\n      }, getPopperPropsFromShorthand(list)), List.create(list, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dropdownSlotClassNames.itemsList\n          }, accessibilityMenuProps, {\n            styles: styles.list,\n            items: items,\n            tabIndex: search ? undefined : -1,\n            // needs to be focused when trigger button is activated.\n            'aria-hidden': !open\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onFocus: function onFocus(e, listProps) {\n              _this5.handleTriggerButtonOrListFocus();\n\n              _invoke(predefinedProps, 'onClick', e, listProps);\n            },\n            onBlur: function onBlur(e, listProps) {\n              _this5.handleListBlur(e);\n\n              _invoke(predefinedProps, 'onBlur', e, listProps);\n            }\n          };\n        }\n      })));\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems(styles, variables, getItemProps, highlightedIndex) {\n      var _this6 = this;\n\n      var _this$props9 = this.props,\n          renderItem = _this$props9.renderItem,\n          checkable = _this$props9.checkable,\n          checkableIndicator = _this$props9.checkableIndicator;\n      var _this$state8 = this.state,\n          filteredItems = _this$state8.filteredItems,\n          value = _this$state8.value;\n      var footerItem = this.renderItemsListFooter(styles);\n      var headerItem = this.renderItemsListHeader(styles);\n\n      var items = _map(filteredItems, function (item, index) {\n        return {\n          children: function children() {\n            var selected = value.indexOf(item) !== -1;\n            return DropdownItem.create(item, {\n              defaultProps: function defaultProps() {\n                return Object.assign({\n                  className: dropdownSlotClassNames.item,\n                  active: highlightedIndex === index,\n                  selected: selected,\n                  checkable: checkable,\n                  checkableIndicator: checkableIndicator,\n                  isFromKeyboard: _this6.state.itemIsFromKeyboard,\n                  variables: variables\n                }, _typeof(item) === 'object' && !item.hasOwnProperty('key') && {\n                  key: item.header\n                });\n              },\n              overrideProps: _this6.handleItemOverrides(item, index, getItemProps, selected),\n              render: renderItem\n            });\n          }\n        };\n      });\n\n      if (footerItem) {\n        items.push(footerItem);\n      }\n\n      return headerItem ? [headerItem].concat(_toConsumableArray(items)) : items;\n    }\n  }, {\n    key: \"renderItemsListHeader\",\n    value: function renderItemsListHeader(styles) {\n      var headerMessage = this.props.headerMessage;\n\n      if (headerMessage) {\n        return {\n          children: function children() {\n            return DropdownItem.create(headerMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'items-list-footer-message',\n                  styles: styles.headerMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderItemsListFooter\",\n    value: function renderItemsListFooter(styles) {\n      var _this$props10 = this.props,\n          loading = _this$props10.loading,\n          loadingMessage = _this$props10.loadingMessage,\n          noResultsMessage = _this$props10.noResultsMessage,\n          items = _this$props10.items;\n\n      if (loading) {\n        return {\n          children: function children() {\n            return DropdownItem.create(loadingMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'loading-message',\n                  styles: styles.loadingMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      if (items && items.length === 0) {\n        return {\n          children: function children() {\n            return DropdownItem.create(noResultsMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'no-results-message',\n                  styles: styles.noResultsMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSelectedItems\",\n    value: function renderSelectedItems(variables, rtl) {\n      var _this7 = this;\n\n      var renderSelectedItem = this.props.renderSelectedItem;\n      var value = this.state.value;\n\n      if (value.length === 0) {\n        return null;\n      }\n\n      return value.map(function (item, index) {\n        return (// (!) an item matches DropdownItemProps\n          DropdownSelectedItem.create(item, {\n            defaultProps: function defaultProps() {\n              return Object.assign({\n                className: dropdownSlotClassNames.selectedItem,\n                active: _this7.isSelectedItemActive(index),\n                variables: variables\n              }, _typeof(item) === 'object' && !item.hasOwnProperty('key') && {\n                key: item.header\n              });\n            },\n            overrideProps: _this7.handleSelectedItemOverrides(item, rtl),\n            render: renderSelectedItem\n          })\n        );\n      });\n    }\n  }, {\n    key: \"handleSelectedItemKeyDown\",\n    value: function handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps, rtl) {\n      var _this$state9 = this.state,\n          activeSelectedIndex = _this$state9.activeSelectedIndex,\n          value = _this$state9.value;\n      var previousKey = rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n      var nextKey = rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n      switch (keyboardKey.getCode(e)) {\n        case keyboardKey.Delete:\n        case keyboardKey.Backspace:\n          this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n          break;\n\n        case previousKey:\n          if (value.length > 0 && !_isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n            this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex - 1\n            });\n          }\n\n          break;\n\n        case nextKey:\n          if (value.length > 0 && !_isNil(activeSelectedIndex)) {\n            if (activeSelectedIndex < value.length - 1) {\n              this.setState({\n                activeSelectedIndex: activeSelectedIndex + 1\n              });\n            } else {\n              this.setState({\n                activeSelectedIndex: null\n              });\n\n              if (this.props.search) {\n                e.preventDefault(); // prevents caret to forward one position in input.\n\n                this.inputRef.current.focus();\n              } else {\n                this.buttonRef.current.focus();\n              }\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      _invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n    }\n  }, {\n    key: \"handleSelectedItemRemove\",\n    value: function handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps) {\n      this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: null\n      });\n      this.removeItemFromValue(item);\n      this.tryFocusSearchInput();\n      this.tryFocusTriggerButton();\n\n      _invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n    }\n  }, {\n    key: \"removeItemFromValue\",\n    value: function removeItemFromValue(item) {\n      var getA11ySelectionMessage = this.props.getA11ySelectionMessage;\n      var value = this.state.value;\n      var poppedItem = item;\n\n      if (poppedItem) {\n        value = value.filter(function (currentElement) {\n          return currentElement !== item;\n        });\n      } else {\n        poppedItem = value.pop();\n      }\n\n      if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n        this.setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n      }\n\n      this.setStateAndInvokeHandler(['onChange'], null, {\n        value: value\n      });\n    }\n    /**\n     * Calls setState and invokes event handler exposed to user.\n     * We don't have the event object for most events coming from Downshift se we send an empty event\n     * because we want to keep the event handling interface\n     */\n\n  }], [{\n    key: \"getAutoControlledStateFromProps\",\n\n    /**\n     * Used to compute the filtered items (by value and search query) and, if needed,\n     * their string equivalents, in order to be used throughout the component.\n     */\n    value: function getAutoControlledStateFromProps(props, state) {\n      var items = props.items,\n          itemToString = props.itemToString,\n          itemToValue = props.itemToValue,\n          multiple = props.multiple,\n          search = props.search;\n      var searchQuery = state.searchQuery,\n          rawValue = state.value; // `normalizedValue` should be normilized always as it can be received from props\n\n      var normalizedValue = _isArray(rawValue) ? rawValue : [rawValue];\n      var value = multiple ? normalizedValue : normalizedValue.slice(0, 1);\n      var filteredItemsByValue = multiple ? _differenceBy(items, value, itemToValue) : items;\n\n      var filteredItemStrings = _map(filteredItemsByValue, function (filteredItem) {\n        return itemToString(filteredItem).toLowerCase();\n      });\n\n      var modifiedState = {\n        filteredItems: filteredItemsByValue,\n        filteredItemStrings: filteredItemStrings,\n        value: value\n      };\n\n      if (search) {\n        if (_isFunction(search)) {\n          modifiedState.filteredItems = search(filteredItemsByValue, searchQuery);\n        } else {\n          modifiedState.filteredItems = filteredItemsByValue.filter(function (item) {\n            return itemToString(item).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1;\n          });\n        }\n      }\n\n      return modifiedState;\n    }\n  }]);\n\n  return Dropdown;\n}(AutoControlledComponent);\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\n\n\n_defineProperty(Dropdown, \"displayName\", 'Dropdown');\n\n_defineProperty(Dropdown, \"deprecated_className\", dropdownClassName);\n\n_defineProperty(Dropdown, \"a11yStatusCleanupTime\", 500);\n\n_defineProperty(Dropdown, \"charKeyPressedCleanupTime\", 500);\n\n_defineProperty(Dropdown, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false\n}), {\n  activeSelectedIndex: PropTypes.number,\n  align: PropTypes.oneOf(ALIGNMENTS),\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(POSITIONS),\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  unstable_pinned: PropTypes.bool,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand])\n}));\n\n_defineProperty(Dropdown, \"defaultProps\", {\n  align: 'start',\n  as: 'div',\n  clearIndicator: {},\n  itemToString: function itemToString(item) {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    } // targets DropdownItem shorthand objects\n\n\n    return item.header || String(item);\n  },\n  itemToValue: function itemToValue(item) {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    } // targets DropdownItem shorthand objects\n\n\n    return item.header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: {},\n  triggerButton: {}\n});\n\n_defineProperty(Dropdown, \"autoControlledProps\", ['activeSelectedIndex', 'highlightedIndex', 'open', 'searchQuery', 'value']);\n\n_defineProperty(Dropdown, \"Item\", DropdownItem);\n\n_defineProperty(Dropdown, \"SearchInput\", DropdownSearchInput);\n\n_defineProperty(Dropdown, \"SelectedItem\", DropdownSelectedItem);\n\nexport default withSafeTypeForAs(Dropdown);","map":{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsList","searchInput","selectedItem","selectedItems","triggerButton","Dropdown","AutoControlledComponent","React","accessibility","children","content","activeSelectedIndex","PropTypes","number","align","checkable","bool","checkableIndicator","customPropTypes","shorthandAllowingChildren","clearable","defaultActiveSelectedIndex","defaultOpen","defaultHighlightedIndex","defaultSearchQuery","string","defaultValue","disabled","fluid","getA11ySelectionMessage","object","getA11yStatusMessage","func","highlightFirstItemOnOpen","highlightedIndex","inline","inverted","items","collectionShorthand","itemToString","itemToValue","headerMessage","itemShorthand","list","loading","loadingMessage","moveFocusOnTab","multiple","noResultsMessage","offset","onOpenChange","onSearchQueryChange","onChange","onActiveSelectedIndexChange","onHighlightedIndexChange","open","placeholder","position","renderItem","renderSelectedItem","search","searchQuery","unstable_pinned","value","as","String","DropdownItem","DropdownSearchInput","DropdownSelectedItem","a11ySelectionStatus","filteredItems","filteredItemStrings","focused","startingString","itemIsFromKeyboard","isFromKeyboard","props","state","rawValue","normalizedValue","filteredItemsByValue","modifiedState","ElementType","classes","styles","variables","unhandledProps","rtl","handleChange","undefined","getInputProps","getItemProps","getMenuProps","getRootProps","getToggleButtonProps","toggleMenu","selectItemAtIndex","innerRef","accessibilityRootPropsRest","refKey","suppressRefError","showClearIndicator","cx","defaultProps","className","indicatorBehavior","tabIndex","role","overrideProps","onClick","screenReaderContainerStyles","triggerButtonId","triggerButtonProps","onFocus","onBlur","onKeyDown","restTriggerButtonProps","buttonRef","createShorthand","id","accessibilityComboboxProps","noPlaceholder","inputRef","accessibilityMenuProps","accessibilityInputProps","handleRef","getPopperPropsFromShorthand","footerItem","headerItem","selected","active","key","header","render","activeElement","changes","Downshift","type","newState","shouldValueChange","shouldMenuClose","shouldAddHighlightedIndex","isSameItemSelected","newValue","setTimeout","highlightedIndexOnArrowKeyOpen","handlers","index","accessibilityItemProps","e","onRemove","handleInputBlur","handleInputKeyDown","keyboardKey","onInputBlur","onInputKeyDown","inputElement","keyCode","accessibilityInputPropsKeyDown","keyString","predefinedProps","dropdownSelectedItemProps","previousKey","nextKey","newStartingString","newHighlightedIndex","poppedItem","currentElement","proposedValue","handlerNames","isArrowUp","isArrowDown","itemsLength","withSafeTypeForAs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,EAAA,GAAA,QAAA,+BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,SAAA,iBAAA,QAAA,yBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,OAAA,EAAA,MAAA,YAAA;AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA,SAAA,iBAAA,QAAA,aAAA;AASA,OAAA,SAAA,MAAA,WAAA;AAUA,SAAA,uBAAA,EAAA,eAAA,EAAA,cAAA,EAAA,eAAA,QAAA,aAAA;AAQA,OAAA,IAAA,MAAA,cAAA;AACA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,OAAA,MAAA,MAAA,kBAAA;AACA,SAAA,2BAAA,QAAA,sDAAA;AACA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,MAAA,MAAA,kBAAA;AACA,SAAA,UAAA,EAAA,SAAA,EAAA,MAAA,EAAA,2BAAA,QAAA,wBAAA;AA8NA,OAAO,IAAMA,iBAAiB,GAAvB,aAAA;AACP,OAAO,IAAMC,sBAA8C,GAAG;AAC5DC,EAAAA,cAAc,EAAA,GAAA,MAAA,CAAA,iBAAA,EAD8C,mBAC9C,CAD8C;AAE5DC,EAAAA,SAAS,EAAA,GAAA,MAAA,CAAA,iBAAA,EAFmD,aAEnD,CAFmD;AAG5DC,EAAAA,eAAe,EAAA,GAAA,MAAA,CAAA,iBAAA,EAH6C,oBAG7C,CAH6C;AAI5DC,EAAAA,IAAI,EAAA,GAAA,MAAA,CAAA,iBAAA,EAJwD,QAIxD,CAJwD;AAK5DC,EAAAA,SAAS,EAAA,GAAA,MAAA,CAAA,iBAAA,EALmD,cAKnD,CALmD;AAM5DC,EAAAA,WAAW,EAAA,GAAA,MAAA,CAAA,iBAAA,EANiD,eAMjD,CANiD;AAO5DC,EAAAA,YAAY,EAAA,GAAA,MAAA,CAAA,iBAAA,EAPgD,gBAOhD,CAPgD;AAQ5DC,EAAAA,aAAa,EAAA,GAAA,MAAA,CAAA,iBAAA,EAR+C,kBAQ/C,CAR+C;AAS5DC,EAAAA,aAAa,EAAA,GAAA,MAAA,CAAA,iBAAA,EAAA,kBAAA;AAT+C,CAAvD;;IAYDC,Q;;;;;;;;;;;;;;;;gEACQE,KAAK,CAALA,SAAAA,E;;+DACDA,KAAK,CAALA,SAAAA,E;;8DACDA,KAAK,CAALA,SAAAA,E;;uEACSA,KAAK,CAALA,SAAAA,E;;mEACJA,KAAK,CAALA,SAAAA,E;;6EAyHU,SAAA,CAAA,0BAAA,C;;mEAuCV,UAAA,CAAA,EAA6B;AAC1C;AACA;AACA,MAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAyC,KAAA,CAAzC,KAAA,EAAA;AAAqDwD,QAAAA,KAAK,EAAE,KAAA,CAAA,KAAA,CAAWA;AAAvE,OAAA,CAAA,CAAA;;;4EAmasB,UAAA,KAAA,EAAA,OAAA,EAGnB;AACH,UAAMuE,aAAsB,GAAG,KAAA,CAAA,OAAA,CAAA,MAAA,CAA/B,aAAA;;AAEA,cAAQC,OAAO,CAAf,IAAA;AACE,aAAKC,SAAS,CAATA,gBAAAA,CAAL,UAAA;AACE;AACA;AACA,cAAI3D,KAAK,CAALA,MAAAA,IAAgByD,aAAa,KAAK,KAAA,CAAA,OAAA,CAAtC,OAAA,EAA4D;AAC1D,mBAD0D,EAC1D,CAD0D,CAC/C;AACZ;;AACH;AACE,iBAAA,OAAA;AARJ;;;wEAYkB,UAAA,OAAA,EAAoE;AAAA,UAAA,WAAA,GACC,KAAA,CADD,KAAA;AAAA,UAC9E1E,MAD8E,GAAA,WAAA,CAAA,MAAA;AAAA,UACtEb,QADsE,GAAA,WAAA,CAAA,QAAA;AAAA,UAC5Dd,wBAD4D,GAAA,WAAA,CAAA,wBAAA;AAAA,UAClCI,KADkC,GAAA,WAAA,CAAA,KAAA;AAAA,UAC3BR,uBAD2B,GAAA,WAAA,CAAA,uBAAA;AAAA,UAAA,WAAA,GAE9D,KAAA,CAF8D,KAAA;AAAA,UAE9EkC,KAF8E,GAAA,WAAA,CAAA,KAAA;AAAA,UAEvER,IAFuE,GAAA,WAAA,CAAA,IAAA;AAAA,UAG9EkF,IAH8E,GAGrEF,OAHqE,CAAA,IAAA;AAItF,UAAMG,QAAQ,GAAd,EAAA;;AAEA,cAAA,IAAA;AACE,aAAKF,SAAS,CAATA,gBAAAA,CAAL,WAAA;AAA6C;AAC3C,gBAAMG,iBAAiB,GAAGJ,OAAO,CAAPA,UAAAA,KAAAA,EAAAA,IAA6B,CAA7BA,QAAAA,IAA0CxE,KAAK,CAALA,MAAAA,GAApE,CAAA;AACA2E,YAAAA,QAAQ,CAARA,WAAAA,GAAuBH,OAAO,CAA9BG,UAAAA;AACAA,YAAAA,QAAQ,CAARA,gBAAAA,GAA4BzG,wBAAwB,GAAA,CAAA,GAApDyG,IAAAA;;AAEA,gBAAA,iBAAA,EAAuB;AACrBA,cAAAA,QAAQ,CAARA,KAAAA,GAAAA,EAAAA;AACD;;AAED,gBAAA,IAAA,EAAU;AACR;AACA,kBAAME,eAAe,GAAGL,OAAO,CAAPA,UAAAA,KAAAA,EAAAA,IAA6BA,OAAO,CAAPA,YAAAA,KAArD,SAAA;;AAEA,kBAAA,eAAA,EAAqB;AACnBG,gBAAAA,QAAQ,CAARA,IAAAA,GAAAA,KAAAA;AACD;AANH,aAAA,MAOO;AACLA,cAAAA,QAAQ,CAARA,IAAAA,GAAAA,IAAAA;AACD;;AAED;AACD;;AACD,aAAKF,SAAS,CAATA,gBAAAA,CAAL,YAAA;AACA,aAAKA,SAAS,CAATA,gBAAAA,CAAL,SAAA;AACE,cAAMK,yBAAyB,GAAG,CAAA,QAAA,IAAA,KAAA,IAAsBxG,KAAK,CAALA,MAAAA,GAAxD,CAAA;AACA,cAAMyG,kBAAkB,GAAGP,OAAO,CAAPA,YAAAA,KAA3B,SAAA;AACA,cAAMQ,QAAQ,GAAGD,kBAAkB,GAAG/E,KAAK,CAAR,CAAQ,CAAR,GAAcwE,OAAO,CAAxD,YAAA;AAEAG,UAAAA,QAAQ,CAARA,WAAAA,GAAuB,KAAA,CAAA,uBAAA,CAAvBA,QAAuB,CAAvBA;AACAA,UAAAA,QAAQ,CAARA,IAAAA,GAAAA,KAAAA;AACAA,UAAAA,QAAQ,CAARA,gBAAAA,GAA4BG,yBAAyB,GAAGxG,KAAK,CAALA,OAAAA,CAAH,QAAGA,CAAH,GAArDqG,IAAAA;;AAEA,cAAI,CAAJ,kBAAA,EAAyB;AACvBA,YAAAA,QAAQ,CAARA,KAAAA,GAAiB3F,QAAQ,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA,CAAcwF,OAAO,CAArB,YAAA,CAAA,CAAA,GAAsC,CAACA,OAAO,CAAvEG,YAA+D,CAA/DA;;AAEA,gBAAI7G,uBAAuB,IAAIA,uBAAuB,CAAtD,KAAA,EAA8D;AAC5D,cAAA,KAAA,CAAA,uBAAA,CAA6BA,uBAAuB,CAAvBA,KAAAA,CAA7B,QAA6BA,CAA7B;AACD;AACF;;AAED,cAAA,QAAA,EAAc;AACZmH,YAAAA,UAAU,CAAC,YAAA;AAAA,qBAAO,KAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,SAAA,GAA0C,KAAA,CAAA,gBAAA,CAAA,OAAA,CAAjD,YAAA;AAAD,aAAA,EAAVA,CAAU,CAAVA;AACD;;AAED,UAAA,KAAA,CAAA,qBAAA;;AAEA;;AACF,aAAKR,SAAS,CAATA,gBAAAA,CAAL,aAAA;AACE,cAAA,MAAA,EAAY;AACVE,YAAAA,QAAQ,CAARA,WAAAA,GAAAA,EAAAA;;AAEA,gBAAI,CAAJ,QAAA,EAAe;AACbA,cAAAA,QAAQ,CAARA,KAAAA,GAAAA,EAAAA;AACD;AACF;;AACDA,UAAAA,QAAQ,CAARA,IAAAA,GAAAA,KAAAA;AACAA,UAAAA,QAAQ,CAARA,gBAAAA,GAA4BzG,wBAAwB,GAAA,CAAA,GAApDyG,IAAAA;AACA;;AACF,aAAKF,SAAS,CAATA,gBAAAA,CAAL,gBAAA;AACA,aAAKA,SAAS,CAATA,gBAAAA,CAAL,cAAA;AACE,cAAID,OAAO,CAAPA,MAAAA,KAAJ,SAAA,EAAkC;AAChCG,YAAAA,QAAQ,CAARA,IAAAA,GAAgBH,OAAO,CAAvBG,MAAAA;AACAA,YAAAA,QAAQ,CAARA,gBAAAA,GAA4BH,OAAO,CAAnCG,gBAAAA;;AAEA,gBAAIH,OAAO,CAAX,MAAA,EAAoB;AAClB,kBAAMU,8BAA8B,GAAG,KAAA,CAAA,iCAAA,CAAvC,OAAuC,CAAvC;;AAEA,kBAAI,SAAA,CAAJ,8BAAI,CAAJ,EAAgD;AAC9CP,gBAAAA,QAAQ,CAARA,gBAAAA,GAAAA,8BAAAA;AACD;;AAED,kBAAI,CAAJ,MAAA,EAAa;AACX,gBAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA;AACD;AATH,aAAA,MAUO;AACLA,cAAAA,QAAQ,CAARA,gBAAAA,GAAAA,IAAAA;AACD;AACF;;AACH,aAAKF,SAAS,CAATA,gBAAAA,CAAL,aAAKA,CAAL;AACA,aAAKA,SAAS,CAATA,gBAAAA,CAAL,YAAKA,CAAL;AACE,cAAIjF,IAAI,IAAI,SAAA,CAAWgF,OAAO,CAA9B,gBAAY,CAAZ,EAAkD;AAChDG,YAAAA,QAAQ,CAARA,gBAAAA,GAA4BH,OAAO,CAAnCG,gBAAAA;AACAA,YAAAA,QAAQ,CAARA,kBAAAA,GAAAA,IAAAA;AACD;;AAED;;AACF,aAAKF,SAAS,CAATA,gBAAAA,CAAL,OAAA;AACE,cAAA,IAAA,EAAU;AACRE,YAAAA,QAAQ,CAARA,IAAAA,GAAAA,KAAAA;AACAA,YAAAA,QAAQ,CAARA,gBAAAA,GAAAA,IAAAA;AACD;;AAED;;AACF,aAAKF,SAAS,CAATA,gBAAAA,CAAL,WAAA;AACA,aAAKA,SAAS,CAATA,gBAAAA,CAAL,kBAAA;AACEE,UAAAA,QAAQ,CAARA,IAAAA,GAAgBH,OAAO,CAAvBG,MAAAA;;AAEA,cAAIH,OAAO,CAAX,MAAA,EAAoB;AAClB,gBAAMU,+BAA8B,GAAG,KAAA,CAAA,iCAAA,CAAvC,OAAuC,CAAvC;;AAEA,gBAAI,SAAA,CAAJ,+BAAI,CAAJ,EAAgD;AAC9CP,cAAAA,QAAQ,CAARA,gBAAAA,GAAAA,+BAAAA;AACD;;AAED,gBAAI,CAAJ,MAAA,EAAa;AACX,cAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA;AACD;AATH,WAAA,MAUO;AACLA,YAAAA,QAAQ,CAARA,gBAAAA,GAAAA,IAAAA;AACD;;AACD;;AACF,aAAKF,SAAS,CAATA,gBAAAA,CAAL,cAAA;AACEE,UAAAA,QAAQ,CAARA,gBAAAA,GAA4BH,OAAO,CAAnCG,gBAAAA;AACAA,UAAAA,QAAQ,CAARA,kBAAAA,GAAAA,KAAAA;AACA;;AACF,aAAKF,SAAS,CAATA,gBAAAA,CAAL,OAAA;AACE,cAAID,OAAO,CAAX,YAAA,EAA0B;AACxBG,YAAAA,QAAQ,CAARA,KAAAA,GAAiB3F,QAAQ,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA,CAAcwF,OAAO,CAArB,YAAA,CAAA,CAAA,GAAsC,CAACA,OAAO,CAAvEG,YAA+D,CAA/DA;AACAA,YAAAA,QAAQ,CAARA,WAAAA,GAAuB3F,QAAQ,GAAA,EAAA,GAAQwF,OAAO,CAA9CG,UAAAA;AACAA,YAAAA,QAAQ,CAARA,IAAAA,GAAAA,KAAAA;AACAA,YAAAA,QAAQ,CAARA,gBAAAA,GAA4BH,OAAO,CAAnCG,gBAAAA;;AAEA,YAAA,KAAA,CAAA,qBAAA;AANF,WAAA,MAOO;AACLA,YAAAA,QAAQ,CAARA,IAAAA,GAAgBH,OAAO,CAAvBG,MAAAA;AACD;;AACH;AACE;AAhIJ;;AAmIA,UAAI,QAAA,CAAJ,QAAI,CAAJ,EAAyB;AACvB;AACD;;AAED,UAAMQ,QAAiC,GAAG,CACxCR,QAAQ,CAARA,KAAAA,KAAAA,SAAAA,IADwC,UAAA,EAExCA,QAAQ,CAARA,gBAAAA,KAAAA,SAAAA,IAFwC,0BAAA,EAGxCA,QAAQ,CAARA,IAAAA,KAAAA,SAAAA,IAHwC,cAAA,EAIxCA,QAAQ,CAARA,WAAAA,KAAAA,SAAAA,IAJwC,qBAAA,EAAA,MAAA,CAA1C,OAA0C,CAA1C;;AAOA,MAAA,KAAA,CAAA,wBAAA,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA;;;2EAGqB,UAAA,KAAA,EAA4B;AACjD,aAAOS,KAAK,KAAK,KAAA,CAAA,KAAA,CAAjB,mBAAA;;;0EAGoB,UAAA,IAAA,EAAA,KAAA,EAAA,YAAA,EAAA,QAAA,EAAA;AAAA,aAKjB,UAAA,eAAA,EAAA;AAAA,eAAyC;AAC5CC,UAAAA,sBAAsB,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjBzD,YAAY,CAAC;AACd5F,YAAAA,IAAI,EADU,IAAA;AAEdoJ,YAAAA,KAAK,EAFS,KAAA;AAGdxH,YAAAA,QAAQ,EAAE5B,IAAI,CAHA,UAGA,CAHA;AAId8G,YAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAK;AACZwC,cAAAA,CAAC,CAADA,eAAAA;AACAA,cAAAA,CAAC,CAADA,WAAAA,CAAAA,wBAAAA;;AACA,cAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,eAAA,CAAA;AACD;AARa,WAAD,CADK,EAAA,EAAA,EAYhB,CAAC,KAAA,CAAA,KAAA,CAAD,QAAA,IAAwB;AAC1B,6BAAiBpB;AADS,WAZR;AADsB,SAAzC;AALiB,OAAA;;;kFAwBQ,UAAA,IAAA,EAAA,GAAA,EAAA;AAAA,aAA2D,UAAA,eAAA,EAAA;AAAA,eAEnF;AACJqB,UAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAA,EAAA,yBAAA,EAAmF;AAC3F,YAAA,KAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,yBAAA;AAFE,WAAA;AAIJzC,UAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,yBAAA,EAAmF;AAC1F,YAAA,KAAA,CAAA,wBAAA,CAA8B,CAA9B,6BAA8B,CAA9B,EAAA,IAAA,EAAqE;AACnElG,cAAAA,mBAAmB,EAAE,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA;AAD8C,aAArE;;AAGA0I,YAAAA,CAAC,CAADA,eAAAA;;AACA,YAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,yBAAA,CAAA;AATE,WAAA;AAWJlC,UAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAA,yBAAA,EAAmF;AAC5F,YAAA,KAAA,CAAA,yBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,yBAAA,EAAA,GAAA;AACD;AAbG,SAFmF;AAA3D,OAAA;;;iFAkBD,UAAA,gBAAA,EAAA,GAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,0BAAA,EAAA,aAAA,EAAA;AAAA,aAOxB,UAAA,eAAA,EAA+C;AAClD,YAAMoC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,CAAA,EAAA,gBAAA,EAAyE;AAC/F,cAAI,CAAJ,QAAA,EAAe;AACb,YAAA,KAAA,CAAA,QAAA,CAAc;AAAE/E,cAAAA,OAAO,EAAT,KAAA;AAAkBG,cAAAA,cAAc,EAAEA,cAAc;AAAhD,aAAd;;AAEA0E,YAAAA,CAAC,CAADA,WAAAA,CAAAA,yBAAAA,IAAAA,IAAAA;AACD;;AAED,UAAA,OAAA,CAAA,eAAA,EAAA,aAAA,EAAA,CAAA,EAAA,gBAAA,CAAA;AAPF,SAAA;;AADkD,YAU1C1H,QAV0C,GAU7B,KAAA,CAV6B,KAU7B,CAV6B,QAAA;;AAYlD,YAAM6H,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,CAAA,EAAA,gBAAA,EAAyE;AAClG,cAAI,CAAJ,QAAA,EAAe;AACb,oBAAQC,WAAW,CAAXA,OAAAA,CAAR,CAAQA,CAAR;AACE,mBAAKA,WAAW,CAAhB,GAAA;AACE,gBAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,UAAA;;AACA;;AACF,mBAAKA,WAAW,CAAhB,SAAA;AACE,oBAAI,CAAJ,GAAA,EAAU;AACR,kBAAA,KAAA,CAAA,8BAAA;AACD;;AACD;;AACF,mBAAKA,WAAW,CAAhB,UAAA;AACE,oBAAA,GAAA,EAAS;AACP,kBAAA,KAAA,CAAA,8BAAA;AACD;;AACD;;AACF,mBAAKA,WAAW,CAAhB,SAAA;AACE,gBAAA,KAAA,CAAA,sBAAA;;AACA;;AACF;AACE;AAlBJ;AAoBD;;AAED,UAAA,OAAA,CAAA,eAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,gBAAA,EAAA;AAEEvH,YAAAA,gBAAgB,EAFlB,gBAAA;AAGE8D,YAAAA,iBAAiB,EAAjBA;AAHF,WAAA,CAAA,CAAA;AAxBF,SAAA;;AA+BA,eAAO;AACL;AACA;AACA4B,UAAAA,uBAAuB,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClBlC,aAAa,CAAC;AACf/D,YAAAA,QAAQ,EADO,QAAA;AAEfuF,YAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,CAAA,EAAK;AACXqC,cAAAA,eAAe,CAAA,CAAA,EAAfA,eAAe,CAAfA;AAHa,aAAA;AAKfpC,YAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAK;AACdqC,cAAAA,kBAAkB,CAAA,CAAA,EAAlBA,eAAkB,CAAlBA;AANa,aAAA;AAQfpG,YAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAA,EAAK;AACb;AACA;AACAiG,cAAAA,CAAC,CAADA,eAAAA;AACD;AAZc,WAAD,CADK,CAHlB;AAmBL;AACA7B,UAAAA,0BAA0B,EApBrB,0BAAA;AAqBLP,UAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,gBAAA,EAAyE;AAChF,gBAAI,CAAJ,QAAA,EAAe;AACb,cAAA,KAAA,CAAA,QAAA,CAAc;AAAEzC,gBAAAA,OAAO,EAAT,IAAA;AAAiBG,gBAAAA,cAAc,EAAEA,cAAc;AAA/C,eAAd;AACD;;AAED,YAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,gBAAA,CAAA;AA1BG,WAAA;AA4BL+E,UAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,CAAA,EAAA,gBAAA,EAAyE;AACpFH,YAAAA,eAAe,CAAA,CAAA,EAAfA,gBAAe,CAAfA;AA7BG,WAAA;AA+BLI,UAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,CAAA,EAAA,gBAAA,EAAyE;AACvFH,YAAAA,kBAAkB,CAAA,CAAA,EAAlBA,gBAAkB,CAAlBA;AACD;AAjCI,SAAP;AAlD2B,OAAA;;;yEA2FR,UAAA,CAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,UAAA,EAKV;AAAA,UAAA,YAAA,GACuB,KAAA,CADvB,KAAA;AAAA,UACDjG,IADC,GAAA,YAAA,CAAA,IAAA;AAAA,UACKe,aADL,GAAA,YAAA,CAAA,aAAA;AAAA,UAAA,YAAA,GAEmC,KAAA,CAFnC,KAAA;AAAA,UAEDxB,cAFC,GAAA,YAAA,CAAA,cAAA;AAAA,UAEeC,QAFf,GAAA,YAAA,CAAA,QAAA;AAAA,UAEyBV,KAFzB,GAAA,YAAA,CAAA,KAAA;;AAIT,UAAA,IAAA,EAAU;AACR,YAAI,CAAC,MAAA,CAAD,gBAAC,CAAD,IAA8BiC,aAAa,CAA3C,MAAA,IAAsD,CAACjC,KAAK,CAALA,gBAAK,CAALA,CAA3D,UAA2DA,CAA3D,EAAgG;AAC9F2D,UAAAA,iBAAiB,CAAjBA,gBAAiB,CAAjBA;;AAEA,cAAIjD,QAAQ,IAAI,CAAhB,cAAA,EAAiC;AAC/BsG,YAAAA,CAAC,CAADA,cAAAA;AACD;AALH,SAAA,MAMO;AACLtD,UAAAA,UAAU;AACX;AACF;;;qFAG8B,YAAM;AAAA,UAC7BhD,QAD6B,GAChB,KAAA,CADgB,KAChB,CADgB,QAAA;AAAA,UAE7BgB,KAF6B,GAEnB,KAAA,CAFmB,KAEnB,CAFmB,KAAA;;AAIrC,UAAI,CAAA,QAAA,IAAc,KAAA,CAAA,QAAA,CAAA,OAAA,IAAyB,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,cAAA,KAA3C,CAAA,EAAwF;AACtF;AACD;;AAED,UAAIA,KAAK,CAALA,MAAAA,GAAJ,CAAA,EAAsB;AACpB;AACA,YAAI,KAAA,CAAA,KAAA,CAAA,mBAAA,KAAmCA,KAAK,CAALA,MAAAA,GAAvC,CAAA,EAAyD;AACvD,UAAA,KAAA,CAAA,QAAA,CAAc;AAAEpD,YAAAA,mBAAmB,EAAE;AAAvB,WAAd,EAA6C,YAAM;AACjD,YAAA,KAAA,CAAA,wBAAA,CAA8B,CAA9B,6BAA8B,CAA9B,EAAA,IAAA,EAAqE;AACnEA,cAAAA,mBAAmB,EAAEoD,KAAK,CAALA,MAAAA,GAAe;AAD+B,aAArE;AADF,WAAA;AADF,SAAA,MAMO;AACL,UAAA,KAAA,CAAA,wBAAA,CAA8B,CAA9B,6BAA8B,CAA9B,EAAA,IAAA,EAAqE;AACnEpD,YAAAA,mBAAmB,EAAEoD,KAAK,CAALA,MAAAA,GAAe;AAD+B,WAArE;AAGD;AACF;;;6EAGsB,YAAM;AAAA,UACrBhB,QADqB,GACR,KAAA,CADQ,KACR,CADQ,QAAA;AAAA,UAAA,YAAA,GAEE,KAAA,CAFF,KAAA;AAAA,UAErBc,WAFqB,GAAA,YAAA,CAAA,WAAA;AAAA,UAERE,KAFQ,GAAA,YAAA,CAAA,KAAA;AAG7B,UAAM6F,YAAY,GAAG,KAAA,CAAA,QAAA,CAArB,OAAA;;AAEA,UACE7G,QAAQ,KACPc,WAAW,KAAXA,EAAAA,IAAuB+F,YAAY,CAAZA,cAAAA,KAAAA,CAAAA,IAAqCA,YAAY,CAAZA,YAAAA,KAD7D7G,CAAQ,CAARA,IAEAgB,KAAK,CAALA,MAAAA,GAHF,CAAA,EAIE;AACA,QAAA,KAAA,CAAA,mBAAA;AACD;;;kEAGW,UAAA,CAAA,EAA0C;AAAA,UAAA,qBAAA,GACsB,KAAA,CAAA,6BAAA,CAC1E,KAAA,CAFoD,KACsB,CADtB;AAAA,UAC9CpD,mBAD8C,GAAA,qBAAA,CAAA,mBAAA;AAAA,UACzBuB,gBADyB,GAAA,qBAAA,CAAA,gBAAA;AAAA,UACPqB,IADO,GAAA,qBAAA,CAAA,IAAA;AAAA,UACDM,WADC,GAAA,qBAAA,CAAA,WAAA;AAAA,UACYE,KADZ,GAAA,qBAAA,CAAA,KAAA;;AAKtD,MAAA,KAAA,CAAA,wBAAA,CAA8B,CAAA,UAAA,EAAA,6BAAA,EAA9B,0BAA8B,CAA9B,EAAA,CAAA,EAA0G;AACxGpD,QAAAA,mBAAmB,EADqF,mBAAA;AAExGuB,QAAAA,gBAAgB,EAFwF,gBAAA;AAGxGqB,QAAAA,IAAI,EAHoG,IAAA;AAIxGM,QAAAA,WAAW,EAJ6F,WAAA;AAKxGE,QAAAA,KAAK,EAALA;AALwG,OAA1G;;AAQA,MAAA,KAAA,CAAA,mBAAA;;AACA,MAAA,KAAA,CAAA,qBAAA;;;2EAGqB,YAAM;AAC3B,MAAA,KAAA,CAAA,mBAAA;;;iFAG2B,UAAA,CAAA,EAAA,GAAA,EAA2C;AACtE,cAAQ0F,WAAW,CAAXA,OAAAA,CAAR,CAAQA,CAAR;AACE,aAAKA,WAAW,CAAhB,SAAA;AACE,cAAI,CAAJ,GAAA,EAAU;AACR,YAAA,KAAA,CAAA,8BAAA;AACD;;AACD;;AACF,aAAKA,WAAW,CAAhB,UAAA;AACE,cAAA,GAAA,EAAS;AACP,YAAA,KAAA,CAAA,8BAAA;AACD;;AACD;;AACF;AACE;AAZJ;;;wEAgBkB,UAAA,CAAA,EAAA,gBAAA,EAAA,8BAAA,EAAA,UAAA,EAAA,iBAAA,EAMf;AACH,UAAMI,OAAO,GAAGJ,WAAW,CAAXA,OAAAA,CAAhB,CAAgBA,CAAhB;;AACA,cAAA,OAAA;AACE,aAAKA,WAAW,CAAhB,GAAA;AACE,UAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,UAAA;;AACA;;AACF,aAAKA,WAAW,CAAhB,MAAA;AACEK,UAAAA,8BAA8B,CAA9BA,CAA8B,CAA9BA;;AACA,UAAA,KAAA,CAAA,qBAAA;;AACAT,UAAAA,CAAC,CAADA,eAAAA;AACA;;AACF;AACE,cAAMU,SAAS,GAAG9F,MAAM,CAANA,YAAAA,CAAlB,OAAkBA,CAAlB;;AACA,cAAI,cAAA,IAAA,CAAJ,SAAI,CAAJ,EAAmC;AACjC,YAAA,KAAA,CAAA,gCAAA,CAAA,SAAA;AACD;;AACD6F,UAAAA,8BAA8B,CAA9BA,CAA8B,CAA9BA;AACA;AAfJ;;;qFAgE+B,YAAM;AACrC,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEtF,QAAAA,OAAO,EAAT,IAAA;AAAiBG,QAAAA,cAAc,EAAEA,cAAc;AAA/C,OAAd;;;8EAGwB,UAAA,CAAA,EAAK;AAC7B,UAAI,KAAA,CAAA,OAAA,CAAA,OAAA,KAAyB0E,CAAC,CAA9B,aAAA,EAA8C;AAC5C,QAAA,KAAA,CAAA,QAAA,CAAc;AAAE7E,UAAAA,OAAO,EAAT,KAAA;AAAkBG,UAAAA,cAAc,EAAEA,cAAc;AAAhD,SAAd;AACD;;;qEAGc,UAAA,CAAA,EAAK;AACpB,UAAI,KAAA,CAAA,SAAA,CAAA,OAAA,KAA2B0E,CAAC,CAAhC,aAAA,EAAgD;AAC9C,QAAA,KAAA,CAAA,QAAA,CAAc;AAAE7E,UAAAA,OAAO,EAAT,KAAA;AAAkBG,UAAAA,cAAc,EAAEA,cAAc;AAAhD,SAAd;AACD;;;uFASgC,UAAA,SAAA,EAA6B;AAAA,UAAA,YAAA,GACI,KAAA,CADJ,KAAA;AAAA,UACtDzC,gBADsD,GAAA,YAAA,CAAA,gBAAA;AAAA,UACpCqC,mBADoC,GAAA,YAAA,CAAA,mBAAA;AAAA,UACfE,cADe,GAAA,YAAA,CAAA,cAAA;AAE9D,UAAM2F,iBAAiB,GAAA,GAAA,MAAA,CAAA,cAAA,EAAA,MAAA,CAAuBL,SAAS,CAAvD,WAA8CA,EAAvB,CAAvB;AACA,UAAIM,mBAAmB,GAAG,CAA1B,CAAA;;AAEA,MAAA,KAAA,CAAA,iBAAA,CAAA,iBAAA;;AAEA,UAAI,SAAA,CAAJ,gBAAI,CAAJ,EAAkC;AAChCA,QAAAA,mBAAmB,GAAG,UAAA,CAAA,mBAAA,EAEpB,UAAA,IAAA,EAAI;AAAA,iBAAItK,IAAI,CAAJA,UAAAA,CAAJ,iBAAIA,CAAJ;AAFgB,SAAA,EAGpBmC,gBAAgB,IAAIuC,cAAc,CAAdA,MAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAHtB4F,CAGkB,CAHI,CAAtBA;AAKD;;AAED,UAAIA,mBAAmB,GAAvB,CAAA,EAA6B;AAC3BA,QAAAA,mBAAmB,GAAG,UAAA,CAAA,mBAAA,EAAiC,UAAA,IAAA,EAAI;AAAA,iBAAItK,IAAI,CAAJA,UAAAA,CAAJ,iBAAIA,CAAJ;AAA3DsK,SAAsB,CAAtBA;AACD;;AAED,UAAIA,mBAAmB,IAAvB,CAAA,EAA8B;AAC5B,QAAA,KAAA,CAAA,wBAAA,CAA8B,CAA9B,0BAA8B,CAA9B,EAAA,IAAA,EAAkE;AAChEnI,UAAAA,gBAAgB,EAAEmI;AAD8C,SAAlE;AAGD;;;+EAyCwB,UAAA,YAAA,EAAA,KAAA,EAAA,QAAA,EAItB;AACH,UAAMG,aAAa,GAAG,MAAA,CAAQ9B,QAAQ,CAAhB,KAAA,CAAA,GAA0B,KAAA,CAAA,KAAA,CAA1B,KAAA,GAA6CA,QAAQ,CADxE,KACH,CADG,CAEH;AACA;;AACA,UAAMK,QAAQ,GAAG,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,aAAA,GAAsCyB,aAAa,CAAbA,CAAa,CAAbA,IAAvD,IAAA;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAA,QAAA;;AACAC,MAAAA,YAAY,CAAZA,OAAAA,CAAqB,UAAA,WAAA,EAAe;AAClC,QAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,WAAA,EAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAA8C,KAAA,CAA9C,KAAA,EAAA,EAAA,EAAA,QAAA,EAAA;AAAuE1G,UAAAA,KAAK,EAAEgF;AAA9E,SAAA,CAAA,CAAA;AADF0B,OAAAA;;;4EAKsB,YAAM;AAC5B,UAAI,CAAC,KAAA,CAAA,KAAA,CAAD,MAAA,IAAsB,KAAA,CAAA,SAAA,CAA1B,OAAA,EAAkD;AAChD,QAAA,KAAA,CAAA,SAAA,CAAA,OAAA,CAAA,KAAA;AACD;;;0EAGmB,YAAM;AAC1B,UAAI,KAAA,CAAA,KAAA,CAAA,MAAA,IAAqB,KAAA,CAAA,QAAA,CAAzB,OAAA,EAAgD;AAC9C,QAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,KAAA;AACD;;;8EAQuB,UAAA,KAAA,EAAsD;AAAA,UAAA,YAAA,GACtB,KAAA,CADsB,KAAA;AAAA,UACtElI,YADsE,GAAA,YAAA,CAAA,YAAA;AAAA,UACxDQ,QADwD,GAAA,YAAA,CAAA,QAAA;AAAA,UAC9CS,WAD8C,GAAA,YAAA,CAAA,WAAA;AAAA,UACjCI,MADiC,GAAA,YAAA,CAAA,MAAA;;AAG9E,UAAI,CAAJ,KAAA,EAAY;AACV,eAAOA,MAAM,GAAA,EAAA,GAAb,WAAA;AACD;;AAED,UAAA,QAAA,EAAc;AACZ,eAAA,EAAA;AACD;;AAED,aAAOrB,YAAY,CAAnB,KAAmB,CAAnB;;;wFAGkC,UAAA,OAAA,EAA4E;AAAA,UAAA,YAAA,GAC3D,KAAA,CAD2D,KAAA;AAAA,UACtG+B,aADsG,GAAA,YAAA,CAAA,aAAA;AAAA,UACvFpC,gBADuF,GAAA,YAAA,CAAA,gBAAA;AAAA,UACrE6B,KADqE,GAAA,YAAA,CAAA,KAAA;AAAA,UAAA,YAAA,GAEhD,KAAA,CAFgD,KAAA;AAAA,UAEtG9B,wBAFsG,GAAA,YAAA,CAAA,wBAAA;AAAA,UAE5EI,KAF4E,GAAA,YAAA,CAAA,KAAA;AAAA,UAErEU,QAFqE,GAAA,YAAA,CAAA,QAAA;AAAA,UAE3Da,MAF2D,GAAA,YAAA,CAAA,MAAA;AAG9G,UAAM8G,SAAS,GAAGnC,OAAO,CAAPA,IAAAA,KAAiBC,SAAS,CAATA,gBAAAA,CAAnC,cAAA;AACA,UAAMmC,WAAW,GAAGpC,OAAO,CAAPA,IAAAA,KAAiBC,SAAS,CAATA,gBAAAA,CAArC,gBAAA;AACA,UAAMoC,WAAW,GAAGtG,aAAa,CAAjC,MAAA;;AAEA,UAAA,gBAAA,EAAsB;AACpB,eAAA,gBAAA;AACD;;AAED,UAAA,wBAAA,EAA8B;AAC5B;AACA,eAAA,CAAA;AACD;;AAED,UAAI,CAAA,QAAA,IAAa,CAAb,MAAA,IAAwBP,KAAK,CAALA,MAAAA,GAA5B,CAAA,EAA8C;AAC5C;AACA,YAAMd,MAAM,GAAGyH,SAAS,GAAG,CAAH,CAAA,GAAQC,WAAW,GAAA,CAAA,GAA3C,CAAA;AACA,YAAMN,mBAAmB,GAAGhI,KAAK,CAALA,OAAAA,CAAc0B,KAAK,CAAnB1B,CAAmB,CAAnBA,IAA5B,MAAA;;AACA,YAAIgI,mBAAmB,IAAvB,WAAA,EAAwC;AACtC,iBAAA,CAAA;AACD;;AACD,YAAIA,mBAAmB,GAAvB,CAAA,EAA6B;AAC3B,iBAAOO,WAAW,GAAlB,CAAA;AACD;;AACD,eAAA,mBAAA;AACD;;AAED,UAAA,WAAA,EAAiB;AACf,eAAA,CAAA;AACD;;AACD,UAAA,SAAA,EAAe;AACb,eAAOA,WAAW,GAAlB,CAAA;AACD;;AAED,aAAA,IAAA;;;8EAOwB,UAAA,mBAAA,EAAuC;AAC/D,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEvG,QAAAA,mBAAmB,EAAnBA;AAAF,OAAd;;AACA,MAAA,KAAA,CAAA,yBAAA;;;wEAGkB,UAAA,cAAA,EAAkC;AACpD,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEI,QAAAA,cAAc,EAAdA;AAAF,OAAd;;AACA,MAAA,KAAA,CAAA,mBAAA;;;gFAGwD,SAAA,CAAW,YAAM;AACzE,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEJ,QAAAA,mBAAmB,EAAE;AAAvB,OAAd;AADwD,KAAA,EAEvDhE,QAAQ,CAF+C,qBAAA,C;;0EAIN,SAAA,CAAW,YAAM;AACnE,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEoE,QAAAA,cAAc,EAAE;AAAlB,OAAd;AADkD,KAAA,EAEjDpE,QAAQ,CAFyC,yBAAA,C;;;;;;;2CA7nC7B;AACrB,WAAA,mBAAA,CAAA,MAAA;AACA,WAAA,yBAAA,CAAA,MAAA;AACD;;;wDAEiF;AAAA,UAAlD0C,QAAkD,GAAA,IAAA,CAAlDA,QAAkD;AAAA,UAAxCa,MAAwC,GAAA,IAAA,CAAxCA,MAAwC;AAChF,aAAO;AACLS,QAAAA,mBAAmB,EADd,EAAA;AAEL1D,QAAAA,mBAAmB,EAAEoC,QAAQ,GAAA,IAAA,GAFxB,SAAA;AAGLuB,QAAAA,aAAa,EAHR,SAAA;AAILC,QAAAA,mBAAmB,EAJd,SAAA;AAKLC,QAAAA,OAAO,EALF,KAAA;AAMLC,QAAAA,cAAc,EAAEb,MAAM,GAAA,SAAA,GANjB,EAAA;AAOLL,QAAAA,IAAI,EAPC,KAAA;AAQLrB,QAAAA,gBAAgB,EAAE,KAAA,KAAA,CAAA,wBAAA,GAAA,CAAA,GARb,IAAA;AASL2B,QAAAA,WAAW,EAAED,MAAM,GAAA,EAAA,GATd,SAAA;AAULG,QAAAA,KAAK,EAVA,EAAA;AAWLW,QAAAA,kBAAkB,EAXb,KAAA;AAYLC,QAAAA,cAAc,EAAE;AAZX,OAAP;AAcD;;;2CA+CoH;AAAA,UAAA,oBAAA;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAnGO,WAAmG,GAAA,KAAA,CAAnGA,WAAmG;AAAA,UAAtFC,OAAsF,GAAA,KAAA,CAAtFA,OAAsF;AAAA,UAA7EC,MAA6E,GAAA,KAAA,CAA7EA,MAA6E;AAAA,UAArEC,SAAqE,GAAA,KAAA,CAArEA,SAAqE;AAAA,UAA1DC,cAA0D,GAAA,KAAA,CAA1DA,cAA0D;AAAA,UAA1CC,GAA0C,GAAA,KAAA,CAA1CA,GAA0C;AAAA,UAAA,YAAA,GAU/G,KAV+G,KAAA;AAAA,UAEjHnE,SAFiH,GAAA,YAAA,CAAA,SAAA;AAAA,UAGjHxB,cAHiH,GAAA,YAAA,CAAA,cAAA;AAAA,UAIjH+B,QAJiH,GAAA,YAAA,CAAA,QAAA;AAAA,UAKjHiC,MALiH,GAAA,YAAA,CAAA,MAAA;AAAA,UAMjHb,QANiH,GAAA,YAAA,CAAA,QAAA;AAAA,UAOjHhB,oBAPiH,GAAA,YAAA,CAAA,oBAAA;AAAA,UAQjHQ,YARiH,GAAA,YAAA,CAAA,YAAA;AAAA,UASjHzC,eATiH,GAAA,YAAA,CAAA,eAAA;AAAA,UAAA,YAAA,GAW5D,KAX4D,KAAA;AAAA,UAW3GoC,gBAX2G,GAAA,YAAA,CAAA,gBAAA;AAAA,UAWzFqB,IAXyF,GAAA,YAAA,CAAA,IAAA;AAAA,UAWnFM,WAXmF,GAAA,YAAA,CAAA,WAAA;AAAA,UAWtEE,KAXsE,GAAA,YAAA,CAAA,KAAA;AAanH,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AAAa,QAAA,SAAS,EAAEoB,OAAO,CAA/B,IAAA;AAAsC,QAAA,QAAQ,EAAE,KAAKK;AAArD,OAAA,EAAA,cAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,QAAA,MAAM,EADR,IAAA;AAEE,QAAA,UAAU,EAAE5B,MAAM,GAAA,WAAA,GAFpB,IAAA;AAGE,QAAA,YAAY,EAAE,KAHhB,qBAAA;AAIE,QAAA,YAAY,EAJd,YAAA,CAKE;AALF;AAME,QAAA,YAAY,EAAEb,QAAQ,IAAI,CAACgB,KAAK,CAAlBhB,MAAAA,GAAAA,IAAAA,GAAmCgB,KAAK,CANxD,CAMwD,CANxD;AAOE,QAAA,oBAAoB,EAPtB,oBAAA;AAQE,QAAA,gBAAgB,EARlB,gBAAA;AASE,QAAA,aAAa,EAAE,KATjB,iBAAA;AAUE,QAAA,OAAO,EAAE,KAAA,KAAA,CAVX,iBAUW,CAVX;AAWE,QAAA,WAAW,EAAA,CAAA,oBAAA,GAAE,KAAA,OAAA,CAAF,MAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAE,oBAAA,CAXf,WAAA;AAYE,QAAA,OAAO,EAAE,KAAA,KAAA,CAAA,WAAA,IAA0B,KAAA,KAAA,CAAA,WAAA,CAA1B,IAA0B,CAA1B,GAAyD,KAAA,KAAA,CAAA,WAAA,CAAzD,IAAyD,CAAzD,GAAwF0B;AAZnG,OAAA,EAcG,UAAA,KAAA,EASK;AAAA,YARJC,aAQI,GAAA,KAAA,CARJA,aAQI;AAAA,YAPJC,YAOI,GAAA,KAAA,CAPJA,YAOI;AAAA,YANJC,YAMI,GAAA,KAAA,CANJA,YAMI;AAAA,YALJC,YAKI,GAAA,KAAA,CALJA,YAKI;AAAA,YAJJC,oBAII,GAAA,KAAA,CAJJA,oBAII;AAAA,YAHJC,UAGI,GAAA,KAAA,CAHJA,UAGI;AAAA,YAFJ7D,gBAEI,GAAA,KAAA,CAFJA,gBAEI;AAAA,YADJ8D,iBACI,GAAA,KAAA,CADJA,iBACI;;AAAA,YAAA,aAAA,GACgDH,YAAY,CAC9D;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAD8D,EAE9D;AAAEC,UAAAA,gBAAgB,EAAE;AAApB,SAF8D,CAD5D;AAAA,YACIH,QADJ,GAAA,aAAA,CAAA,QAAA;AAAA,YACiBC,0BADjB,GAAA,wBAAA,CAAA,aAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAKJ,YAAMG,kBAAkB,GAAGjF,SAAS,IAAI2C,KAAK,CAALA,MAAAA,GAAxC,CAAA;AAEA,eACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,UAAA,QAAQ,EAAEkC;AAAf,SAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,UAAA,GAAG,EAAE,MAAI,CADX,YAAA;AAEE,UAAA,SAAS,EAAEK,EAAE,CAAC3G,sBAAsB,CAAvB,SAAA,EAAmCwF,OAAO,CAFzD,SAEe,CAFf;AAGE,UAAA,OAAO,EAAEvB,MAAM,IAAI,CAAVA,IAAAA,GAAkB,MAAI,CAAtBA,oBAAAA,GAA8C6B;AAHzD,SAAA,EAKE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,UAAA,GAAG,EAAE,MAAI,CADX,gBAAA;AAEE,UAAA,SAAS,EAAEa,EAAE,CAAC3G,sBAAsB,CAAvB,aAAA,EAAuCwF,OAAO,CAA9C,aAAA;AAFf,SAAA,EAIGpC,QAAQ,IAAI,MAAI,CAAJ,mBAAA,CAAA,SAAA,EAJf,GAIe,CAJf,EAKGa,MAAM,GACH,MAAI,CAAJ,iBAAA,CAAA,0BAAA,EAAA,GAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,UAAA,EADG,SACH,CADG,GAUH,MAAI,CAAJ,mBAAA,CAAA,MAAA,EAAA,GAAA,EApBR,oBAoBQ,CAfN,CALF,EAsBGyC,kBAAkB,GACf,GAAG,CAAH,MAAA,CAAA,cAAA,EAA2B;AACzBE,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAA,MAAA,CAAA,MAAA,CAAA;AACZC,cAAAA,SAAS,EAAE7G,sBAAsB,CADrB,cAAA;AAEZyF,cAAAA,MAAM,EAAEA,MAAM,CAFF,cAAA;AAGZ5E,cAAAA,aAAa,EAAEiG;AAHH,aAAA,EAIR,CAAA,MAAA,IAAW;AAAEC,cAAAA,QAAQ,EAAV,CAAA;AAAeC,cAAAA,IAAI,EAAE;AAArB,aAJH,CAAA;AADW,WAAA;AAOzBC,UAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAA;AAAA,mBAAgC;AAC7CC,cAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAA0C;AACjD,gBAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,CAAA;;AACA,gBAAA,MAAI,CAAJ,WAAA,CAAA,CAAA;AACD;AAJ4C,aAAhC;AAAA;AAPU,SAA3B,CADe,GAef,GAAG,CAAH,MAAA,CAAA,eAAA,EAA4B;AAC1BN,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAO;AACnBC,cAAAA,SAAS,EAAE7G,sBAAsB,CADd,eAAA;AAEnByF,cAAAA,MAAM,EAAEA,MAAM,CAFK,eAAA;AAGnB5E,cAAAA,aAAa,EAAEiG;AAHI,aAAP;AADY,WAAA;AAM1BG,UAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAA;AAAA,mBAAgC;AAC7CC,cAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAK;AACZ,oBAAI,CAAJ,QAAA,EAAe;AACbf,kBAAAA,oBAAoB,CAAC;AAAEnE,oBAAAA,QAAQ,EAARA;AAAF,mBAAD,CAApBmE,CAAAA,OAAAA,CAAAA,CAAAA;AACD;;AAED,gBAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AACD;AAP4C,aAAhC;AAAA;AANW,SAA5B,CArCN,EAqDG,MAAI,CAAJ,eAAA,CAAA,MAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,aAAA,EAvDP,GAuDO,CArDH,CADF,CADF;AA/BN,OACE,CADF,EAsGE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,IAAI,EAAE,CAAC,CAAC,KAAA,KAAA,CAAWjE;AAA3B,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,IAAI,EAAT,QAAA;AAAmB,qBAAnB,QAAA;AAAsC,yBAAtC,gBAAA;AAAqE,QAAA,KAAK,EAAEiF;AAA5E,OAAA,EACG,KAAA,KAAA,CAzGT,mBAwGM,CADF,CAtGF,CADF;AA8GD;;;wCAGC1B,M,EACAG,G,EACAO,oB,EACa;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GACuB,KADvB,KAAA;AAAA,UACL1F,aADK,GAAA,YAAA,CAAA,aAAA;AAAA,UACUuB,QADV,GAAA,YAAA,CAAA,QAAA;AAAA,UAELoC,KAFK,GAEK,KAFL,KAEK,CAFL,KAAA;AAIb,UAAMrD,OAAO,GAAG,KAAA,uBAAA,CAA6BqD,KAAK,CAAlD,CAAkD,CAAlC,CAAhB;AACA,UAAMgD,eAAe,GAAG3G,aAAa,CAAbA,IAAa,CAAbA,IAAuB,KAA/C,sBAAA;AAEA,UAAM4G,kBAAkB,GAAGlB,oBAAoB,CAAC;AAC9CnE,QAAAA,QAAQ,EADsC,QAAA;AAE9CsF,QAAAA,OAAO,EAAE,KAFqC,8BAAA;AAG9CC,QAAAA,MAAM,EAAE,KAHsC,uBAAA;AAI9CC,QAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAK;AACd,UAAA,MAAI,CAAJ,0BAAA,CAAA,CAAA,EAAA,GAAA;AAL4C,SAAA;AAO9C,sBAP8C,SAAA;AAQ9C,2BAAmB,CAAC,KAAA,KAAA,CAAD,iBAAC,CAAD,EAAA,eAAA,EAAA,MAAA,CAAwD,UAAA,CAAA,EAAC;AAAA,iBAAI,CAAC,CAAL,CAAA;AAAzD,SAAA,EAAA,IAAA,CAAA,GAAA;AAR2B,OAAD,CAA/C;;AAPa,UAkBLN,QAlBK,GAkB8DG,kBAlB9D,CAAA,OAAA;AAAA,UAkBIC,QAlBJ,GAkB8DD,kBAlB9D,CAAA,OAAA;AAAA,UAkBaE,OAlBb,GAkB8DF,kBAlB9D,CAAA,MAAA;AAAA,UAkBqBG,UAlBrB,GAkB8DH,kBAlB9D,CAAA,SAAA;AAAA,UAkBmCI,sBAlBnC,GAAA,wBAAA,CAAA,kBAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WAAA,CAAA,CAAA;;AAoBb,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,QAAA,QAAQ,EAAE,KAAKC;AAApB,OAAA,EACGC,eAAe,CAAA,MAAA,EAAA,aAAA,EAAwB;AACtCf,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAA,MAAA,CAAA,MAAA,CAAA;AACZC,YAAAA,SAAS,EAAE7G,sBAAsB,CADrB,aAAA;AAEZe,YAAAA,OAAO,EAFK,OAAA;AAGZiB,YAAAA,QAAQ,EAHI,QAAA;AAIZ4F,YAAAA,EAAE,EAJU,eAAA;AAKZ3F,YAAAA,KAAK,EALO,IAAA;AAMZwD,YAAAA,MAAM,EAAEA,MAAM,CAAChF;AANH,WAAA,EAAA,sBAAA,CAAA;AADwB,SAAA;AAUtCwG,QAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAA;AAAA,iBAAmC;AAChDC,YAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAK;AACZA,cAAAA,QAAO,CAAPA,CAAO,CAAPA;;AACA,cAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,eAAA,CAAA;AAH8C,aAAA;AAKhDI,YAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAK;AACZA,cAAAA,QAAO,CAAPA,CAAO,CAAPA;;AACA,cAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,eAAA,CAAA;AAP8C,aAAA;AAShDC,YAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,CAAA,EAAK;AACX,kBAAI,CAAJ,QAAA,EAAe;AACbA,gBAAAA,OAAM,CAANA,CAAM,CAANA;AACD;;AAED,cAAA,OAAA,CAAA,eAAA,EAAA,QAAA,EAAA,CAAA,EAAA,eAAA,CAAA;AAd8C,aAAA;AAgBhDC,YAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAK;AACd,kBAAI,CAAJ,QAAA,EAAe;AACbA,gBAAAA,UAAS,CAATA,CAAS,CAATA;AACD;;AAED,cAAA,OAAA,CAAA,eAAA,EAAA,WAAA,EAAA,CAAA,EAAA,eAAA,CAAA;AACD;AAtB+C,WAAnC;AAAA;AAVuB,OAAxB,CADlB,CADF;AAuCD;;;sCAGCK,0B,EACAjC,G,EACArD,gB,EACAwD,a,EACAM,iB,EACAD,U,EACAV,S,EACa;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GACoD,KADpD,KAAA;AAAA,UACLlD,MADK,GAAA,YAAA,CAAA,MAAA;AAAA,UACGlC,WADH,GAAA,YAAA,CAAA,WAAA;AAAA,UACgB8C,QADhB,GAAA,YAAA,CAAA,QAAA;AAAA,UAC0BS,WAD1B,GAAA,YAAA,CAAA,WAAA;AAAA,UACuC7B,QADvC,GAAA,YAAA,CAAA,QAAA;AAAA,UAAA,YAAA,GAEkB,KAFlB,KAAA;AAAA,UAELkC,WAFK,GAAA,YAAA,CAAA,WAAA;AAAA,UAEQE,KAFR,GAAA,YAAA,CAAA,KAAA;AAIb,UAAM0D,aAAa,GAAG5D,WAAW,CAAXA,MAAAA,GAAAA,CAAAA,IAA2Bd,QAAQ,IAAIgB,KAAK,CAALA,MAAAA,GAA7D,CAAA;AAEA,aAAO,mBAAmB,CAAnB,MAAA,CAA2B9D,WAAW,IAAtC,EAAA,EAA8C;AACnDsG,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAO;AACnBC,YAAAA,SAAS,EAAE7G,sBAAsB,CADd,WAAA;AAEnB6D,YAAAA,WAAW,EAAEiE,aAAa,GAAA,EAAA,GAFP,WAAA;AAGnBtF,YAAAA,MAAM,EAHa,MAAA;AAInBkD,YAAAA,SAAS,EAJU,SAAA;AAKnBqC,YAAAA,QAAQ,EAAE,MAAI,CALK,QAAA;AAMnB/F,YAAAA,QAAQ,EAARA;AANmB,WAAP;AADqC,SAAA;AASnDiF,QAAAA,aAAa,EAAE,KAAA,0BAAA,CAAA,gBAAA,EAAA,GAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,0BAAA,EAAA,aAAA;AAToC,OAA9C,CAAP;AAkBD;;;oCAGCxB,M,EACAC,S,EACAnD,gB,EACA6D,U,EACAC,iB,EACAJ,Y,EACAD,Y,EACAD,a,EACAH,G,EACA;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GACmE,KADnE,KAAA;AAAA,UACQzE,KADR,GAAA,YAAA,CAAA,KAAA;AAAA,UACemC,MADf,GAAA,YAAA,CAAA,MAAA;AAAA,UACuBQ,QADvB,GAAA,YAAA,CAAA,QAAA;AAAA,UACiCG,MADjC,GAAA,YAAA,CAAA,MAAA;AAAA,UACyCE,eADzC,GAAA,YAAA,CAAA,eAAA;AAAA,UAC0DnB,IAD1D,GAAA,YAAA,CAAA,IAAA;AAAA,UAEQY,IAFR,GAEiB,KAFjB,KAEiB,CAFjB,IAAA;AAGA,UAAMlB,KAAK,GAAGkB,IAAI,GAAG,KAAA,WAAA,CAAA,MAAA,EAAA,SAAA,EAAA,YAAA,EAAH,gBAAG,CAAH,GAAlB,EAAA;;AAHA,UAAA,aAAA,GAIgDqC,YAAY,CAAC;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAD,EAAyB;AAAEC,QAAAA,gBAAgB,EAAE;AAApB,OAAzB,CAJ5D;AAAA,UAIQH,SAJR,GAAA,aAAA,CAAA,QAAA;AAAA,UAIqB0B,sBAJrB,GAAA,wBAAA,CAAA,aAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAMA;;;AACA,UAAI,CAAJ,MAAA,EAAa;AACX,YAAMC,uBAAuB,GAAGlC,aAAhC,EAAA;AAEAiC,QAAAA,sBAAsB,CAAtBA,uBAAsB,CAAtBA,GAAkDC,uBAAuB,CAAzED,uBAAyE,CAAzEA;;AACAA,QAAAA,sBAAsB,CAAtBA,WAAsB,CAAtBA,GAAsC,UAAA,CAAA,EAAK;AACzC,UAAA,MAAI,CAAJ,iBAAA,CAAA,CAAA,EAAA,gBAAA,EAGEC,uBAAuB,CAHzB,WAGyB,CAHzB,EAAA,UAAA,EAAA,iBAAA;AADFD,SAAAA;AASD;;AAED,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,QAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,WAAA,EAA8B;AACtCE,UAAAA,SAAS,CAAC,MAAI,CAAL,OAAA,EAATA,WAAS,CAATA;AACAA,UAAAA,SAAS,CAAA,SAAA,EAATA,WAAS,CAATA;AACD;AAJH,OAAA,EAME,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,QAAQ,EAFV,QAAA;AAGE,QAAA,MAAM,EAHR,MAAA;AAIE,QAAA,GAAG,EAJL,GAAA;AAKE,QAAA,OAAO,EALT,IAAA;AAME,QAAA,SAAS,EAAE,KANb,YAAA;AAOE,QAAA,eAAe,EAPjB,eAAA;AAQE,QAAA,uBAAuB,EAAE,CAACxF,KAAK,CAAN,MAAA;AAR3B,OAAA,EASMyF,2BAA2B,CATjC,IASiC,CATjC,CAAA,EAWG,IAAI,CAAJ,MAAA,CAAA,IAAA,EAAkB;AACjBvB,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAA,MAAA,CAAA,MAAA,CAAA;AACZC,YAAAA,SAAS,EAAE7G,sBAAsB,CAACK;AADtB,WAAA,EAAA,sBAAA,EAAA;AAGZoF,YAAAA,MAAM,EAAEA,MAAM,CAHF,IAAA;AAIZ/C,YAAAA,KAAK,EAJO,KAAA;AAKZqE,YAAAA,QAAQ,EAAE9C,MAAM,GAAA,SAAA,GAAe,CALnB,CAAA;AAKuB;AACnC,2BAAe,CAACL;AANJ,WAAA,CAAA;AADG,SAAA;AAUjBqD,QAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAA;AAAA,iBAAiC;AAC9CK,YAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,SAAA,EAAgE;AACvE,cAAA,MAAI,CAAJ,8BAAA;;AACA,cAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,SAAA,CAAA;AAH4C,aAAA;AAK9CC,YAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,CAAA,EAAA,SAAA,EAAgE;AACtE,cAAA,MAAI,CAAJ,cAAA,CAAA,CAAA;;AACA,cAAA,OAAA,CAAA,eAAA,EAAA,QAAA,EAAA,CAAA,EAAA,SAAA,CAAA;AACD;AAR6C,WAAjC;AAAA;AAVE,OAAlB,CAXH,CANF,CADF;AA0CD;;;gCAGC9B,M,EACAC,S,EACAM,Y,EACAzD,gB,EACA;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GACsD,KADtD,KAAA;AAAA,UACQwB,UADR,GAAA,YAAA,CAAA,UAAA;AAAA,UACoB3C,SADpB,GAAA,YAAA,CAAA,SAAA;AAAA,UAC+BE,kBAD/B,GAAA,YAAA,CAAA,kBAAA;AAAA,UAAA,YAAA,GAEiC,KAFjC,KAAA;AAAA,UAEQqD,aAFR,GAAA,YAAA,CAAA,aAAA;AAAA,UAEuBP,KAFvB,GAAA,YAAA,CAAA,KAAA;AAGA,UAAMgE,UAAU,GAAG,KAAA,qBAAA,CAAnB,MAAmB,CAAnB;AACA,UAAMC,UAAU,GAAG,KAAA,qBAAA,CAAnB,MAAmB,CAAnB;;AAEA,UAAM3F,KAAK,GAAG,IAAA,CAAA,aAAA,EAAqB,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,eAAkB;AACnD5B,UAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM;AACd,gBAAMwH,QAAQ,GAAGlE,KAAK,CAALA,OAAAA,CAAAA,IAAAA,MAAwB,CAAzC,CAAA;AAEA,mBAAO,YAAY,CAAZ,MAAA,CAAA,IAAA,EAA0B;AAC/BwC,cAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,uBAAA,MAAA,CAAA,MAAA,CAAA;AACZC,kBAAAA,SAAS,EAAE7G,sBAAsB,CADrB,IAAA;AAEZuI,kBAAAA,MAAM,EAAEhG,gBAAgB,KAFZ,KAAA;AAGZ+F,kBAAAA,QAAQ,EAHI,QAAA;AAIZlH,kBAAAA,SAAS,EAJG,SAAA;AAKZE,kBAAAA,kBAAkB,EALN,kBAAA;AAMZ0D,kBAAAA,cAAc,EAAE,MAAI,CAAJ,KAAA,CANJ,kBAAA;AAOZU,kBAAAA,SAAS,EAATA;AAPY,iBAAA,EAQR,OAAA,CAAA,IAAA,CAAA,KAAA,QAAA,IACF,CAACtF,IAAI,CAAJA,cAAAA,CADC,KACDA,CADC,IAC6B;AAC7BoI,kBAAAA,GAAG,EAAGpI,IAAD,CAAcqI;AADU,iBATrB,CAAA;AADiB,eAAA;AAc/BxB,cAAAA,aAAa,EAAE,MAAI,CAAJ,mBAAA,CAAA,IAAA,EAAA,KAAA,EAAA,YAAA,EAdgB,QAchB,CAdgB;AAe/ByB,cAAAA,MAAM,EAAE3E;AAfuB,aAA1B,CAAP;AAiBD;AArBkD,SAAlB;AAAnC,OAAc,CAAd;;AAwBA,UAAA,UAAA,EAAgB;AACdrB,QAAAA,KAAK,CAALA,IAAAA,CAAAA,UAAAA;AACD;;AAED,aAAO2F,UAAU,GAAA,CAAA,UAAA,EAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,CAAA,GAAjB,KAAA;AACD;;;0CAEqB5C,M,EAAkC;AAAA,UAC9C3C,aAD8C,GAC5B,KAD4B,KAC5B,CAD4B,aAAA;;AAGtD,UAAA,aAAA,EAAmB;AACjB,eAAO;AACLhC,UAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,mBACR,YAAY,CAAZ,MAAA,CAAA,aAAA,EAAmC;AACjC8F,cAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,uBAAO;AACnB4B,kBAAAA,GAAG,EADgB,2BAAA;AAEnB/C,kBAAAA,MAAM,EAAEA,MAAM,CAAC3C;AAFI,iBAAP;AAAA;AADmB,aAAnC,CADQ;AAAA;AADL,SAAP;AASD;;AAED,aAAA,IAAA;AACD;;;0CAEqB2C,M,EAAkC;AAAA,UAAA,aAAA,GACO,KADP,KAAA;AAAA,UAC9CxC,OAD8C,GAAA,aAAA,CAAA,OAAA;AAAA,UACrCC,cADqC,GAAA,aAAA,CAAA,cAAA;AAAA,UACrBG,gBADqB,GAAA,aAAA,CAAA,gBAAA;AAAA,UACHX,KADG,GAAA,aAAA,CAAA,KAAA;;AAGtD,UAAA,OAAA,EAAa;AACX,eAAO;AACL5B,UAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,mBACR,YAAY,CAAZ,MAAA,CAAA,cAAA,EAAoC;AAClC8F,cAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,uBAAO;AACnB4B,kBAAAA,GAAG,EADgB,iBAAA;AAEnB/C,kBAAAA,MAAM,EAAEA,MAAM,CAACvC;AAFI,iBAAP;AAAA;AADoB,aAApC,CADQ;AAAA;AADL,SAAP;AASD;;AAED,UAAIR,KAAK,IAAIA,KAAK,CAALA,MAAAA,KAAb,CAAA,EAAiC;AAC/B,eAAO;AACL5B,UAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,mBACR,YAAY,CAAZ,MAAA,CAAA,gBAAA,EAAsC;AACpC8F,cAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,uBAAO;AACnB4B,kBAAAA,GAAG,EADgB,oBAAA;AAEnB/C,kBAAAA,MAAM,EAAEA,MAAM,CAACpC;AAFI,iBAAP;AAAA;AADsB,aAAtC,CADQ;AAAA;AADL,SAAP;AASD;;AAED,aAAA,IAAA;AACD;;;wCAEmBqC,S,EAAWE,G,EAAc;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UACnC5B,kBADmC,GACZ,KADY,KACZ,CADY,kBAAA;AAAA,UAEnCI,KAFmC,GAEzB,KAFyB,KAEzB,CAFyB,KAAA;;AAI3C,UAAIA,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtB,eAAA,IAAA;AACD;;AAED,aAAO,KAAK,CAAL,GAAA,CAAU,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,eACf;AACAK,UAAAA,oBAAoB,CAApBA,MAAAA,CAAAA,IAAAA,EAAkC;AAChCmC,YAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,qBAAA,MAAA,CAAA,MAAA,CAAA;AACZC,gBAAAA,SAAS,EAAE7G,sBAAsB,CADrB,YAAA;AAEZuI,gBAAAA,MAAM,EAAE,MAAI,CAAJ,oBAAA,CAFI,KAEJ,CAFI;AAGZ7C,gBAAAA,SAAS,EAATA;AAHY,eAAA,EAIR,OAAA,CAAA,IAAA,CAAA,KAAA,QAAA,IACF,CAACtF,IAAI,CAAJA,cAAAA,CADC,KACDA,CADC,IAC6B;AAC7BoI,gBAAAA,GAAG,EAAGpI,IAAD,CAAcqI;AADU,eALrB,CAAA;AADkB,aAAA;AAUhCxB,YAAAA,aAAa,EAAE,MAAI,CAAJ,2BAAA,CAAA,IAAA,EAViB,GAUjB,CAViB;AAWhCyB,YAAAA,MAAM,EAAE1E;AAXwB,WAAlCS;AAFe;AAAjB,OAAO,CAAP;AAgBD;;;8CAkbCiF,C,EACAtJ,I,EACAiK,e,EACAC,yB,EACA1E,G,EACA;AAAA,UAAA,YAAA,GACuC,KADvC,KAAA;AAAA,UACQ5E,mBADR,GAAA,YAAA,CAAA,mBAAA;AAAA,UAC6BoD,KAD7B,GAAA,YAAA,CAAA,KAAA;AAGA,UAAMmG,WAAW,GAAG3E,GAAG,GAAGkE,WAAW,CAAd,UAAA,GAA4BA,WAAW,CAA9D,SAAA;AACA,UAAMU,OAAO,GAAG5E,GAAG,GAAGkE,WAAW,CAAd,SAAA,GAA2BA,WAAW,CAAzD,UAAA;;AAEA,cAAQA,WAAW,CAAXA,OAAAA,CAAR,CAAQA,CAAR;AACE,aAAKA,WAAW,CAAhB,MAAA;AACA,aAAKA,WAAW,CAAhB,SAAA;AACE,eAAA,wBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,yBAAA;AACA;;AACF,aAAA,WAAA;AACE,cAAI1F,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IAAoB,CAAC,MAAA,CAArBA,mBAAqB,CAArBA,IAAqDpD,mBAAmB,GAA5E,CAAA,EAAkF;AAChF,iBAAA,wBAAA,CAA8B,CAA9B,6BAA8B,CAA9B,EAAA,IAAA,EAAqE;AACnEA,cAAAA,mBAAmB,EAAEA,mBAAmB,GAAG;AADwB,aAArE;AAGD;;AACD;;AACF,aAAA,OAAA;AACE,cAAIoD,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IAAoB,CAAC,MAAA,CAAzB,mBAAyB,CAAzB,EAAuD;AACrD,gBAAIpD,mBAAmB,GAAGoD,KAAK,CAALA,MAAAA,GAA1B,CAAA,EAA4C;AAC1C,mBAAA,QAAA,CAAc;AAAEpD,gBAAAA,mBAAmB,EAAEA,mBAAmB,GAAG;AAA7C,eAAd;AADF,aAAA,MAEO;AACL,mBAAA,QAAA,CAAc;AAAEA,gBAAAA,mBAAmB,EAAE;AAAvB,eAAd;;AACA,kBAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACrB0I,gBAAAA,CAAC,CADoB,cACrBA,GADqB,CACD;;AACpB,qBAAA,QAAA,CAAA,OAAA,CAAA,KAAA;AAFF,eAAA,MAGO;AACL,qBAAA,SAAA,CAAA,OAAA,CAAA,KAAA;AACD;AACF;AACF;;AACD;;AACF;AACE;AA5BJ;;AA8BA,MAAA,OAAA,CAAA,eAAA,EAAA,WAAA,EAAA,CAAA,EAAA,yBAAA,CAAA;AACD;;;6CAmDCA,C,EACAtJ,I,EACAiK,e,EACAC,yB,EACA;AACA,WAAA,wBAAA,CAA8B,CAA9B,6BAA8B,CAA9B,EAAA,IAAA,EAAqE;AACnEtJ,QAAAA,mBAAmB,EAAE;AAD8C,OAArE;AAGA,WAAA,mBAAA,CAAA,IAAA;AACA,WAAA,mBAAA;AACA,WAAA,qBAAA;;AACA,MAAA,OAAA,CAAA,eAAA,EAAA,UAAA,EAAA,CAAA,EAAA,yBAAA,CAAA;AACD;;;wCAEmBZ,I,EAA0C;AAAA,UACpD8B,uBADoD,GACxB,KADwB,KACxB,CADwB,uBAAA;AAAA,UAEtDkC,KAFsD,GAE5C,KAF4C,KAE5C,CAF4C,KAAA;AAG5D,UAAIuG,UAAU,GAAd,IAAA;;AAEA,UAAA,UAAA,EAAgB;AACdvG,QAAAA,KAAK,GAAG,KAAK,CAAL,MAAA,CAAa,UAAA,cAAA,EAAc;AAAA,iBAAIwG,cAAc,KAAlB,IAAA;AAAnCxG,SAAQ,CAARA;AADF,OAAA,MAEO;AACLuG,QAAAA,UAAU,GAAGvG,KAAK,CAAlBuG,GAAavG,EAAbuG;AACD;;AAED,UAAIzI,uBAAuB,IAAIA,uBAAuB,CAAtD,QAAA,EAAiE;AAC/D,aAAA,uBAAA,CAA6BA,uBAAuB,CAAvBA,QAAAA,CAA7B,UAA6BA,CAA7B;AACD;;AAED,WAAA,wBAAA,CAA8B,CAA9B,UAA8B,CAA9B,EAAA,IAAA,EAAkD;AAAEkC,QAAAA,KAAK,EAALA;AAAF,OAAlD;AACD;AAED;;;;;;;;;AAx/BA;;;;oDAIuCa,K,EAAsBC,K,EAAsB;AAAA,UACzExC,KADyE,GAClBuC,KADkB,CAAA,KAAA;AAAA,UAClErC,YADkE,GAClBqC,KADkB,CAAA,YAAA;AAAA,UACpDpC,WADoD,GAClBoC,KADkB,CAAA,WAAA;AAAA,UACvC7B,QADuC,GAClB6B,KADkB,CAAA,QAAA;AAAA,UAC7BhB,MAD6B,GAClBgB,KADkB,CAAA,MAAA;AAAA,UAEzEf,WAFyE,GAExCgB,KAFwC,CAAA,WAAA;AAAA,UAErDC,QAFqD,GAExCD,KAFwC,CAAA,KAAA,CAAA,CAIjF;;AACA,UAAME,eAAe,GAAG,QAAA,CAAA,QAAA,CAAA,GAAA,QAAA,GAAiC,CAAzD,QAAyD,CAAzD;AACA,UAAMhB,KAAK,GAAGhB,QAAQ,GAAA,eAAA,GAAqBgC,eAAe,CAAfA,KAAAA,CAAAA,CAAAA,EAA3C,CAA2CA,CAA3C;AAEA,UAAMC,oBAAoB,GAAGjC,QAAQ,GAAG,aAAA,CAAA,KAAA,EAAA,KAAA,EAAH,WAAG,CAAH,GAArC,KAAA;;AACA,UAAMwB,mBAAmB,GAAG,IAAA,CAAA,oBAAA,EAA4B,UAAA,YAAA,EAAY;AAAA,eAAIhC,YAAY,CAAZA,YAAY,CAAZA,CAAJ,WAAIA,EAAJ;AAApE,OAA4B,CAA5B;;AAEA,UAAM0C,aAAqC,GAAG;AAC5CX,QAAAA,aAAa,EAD+B,oBAAA;AAE5CC,QAAAA,mBAAmB,EAFyB,mBAAA;AAG5CR,QAAAA,KAAK,EAALA;AAH4C,OAA9C;;AAMA,UAAA,MAAA,EAAY;AACV,YAAI,WAAA,CAAJ,MAAI,CAAJ,EAA0B;AACxBkB,UAAAA,aAAa,CAAbA,aAAAA,GAA8BrB,MAAM,CAAA,oBAAA,EAApCqB,WAAoC,CAApCA;AADF,SAAA,MAEO;AACLA,UAAAA,aAAa,CAAbA,aAAAA,GAA8B,oBAAoB,CAApB,MAAA,CAC5B,UAAA,IAAA,EAAI;AAAA,mBACF1C,YAAY,CAAZA,IAAY,CAAZA,CAAAA,WAAAA,GAAAA,OAAAA,CAEWsB,WAAW,CAFtBtB,WAEWsB,EAFXtB,MAE0C,CAHxC,CAAA;AADN0C,WAA8B,CAA9BA;AAMD;AACF;;AAED,aAAA,aAAA;AACD;;;;EAnKoB3E,uB;AA0uCvB;;;;;;;;;;;gBA1uCMD,Q,iBAOiB,U;;gBAPjBA,Q,0BAS0BX,iB;;gBAT1BW,Q,2BAW2B,G;;gBAX3BA,Q,+BAY+B,G;;gBAZ/BA,Q,iCAeC,eAAe,CAAf,YAAA,CAA6B;AAC9BG,EAAAA,aAAa,EADiB,KAAA;AAE9BC,EAAAA,QAAQ,EAFsB,KAAA;AAG9BC,EAAAA,OAAO,EAAE;AAHqB,CAA7B,C;AAKHC,EAAAA,mBAAmB,EAAEC,SAAS,CAACC,M;AAC/BC,EAAAA,KAAK,EAAEF,SAAS,CAATA,KAAAA,CAAAA,UAAAA,C;AACPG,EAAAA,SAAS,EAAEH,SAAS,CAACI,I;AACrBC,EAAAA,kBAAkB,EAAEC,eAAe,CAACC,yB;AACpCC,EAAAA,SAAS,EAAER,SAAS,CAACI,I;AACrBpB,EAAAA,cAAc,EAAEsB,eAAe,CAACC,yB;AAChCE,EAAAA,0BAA0B,EAAET,SAAS,CAACC,M;AACtCS,EAAAA,WAAW,EAAEV,SAAS,CAACI,I;AACvBO,EAAAA,uBAAuB,EAAEX,SAAS,CAACC,M;AACnCW,EAAAA,kBAAkB,EAAEZ,SAAS,CAACa,M;AAC9BC,EAAAA,YAAY,EAAEd,SAAS,CAATA,SAAAA,CAAoB,CAACM,eAAe,CAAhB,aAAA,EAAgCA,eAAe,CAAnEN,mBAAoB,CAApBA,C;AACde,EAAAA,QAAQ,EAAEf,SAAS,CAACI,I;AACpBY,EAAAA,KAAK,EAAEhB,SAAS,CAACI,I;AACjBa,EAAAA,uBAAuB,EAAEjB,SAAS,CAACkB,M;AACnCC,EAAAA,oBAAoB,EAAEnB,SAAS,CAACoB,I;AAChCC,EAAAA,wBAAwB,EAAErB,SAAS,CAACI,I;AACpCkB,EAAAA,gBAAgB,EAAEtB,SAAS,CAACC,M;AAC5BsB,EAAAA,MAAM,EAAEvB,SAAS,CAACI,I;AAClBoB,EAAAA,QAAQ,EAAExB,SAAS,CAACI,I;AACpBqB,EAAAA,KAAK,EAAEnB,eAAe,CAACoB,mB;AACvBC,EAAAA,YAAY,EAAE3B,SAAS,CAACoB,I;AACxBQ,EAAAA,WAAW,EAAE5B,SAAS,CAACoB,I;AACvBS,EAAAA,aAAa,EAAEvB,eAAe,CAACwB,a;AAC/BC,EAAAA,IAAI,EAAEzB,eAAe,CAACwB,a;AACtBE,EAAAA,OAAO,EAAEhC,SAAS,CAACI,I;AACnB6B,EAAAA,cAAc,EAAE3B,eAAe,CAACwB,a;AAChCI,EAAAA,cAAc,EAAElC,SAAS,CAACI,I;AAC1B+B,EAAAA,QAAQ,EAAEnC,SAAS,CAACI,I;AACpBgC,EAAAA,gBAAgB,EAAE9B,eAAe,CAACwB,a;AAClCO,EAAAA,MAAM,EAAErC,SAAS,CAATA,SAAAA,CAAoB,CAC1BA,SAAS,CADiB,IAAA,EAE1BA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAFrBA,MAENA,CAF0B,CAApBA,C;AAIRsC,EAAAA,YAAY,EAAEtC,SAAS,CAACoB,I;AACxBmB,EAAAA,mBAAmB,EAAEvC,SAAS,CAACoB,I;AAC/BoB,EAAAA,QAAQ,EAAExC,SAAS,CAACoB,I;AACpBqB,EAAAA,2BAA2B,EAAEzC,SAAS,CAACoB,I;AACvCsB,EAAAA,wBAAwB,EAAE1C,SAAS,CAACoB,I;AACpCuB,EAAAA,IAAI,EAAE3C,SAAS,CAACI,I;AAChBwC,EAAAA,WAAW,EAAE5C,SAAS,CAACa,M;AACvBgC,EAAAA,QAAQ,EAAE7C,SAAS,CAATA,KAAAA,CAAAA,SAAAA,C;AACV8C,EAAAA,UAAU,EAAE9C,SAAS,CAACoB,I;AACtB2B,EAAAA,kBAAkB,EAAE/C,SAAS,CAACoB,I;AAC9B4B,EAAAA,MAAM,EAAEhD,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAA9CA,IAAoB,CAApBA,C;AACRiD,EAAAA,WAAW,EAAEjD,SAAS,CAACa,M;AACvBxB,EAAAA,WAAW,EAAEiB,eAAe,CAACwB,a;AAC7B5C,EAAAA,eAAe,EAAEoB,eAAe,CAACC,yB;AACjCf,EAAAA,aAAa,EAAEc,eAAe,CAACwB,a;AAC/BoB,EAAAA,eAAe,EAAElD,SAAS,CAACI,I;AAC3B+C,EAAAA,KAAK,EAAEnD,SAAS,CAATA,SAAAA,CAAoB,CAACM,eAAe,CAAhB,aAAA,EAAgCA,eAAe,CAAnEN,mBAAoB,CAApBA;;;gBArELP,Q,kBAwEkB;AACpBS,EAAAA,KAAK,EADe,OAAA;AAEpBkD,EAAAA,EAAE,EAFkB,KAAA;AAGpBpE,EAAAA,cAAc,EAHM,EAAA;AAIpB2C,EAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,IAAA,EAAQ;AACpB,QAAI,CAAA,IAAA,IAAShC,KAAK,CAALA,cAAAA,CAAb,IAAaA,CAAb,EAAyC;AACvC,aAAA,EAAA;AAFkB,KAAA,CAKpB;;;AACA,WAAQR,IAAD,CAAA,MAACA,IAAuBkE,MAAM,CAArC,IAAqC,CAArC;AAVkB,GAAA;AAYpBzB,EAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,IAAA,EAAQ;AACnB,QAAI,CAAA,IAAA,IAASjC,KAAK,CAALA,cAAAA,CAAb,IAAaA,CAAb,EAAyC;AACvC,aAAA,EAAA;AAFiB,KAAA,CAKnB;;;AACA,WAAQR,IAAD,CAAA,MAACA,IAAuBkE,MAAM,CAArC,IAAqC,CAArC;AAlBkB,GAAA;AAoBpBtB,EAAAA,IAAI,EApBgB,EAAA;AAqBpBc,EAAAA,QAAQ,EArBY,OAAA;AAsBpB3D,EAAAA,eAAe,EAtBK,EAAA;AAuBpBM,EAAAA,aAAa,EAAE;AAvBK,C;;gBAxElBC,Q,yBAkGyB,CAAA,qBAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,aAAA,EAAA,OAAA,C;;gBAlGzBA,Q,UAoGU6D,Y;;gBApGV7D,Q,iBAqGiB8D,mB;;gBArGjB9D,Q,kBAsGkB+D,oB;;AA6oCxB,eAAeyG,iBAAiB,CAAhC,QAAgC,CAAhC","sourcesContent":["import { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport * as keyboardKey from 'keyboard-key';\n\nimport {\n  DebounceResultFn,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  ShorthandCollection,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport { ComponentSlotStylesInput, ComponentVariablesInput } from '@fluentui/styles';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n} from 'downshift';\nimport {\n  AutoControlledComponent,\n  RenderResultConfig,\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport List, { ListProps } from '../List/List';\nimport DropdownItem, { DropdownItemProps } from './DropdownItem';\nimport DropdownSelectedItem, { DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport DropdownSearchInput, { DropdownSearchInputProps } from './DropdownSearchInput';\nimport Button, { ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport Box, { BoxProps } from '../Box/Box';\nimport Portal from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  getPopperPropsFromShorthand,\n} from '../../utils/positioner';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps, DropdownState>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n  };\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n}\n\nexport interface DropdownState {\n  a11ySelectionStatus: string;\n  activeSelectedIndex: number;\n  filteredItems: ShorthandCollection<DropdownItemProps>;\n  filteredItemStrings: string[];\n  focused: boolean;\n  startingString: string;\n  open: boolean;\n  searchQuery: string;\n  highlightedIndex: number;\n  value: ShorthandCollection<DropdownItemProps>;\n  itemIsFromKeyboard: boolean;\n  isFromKeyboard: boolean;\n}\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nclass Dropdown extends AutoControlledComponent<WithAsProp<DropdownProps>, DropdownState> {\n  buttonRef = React.createRef<HTMLElement>();\n  inputRef = React.createRef<HTMLInputElement>();\n  listRef = React.createRef<HTMLElement>();\n  selectedItemsRef = React.createRef<HTMLDivElement>();\n  containerRef = React.createRef<HTMLDivElement>();\n\n  static displayName = 'Dropdown';\n\n  static deprecated_className = dropdownClassName;\n\n  static a11yStatusCleanupTime = 500;\n  static charKeyPressedCleanupTime = 500;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    activeSelectedIndex: PropTypes.number,\n    align: PropTypes.oneOf(ALIGNMENTS),\n    checkable: PropTypes.bool,\n    checkableIndicator: customPropTypes.shorthandAllowingChildren,\n    clearable: PropTypes.bool,\n    clearIndicator: customPropTypes.shorthandAllowingChildren,\n    defaultActiveSelectedIndex: PropTypes.number,\n    defaultOpen: PropTypes.bool,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSearchQuery: PropTypes.string,\n    defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    getA11ySelectionMessage: PropTypes.object,\n    getA11yStatusMessage: PropTypes.func,\n    highlightFirstItemOnOpen: PropTypes.bool,\n    highlightedIndex: PropTypes.number,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    itemToString: PropTypes.func,\n    itemToValue: PropTypes.func,\n    headerMessage: customPropTypes.itemShorthand,\n    list: customPropTypes.itemShorthand,\n    loading: PropTypes.bool,\n    loadingMessage: customPropTypes.itemShorthand,\n    moveFocusOnTab: PropTypes.bool,\n    multiple: PropTypes.bool,\n    noResultsMessage: customPropTypes.itemShorthand,\n    offset: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n    ]),\n    onOpenChange: PropTypes.func,\n    onSearchQueryChange: PropTypes.func,\n    onChange: PropTypes.func,\n    onActiveSelectedIndexChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    open: PropTypes.bool,\n    placeholder: PropTypes.string,\n    position: PropTypes.oneOf(POSITIONS),\n    renderItem: PropTypes.func,\n    renderSelectedItem: PropTypes.func,\n    search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    searchQuery: PropTypes.string,\n    searchInput: customPropTypes.itemShorthand,\n    toggleIndicator: customPropTypes.shorthandAllowingChildren,\n    triggerButton: customPropTypes.itemShorthand,\n    unstable_pinned: PropTypes.bool,\n    value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  };\n\n  static defaultProps = {\n    align: 'start',\n    as: 'div',\n    clearIndicator: {},\n    itemToString: item => {\n      if (!item || React.isValidElement(item)) {\n        return '';\n      }\n\n      // targets DropdownItem shorthand objects\n      return (item as any).header || String(item);\n    },\n    itemToValue: item => {\n      if (!item || React.isValidElement(item)) {\n        return '';\n      }\n\n      // targets DropdownItem shorthand objects\n      return (item as any).header || String(item);\n    },\n    list: {},\n    position: 'below',\n    toggleIndicator: {},\n    triggerButton: {},\n  };\n\n  static autoControlledProps = ['activeSelectedIndex', 'highlightedIndex', 'open', 'searchQuery', 'value'];\n\n  static Item = DropdownItem;\n  static SearchInput = DropdownSearchInput;\n  static SelectedItem = DropdownSelectedItem;\n\n  componentWillUnmount() {\n    this.clearStartingString.cancel();\n    this.clearA11ySelectionMessage.cancel();\n  }\n\n  getInitialAutoControlledState({ multiple, search }: DropdownProps): DropdownState {\n    return {\n      a11ySelectionStatus: '',\n      activeSelectedIndex: multiple ? null : undefined,\n      filteredItems: undefined,\n      filteredItemStrings: undefined,\n      focused: false,\n      startingString: search ? undefined : '',\n      open: false,\n      highlightedIndex: this.props.highlightFirstItemOnOpen ? 0 : null,\n      searchQuery: search ? '' : undefined,\n      value: [],\n      itemIsFromKeyboard: false,\n      isFromKeyboard: false,\n    };\n  }\n\n  defaultTriggerButtonId = _.uniqueId('dropdown-trigger-button-');\n\n  /**\n   * Used to compute the filtered items (by value and search query) and, if needed,\n   * their string equivalents, in order to be used throughout the component.\n   */\n  static getAutoControlledStateFromProps(props: DropdownProps, state: DropdownState) {\n    const { items, itemToString, itemToValue, multiple, search } = props;\n    const { searchQuery, value: rawValue } = state;\n\n    // `normalizedValue` should be normilized always as it can be received from props\n    const normalizedValue = _.isArray(rawValue) ? rawValue : [rawValue];\n    const value = multiple ? normalizedValue : normalizedValue.slice(0, 1);\n\n    const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n    const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n    const modifiedState: Partial<DropdownState> = {\n      filteredItems: filteredItemsByValue,\n      filteredItemStrings,\n      value,\n    };\n\n    if (search) {\n      if (_.isFunction(search)) {\n        modifiedState.filteredItems = search(filteredItemsByValue, searchQuery);\n      } else {\n        modifiedState.filteredItems = filteredItemsByValue.filter(\n          item =>\n            itemToString(item)\n              .toLowerCase()\n              .indexOf(searchQuery.toLowerCase()) !== -1,\n        );\n      }\n    }\n\n    return modifiedState;\n  }\n\n  handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(this.props, 'onChange', e, { ...this.props, value: this.state.value });\n  };\n\n  renderComponent({ ElementType, classes, styles, variables, unhandledProps, rtl }: RenderResultConfig<DropdownProps>) {\n    const {\n      clearable,\n      clearIndicator,\n      disabled,\n      search,\n      multiple,\n      getA11yStatusMessage,\n      itemToString,\n      toggleIndicator,\n    } = this.props;\n    const { highlightedIndex, open, searchQuery, value } = this.state;\n\n    return (\n      <ElementType className={classes.root} onChange={this.handleChange} {...unhandledProps}>\n        <Downshift\n          isOpen={open}\n          inputValue={search ? searchQuery : null}\n          stateReducer={this.downshiftStateReducer}\n          itemToString={itemToString}\n          // downshift does not work with arrays as selectedItem.\n          selectedItem={multiple || !value.length ? null : value[0]}\n          getA11yStatusMessage={getA11yStatusMessage}\n          highlightedIndex={highlightedIndex}\n          onStateChange={this.handleStateChange}\n          labelId={this.props['aria-labelledby']}\n          environment={this.context.target?.defaultView}\n          inputId={this.props.searchInput && this.props.searchInput['id'] ? this.props.searchInput['id'] : undefined}\n        >\n          {({\n            getInputProps,\n            getItemProps,\n            getMenuProps,\n            getRootProps,\n            getToggleButtonProps,\n            toggleMenu,\n            highlightedIndex,\n            selectItemAtIndex,\n          }) => {\n            const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n              { refKey: 'innerRef' },\n              { suppressRefError: true },\n            );\n            const showClearIndicator = clearable && value.length > 0;\n\n            return (\n              <Ref innerRef={innerRef}>\n                <div\n                  ref={this.containerRef}\n                  className={cx(dropdownSlotClassNames.container, classes.container)}\n                  onClick={search && !open ? this.handleContainerClick : undefined}\n                >\n                  <div\n                    ref={this.selectedItemsRef}\n                    className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}\n                  >\n                    {multiple && this.renderSelectedItems(variables, rtl)}\n                    {search\n                      ? this.renderSearchInput(\n                          accessibilityRootPropsRest,\n                          rtl,\n                          highlightedIndex,\n                          getInputProps,\n                          selectItemAtIndex,\n                          toggleMenu,\n                          variables,\n                        )\n                      : this.renderTriggerButton(styles, rtl, getToggleButtonProps)}\n                  </div>\n                  {showClearIndicator\n                    ? Box.create(clearIndicator, {\n                        defaultProps: () => ({\n                          className: dropdownSlotClassNames.clearIndicator,\n                          styles: styles.clearIndicator,\n                          accessibility: indicatorBehavior,\n                          ...(!search && { tabIndex: 0, role: 'button' }),\n                        }),\n                        overrideProps: (predefinedProps: BoxProps) => ({\n                          onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                            _.invoke(predefinedProps, 'onClick', e);\n                            this.handleClear(e);\n                          },\n                        }),\n                      })\n                    : Box.create(toggleIndicator, {\n                        defaultProps: () => ({\n                          className: dropdownSlotClassNames.toggleIndicator,\n                          styles: styles.toggleIndicator,\n                          accessibility: indicatorBehavior,\n                        }),\n                        overrideProps: (predefinedProps: BoxProps) => ({\n                          onClick: e => {\n                            if (!disabled) {\n                              getToggleButtonProps({ disabled }).onClick(e);\n                            }\n\n                            _.invoke(predefinedProps, 'onClick', e);\n                          },\n                        }),\n                      })}\n                  {this.renderItemsList(\n                    styles,\n                    variables,\n                    highlightedIndex,\n                    toggleMenu,\n                    selectItemAtIndex,\n                    getMenuProps,\n                    getItemProps,\n                    getInputProps,\n                    rtl,\n                  )}\n                </div>\n              </Ref>\n            );\n          }}\n        </Downshift>\n        <Portal open={!!this.props.getA11ySelectionMessage}>\n          <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n            {this.state.a11ySelectionStatus}\n          </div>\n        </Portal>\n      </ElementType>\n    );\n  }\n\n  renderTriggerButton(\n    styles: ComponentSlotStylesInput,\n    rtl: boolean,\n    getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any,\n  ): JSX.Element {\n    const { triggerButton, disabled } = this.props;\n    const { value } = this.state;\n\n    const content = this.getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || this.defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: this.handleTriggerButtonOrListFocus,\n      onBlur: this.handleTriggerButtonBlur,\n      onKeyDown: e => {\n        this.handleTriggerButtonKeyDown(e, rtl);\n      },\n      'aria-label': undefined,\n      'aria-labelledby': [this.props['aria-labelledby'], triggerButtonId].filter(l => !!l).join(' '),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={this.buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: styles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  }\n\n  renderSearchInput(\n    accessibilityComboboxProps: Object,\n    rtl: boolean,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element {\n    const { inline, searchInput, multiple, placeholder, disabled } = this.props;\n    const { searchQuery, value } = this.state;\n\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        inputRef: this.inputRef,\n        disabled,\n      }),\n      overrideProps: this.handleSearchInputOverrides(\n        highlightedIndex,\n        rtl,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  }\n\n  renderItemsList(\n    styles: ComponentSlotStylesInput,\n    variables: ComponentVariablesInput,\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    rtl: boolean,\n  ) {\n    const { align, offset, position, search, unstable_pinned, list } = this.props;\n    const { open } = this.state;\n    const items = open ? this.renderItems(styles, variables, getItemProps, highlightedIndex) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        this.handleListKeyDown(\n          e,\n          highlightedIndex,\n          accessibilityInputProps['onKeyDown'],\n          toggleMenu,\n          selectItemAtIndex,\n        );\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(this.listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          align={align}\n          position={position}\n          offset={offset}\n          rtl={rtl}\n          enabled={open}\n          targetRef={this.containerRef}\n          unstable_pinned={unstable_pinned}\n          positioningDependencies={[items.length]}\n          {...getPopperPropsFromShorthand(list)}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: styles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                this.handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                this.handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  }\n\n  renderItems(\n    styles: ComponentSlotStylesInput,\n    variables: ComponentVariablesInput,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    highlightedIndex: number,\n  ) {\n    const { renderItem, checkable, checkableIndicator } = this.props;\n    const { filteredItems, value } = this.state;\n    const footerItem = this.renderItemsListFooter(styles);\n    const headerItem = this.renderItemsListHeader(styles);\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: this.state.itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: this.handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  }\n\n  renderItemsListHeader(styles: ComponentSlotStylesInput) {\n    const { headerMessage } = this.props;\n\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: styles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  }\n\n  renderItemsListFooter(styles: ComponentSlotStylesInput) {\n    const { loading, loadingMessage, noResultsMessage, items } = this.props;\n\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: styles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (items && items.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: styles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  }\n\n  renderSelectedItems(variables, rtl: boolean) {\n    const { renderSelectedItem } = this.props;\n    const { value } = this.state;\n\n    if (value.length === 0) {\n      return null;\n    }\n\n    return value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: this.isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: this.handleSelectedItemOverrides(item, rtl),\n        render: renderSelectedItem,\n      }),\n    );\n  }\n\n  downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = this.context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === this.listRef.current) {\n          return {}; // won't change state in this case.\n        }\n      default:\n        return changes;\n    }\n  };\n\n  handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { search, multiple, highlightFirstItemOnOpen, items, getA11ySelectionMessage } = this.props;\n    const { value, open } = this.state;\n    const { type } = changes;\n    const newState = {} as DropdownState;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n        newState.searchQuery = changes.inputValue;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = this.getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            this.setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          setTimeout(() => (this.selectedItemsRef.current.scrollTop = this.selectedItemsRef.current.scrollHeight), 0);\n        }\n\n        this.tryFocusTriggerButton();\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search) {\n          newState.searchQuery = '';\n\n          if (!multiple) {\n            newState.value = [];\n          }\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              this.listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = this.getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            this.listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          this.tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.value !== undefined && 'onChange',\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    this.setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  isSelectedItemActive = (index: number): boolean => {\n    return index === this.state.activeSelectedIndex;\n  };\n\n  handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!this.props.multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>, rtl: boolean) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: this.state.value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      this.handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps, rtl);\n    },\n  });\n\n  handleSearchInputOverrides = (\n    highlightedIndex: number,\n    rtl: boolean,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n    const { disabled } = this.props;\n\n    const handleInputKeyDown = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        switch (keyboardKey.getCode(e)) {\n          case keyboardKey.Tab:\n            this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            if (!rtl) {\n              this.trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            if (rtl) {\n              this.trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            this.tryRemoveItemFromValue();\n            break;\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: e => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n          },\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n      onFocus: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          this.setState({ focused: true, isFromKeyboard: isFromKeyboard() });\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    const { open, filteredItems } = this.state;\n    const { moveFocusOnTab, multiple, items } = this.props;\n\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  trySetLastSelectedItemAsActive = () => {\n    const { multiple } = this.props;\n    const { value } = this.state;\n\n    if (!multiple || (this.inputRef.current && this.inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (this.state.activeSelectedIndex === value.length - 1) {\n        this.setState({ activeSelectedIndex: null }, () => {\n          this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: value.length - 1,\n          });\n        });\n      } else {\n        this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  tryRemoveItemFromValue = () => {\n    const { multiple } = this.props;\n    const { searchQuery, value } = this.state;\n    const inputElement = this.inputRef.current;\n\n    if (\n      multiple &&\n      (searchQuery === '' || (inputElement.selectionStart === 0 && inputElement.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      this.removeItemFromValue();\n    }\n  };\n\n  handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    const { activeSelectedIndex, highlightedIndex, open, searchQuery, value } = this.getInitialAutoControlledState(\n      this.props,\n    );\n\n    this.setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex,\n      highlightedIndex,\n      open,\n      searchQuery,\n      value,\n    });\n\n    this.tryFocusSearchInput();\n    this.tryFocusTriggerButton();\n  };\n\n  handleContainerClick = () => {\n    this.tryFocusSearchInput();\n  };\n\n  handleTriggerButtonKeyDown = (e: React.SyntheticEvent, rtl: boolean) => {\n    switch (keyboardKey.getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!rtl) {\n          this.trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (rtl) {\n          this.trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleListKeyDown = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = keyboardKey.getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        this.handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        this.tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          this.setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  handleSelectedItemKeyDown(\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n    rtl: boolean,\n  ) {\n    const { activeSelectedIndex, value } = this.state;\n\n    const previousKey = rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (keyboardKey.getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        this.handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            this.setState({ activeSelectedIndex: activeSelectedIndex + 1 });\n          } else {\n            this.setState({ activeSelectedIndex: null });\n            if (this.props.search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              this.inputRef.current.focus();\n            } else {\n              this.buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  }\n\n  handleTriggerButtonOrListFocus = () => {\n    this.setState({ focused: true, isFromKeyboard: isFromKeyboard() });\n  };\n\n  handleTriggerButtonBlur = e => {\n    if (this.listRef.current !== e.relatedTarget) {\n      this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n    }\n  };\n\n  handleListBlur = e => {\n    if (this.buttonRef.current !== e.relatedTarget) {\n      this.setState({ focused: false, isFromKeyboard: isFromKeyboard() });\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const { highlightedIndex, filteredItemStrings, startingString } = this.state;\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    this.setStartingString(newStartingString);\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      this.setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  handleSelectedItemRemove(\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) {\n    this.setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    this.removeItemFromValue(item);\n    this.tryFocusSearchInput();\n    this.tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  }\n\n  removeItemFromValue(item?: ShorthandValue<DropdownItemProps>) {\n    const { getA11ySelectionMessage } = this.props;\n    let { value } = this.state;\n    let poppedItem = item;\n\n    if (poppedItem) {\n      value = value.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = value.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      this.setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    this.setStateAndInvokeHandler(['onChange'], null, { value });\n  }\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: Partial<DropdownState>,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? this.state.value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = this.props.multiple ? proposedValue : proposedValue[0] || null;\n\n    this.setState(newState as DropdownState);\n    handlerNames.forEach(handlerName => {\n      _.invoke(this.props, handlerName, event, { ...this.props, ...newState, value: newValue });\n    });\n  };\n\n  tryFocusTriggerButton = () => {\n    if (!this.props.search && this.buttonRef.current) {\n      this.buttonRef.current.focus();\n    }\n  };\n\n  tryFocusSearchInput = () => {\n    if (this.props.search && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    const { itemToString, multiple, placeholder, search } = this.props;\n\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  getHighlightedIndexOnArrowKeyOpen = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>): number => {\n    const { filteredItems, highlightedIndex, value } = this.state;\n    const { highlightFirstItemOnOpen, items, multiple, search } = this.props;\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    this.setState({ a11ySelectionStatus });\n    this.clearA11ySelectionMessage();\n  };\n\n  setStartingString = (startingString: string): void => {\n    this.setState({ startingString });\n    this.clearStartingString();\n  };\n\n  clearA11ySelectionMessage: DebounceResultFn<() => void> = _.debounce(() => {\n    this.setState({ a11ySelectionStatus: '' });\n  }, Dropdown.a11yStatusCleanupTime);\n\n  clearStartingString: DebounceResultFn<() => void> = _.debounce(() => {\n    this.setState({ startingString: '' });\n  }, Dropdown.charKeyPressedCleanupTime);\n}\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\nexport default withSafeTypeForAs<typeof Dropdown, DropdownProps>(Dropdown);\n"]},"metadata":{},"sourceType":"module"}