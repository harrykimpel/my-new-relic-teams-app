{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _isNil from \"lodash/isNil\";\nimport _invoke from \"lodash/invoke\";\nimport { hierarchicalTreeItemBehavior, hierarchicalSubtreeBehavior } from '@fluentui/accessibility';\nimport { getFirstFocusable } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport HierarchicalTree from './HierarchicalTree';\nimport HierarchicalTreeTitle from './HierarchicalTreeTitle';\nimport { UIComponent, childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nexport var hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';\nexport var hierarchicalTreeItemSlotClassNames = {\n  subtree: \"\".concat(hierarchicalTreeItemClassName, \"__subtree\")\n};\n\nvar HierarchicalTreeItem = /*#__PURE__*/function (_UIComponent) {\n  _inherits(HierarchicalTreeItem, _UIComponent);\n\n  function HierarchicalTreeItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HierarchicalTreeItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HierarchicalTreeItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"itemRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"treeRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _invoke(_this.props, 'onTitleClick', e, _this.props);\n      },\n      receiveFocus: function receiveFocus(e) {\n        e.preventDefault();\n        e.stopPropagation(); // Focuses the title if the event comes from a child item.\n\n        if (_this.eventComesFromChildItem(e)) {\n          _this.itemRef.current.focus();\n        }\n      },\n      collapse: function collapse(e) {\n        e.preventDefault();\n        e.stopPropagation(); // Handle click on title if the keyboard event was dispatched on that title\n\n        if (!_this.eventComesFromChildItem(e)) {\n          _this.handleTitleClick(e);\n        }\n      },\n      expand: function expand(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.handleTitleClick(e);\n      },\n      focusSubtree: function focusSubtree(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        var element = getFirstFocusable(_this.treeRef.current, _this.treeRef.current, true);\n\n        if (element) {\n          element.focus();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"eventComesFromChildItem\", function (e) {\n      return e.currentTarget !== e.target;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTitleClick\", function (e) {\n      _invoke(_this.props, 'onTitleClick', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTitleOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          _this.handleTitleClick(e);\n\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(HierarchicalTreeItem, [{\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          title = _this$props.title,\n          renderItemTitle = _this$props.renderItemTitle,\n          open = _this$props.open,\n          exclusive = _this$props.exclusive;\n      var hasSubtree = !_isNil(items);\n      return React.createElement(React.Fragment, null, HierarchicalTreeTitle.create(title, {\n        defaultProps: function defaultProps() {\n          return {\n            open: open,\n            hasSubtree: hasSubtree,\n            as: hasSubtree ? 'span' : 'a'\n          };\n        },\n        render: renderItemTitle,\n        overrideProps: this.handleTitleOverrides\n      }), hasSubtree && open && React.createElement(Ref, {\n        innerRef: this.treeRef\n      }, HierarchicalTree.create(items, {\n        defaultProps: function defaultProps() {\n          return {\n            accessibility: hierarchicalSubtreeBehavior,\n            className: hierarchicalTreeItemSlotClassNames.subtree,\n            exclusive: exclusive,\n            renderItemTitle: renderItemTitle\n          };\n        }\n      })));\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          accessibility = _ref.accessibility,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          variables = _ref.variables;\n      var children = this.props.children;\n      return React.createElement(Ref, {\n        innerRef: this.itemRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderContent()));\n    }\n  }]);\n\n  return HierarchicalTreeItem;\n}(UIComponent);\n\n_defineProperty(HierarchicalTreeItem, \"create\", void 0);\n\n_defineProperty(HierarchicalTreeItem, \"displayName\", 'HierarchicalTreeItem');\n\n_defineProperty(HierarchicalTreeItem, \"deprecated_className\", hierarchicalTreeItemClassName);\n\n_defineProperty(HierarchicalTreeItem, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  items: customPropTypes.collectionShorthand,\n  index: PropTypes.number,\n  exclusive: PropTypes.bool,\n  onTitleClick: PropTypes.func,\n  open: PropTypes.bool,\n  renderItemTitle: PropTypes.func,\n  title: customPropTypes.itemShorthand\n}));\n\n_defineProperty(HierarchicalTreeItem, \"defaultProps\", {\n  as: 'li',\n  accessibility: hierarchicalTreeItemBehavior\n});\n\nHierarchicalTreeItem.create = createShorthandFactory({\n  Component: HierarchicalTreeItem,\n  mappedProp: 'title'\n});\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\n\nexport default withSafeTypeForAs(HierarchicalTreeItem);","map":{"version":3,"sources":["components/HierarchicalTree/HierarchicalTreeItem.tsx"],"names":["hierarchicalTreeItemClassName","hierarchicalTreeItemSlotClassNames","subtree","HierarchicalTreeItem","UIComponent","content","items","customPropTypes","collectionShorthand","index","PropTypes","number","exclusive","bool","onTitleClick","func","open","renderItemTitle","title","itemShorthand","as","accessibility","hierarchicalTreeItemBehavior","React","performClick","e","receiveFocus","collapse","expand","focusSubtree","element","getFirstFocusable","onClick","hasSubtree","defaultProps","render","overrideProps","handleTitleOverrides","treeRef","className","ElementType","classes","unhandledProps","styles","variables","children","itemRef","root","forElements","applyAccessibilityKeyHandlers","childrenExist","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, hierarchicalTreeItemBehavior, hierarchicalSubtreeBehavior } from '@fluentui/accessibility';\nimport { getFirstFocusable } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport HierarchicalTree, { HierarchicalTreeProps } from './HierarchicalTree';\nimport HierarchicalTreeTitle, { HierarchicalTreeTitleProps } from './HierarchicalTreeTitle';\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ShorthandCollection,\n} from '../../types';\n\nexport interface HierarchicalTreeItemSlotClassNames {\n  subtree: string;\n}\n\nexport interface HierarchicalTreeItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Only allow one subtree to be open at a time. */\n  exclusive?: boolean;\n\n  /** The index of the item among its sibbling */\n  index?: number;\n\n  /** Array of props for sub tree. */\n  items?: ShorthandValue<HierarchicalTreeProps> | ShorthandCollection<HierarchicalTreeItemProps>;\n\n  /** Called when a tree title is clicked. */\n  onTitleClick?: ComponentEventHandler<HierarchicalTreeItemProps>;\n\n  /** Whether or not the subtree of the item is in the open state. */\n  open?: boolean;\n\n  /**\n   * A custom render iterator for rendering each Accordion panel title.\n   * The default component, props, and children are available for each panel title.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<HierarchicalTreeTitleProps>;\n\n  /** Properties for TreeTitle. */\n  title?: ShorthandValue<HierarchicalTreeTitleProps>;\n}\n\nexport const hierarchicalTreeItemClassName = 'ui-hierarchicaltree__item';\nexport const hierarchicalTreeItemSlotClassNames: HierarchicalTreeItemSlotClassNames = {\n  subtree: `${hierarchicalTreeItemClassName}__subtree`,\n};\n\nclass HierarchicalTreeItem extends UIComponent<WithAsProp<HierarchicalTreeItemProps>> {\n  static create: ShorthandFactory<HierarchicalTreeItemProps>;\n\n  static displayName = 'HierarchicalTreeItem';\n\n  static deprecated_className = hierarchicalTreeItemClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    items: customPropTypes.collectionShorthand,\n    index: PropTypes.number,\n    exclusive: PropTypes.bool,\n    onTitleClick: PropTypes.func,\n    open: PropTypes.bool,\n    renderItemTitle: PropTypes.func,\n    title: customPropTypes.itemShorthand,\n  };\n\n  static defaultProps = {\n    as: 'li',\n    accessibility: hierarchicalTreeItemBehavior,\n  };\n\n  itemRef = React.createRef<HTMLElement>();\n  treeRef = React.createRef<HTMLElement>();\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _.invoke(this.props, 'onTitleClick', e, this.props);\n    },\n    receiveFocus: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Focuses the title if the event comes from a child item.\n      if (this.eventComesFromChildItem(e)) {\n        this.itemRef.current.focus();\n      }\n    },\n    collapse: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Handle click on title if the keyboard event was dispatched on that title\n      if (!this.eventComesFromChildItem(e)) {\n        this.handleTitleClick(e);\n      }\n    },\n    expand: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this.handleTitleClick(e);\n    },\n    focusSubtree: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const element = getFirstFocusable(this.treeRef.current, this.treeRef.current, true);\n      if (element) {\n        element.focus();\n      }\n    },\n  };\n\n  eventComesFromChildItem = e => {\n    return e.currentTarget !== e.target;\n  };\n\n  handleTitleClick = e => {\n    _.invoke(this.props, 'onTitleClick', e, this.props);\n  };\n\n  handleTitleOverrides = (predefinedProps: HierarchicalTreeTitleProps) => ({\n    onClick: (e, titleProps) => {\n      this.handleTitleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n    },\n  });\n\n  renderContent() {\n    const { items, title, renderItemTitle, open, exclusive } = this.props;\n    const hasSubtree = !_.isNil(items);\n\n    return (\n      <>\n        {HierarchicalTreeTitle.create(title, {\n          defaultProps: () => ({\n            open,\n            hasSubtree,\n            as: hasSubtree ? 'span' : 'a',\n          }),\n          render: renderItemTitle,\n          overrideProps: this.handleTitleOverrides,\n        })}\n        {hasSubtree && open && (\n          <Ref innerRef={this.treeRef}>\n            {HierarchicalTree.create(items, {\n              defaultProps: () => ({\n                accessibility: hierarchicalSubtreeBehavior,\n                className: hierarchicalTreeItemSlotClassNames.subtree,\n                exclusive,\n                renderItemTitle,\n              }),\n            })}\n          </Ref>\n        )}\n      </>\n    );\n  }\n\n  renderComponent({ ElementType, accessibility, classes, unhandledProps, styles, variables }) {\n    const { children } = this.props;\n\n    return (\n      <Ref innerRef={this.itemRef}>\n        <ElementType\n          className={classes.root}\n          {...accessibility.attributes.root}\n          {...rtlTextContainer.getAttributes({ forElements: [children] })}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {childrenExist(children) ? children : this.renderContent()}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nHierarchicalTreeItem.create = createShorthandFactory({\n  Component: HierarchicalTreeItem,\n  mappedProp: 'title',\n});\n\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport default withSafeTypeForAs<typeof HierarchicalTreeItem, HierarchicalTreeItemProps, 'li'>(HierarchicalTreeItem);\n"]},"metadata":{},"sourceType":"module"}