{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport { tooltipAsLabelBehavior } from '@fluentui/accessibility';\nimport { useAccessibility, useAutoControlled, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, commonPropTypes, isFromKeyboard, setWhatInputSource, getOrGenerateIdFromShorthand, createShorthandFactory } from '../../utils';\nimport { ALIGNMENTS, POSITIONS, Popper } from '../../utils/positioner';\nimport PortalInner from '../Portal/PortalInner';\nimport TooltipContent from './TooltipContent';\nexport var tooltipClassName = 'ui-tooltip';\n/**\n * A Tooltip displays additional non-modal information on top of its target element.\n * Tooltip doesn't receive focus and cannot contain focusable elements.\n *\n * @accessibility\n * Implements [ARIA Tooltip](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) design pattern.\n */\n\nvar Tooltip = function Tooltip(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Tooltip.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      align = props.align,\n      children = props.children,\n      content = props.content,\n      flipBoundary = props.flipBoundary,\n      mountNode = props.mountNode,\n      mouseLeaveDelay = props.mouseLeaveDelay,\n      offset = props.offset,\n      overflowBoundary = props.overflowBoundary,\n      pointing = props.pointing,\n      position = props.position,\n      positionFixed = props.positionFixed,\n      target = props.target,\n      trigger = props.trigger,\n      unstable_pinned = props.unstable_pinned;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      open = _useAutoControlled2[0],\n      setOpen = _useAutoControlled2[1];\n\n  var contentRef = React.useRef();\n  var pointerTargetRef = React.useRef();\n  var triggerRef = React.useRef();\n  var closeTimeoutId = React.useRef(); // TODO: Consider `getOrGenerateIdFromShorthand()` as hook and make it SSR safe\n\n  var contentId = React.useRef();\n  contentId.current = getOrGenerateIdFromShorthand('tooltip-content-', content, contentId.current);\n  var getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      close: function close(e) {\n        setTooltipOpen(false, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        'aria-describedby': props['aria-describedby'],\n        'aria-label': props['aria-label'],\n        'aria-labelledby': props['aria-labelledby'],\n        contentId: contentId.current,\n        triggerAriaLabel: trigger && trigger.props['aria-label'],\n        open: open\n      };\n    }\n  });\n\n  var getContentOverrideProps = function getContentOverrideProps(predefinedProps) {\n    return {\n      onMouseEnter: function onMouseEnter(e) {\n        setTooltipOpen(true, e);\n\n        _invoke(predefinedProps, 'onMouseEnter', e);\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        setTooltipOpen(false, e);\n\n        _invoke(predefinedProps, 'onMouseLeave', e);\n      }\n    };\n  };\n\n  var renderPopperChildren = function renderPopperChildren(popperProps) {\n    var tooltipContent = TooltipContent.create(content, {\n      defaultProps: function defaultProps() {\n        return getA11Props('tooltip', {\n          open: open,\n          placement: popperProps.placement,\n          pointing: pointing,\n          pointerRef: pointerTargetRef\n        });\n      },\n      generateKey: false,\n      overrideProps: getContentOverrideProps\n    });\n    return tooltipContent ? React.createElement(Ref, {\n      innerRef: contentRef\n    }, tooltipContent) : null;\n  };\n\n  var shouldStayOpen = function shouldStayOpen(e) {\n    return _invoke(e, 'currentTarget.contains', e.relatedTarget) || _invoke(contentRef.current, 'contains', e.relatedTarget);\n  };\n\n  var trySetOpen = function trySetOpen(newValue, e) {\n    setOpen(newValue);\n\n    _invoke(props, 'onOpenChange', e, Object.assign({}, props, {}, {\n      open: newValue\n    }));\n  };\n\n  var setTooltipOpen = function setTooltipOpen(newOpen, e) {\n    clearTimeout(closeTimeoutId.current);\n\n    if (newOpen) {\n      trySetOpen(true, e);\n    } else {\n      closeTimeoutId.current = context.target.defaultView.setTimeout(function () {\n        trySetOpen(false, e);\n      }, mouseLeaveDelay);\n    }\n  };\n\n  var triggerNode = childrenExist(children) ? children : trigger;\n  var triggerElement = triggerNode && React.Children.only(triggerNode);\n  var triggerProps = {\n    onFocus: function onFocus(e) {\n      if (isFromKeyboard()) {\n        trySetOpen(true, e);\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _invoke.apply(void 0, [triggerElement, 'props.onFocus', e].concat(args));\n    },\n    onBlur: function onBlur(e) {\n      if (!shouldStayOpen(e)) {\n        trySetOpen(false, e);\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));\n    },\n    onMouseEnter: function onMouseEnter(e) {\n      setTooltipOpen(true, e);\n      setWhatInputSource(context.target, 'mouse');\n\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      _invoke.apply(void 0, [triggerElement, 'props.onMouseEnter', e].concat(args));\n    },\n    onMouseLeave: function onMouseLeave(e) {\n      setTooltipOpen(false, e);\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      _invoke.apply(void 0, [triggerElement, 'props.onMouseLeave', e].concat(args));\n    }\n  };\n  var element = React.createElement(React.Fragment, null, triggerElement && React.createElement(Ref, {\n    innerRef: triggerRef\n  }, React.cloneElement(triggerElement, getA11Props('trigger', triggerProps))), React.createElement(PortalInner, {\n    mountNode: mountNode\n  }, React.createElement(Popper, {\n    align: align,\n    flipBoundary: flipBoundary,\n    offset: offset,\n    overflowBoundary: overflowBoundary,\n    pointerTargetRef: pointerTargetRef,\n    position: position,\n    positionFixed: positionFixed,\n    enabled: open,\n    rtl: context.rtl,\n    targetRef: target || triggerRef,\n    children: renderPopperChildren,\n    unstable_pinned: unstable_pinned\n  })));\n  setEnd();\n  return element;\n};\n\nTooltip.displayName = 'Tooltip';\nTooltip.defaultProps = {\n  align: 'center',\n  position: 'above',\n  mouseLeaveDelay: 10,\n  pointing: true,\n  accessibility: tooltipAsLabelBehavior\n};\nTooltip.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  as: false,\n  content: false\n}), {\n  align: PropTypes.oneOf(ALIGNMENTS),\n  children: PropTypes.element,\n  defaultOpen: PropTypes.bool,\n  mountNode: customPropTypes.domNode,\n  mouseLeaveDelay: PropTypes.number,\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n  open: PropTypes.bool,\n  onOpenChange: PropTypes.func,\n  pointing: PropTypes.bool,\n  position: PropTypes.oneOf(POSITIONS),\n  positionFixed: PropTypes.bool,\n  target: customPropTypes.domNode,\n  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.element]),\n  content: customPropTypes.shorthandAllowingChildren,\n  unstable_pinned: PropTypes.bool,\n  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])])\n});\nTooltip.handledProps = Object.keys(Tooltip.propTypes);\nTooltip.Content = TooltipContent;\nTooltip.create = createShorthandFactory({\n  Component: Tooltip,\n  mappedProp: 'content'\n});\nexport default Tooltip;","map":{"version":3,"sources":["components/Tooltip/Tooltip.tsx"],"names":["tooltipClassName","Tooltip","context","React","setStart","setEnd","useTelemetry","accessibility","align","children","content","flipBoundary","mountNode","mouseLeaveDelay","offset","overflowBoundary","pointing","position","positionFixed","target","trigger","unstable_pinned","props","open","setOpen","useAutoControlled","defaultValue","value","initialValue","contentRef","pointerTargetRef","triggerRef","closeTimeoutId","contentId","getOrGenerateIdFromShorthand","getA11Props","useAccessibility","actionHandlers","close","setTooltipOpen","e","mapPropsToBehavior","triggerAriaLabel","getContentOverrideProps","onMouseEnter","onMouseLeave","renderPopperChildren","tooltipContent","defaultProps","placement","popperProps","pointerRef","generateKey","overrideProps","shouldStayOpen","trySetOpen","newValue","clearTimeout","triggerNode","childrenExist","triggerElement","triggerProps","onFocus","args","isFromKeyboard","onBlur","setWhatInputSource","element","tooltipAsLabelBehavior","as","PropTypes","defaultOpen","customPropTypes","onOpenChange","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, tooltipAsLabelBehavior, TooltipBehaviorProps } from '@fluentui/accessibility';\nimport { useAccessibility, useAutoControlled, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  StyledComponentProps,\n  commonPropTypes,\n  isFromKeyboard,\n  setWhatInputSource,\n  getOrGenerateIdFromShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperChildrenProps,\n  Alignment,\n  Position,\n} from '../../utils/positioner';\nimport PortalInner from '../Portal/PortalInner';\nimport TooltipContent, { TooltipContentProps } from './TooltipContent';\n\nexport interface TooltipProps\n  extends StyledComponentProps<TooltipProps>,\n    ChildrenComponentProps<React.ReactElement>,\n    ContentComponentProps<ShorthandValue<TooltipContentProps>>,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @default tooltipBehavior\n   * @available tooltipAsLabelBehavior\n   * */\n  accessibility?: Accessibility<TooltipBehaviorProps>;\n\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** Existing element the tooltip should be bound to. */\n  mountNode?: HTMLElement;\n\n  /** Delay in ms for the mouse leave event, before the tooltip will be closed. */\n  mouseLeaveDelay?: number;\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: (e: React.MouseEvent | React.FocusEvent | React.KeyboardEvent, data: TooltipProps) => void;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /**\n   * DOM element that should be used as tooltip's target - instead of 'trigger' element that is used by default.\n   */\n  target?: HTMLElement;\n\n  /** Element to be rendered in-place where the tooltip is defined. */\n  trigger?: JSX.Element;\n}\n\nexport const tooltipClassName = 'ui-tooltip';\n\n/**\n * A Tooltip displays additional non-modal information on top of its target element.\n * Tooltip doesn't receive focus and cannot contain focusable elements.\n *\n * @accessibility\n * Implements [ARIA Tooltip](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) design pattern.\n */\nconst Tooltip: React.FC<TooltipProps> &\n  FluentComponentStaticProps<TooltipProps> & {\n    Content: typeof TooltipContent;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Tooltip.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    align,\n    children,\n    content,\n    flipBoundary,\n    mountNode,\n    mouseLeaveDelay,\n    offset,\n    overflowBoundary,\n    pointing,\n    position,\n    positionFixed,\n    target,\n    trigger,\n    unstable_pinned,\n  } = props;\n\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n\n    initialValue: false,\n  });\n\n  const contentRef = React.useRef<HTMLElement>();\n  const pointerTargetRef = React.useRef<HTMLDivElement>();\n  const triggerRef = React.useRef<HTMLElement>();\n\n  const closeTimeoutId = React.useRef<number>();\n  // TODO: Consider `getOrGenerateIdFromShorthand()` as hook and make it SSR safe\n  const contentId = React.useRef<string>();\n  contentId.current = getOrGenerateIdFromShorthand('tooltip-content-', content, contentId.current);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      close: e => {\n        setTooltipOpen(false, e);\n        e.stopPropagation();\n        e.preventDefault();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      'aria-describedby': props['aria-describedby'],\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      contentId: contentId.current,\n      triggerAriaLabel: trigger && trigger.props['aria-label'],\n      open,\n    }),\n  });\n\n  const getContentOverrideProps = (\n    predefinedProps: TooltipContentProps,\n  ): TooltipContentProps & Pick<React.DOMAttributes<HTMLDivElement>, 'onMouseEnter' | 'onMouseLeave'> => ({\n    onMouseEnter: (e: React.MouseEvent) => {\n      setTooltipOpen(true, e);\n      _.invoke(predefinedProps, 'onMouseEnter', e);\n    },\n    onMouseLeave: (e: React.MouseEvent) => {\n      setTooltipOpen(false, e);\n      _.invoke(predefinedProps, 'onMouseLeave', e);\n    },\n  });\n\n  const renderPopperChildren = (popperProps: PopperChildrenProps) => {\n    const tooltipContent = TooltipContent.create(content, {\n      defaultProps: () =>\n        getA11Props('tooltip', {\n          open,\n          placement: popperProps.placement,\n          pointing,\n          pointerRef: pointerTargetRef,\n        }),\n      generateKey: false,\n      overrideProps: getContentOverrideProps,\n    });\n\n    return tooltipContent ? <Ref innerRef={contentRef}>{tooltipContent}</Ref> : null;\n  };\n\n  const shouldStayOpen = (e: React.FocusEvent) =>\n    _.invoke(e, 'currentTarget.contains', e.relatedTarget) || _.invoke(contentRef.current, 'contains', e.relatedTarget);\n\n  const trySetOpen = (newValue: boolean, e: React.MouseEvent | React.FocusEvent | React.KeyboardEvent) => {\n    setOpen(newValue);\n    _.invoke(props, 'onOpenChange', e, { ...props, ...{ open: newValue } });\n  };\n\n  const setTooltipOpen = (newOpen: boolean, e: React.MouseEvent | React.KeyboardEvent) => {\n    clearTimeout(closeTimeoutId.current);\n\n    if (newOpen) {\n      trySetOpen(true, e);\n    } else {\n      closeTimeoutId.current = context.target.defaultView.setTimeout(() => {\n        trySetOpen(false, e);\n      }, mouseLeaveDelay);\n    }\n  };\n\n  const triggerNode: React.ReactElement | undefined = childrenExist(children) ? children : trigger;\n  const triggerElement = triggerNode && React.Children.only(triggerNode);\n\n  const triggerProps: React.HTMLAttributes<HTMLElement> = {\n    onFocus: (e, ...args) => {\n      if (isFromKeyboard()) {\n        trySetOpen(true, e);\n      }\n      _.invoke(triggerElement, 'props.onFocus', e, ...args);\n    },\n    onBlur: (e, ...args) => {\n      if (!shouldStayOpen(e)) {\n        trySetOpen(false, e);\n      }\n      _.invoke(triggerElement, 'props.onBlur', e, ...args);\n    },\n    onMouseEnter: (e, ...args) => {\n      setTooltipOpen(true, e);\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(triggerElement, 'props.onMouseEnter', e, ...args);\n    },\n    onMouseLeave: (e, ...args) => {\n      setTooltipOpen(false, e);\n      _.invoke(triggerElement, 'props.onMouseLeave', e, ...args);\n    },\n  };\n\n  const element = (\n    <>\n      {triggerElement && (\n        <Ref innerRef={triggerRef}>{React.cloneElement(triggerElement, getA11Props('trigger', triggerProps))}</Ref>\n      )}\n      <PortalInner mountNode={mountNode}>\n        <Popper\n          align={align}\n          flipBoundary={flipBoundary}\n          offset={offset}\n          overflowBoundary={overflowBoundary}\n          pointerTargetRef={pointerTargetRef}\n          position={position}\n          positionFixed={positionFixed}\n          enabled={open}\n          rtl={context.rtl}\n          targetRef={target || triggerRef}\n          children={renderPopperChildren}\n          unstable_pinned={unstable_pinned}\n        />\n      </PortalInner>\n    </>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltip.displayName = 'Tooltip';\n\nTooltip.defaultProps = {\n  align: 'center',\n  position: 'above',\n  mouseLeaveDelay: 10,\n  pointing: true,\n  accessibility: tooltipAsLabelBehavior,\n};\nTooltip.propTypes = {\n  ...commonPropTypes.createCommon({\n    as: false,\n    content: false,\n  }),\n  align: PropTypes.oneOf<Alignment>(ALIGNMENTS),\n  children: PropTypes.element,\n  defaultOpen: PropTypes.bool,\n  mountNode: customPropTypes.domNode,\n  mouseLeaveDelay: PropTypes.number,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  open: PropTypes.bool,\n  onOpenChange: PropTypes.func,\n  pointing: PropTypes.bool,\n  position: PropTypes.oneOf<Position>(POSITIONS),\n  positionFixed: PropTypes.bool,\n  target: customPropTypes.domNode,\n  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.element]),\n  content: customPropTypes.shorthandAllowingChildren,\n  unstable_pinned: PropTypes.bool,\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n};\nTooltip.handledProps = Object.keys(Tooltip.propTypes) as any;\n\nTooltip.Content = TooltipContent;\n\nTooltip.create = createShorthandFactory({ Component: Tooltip, mappedProp: 'content' });\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}