{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\"; // ========================================================\n// react/packages/shared/ReactTypes.js\n// ========================================================\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiberHooks.js\n// ========================================================\n\nvar WorkTag;\n\n(function (WorkTag) {\n  WorkTag[WorkTag[\"FunctionComponent\"] = 0] = \"FunctionComponent\";\n  WorkTag[WorkTag[\"ClassComponent\"] = 1] = \"ClassComponent\";\n  WorkTag[WorkTag[\"IndeterminateComponent\"] = 2] = \"IndeterminateComponent\";\n  WorkTag[WorkTag[\"HostRoot\"] = 3] = \"HostRoot\";\n  WorkTag[WorkTag[\"HostPortal\"] = 4] = \"HostPortal\";\n  WorkTag[WorkTag[\"HostComponent\"] = 5] = \"HostComponent\";\n  WorkTag[WorkTag[\"HostText\"] = 6] = \"HostText\";\n  WorkTag[WorkTag[\"Fragment\"] = 7] = \"Fragment\";\n  WorkTag[WorkTag[\"Mode\"] = 8] = \"Mode\";\n  WorkTag[WorkTag[\"ContextConsumer\"] = 9] = \"ContextConsumer\";\n  WorkTag[WorkTag[\"ContextProvider\"] = 10] = \"ContextProvider\";\n  WorkTag[WorkTag[\"ForwardRef\"] = 11] = \"ForwardRef\";\n  WorkTag[WorkTag[\"Profiler\"] = 12] = \"Profiler\";\n  WorkTag[WorkTag[\"SuspenseComponent\"] = 13] = \"SuspenseComponent\";\n  WorkTag[WorkTag[\"MemoComponent\"] = 14] = \"MemoComponent\";\n  WorkTag[WorkTag[\"SimpleMemoComponent\"] = 15] = \"SimpleMemoComponent\";\n  WorkTag[WorkTag[\"LazyComponent\"] = 16] = \"LazyComponent\";\n  WorkTag[WorkTag[\"IncompleteClassComponent\"] = 17] = \"IncompleteClassComponent\";\n  WorkTag[WorkTag[\"DehydratedFragment\"] = 18] = \"DehydratedFragment\";\n  WorkTag[WorkTag[\"SuspenseListComponent\"] = 19] = \"SuspenseListComponent\";\n  WorkTag[WorkTag[\"FundamentalComponent\"] = 20] = \"FundamentalComponent\";\n  WorkTag[WorkTag[\"ScopeComponent\"] = 21] = \"ScopeComponent\";\n})(WorkTag || (WorkTag = {}));\n\nvar isDOMNode = function isDOMNode(e) {\n  return e && typeof e.tagName === 'string' && e.nodeType === Node.ELEMENT_NODE;\n};\n\nvar FiberNavigator = /*#__PURE__*/function () {\n  function FiberNavigator() {\n    _classCallCheck(this, FiberNavigator);\n\n    _defineProperty(this, \"__fiber\", void 0);\n  }\n\n  _createClass(FiberNavigator, [{\n    key: \"findDebugHookState\",\n\n    /**\n     * Hooks state is represented by a recursive structure where:\n     * - `memoizedState` is a current value if applicable\n     * - `next` is next hook in order\n     * @param node - fiber\n     */\n    value: function findDebugHookState(node) {\n      if (node && node.memoizedState && node.memoizedState.current && node.memoizedState.current.fluentUIDebug) {\n        return node.memoizedState.current;\n      }\n\n      if (node === null || node.next === null) {\n        return null;\n      }\n\n      return this.findDebugHookState(node.next);\n    }\n  }, {\n    key: \"isEqual\",\n    //\n    // Methods\n    //\n    value: function isEqual(fiberNav) {\n      // TODO: do equality check on __fiber instead, however, see fromFiber TODO :/\n      return !!fiberNav && fiberNav.instance === this.instance;\n    }\n  }, {\n    key: \"find\",\n    value: function find(condition, move) {\n      var fiber = FiberNavigator.fromFiber(this.__fiber);\n\n      while (fiber) {\n        if (condition(fiber)) {\n          return fiber;\n        }\n\n        fiber = move(fiber);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findOwner\",\n    value: function findOwner(condition) {\n      return this.find(condition, function (fiber) {\n        return fiber.owner;\n      });\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(condition) {\n      return this.find(condition, function (fiber) {\n        return fiber.parent;\n      });\n    } //\n    // Component Types\n    //\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.isClassComponent || this.isFunctionComponent ? this.__fiber.type.displayName || this.__fiber.type.name : this.isHostComponent ? this.__fiber.stateNode.constructor.name : null;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return FiberNavigator.fromFiber(this.__fiber.return);\n    }\n  }, {\n    key: \"owner\",\n    get: function get() {\n      return FiberNavigator.fromFiber(this.__fiber._debugOwner);\n    }\n  }, {\n    key: \"domNode\",\n    get: function get() {\n      var fiber = this.__fiber;\n\n      do {\n        if (isDOMNode(fiber.stateNode)) {\n          return fiber.stateNode;\n        }\n\n        fiber = fiber.child;\n      } while (fiber);\n\n      return null;\n    }\n  }, {\n    key: \"instance\",\n    get: function get() {\n      if (this.isClassComponent) {\n        return this.__fiber.stateNode;\n      }\n\n      if (this.isFunctionComponent) {\n        // assumes functional component w/useRef\n        return this.findDebugHookState(this.__fiber.memoizedState);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"reactComponent\",\n    get: function get() {\n      return this.isHostComponent ? this.owner.elementType : this.elementType;\n    }\n  }, {\n    key: \"elementType\",\n    get: function get() {\n      return this.__fiber.elementType;\n    }\n  }, {\n    key: \"fluentUIDebug\",\n    get: function get() {\n      return this.instance && this.instance.fluentUIDebug ? this.instance.fluentUIDebug : null;\n    }\n  }, {\n    key: \"jsxString\",\n    get: function get() {\n      return \"<\".concat(this.name, \" />\");\n    }\n  }, {\n    key: \"isClassComponent\",\n    get: function get() {\n      // React.Component subclasses have this flag\n      // https://reactjs.org/docs/implementation-notes.html\n      return typeof this.__fiber.type === 'function' && !!this.__fiber.type.prototype.isReactComponent;\n    }\n  }, {\n    key: \"isFunctionComponent\",\n    get: function get() {\n      // React.Component subclasses have this flag\n      // https://reactjs.org/docs/implementation-notes.html\n      return typeof this.__fiber.type === 'function' && !this.__fiber.type.prototype.isReactComponent;\n    }\n  }, {\n    key: \"isHostComponent\",\n    get: function get() {\n      // Host components are platform components (i.e. 'div' on web)\n      // https://github.com/acdlite/react-fiber-architecture#type-and-key\n      return typeof this.__fiber.type === 'string';\n    } //\n    // What this fiber component renders\n    //\n\n  }, {\n    key: \"isDOMComponent\",\n    get: function get() {\n      return !!this.__fiber.child && FiberNavigator.fromFiber(this.__fiber.child).isHostComponent;\n    } // https://github.com/facebook/react/blob/16.8.6/packages/react-dom/src/test-utils/ReactTestUtils.js#L193\n\n  }, {\n    key: \"isCompositeComponent\",\n    get: function get() {\n      return this.isDOMComponent ? false : !!this.instance && !!this.instance.render && !!this.instance.setState;\n    }\n  }]);\n\n  return FiberNavigator;\n}();\n\n_defineProperty(FiberNavigator, \"domNodeToReactFiber\", function (elm) {\n  if (!elm) return null;\n\n  for (var k in elm) {\n    if (k.startsWith('__reactInternalInstance$')) {\n      return elm[k];\n    }\n  }\n\n  return null;\n});\n\n_defineProperty(FiberNavigator, \"fromFiber\", function (fiber) {\n  if (!fiber) return null;\n  var fiberNavigator = new FiberNavigator();\n  Object.defineProperty(fiberNavigator, '__fiber', {\n    value: fiber,\n    enumerable: false,\n    writable: false,\n    configurable: false\n  });\n  return fiberNavigator;\n});\n\n_defineProperty(FiberNavigator, \"fromDOMNode\", function (domNode) {\n  var fiber = FiberNavigator.domNodeToReactFiber(domNode);\n  if (!fiber) return null;\n  var fiberNavigator = new FiberNavigator();\n  Object.defineProperty(fiberNavigator, '__fiber', {\n    value: fiber,\n    enumerable: false,\n    writable: false,\n    configurable: false\n  });\n  return fiberNavigator;\n});\n\nexport default FiberNavigator;","map":{"version":3,"sources":["components/Debug/FiberNavigator.ts"],"names":["WorkTag","isDOMNode","e","Node","FiberNavigator","k","elm","fiberNavigator","Object","value","enumerable","writable","configurable","fiber","node","fiberNav","condition","move"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\n// ========================================================\n// react/packages/shared/ReactTypes.js\n// ========================================================\n\ntype ReactEventResponder<E, C> = {\n  $$typeof: Symbol | number;\n  displayName: string;\n  targetEventTypes: null | string[];\n  rootEventTypes: null | string[];\n  getInitialState: null | ((props: Object) => Object);\n  onEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onRootEvent: null | ((event: E, context: C, props: Object, state: Object) => void);\n  onMount: null | ((context: C, props: Object, state: Object) => void);\n  onUnmount: null | ((context: C, props: Object, state: Object) => void);\n};\n\ntype ReactEventResponderInstance<E, C> = {\n  fiber: Object;\n  props: Object;\n  responder: ReactEventResponder<E, C>;\n  rootEventTypes: null | Set<string>;\n  state: Object;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiberHooks.js\n// ========================================================\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useResponder';\n\ntype ReactProviderType<T> = {\n  $$typeof: Symbol | number;\n  _context: ReactContext<T>;\n};\n\ntype ReactContext<T> = {\n  $$typeof: Symbol | number;\n  Consumer: ReactContext<T>;\n  Provider: ReactProviderType<T>;\n\n  _calculateChangedBits: ((a: T, b: T) => number) | null;\n\n  _currentValue: T;\n  _currentValue2: T;\n  _threadCount: number;\n\n  // DEV only\n  _currentRenderer?: Object | null;\n  _currentRenderer2?: Object | null;\n};\n\ntype ContextDependency<T> = {\n  context: ReactContext<T>;\n  observedBits: number;\n  next: ContextDependency<any> | null;\n};\n\nenum WorkTag {\n  FunctionComponent = 0,\n  ClassComponent = 1,\n  IndeterminateComponent = 2, // Before we know whether it is function or class\n  HostRoot = 3, // Root of a host tree. Could be nested inside another node.\n  HostPortal = 4, // A subtree. Could be an entry point to a different renderer.\n  HostComponent = 5,\n  HostText = 6,\n  Fragment = 7,\n  Mode = 8,\n  ContextConsumer = 9,\n  ContextProvider = 10,\n  ForwardRef = 11,\n  Profiler = 12,\n  SuspenseComponent = 13,\n  MemoComponent = 14,\n  SimpleMemoComponent = 15,\n  LazyComponent = 16,\n  IncompleteClassComponent = 17,\n  DehydratedFragment = 18,\n  SuspenseListComponent = 19,\n  FundamentalComponent = 20,\n  ScopeComponent = 21,\n}\n\ntype Source = {\n  fileName: string;\n  lineNumber: number;\n};\n\ntype ExpirationTime = number;\n\ntype Dependencies = {\n  expirationTime: ExpirationTime;\n  firstContext: ContextDependency<any> | null;\n  responders: Map<ReactEventResponder<any, any>, ReactEventResponderInstance<any, any>> | null;\n};\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\ntype Fiber = {\n  // These first fields are conceptually members of an Instance. This used to\n  // be split into a separate type and intersected with the other Fiber fields,\n  // but until Flow fixes its intersection bugs, we've merged them into a\n  // single type.\n\n  // An Instance is shared between all versions of a component. We can easily\n  // break this out into a separate object to avoid copying so much to the\n  // alternate versions of the tree. We put this on a single object for now to\n  // minimize the number of objects created during the initial render.\n\n  // Tag identifying the type of fiber.\n  tag: WorkTag;\n\n  // Unique identifier of this child.\n  key: null | string;\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any;\n\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n\n  // The local state associated with this fiber.\n  stateNode: any;\n\n  // Conceptual aliases\n  // parent : Instance -> return The parent happens to be the same as the\n  // return fiber since we've merged the fiber and instance.\n\n  // Remaining fields belong to Fiber\n\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  return: Fiber | null;\n\n  // Singly Linked List Tree Structure.\n  child: Fiber | null;\n  sibling: Fiber | null;\n  index: number;\n\n  // The ref last used to attach this node.\n  // I'll avoid adding an owner field for prod and model that as functions.\n  ref: React.Ref<any>;\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  pendingProps: any; // This type will be more specific once we overload the tag.\n  memoizedProps: any; // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // updateQueue: UpdateQueue<any> | null,\n\n  // The state used to create the output\n  memoizedState: any;\n\n  // Dependencies (contexts, events) for this fiber, if it has any\n  dependencies: Dependencies | null;\n\n  // // Bitfield that describes properties about the fiber and its subtree. E.g.\n  // // the ConcurrentMode flag indicates whether the subtree should be async-by-\n  // // default. When a fiber is created, it inherits the mode of its\n  // // parent. Additional flags can be set at creation time, but after that the\n  // // value should remain unchanged throughout the fiber's lifetime, particularly\n  // // before its child fibers are created.\n  // mode: TypeOfMode\n  //\n  // // Effect\n  // effectTag: SideEffectTag\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null;\n\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  firstEffect: Fiber | null;\n  lastEffect: Fiber | null;\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime;\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime;\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  alternate: Fiber | null;\n\n  // Time spent rendering this Fiber and its descendants for the current update.\n  // This tells us how well the tree makes use of sCU for memoization.\n  // It is reset to 0 each time we render and only updated when we don't bailout.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualDuration?: number;\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number;\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number;\n\n  // Sum of base times for all descendants of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number;\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number;\n  _debugSource?: Source | null;\n  _debugOwner?: Fiber | null;\n  _debugIsCurrentlyTiming?: boolean;\n  _debugNeedsRemount?: boolean;\n\n  // Used to verify that the order of hooks does not change between renders.\n  _debugHookTypes?: HookType[] | null;\n};\n\nconst isDOMNode = e => e && typeof e.tagName === 'string' && e.nodeType === Node.ELEMENT_NODE;\n\nclass FiberNavigator {\n  __fiber: Fiber;\n\n  static domNodeToReactFiber = (elm: HTMLElement): Fiber => {\n    if (!elm) return null;\n\n    for (const k in elm) {\n      if (k.startsWith('__reactInternalInstance$')) {\n        return elm[k];\n      }\n    }\n\n    return null;\n  };\n\n  // TODO: Fibers can become stale.\n  //      The only current fiber is the one found on the DOM node.\n  //      There is no way to start at a React Component fiber, go the DOM node,\n  //      get the current fiber, and find your way back to the React Component fiber.\n  //      Probably need to remove fromFiber and re-implement using only DOM node weak map.\n  static fromFiber = fiber => {\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  static fromDOMNode = domNode => {\n    const fiber = FiberNavigator.domNodeToReactFiber(domNode);\n\n    if (!fiber) return null;\n\n    const fiberNavigator = new FiberNavigator();\n\n    Object.defineProperty(fiberNavigator, '__fiber', {\n      value: fiber,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n\n    return fiberNavigator;\n  };\n\n  get name() {\n    return this.isClassComponent || this.isFunctionComponent\n      ? this.__fiber.type.displayName || this.__fiber.type.name\n      : this.isHostComponent\n      ? this.__fiber.stateNode.constructor.name\n      : null;\n  }\n\n  get parent(): FiberNavigator {\n    return FiberNavigator.fromFiber(this.__fiber.return);\n  }\n\n  get owner() {\n    return FiberNavigator.fromFiber(this.__fiber._debugOwner);\n  }\n\n  get domNode() {\n    let fiber = this.__fiber;\n\n    do {\n      if (isDOMNode(fiber.stateNode)) {\n        return fiber.stateNode;\n      }\n      fiber = fiber.child;\n    } while (fiber);\n\n    return null;\n  }\n\n  get instance() {\n    if (this.isClassComponent) {\n      return this.__fiber.stateNode;\n    }\n\n    if (this.isFunctionComponent) {\n      // assumes functional component w/useRef\n      return this.findDebugHookState(this.__fiber.memoizedState);\n    }\n\n    return null;\n  }\n\n  /**\n   * Hooks state is represented by a recursive structure where:\n   * - `memoizedState` is a current value if applicable\n   * - `next` is next hook in order\n   * @param node - fiber\n   */\n  findDebugHookState(node) {\n    if (node && node.memoizedState && node.memoizedState.current && node.memoizedState.current.fluentUIDebug) {\n      return node.memoizedState.current;\n    }\n\n    if (node === null || node.next === null) {\n      return null;\n    }\n\n    return this.findDebugHookState(node.next);\n  }\n\n  get reactComponent() {\n    return this.isHostComponent ? this.owner.elementType : this.elementType;\n  }\n\n  get elementType() {\n    return this.__fiber.elementType;\n  }\n\n  get fluentUIDebug() {\n    return this.instance && this.instance.fluentUIDebug ? this.instance.fluentUIDebug : null;\n  }\n\n  get jsxString() {\n    return `<${this.name} />`;\n  }\n\n  //\n  // Methods\n  //\n\n  isEqual(fiberNav: FiberNavigator) {\n    // TODO: do equality check on __fiber instead, however, see fromFiber TODO :/\n    return !!fiberNav && fiberNav.instance === this.instance;\n  }\n\n  find(condition, move) {\n    let fiber: FiberNavigator = FiberNavigator.fromFiber(this.__fiber);\n\n    while (fiber) {\n      if (condition(fiber)) {\n        return fiber;\n      }\n      fiber = move(fiber);\n    }\n\n    return null;\n  }\n\n  findOwner(condition) {\n    return this.find(condition, fiber => fiber.owner);\n  }\n\n  findParent(condition) {\n    return this.find(condition, fiber => fiber.parent);\n  }\n\n  //\n  // Component Types\n  //\n\n  get isClassComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !!this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isFunctionComponent() {\n    // React.Component subclasses have this flag\n    // https://reactjs.org/docs/implementation-notes.html\n    return typeof this.__fiber.type === 'function' && !this.__fiber.type.prototype.isReactComponent;\n  }\n\n  get isHostComponent() {\n    // Host components are platform components (i.e. 'div' on web)\n    // https://github.com/acdlite/react-fiber-architecture#type-and-key\n    return typeof this.__fiber.type === 'string';\n  }\n\n  //\n  // What this fiber component renders\n  //\n\n  get isDOMComponent() {\n    return !!this.__fiber.child && FiberNavigator.fromFiber(this.__fiber.child).isHostComponent;\n  }\n\n  // https://github.com/facebook/react/blob/16.8.6/packages/react-dom/src/test-utils/ReactTestUtils.js#L193\n  get isCompositeComponent() {\n    return this.isDOMComponent ? false : !!this.instance && !!this.instance.render && !!this.instance.setState;\n  }\n}\n\nexport default FiberNavigator;\n"]},"metadata":{},"sourceType":"module"}