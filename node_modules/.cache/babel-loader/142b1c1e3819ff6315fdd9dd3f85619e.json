{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuRadioGroupBehavior, toolbarMenuItemRadioBehavior } from '@fluentui/accessibility';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport ToolbarMenuItem from './ToolbarMenuItem';\nimport Box from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\nexport var toolbarMenuRadioGroupSlotClassNames = {\n  wrapper: \"\".concat(toolbarMenuRadioGroupClassName, \"__wrapper\")\n};\n\nvar ToolbarMenuRadioGroup = function ToolbarMenuRadioGroup(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarMenuRadioGroup.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      activeIndex = props.activeIndex,\n      className = props.className,\n      design = props.design,\n      items = props.items,\n      styles = props.styles,\n      variables = props.variables,\n      wrapper = props.wrapper;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var mergedVariables = mergeComponentVariables(parentVariables, variables);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuRadioGroup.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarMenuRadioGroup.displayName, {\n    className: toolbarMenuRadioGroupClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergedVariables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleItemOverrides = function handleItemOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, itemProps) {\n        _invoke(predefinedProps, 'onClick', e, itemProps);\n\n        _invoke(props, 'onItemClick', e, itemProps);\n      },\n      wrapper: null\n    };\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarMenuRadioGroup.handledProps, props);\n  var content = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    className: classes.root\n  })), React.createElement(ToolbarVariablesProvider, {\n    value: mergedVariables\n  }, _map(items, function (item, index) {\n    return ToolbarMenuItem.create(item, {\n      defaultProps: function defaultProps() {\n        return {\n          accessibility: toolbarMenuItemRadioBehavior,\n          as: 'li',\n          active: activeIndex === index,\n          index: index\n        };\n      },\n      overrideProps: handleItemOverrides\n    });\n  })));\n  var element = Box.create(wrapper, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('wrapper', {\n        as: 'li',\n        className: toolbarMenuRadioGroupSlotClassNames.wrapper,\n        styles: resolvedStyles.wrapper\n      });\n    },\n    overrideProps: {\n      children: content\n    }\n  });\n  setEnd();\n  return element;\n};\n\nToolbarMenuRadioGroup.displayName = 'ToolbarMenuRadioGroup';\nToolbarMenuRadioGroup.defaultProps = {\n  as: 'ul',\n  accessibility: toolbarMenuRadioGroupBehavior,\n  wrapper: {}\n};\nToolbarMenuRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  onItemClick: PropTypes.func,\n  wrapper: customPropTypes.itemShorthand\n});\nToolbarMenuRadioGroup.handledProps = Object.keys(ToolbarMenuRadioGroup.propTypes);\nToolbarMenuRadioGroup.create = createShorthandFactory({\n  Component: ToolbarMenuRadioGroup\n});\n/**\n * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.\n */\n\nexport default withSafeTypeForAs(ToolbarMenuRadioGroup);","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuRadioGroup.tsx"],"names":["toolbarMenuRadioGroupClassName","toolbarMenuRadioGroupSlotClassNames","wrapper","ToolbarMenuRadioGroup","context","React","setStart","setEnd","useTelemetry","accessibility","activeIndex","className","design","items","styles","variables","props","parentVariables","mergedVariables","mergeComponentVariables","getA11yProps","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToInlineStyles","handleItemOverrides","onClick","ElementType","getElementType","unhandledProps","useUnhandledProps","content","root","defaultProps","as","active","index","overrideProps","element","children","commonPropTypes","PropTypes","customPropTypes","onItemClick","itemShorthand","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuRadioGroupBehavior,\n  toolbarMenuItemRadioBehavior,\n  ToolbarMenuRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandCollection,\n  ShorthandValue,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport ToolbarMenuItem, { ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarMenuRadioGroup. */\n  items?: ShorthandCollection<ToolbarMenuItemProps>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuRadioGroupStylesProps = never;\n\nexport interface ToolbarMenuRadioGroupSlotClassNames {\n  wrapper: string;\n}\n\nexport const toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\nexport const toolbarMenuRadioGroupSlotClassNames: ToolbarMenuRadioGroupSlotClassNames = {\n  wrapper: `${toolbarMenuRadioGroupClassName}__wrapper`,\n};\n\nconst ToolbarMenuRadioGroup: React.FC<WithAsProp<ToolbarMenuRadioGroupProps>> &\n  FluentComponentStaticProps<ToolbarMenuRadioGroupProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenuRadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, activeIndex, className, design, items, styles, variables, wrapper } = props;\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuRadioGroup.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ToolbarMenuRadioGroupStylesProps>(\n    ToolbarMenuRadioGroup.displayName,\n    {\n      className: toolbarMenuRadioGroupClassName,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n\n  const handleItemOverrides = (predefinedProps: ToolbarMenuItemProps): ToolbarMenuItemProps => ({\n    onClick: (e, itemProps) => {\n      _.invoke(predefinedProps, 'onClick', e, itemProps);\n      _.invoke(props, 'onItemClick', e, itemProps);\n    },\n    wrapper: null,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenuRadioGroup.handledProps, props);\n\n  const content = (\n    <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })}>\n      <ToolbarVariablesProvider value={mergedVariables}>\n        {_.map(items, (item, index) =>\n          ToolbarMenuItem.create(item, {\n            defaultProps: () => ({\n              accessibility: toolbarMenuItemRadioBehavior,\n              as: 'li',\n              active: activeIndex === index,\n              index,\n            }),\n            overrideProps: handleItemOverrides,\n          }),\n        )}\n      </ToolbarVariablesProvider>\n    </ElementType>\n  );\n  const element = Box.create(wrapper, {\n    defaultProps: () =>\n      getA11yProps('wrapper', {\n        as: 'li',\n        className: toolbarMenuRadioGroupSlotClassNames.wrapper,\n        styles: resolvedStyles.wrapper,\n      }),\n    overrideProps: {\n      children: content,\n    },\n  });\n  setEnd();\n\n  return element;\n};\n\nToolbarMenuRadioGroup.displayName = 'ToolbarMenuRadioGroup';\nToolbarMenuRadioGroup.defaultProps = {\n  as: 'ul',\n  accessibility: toolbarMenuRadioGroupBehavior,\n  wrapper: {},\n};\nToolbarMenuRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  onItemClick: PropTypes.func,\n  wrapper: customPropTypes.itemShorthand,\n};\nToolbarMenuRadioGroup.handledProps = Object.keys(ToolbarMenuRadioGroup.propTypes) as any;\n\nToolbarMenuRadioGroup.create = createShorthandFactory({\n  Component: ToolbarMenuRadioGroup,\n});\n\n/**\n * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenuRadioGroup, ToolbarMenuRadioGroupProps, 'ul'>(ToolbarMenuRadioGroup);\n"]},"metadata":{},"sourceType":"module"}