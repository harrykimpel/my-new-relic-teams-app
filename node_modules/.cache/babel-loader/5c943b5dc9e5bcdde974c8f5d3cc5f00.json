{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { cardBehavior } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport CardBody from './CardBody';\nimport CardColumn from './CardColumn';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardPreview from './CardPreview';\nimport CardTopControls from './CardTopControls';\nexport var cardClassName = 'ui-card';\n\nvar Card = function Card(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Card.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var cardRef = React.useRef();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      compact = props.compact,\n      horizontal = props.horizontal,\n      centered = props.centered,\n      size = props.size,\n      fluid = props.fluid,\n      onClick = props.onClick,\n      disabled = props.disabled;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Card.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        handleClick(e);\n      },\n      focusCard: function focusCard(e) {\n        cardRef.current.focus();\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        centered: centered,\n        horizontal: horizontal,\n        compact: compact,\n        size: size,\n        fluid: fluid,\n        actionable: !!onClick,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(Ref, {\n    innerRef: cardRef\n  }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), children)));\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\nCard.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool\n});\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium'\n};\nCard.handledProps = Object.keys(Card.propTypes);\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\nCard.create = createShorthandFactory({\n  Component: Card\n});\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\n\nexport default withSafeTypeForAs(Card);","map":{"version":3,"sources":["components/Card/Card.tsx"],"names":["cardClassName","Card","context","React","setStart","setEnd","useTelemetry","cardRef","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","onClick","disabled","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","handleClick","focusCard","rtl","classes","useStyles","mapPropsToStyles","actionable","mapPropsToInlineStyles","e","element","commonPropTypes","PropTypes","CustomPropTypes","bool","accessibility","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\nimport { commonPropTypes, createShorthandFactory, SizeValue, UIComponentProps } from '../../utils';\nimport CardBody from './CardBody';\nimport CardColumn from './CardColumn';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardPreview from './CardPreview';\nimport CardTopControls from './CardTopControls';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n\n  /** A card can show that it cannot be interacted with. */\n  disabled?: boolean;\n}\n\nexport type CardStylesProps = Pick<CardProps, 'compact' | 'horizontal' | 'centered' | 'size' | 'fluid' | 'disabled'> & {\n  actionable: boolean;\n};\n\nexport const cardClassName = 'ui-card';\n\nconst Card: React.FC<WithAsProp<CardProps>> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n  const cardRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    children,\n    compact,\n    horizontal,\n    centered,\n    size,\n    fluid,\n    onClick,\n    disabled,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        handleClick(e);\n      },\n      focusCard: e => {\n        cardRef.current.focus();\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n      actionable: !!onClick,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <Ref innerRef={cardRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {children}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\n\nCard.create = createShorthandFactory({ Component: Card });\n\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\nexport default withSafeTypeForAs<typeof Card, CardProps, 'div'>(Card);\n"]},"metadata":{},"sourceType":"module"}