{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _get from \"lodash/get\";\nimport _invoke from \"lodash/invoke\";\nimport { inputBehavior } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { AutoControlledComponent, partitionHTMLProps, commonPropTypes, applyAccessibilityKeyHandlers } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nexport var inputClassName = 'ui-input';\nexport var inputSlotClassNames = {\n  input: \"\".concat(inputClassName, \"__input\"),\n  icon: \"\".concat(inputClassName, \"__icon\")\n};\n\nvar Input = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Input, _AutoControlledCompon);\n\n  function Input() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      clear: function clear(e) {\n        if (_this.props.clearable && _this.state.value !== '') {\n          e.stopPropagation();\n          e.nativeEvent && e.nativeEvent.stopPropagation();\n\n          _this.handleOnClear(e);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIconOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e) {\n          if (!_this.props.disabled) {\n            _this.handleOnClear(e);\n\n            _this.inputRef.current.focus();\n          }\n\n          _invoke(predefinedProps, 'onClick', e, _this.props);\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var value = _get(e, 'target.value');\n\n      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {\n        value: value\n      }));\n\n      _this.setState({\n        value: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnClear\", function (e) {\n      if (_this.props.clearable) {\n        _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {\n          value: ''\n        }));\n\n        _this.setState({\n          value: ''\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeIcon\", function () {\n      var _this$props = _this.props,\n          clearable = _this$props.clearable,\n          icon = _this$props.icon;\n      var value = _this.state.value;\n\n      if (clearable && value.length !== 0) {\n        return {};\n      }\n\n      return icon || null;\n    });\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          variables = _ref.variables;\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          input = _this$props2.input,\n          inputRef = _this$props2.inputRef,\n          type = _this$props2.type,\n          wrapper = _this$props2.wrapper,\n          disabled = _this$props2.disabled;\n      var _this$state$value = this.state.value,\n          value = _this$state$value === void 0 ? '' : _this$state$value;\n\n      var _partitionHTMLProps = partitionHTMLProps(unhandledProps),\n          _partitionHTMLProps2 = _slicedToArray(_partitionHTMLProps, 2),\n          htmlInputProps = _partitionHTMLProps2[0],\n          restProps = _partitionHTMLProps2[1];\n\n      return Box.create(wrapper, {\n        defaultProps: function defaultProps() {\n          return Object.assign({}, accessibility.attributes.root, {\n            className: cx(inputClassName, className),\n            children: React.createElement(React.Fragment, null, React.createElement(Ref, {\n              innerRef: function innerRef(inputElement) {\n                handleRef(_this2.inputRef, inputElement);\n                handleRef(inputRef, inputElement);\n              }\n            }, Box.create(input || type, {\n              defaultProps: function defaultProps() {\n                return Object.assign({}, htmlInputProps, {\n                  as: 'input',\n                  disabled: disabled,\n                  type: type,\n                  value: value,\n                  className: inputSlotClassNames.input,\n                  styles: styles.input,\n                  onChange: _this2.handleChange\n                }, applyAccessibilityKeyHandlers(accessibility.keyHandlers.input, htmlInputProps));\n              }\n            })), Box.create(_this2.computeIcon(), {\n              defaultProps: function defaultProps() {\n                return {\n                  className: inputSlotClassNames.icon,\n                  styles: styles.icon\n                };\n              },\n              overrideProps: _this2.handleIconOverrides\n            })),\n            styles: styles.root\n          }, restProps);\n        },\n        overrideProps: {\n          as: wrapper && wrapper.as || ElementType\n        }\n      });\n    }\n  }], [{\n    key: \"getAutoControlledStateFromProps\",\n    value: function getAutoControlledStateFromProps(props, state) {\n      var value = state.value;\n      return {\n        hasValue: !!value && value.length !== 0\n      };\n    }\n  }]);\n\n  return Input;\n}(AutoControlledComponent);\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\n\n\n_defineProperty(Input, \"deprecated_className\", inputClassName);\n\n_defineProperty(Input, \"displayName\", 'Input');\n\n_defineProperty(Input, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  clearable: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  wrapper: customPropTypes.wrapperShorthand\n}));\n\n_defineProperty(Input, \"defaultProps\", {\n  accessibility: inputBehavior,\n  type: 'text',\n  wrapper: {},\n  iconPosition: 'end'\n});\n\n_defineProperty(Input, \"autoControlledProps\", ['value']);\n\nexport default withSafeTypeForAs(Input);","map":{"version":3,"sources":["components/Input/Input.tsx"],"names":["inputClassName","inputSlotClassNames","input","icon","Input","AutoControlledComponent","React","content","clearable","PropTypes","bool","defaultValue","disabled","fluid","customPropTypes","shorthandAllowingChildren","iconPosition","itemShorthand","inputRef","ref","inline","inverted","onChange","func","type","string","value","wrapper","wrapperShorthand","accessibility","props","state","hasValue","clear","e","ElementType","unhandledProps","styles","variables","className","htmlInputProps","restProps","partitionHTMLProps","defaultProps","cx","children","handleRef","as","handleChange","applyAccessibilityKeyHandlers","overrideProps","handleIconOverrides","root","onClick","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, inputBehavior } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n\nimport {\n  AutoControlledComponent,\n  RenderResultConfig,\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { WithAsProp, ShorthandValue, ComponentEventHandler, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport interface InputState {\n  value?: InputProps['value'];\n  hasValue?: boolean;\n}\n\nexport const inputClassName = 'ui-input';\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\nclass Input extends AutoControlledComponent<WithAsProp<InputProps>, InputState> {\n  inputRef = React.createRef<HTMLElement>();\n\n  static deprecated_className = inputClassName;\n\n  static displayName = 'Input';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    clearable: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconPosition: PropTypes.oneOf(['start', 'end']),\n    input: customPropTypes.itemShorthand,\n    inputRef: customPropTypes.ref,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    onChange: PropTypes.func,\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    wrapper: customPropTypes.wrapperShorthand,\n  };\n\n  static defaultProps = {\n    accessibility: inputBehavior,\n    type: 'text',\n    wrapper: {},\n    iconPosition: 'end',\n  };\n\n  static autoControlledProps = ['value'];\n\n  static getAutoControlledStateFromProps(props: InputProps, state: InputState): Partial<InputState> {\n    const { value } = state;\n\n    return {\n      hasValue: !!value && (value as string).length !== 0,\n    };\n  }\n\n  actionHandlers = {\n    clear: (e: React.KeyboardEvent) => {\n      if (this.props.clearable && this.state.value !== '') {\n        e.stopPropagation();\n        e.nativeEvent && e.nativeEvent.stopPropagation();\n        this.handleOnClear(e);\n      }\n    },\n  };\n\n  renderComponent({ accessibility, ElementType, unhandledProps, styles, variables }: RenderResultConfig<InputProps>) {\n    const { className, input, inputRef, type, wrapper, disabled } = this.props;\n    const { value = '' } = this.state;\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n\n    return Box.create(wrapper, {\n      defaultProps: () => ({\n        ...accessibility.attributes.root,\n        className: cx(inputClassName, className),\n        children: (\n          <>\n            <Ref\n              innerRef={(inputElement: HTMLElement) => {\n                handleRef(this.inputRef, inputElement);\n                handleRef(inputRef, inputElement);\n              }}\n            >\n              {Box.create(input || type, {\n                defaultProps: () => ({\n                  ...htmlInputProps,\n                  as: 'input',\n                  disabled,\n                  type,\n                  value,\n                  className: inputSlotClassNames.input,\n                  styles: styles.input,\n                  onChange: this.handleChange,\n                  ...applyAccessibilityKeyHandlers(accessibility.keyHandlers.input, htmlInputProps),\n                }),\n              })}\n            </Ref>\n            {Box.create(this.computeIcon(), {\n              defaultProps: () => ({\n                className: inputSlotClassNames.icon,\n                styles: styles.icon,\n              }),\n              overrideProps: this.handleIconOverrides,\n            })}\n          </>\n        ),\n        styles: styles.root,\n        ...restProps,\n      }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n  }\n\n  handleIconOverrides = predefinedProps => ({\n    onClick: (e: React.SyntheticEvent) => {\n      if (!this.props.disabled) {\n        this.handleOnClear(e);\n        this.inputRef.current.focus();\n      }\n\n      _.invoke(predefinedProps, 'onClick', e, this.props);\n    },\n  });\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const value = _.get(e, 'target.value');\n\n    _.invoke(this.props, 'onChange', e, { ...this.props, value });\n\n    this.setState({ value });\n  };\n\n  handleOnClear = (e: React.SyntheticEvent) => {\n    if (this.props.clearable) {\n      _.invoke(this.props, 'onChange', e, { ...this.props, value: '' });\n      this.setState({ value: '' });\n    }\n  };\n\n  computeIcon = (): ShorthandValue<BoxProps> => {\n    const { clearable, icon } = this.props;\n    const { value } = this.state;\n\n    if (clearable && (value as string).length !== 0) {\n      return {};\n    }\n\n    return icon || null;\n  };\n}\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport default withSafeTypeForAs<typeof Input, InputProps, 'div'>(Input);\n"]},"metadata":{},"sourceType":"module"}