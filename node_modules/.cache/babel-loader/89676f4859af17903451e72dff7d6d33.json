{"ast":null,"code":"import { filteredAssign } from './object';\n/**\n * An array of events that are allowed on every html element type.\n *\n * @public\n */\n\nexport var baseElementEvents = ['onCopy', 'onCut', 'onPaste', 'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate', 'onFocus', 'onFocusCapture', 'onBlur', 'onBlurCapture', 'onChange', 'onInput', 'onSubmit', 'onLoad', 'onError', 'onKeyDown', 'onKeyDownCapture', 'onKeyPress', 'onKeyUp', 'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting', 'onClick', 'onClickCapture', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseDownCapture', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onMouseUpCapture', 'onSelect', 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart', 'onScroll', 'onWheel', 'onPointerCancel', 'onPointerDown', 'onPointerEnter', 'onPointerLeave', 'onPointerMove', 'onPointerOut', 'onPointerOver', 'onPointerUp', 'onGotPointerCapture', 'onLostPointerCapture'];\n/**\n * An array of element attributes which are allowed on every html element type.\n *\n * @public\n */\n\nexport var baseElementProperties = ['accessKey', 'children', 'className', 'contentEditable', 'dir', 'draggable', 'hidden', 'htmlFor', 'id', 'lang', 'role', 'style', 'tabIndex', 'title', 'translate', 'spellCheck', 'name'];\n/**\n * An array of HTML element properties and events.\n *\n * @public\n */\n\nexport var htmlElementProperties = baseElementProperties.concat(baseElementEvents);\n/**\n * An array of LABEL tag properties and events.\n *\n * @public\n */\n\nexport var labelProperties = htmlElementProperties.concat(['form']);\n/**\n * An array of AUDIO tag properties and events.\n *\n * @public\n */\n\nexport var audioProperties = htmlElementProperties.concat(['height', 'loop', 'muted', 'preload', 'src', 'width']);\n/**\n * An array of VIDEO tag properties and events.\n *\n * @public\n */\n\nexport var videoProperties = audioProperties.concat(['poster']);\n/**\n * An array of OL tag properties and events.\n *\n * @public\n */\n\nexport var olProperties = htmlElementProperties.concat(['start']);\n/**\n * An array of LI tag properties and events.\n *\n * @public\n */\n\nexport var liProperties = htmlElementProperties.concat(['value']);\n/**\n * An array of A tag properties and events.\n *\n * @public\n */\n\nexport var anchorProperties = htmlElementProperties.concat(['download', 'href', 'hrefLang', 'media', 'rel', 'target', 'type']);\n/**\n * An array of BUTTON tag properties and events.\n *\n * @public\n */\n\nexport var buttonProperties = htmlElementProperties.concat(['autoFocus', 'disabled', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'type', 'value']);\n/**\n * An array of INPUT tag properties and events.\n *\n * @public\n */\n\nexport var inputProperties = buttonProperties.concat(['accept', 'alt', 'autoCapitalize', 'autoComplete', 'checked', 'dirname', 'form', 'height', 'inputMode', 'list', 'max', 'maxLength', 'min', 'multiple', 'pattern', 'placeholder', 'readOnly', 'required', 'src', 'step', 'size', 'type', 'value', 'width']);\n/**\n * An array of TEXTAREA tag properties and events.\n *\n * @public\n */\n\nexport var textAreaProperties = buttonProperties.concat(['autoCapitalize', 'cols', 'dirname', 'form', 'maxLength', 'placeholder', 'readOnly', 'required', 'rows', 'wrap']);\n/**\n * An array of SELECT tag properties and events.\n *\n * @public\n */\n\nexport var selectProperties = buttonProperties.concat(['form', 'multiple', 'required']);\nexport var optionProperties = htmlElementProperties.concat(['selected', 'value']);\n/**\n * An array of TABLE tag properties and events.\n *\n * @public\n */\n\nexport var tableProperties = htmlElementProperties.concat(['cellPadding', 'cellSpacing']);\n/**\n * An array of TR tag properties and events.\n *\n * @public\n */\n\nexport var trProperties = htmlElementProperties;\n/**\n * An array of TH tag properties and events.\n *\n * @public\n */\n\nexport var thProperties = htmlElementProperties.concat(['rowSpan', 'scope']);\n/**\n * An array of TD tag properties and events.\n *\n * @public\n */\n\nexport var tdProperties = htmlElementProperties.concat(['colSpan', 'headers', 'rowSpan', 'scope']);\nexport var colGroupProperties = htmlElementProperties.concat(['span']);\nexport var colProperties = htmlElementProperties.concat(['span']);\n/**\n * An array of FORM tag properties and events.\n *\n * @public\n */\n\nexport var formProperties = htmlElementProperties.concat(['acceptCharset', 'action', 'encType', 'encType', 'method', 'noValidate', 'target']);\n/**\n * An array of IFRAME tag properties and events.\n *\n * @public\n */\n\nexport var iframeProperties = htmlElementProperties.concat(['allow', 'allowFullScreen', 'allowPaymentRequest', 'allowTransparency', 'csp', 'height', 'importance', 'referrerPolicy', 'sandbox', 'src', 'srcDoc', 'width']);\n/**\n * An array of IMAGE tag properties and events.\n *\n * @public\n */\n\nexport var imgProperties = htmlElementProperties.concat(['alt', 'crossOrigin', 'height', 'src', 'srcSet', 'useMap', 'width']);\n/**\n * @deprecated Use imgProperties for img elements.\n */\n\nexport var imageProperties = imgProperties;\n/**\n * An array of DIV tag properties and events.\n *\n * @public\n */\n\nexport var divProperties = htmlElementProperties;\n/**\n * Gets native supported props for an html element provided the allowance set. Use one of the property\n * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given\n * props set. Note that all data- and aria- prefixed attributes will be allowed.\n * NOTE: getNativeProps should always be applied first when adding props to a react component. The\n * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.\n * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to\n * the component after an onClick function is added, then the getNativeProps onClick will override it.\n *\n * @public\n * @param props - The unfiltered input props\n * @param allowedPropsNames-  The array of allowed propnames.\n * @returns The filtered props\n */\n\nexport function getNativeProps(props, allowedPropNames, excludedPropNames) {\n  // It'd be great to properly type this while allowing 'aria-` and 'data-' attributes like TypeScript does for\n  // JSX attributes, but that ability is hardcoded into the TS compiler with no analog in TypeScript typings.\n  // Then we'd be able to enforce props extends native props (including aria- and data- attributes), and then\n  // return native props.\n  // We should be able to do this once this PR is merged: https://github.com/microsoft/TypeScript/pull/26797\n  return filteredAssign(function (propName) {\n    return (!excludedPropNames || excludedPropNames.indexOf(propName) < 0) && (propName.indexOf('data-') === 0 || propName.indexOf('aria-') === 0 || allowedPropNames.indexOf(propName) >= 0);\n  }, {}, props);\n}","map":{"version":3,"sources":["properties.ts"],"names":[],"mappings":"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","sourcesContent":["import { filteredAssign } from './object';\n\n/**\n * An array of events that are allowed on every html element type.\n *\n * @public\n */\nexport const baseElementEvents = [\n  'onCopy',\n  'onCut',\n  'onPaste',\n  'onCompositionEnd',\n  'onCompositionStart',\n  'onCompositionUpdate',\n  'onFocus',\n  'onFocusCapture',\n  'onBlur',\n  'onBlurCapture',\n  'onChange',\n  'onInput',\n  'onSubmit',\n  'onLoad',\n  'onError',\n  'onKeyDown',\n  'onKeyDownCapture',\n  'onKeyPress',\n  'onKeyUp',\n  'onAbort',\n  'onCanPlay',\n  'onCanPlayThrough',\n  'onDurationChange',\n  'onEmptied',\n  'onEncrypted',\n  'onEnded',\n  'onLoadedData',\n  'onLoadedMetadata',\n  'onLoadStart',\n  'onPause',\n  'onPlay',\n  'onPlaying',\n  'onProgress',\n  'onRateChange',\n  'onSeeked',\n  'onSeeking',\n  'onStalled',\n  'onSuspend',\n  'onTimeUpdate',\n  'onVolumeChange',\n  'onWaiting',\n  'onClick',\n  'onClickCapture',\n  'onContextMenu',\n  'onDoubleClick',\n  'onDrag',\n  'onDragEnd',\n  'onDragEnter',\n  'onDragExit',\n  'onDragLeave',\n  'onDragOver',\n  'onDragStart',\n  'onDrop',\n  'onMouseDown',\n  'onMouseDownCapture',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onMouseUpCapture',\n  'onSelect',\n  'onTouchCancel',\n  'onTouchEnd',\n  'onTouchMove',\n  'onTouchStart',\n  'onScroll',\n  'onWheel',\n  'onPointerCancel',\n  'onPointerDown',\n  'onPointerEnter',\n  'onPointerLeave',\n  'onPointerMove',\n  'onPointerOut',\n  'onPointerOver',\n  'onPointerUp',\n  'onGotPointerCapture',\n  'onLostPointerCapture',\n];\n\n/**\n * An array of element attributes which are allowed on every html element type.\n *\n * @public\n */\nexport const baseElementProperties = [\n  'accessKey', // global\n  'children', // global\n  'className', // global\n  'contentEditable', // global\n  'dir', // global\n  'draggable', // global\n  'hidden', // global\n  'htmlFor', // global\n  'id', // global\n  'lang', // global\n  'role', // global\n  'style', // global\n  'tabIndex', // global\n  'title', // global\n  'translate', // global\n  'spellCheck', // global\n  'name', // global\n];\n\n/**\n * An array of HTML element properties and events.\n *\n * @public\n */\nexport const htmlElementProperties = baseElementProperties.concat(baseElementEvents);\n\n/**\n * An array of LABEL tag properties and events.\n *\n * @public\n */\nexport const labelProperties = htmlElementProperties.concat([\n  'form', // button, fieldset, input, label, meter, object, output, select, textarea\n]);\n\n/**\n * An array of AUDIO tag properties and events.\n *\n * @public\n */\nexport const audioProperties = htmlElementProperties.concat([\n  'height', // canvas, embed, iframe, img, input, object, video\n  'loop', // audio, video\n  'muted', // audio, video\n  'preload', // audio, video\n  'src', // audio, embed, iframe, img, input, script, source, track, video\n  'width', // canvas, embed, iframe, img, input, object, video\n]);\n\n/**\n * An array of VIDEO tag properties and events.\n *\n * @public\n */\nexport const videoProperties = audioProperties.concat([\n  'poster', // video\n]);\n\n/**\n * An array of OL tag properties and events.\n *\n * @public\n */\nexport const olProperties = htmlElementProperties.concat([\n  'start', // ol\n]);\n\n/**\n * An array of LI tag properties and events.\n *\n * @public\n */\nexport const liProperties = htmlElementProperties.concat([\n  'value', // button, input, li, option, meter, progress, param\n]);\n\n/**\n * An array of A tag properties and events.\n *\n * @public\n */\nexport const anchorProperties = htmlElementProperties.concat([\n  'download', // a, area\n  'href', // a, area, base, link\n  'hrefLang', // a, area, link\n  'media', // a, area, link, source, style\n  'rel', // a, area, link\n  'target', // a, area, base, form\n  'type', // a, button, input, link, menu, object, script, source, style\n]);\n\n/**\n * An array of BUTTON tag properties and events.\n *\n * @public\n */\nexport const buttonProperties = htmlElementProperties.concat([\n  'autoFocus', // button, input, select, textarea\n  'disabled', // button, fieldset, input, optgroup, option, select, textarea\n  'form', // button, fieldset, input, label, meter, object, output, select, textarea\n  'formAction', // input, button\n  'formEncType', // input, button\n  'formMethod', // input, button\n  'formNoValidate', // input, button\n  'formTarget', // input, button\n  'type', // a, button, input, link, menu, object, script, source, style\n  'value', // button, input, li, option, meter, progress, param,\n]);\n\n/**\n * An array of INPUT tag properties and events.\n *\n * @public\n */\nexport const inputProperties = buttonProperties.concat([\n  'accept', // input\n  'alt', // area, img, input\n  'autoCapitalize', // input, textarea\n  'autoComplete', // form, input\n  'checked', // input\n  'dirname', // input, textarea\n  'form', // button, fieldset, input, label, meter, object, output, select, textarea\n  'height', // canvas, embed, iframe, img, input, object, video\n  'inputMode', // input\n  'list', // input\n  'max', // input, meter\n  'maxLength', // input, textarea\n  'min', // input, meter\n  'multiple', // input, select\n  'pattern', // input\n  'placeholder', // input, textarea\n  'readOnly', // input, textarea\n  'required', // input, select, textarea\n  'src', // audio, embed, iframe, img, input, script, source, track, video\n  'step', // input\n  'size', // input\n  'type', // a, button, input, link, menu, object, script, source, style\n  'value', // button, input, li, option, meter, progress, param\n  'width', // canvas, embed, iframe, img, input, object, video\n]);\n\n/**\n * An array of TEXTAREA tag properties and events.\n *\n * @public\n */\nexport const textAreaProperties = buttonProperties.concat([\n  'autoCapitalize', // input, textarea\n  'cols', // textarea\n  'dirname', // input, textarea\n  'form', // button, fieldset, input, label, meter, object, output, select, textarea\n  'maxLength', // input, textarea\n  'placeholder', // input, textarea\n  'readOnly', // input, textarea\n  'required', // input, select, textarea\n  'rows', // textarea\n  'wrap', // textarea\n]);\n\n/**\n * An array of SELECT tag properties and events.\n *\n * @public\n */\nexport const selectProperties = buttonProperties.concat([\n  'form', // button, fieldset, input, label, meter, object, output, select, textarea\n  'multiple', // input, select\n  'required', // input, select, textarea\n]);\n\nexport const optionProperties = htmlElementProperties.concat([\n  'selected', // option\n  'value', // button, input, li, option, meter, progress, param\n]);\n\n/**\n * An array of TABLE tag properties and events.\n *\n * @public\n */\nexport const tableProperties = htmlElementProperties.concat([\n  'cellPadding', // table\n  'cellSpacing', // table\n]);\n\n/**\n * An array of TR tag properties and events.\n *\n * @public\n */\nexport const trProperties = htmlElementProperties;\n\n/**\n * An array of TH tag properties and events.\n *\n * @public\n */\nexport const thProperties = htmlElementProperties.concat([\n  'rowSpan', // td, th\n  'scope', // th\n]);\n\n/**\n * An array of TD tag properties and events.\n *\n * @public\n */\nexport const tdProperties = htmlElementProperties.concat([\n  'colSpan', // td\n  'headers', // td\n  'rowSpan', // td, th\n  'scope', // th\n]);\n\nexport const colGroupProperties = htmlElementProperties.concat([\n  'span', // col, colgroup\n]);\n\nexport const colProperties = htmlElementProperties.concat([\n  'span', // col, colgroup\n]);\n\n/**\n * An array of FORM tag properties and events.\n *\n * @public\n */\nexport const formProperties = htmlElementProperties.concat([\n  'acceptCharset', // form\n  'action', // form\n  'encType', // form\n  'encType', // form\n  'method', // form\n  'noValidate', // form\n  'target', // form\n]);\n\n/**\n * An array of IFRAME tag properties and events.\n *\n * @public\n */\nexport const iframeProperties = htmlElementProperties.concat([\n  'allow', // iframe\n  'allowFullScreen', // iframe\n  'allowPaymentRequest', // iframe\n  'allowTransparency', // iframe\n  'csp', // iframe\n  'height', // canvas, embed, iframe, img, input, object, video\n  'importance', // iframe\n  'referrerPolicy', // iframe\n  'sandbox', // iframe\n  'src', // audio, embed, iframe, img, input, script, source, track, video\n  'srcDoc', // iframe\n  'width', // canvas, embed, iframe, img, input, object, video,\n]);\n\n/**\n * An array of IMAGE tag properties and events.\n *\n * @public\n */\nexport const imgProperties = htmlElementProperties.concat([\n  'alt', // area, img, input\n  'crossOrigin', // img\n  'height', // canvas, embed, iframe, img, input, object, video\n  'src', // audio, embed, iframe, img, input, script, source, track, video\n  'srcSet', // img, source\n  'useMap', // img, object,\n  'width', // canvas, embed, iframe, img, input, object, video\n]);\n\n/**\n * @deprecated Use imgProperties for img elements.\n */\nexport const imageProperties = imgProperties;\n\n/**\n * An array of DIV tag properties and events.\n *\n * @public\n */\nexport const divProperties = htmlElementProperties;\n\n/**\n * Gets native supported props for an html element provided the allowance set. Use one of the property\n * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given\n * props set. Note that all data- and aria- prefixed attributes will be allowed.\n * NOTE: getNativeProps should always be applied first when adding props to a react component. The\n * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.\n * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to\n * the component after an onClick function is added, then the getNativeProps onClick will override it.\n *\n * @public\n * @param props - The unfiltered input props\n * @param allowedPropsNames-  The array of allowed propnames.\n * @returns The filtered props\n */\nexport function getNativeProps<T>(props: {}, allowedPropNames: string[], excludedPropNames?: string[]): T {\n  // It'd be great to properly type this while allowing 'aria-` and 'data-' attributes like TypeScript does for\n  // JSX attributes, but that ability is hardcoded into the TS compiler with no analog in TypeScript typings.\n  // Then we'd be able to enforce props extends native props (including aria- and data- attributes), and then\n  // return native props.\n  // We should be able to do this once this PR is merged: https://github.com/microsoft/TypeScript/pull/26797\n  return filteredAssign(\n    (propName: string) => {\n      return (\n        (!excludedPropNames || excludedPropNames.indexOf(propName) < 0) &&\n        (propName.indexOf('data-') === 0 || propName.indexOf('aria-') === 0 || allowedPropNames.indexOf(propName) >= 0)\n      );\n    },\n    {},\n    props,\n  ) as T;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}