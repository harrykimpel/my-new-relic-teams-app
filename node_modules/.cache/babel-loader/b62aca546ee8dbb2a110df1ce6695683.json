{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { useTelemetry, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var dividerClassName = 'ui-divider';\nexport var Divider = function Divider(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Divider.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      color = props.color,\n      fitted = props.fitted,\n      size = props.size,\n      important = props.important,\n      content = props.content,\n      vertical = props.vertical,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      accessibility = props.accessibility;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        hasContent: childrenExist(children) || !!content,\n        color: color,\n        fitted: fitted,\n        size: size,\n        important: important,\n        vertical: vertical\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps)), childrenExist(children) ? children : content);\n  setEnd();\n  return element;\n};\nDivider.displayName = 'Divider';\nDivider.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  color: true\n}), {\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool\n});\nDivider.defaultProps = {\n  size: 0\n};\nDivider.handledProps = Object.keys(Divider.propTypes);\nDivider.create = createShorthandFactory({\n  Component: Divider,\n  mappedProp: 'content'\n});\n/**\n * A Divider visually segments content.\n */\n\nexport default withSafeTypeForAs(Divider);","map":{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["dividerClassName","Divider","context","React","setStart","setEnd","useTelemetry","children","color","fitted","size","important","content","vertical","className","design","styles","variables","accessibility","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","hasContent","childrenExist","mapPropsToInlineStyles","element","root","forElements","PropTypes","bool","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { WithAsProp, withSafeTypeForAs, ProviderContextPrepared, FluentComponentStaticProps } from '../../types';\nimport { useTelemetry, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\nexport const Divider: React.FC<WithAsProp<DividerProps>> & FluentComponentStaticProps<DividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    content,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"]},"metadata":{},"sourceType":"module"}