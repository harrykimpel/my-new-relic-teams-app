{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\nimport RefFindNode from './RefFindNode';\nimport RefForward from './RefForward';\nimport { refPropType } from './types';\n\nvar Ref = function Ref(props) {\n  var children = props.children,\n      innerRef = props.innerRef,\n      rest = _objectWithoutProperties(props, [\"children\", \"innerRef\"]);\n\n  var child = React.Children.only(children);\n  var ElementType = ReactIs.isForwardRef(child) ? RefForward : RefFindNode;\n  var childWithProps = child && rest && Object.keys(rest).length > 0 ? React.cloneElement(child, rest) : child;\n  return React.createElement(ElementType, {\n    innerRef: innerRef\n  }, childWithProps);\n};\n\nRef.displayName = 'Ref'; // TODO: use Babel plugin for this\n\nif (process.env.NODE_ENV !== 'production') {\n  Ref.propTypes = {\n    children: PropTypes.element.isRequired,\n    innerRef: refPropType.isRequired\n  };\n}\n\nexport default Ref;","map":{"version":3,"sources":["Ref.tsx"],"names":["Ref","children","innerRef","rest","props","child","React","ElementType","ReactIs","childWithProps","Object","process","PropTypes","refPropType","isRequired"],"mappings":";AAAA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,OAAA,MAAA,UAAA;AAEA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,SAAA,WAAA,QAAA,SAAA;;AAEA,IAAMA,GAAsC,GAAG,SAAzCA,GAAyC,CAAA,KAAA,EAAS;AAAA,MAC9CC,QAD8C,GACdG,KADc,CAAA,QAAA;AAAA,MACpCF,QADoC,GACdE,KADc,CAAA,QAAA;AAAA,MACvBD,IADuB,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,UAAA,CAAA,CAAA;;AAGtD,MAAME,KAAK,GAAGC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAd,QAAcA,CAAd;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAPA,YAAAA,CAAAA,KAAAA,IAAAA,UAAAA,GAApB,WAAA;AACA,MAAMC,cAAc,GAAGJ,KAAK,IAALA,IAAAA,IAAiBK,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAjBL,CAAAA,GAAgDC,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAAhDD,IAAgDC,CAAhDD,GAAvB,KAAA;AAEA,SAAO,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,IAAA,QAAQ,EAAEH;AAAvB,GAAA,EAAP,cAAO,CAAP;AAPF,CAAA;;AAUAF,GAAG,CAAHA,WAAAA,GAAAA,KAAAA,C,CACA;;AACA,IAAIW,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCX,EAAAA,GAAG,CAAHA,SAAAA,GAAgB;AACdC,IAAAA,QAAQ,EAAEW,SAAS,CAATA,OAAAA,CADI,UAAA;AAEdV,IAAAA,QAAQ,EAAEW,WAAW,CAACC;AAFR,GAAhBd;AAID;;AAED,eAAA,GAAA","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport RefFindNode from './RefFindNode';\nimport RefForward from './RefForward';\nimport { RefProps, refPropType } from './types';\n\nconst Ref: React.FunctionComponent<RefProps> = props => {\n  const { children, innerRef, ...rest } = props;\n\n  const child = React.Children.only(children);\n  const ElementType = ReactIs.isForwardRef(child) ? RefForward : RefFindNode;\n  const childWithProps = child && rest && Object.keys(rest).length > 0 ? React.cloneElement(child, rest) : child;\n\n  return <ElementType innerRef={innerRef}>{childWithProps}</ElementType>;\n};\n\nRef.displayName = 'Ref';\n// TODO: use Babel plugin for this\nif (process.env.NODE_ENV !== 'production') {\n  Ref.propTypes = {\n    children: PropTypes.element.isRequired,\n    innerRef: refPropType.isRequired,\n  };\n}\n\nexport default Ref;\n"]},"metadata":{},"sourceType":"module"}