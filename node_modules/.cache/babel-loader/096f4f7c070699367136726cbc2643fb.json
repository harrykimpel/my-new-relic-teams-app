{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\n\nvar isValidCssValue = function isValidCssValue(value) {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  var openingBrackets = '({[';\n  var closingBrackets = ')}]';\n  var openingBracketsStack = [];\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n\n  for (var i = 0; i < value.length; ++i) {\n    var currentCharacter = value[i];\n\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      var lastOpeningBracket = openingBracketsStack.pop();\n\n      if (lastOpeningBracket && openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nexport default (function (config) {\n  var cssPropertiesToSkip = _toConsumableArray(config && config.skip || []);\n\n  var sanitizeCssStyleObject = function sanitizeCssStyleObject(styles, type, renderer, params) {\n    if (!params.sanitizeCss) {\n      return styles;\n    }\n\n    var processedStyles = Array.isArray(styles) ? [] : {};\n    Object.keys(styles).forEach(function (cssPropertyNameOrIndex) {\n      var cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n      if (_typeof(cssPropertyValue) === 'object') {\n        processedStyles[cssPropertyNameOrIndex] = sanitizeCssStyleObject(cssPropertyValue, type, renderer, params);\n        return;\n      }\n\n      var isPropertyToSkip = cssPropertiesToSkip.some(function (propToExclude) {\n        return propToExclude === cssPropertyNameOrIndex;\n      });\n\n      if (isPropertyToSkip) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n        return;\n      }\n\n      if (isValidCssValue(cssPropertyValue)) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      } else if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\"fela-sanitize-css: An invalid value \\\"\".concat(cssPropertyValue, \"\\\" was passed to property \\\"\").concat(cssPropertyNameOrIndex, \"\\\"\"));\n      }\n    });\n    return processedStyles;\n  };\n\n  return sanitizeCssStyleObject;\n});","map":{"version":3,"sources":["utils/felaSanitizeCssPlugin.ts"],"names":["isValidCssValue","openingBrackets","closingBrackets","openingBracketsStack","i","value","currentCharacter","lastOpeningBracket","cssPropertiesToSkip","config","sanitizeCssStyleObject","params","processedStyles","Array","Object","cssPropertyValue","styles","isPropertyToSkip","propToExclude","process","console"],"mappings":";;AAIA;;;;AAGA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAgB;AACtC,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAA,IAAA;AACD;;AAED,MAAMC,eAAe,GAArB,KAAA;AACA,MAAMC,eAAe,GAArB,KAAA;AAEA,MAAMC,oBAA8B,GAApC,EAAA;AAEA;;;;;;;AAMA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkC,EAAlC,CAAA,EAAuC;AACrC,QAAMC,gBAAgB,GAAGD,KAAK,CAA9B,CAA8B,CAA9B;;AACA,QAAIJ,eAAe,CAAfA,QAAAA,CAAJ,gBAAIA,CAAJ,EAAgD;AAC9CE,MAAAA,oBAAoB,CAApBA,IAAAA,CAAAA,gBAAAA;AADF,KAAA,MAEO,IAAID,eAAe,CAAfA,QAAAA,CAAJ,gBAAIA,CAAJ,EAAgD;AACrD,UAAMK,kBAAkB,GAAGJ,oBAAoB,CAA/C,GAA2BA,EAA3B;;AACA,UACEI,kBAAkB,IAClBN,eAAe,CAAfA,OAAAA,CAAAA,kBAAAA,MAAgDC,eAAe,CAAfA,OAAAA,CAFlD,gBAEkDA,CAFlD,EAGE;AACA,eAAA,KAAA;AACD;AACF;AACF;;AAED,SAAOC,oBAAoB,CAApBA,MAAAA,KAAP,CAAA;AA/BF,CAAA;;AAkCA,gBAAe,UAAA,MAAA,EAAkC;AAC/C,MAAMK,mBAAmB,GAAA,kBAAA,CAASC,MAAM,IAAIA,MAAM,CAAjB,IAACA,IAAlC,EAAyB,CAAzB;;AAEA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA,MAAA,EAK1B;AACH,QAAI,CAACC,MAAM,CAAX,WAAA,EAAyB;AACvB,aAAA,MAAA;AACD;;AAED,QAAMC,eAAe,GAAGC,KAAK,CAALA,OAAAA,CAAAA,MAAAA,IAAAA,EAAAA,GAAxB,EAAA;AAEAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,sBAAA,EAA0B;AACpD,UAAMC,gBAAgB,GAAGC,MAAM,CAA/B,sBAA+B,CAA/B;;AAEA,UAAI,OAAA,CAAA,gBAAA,CAAA,KAAJ,QAAA,EAA0C;AACxCJ,QAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAA0CF,sBAAsB,CAAA,gBAAA,EAAA,IAAA,EAAA,QAAA,EAAhEE,MAAgE,CAAhEA;AACA;AACD;;AAED,UAAMK,gBAAgB,GAAG,mBAAmB,CAAnB,IAAA,CAAyB,UAAA,aAAA,EAAa;AAAA,eAAIC,aAAa,KAAjB,sBAAA;AAA/D,OAAyB,CAAzB;;AAEA,UAAA,gBAAA,EAAsB;AACpBN,QAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAAAA,gBAAAA;AACA;AACD;;AAED,UAAIZ,eAAe,CAAnB,gBAAmB,CAAnB,EAAuC;AACrCY,QAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAAAA,gBAAAA;AADF,OAAA,MAEO,IAAIO,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAChD;AACAC,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,yCAAAA,MAAAA,CAAAA,gBAAAA,EAAAA,8BAAAA,EAAAA,MAAAA,CAAAA,sBAAAA,EAAAA,IAAAA,CAAAA;AAGD;AAtBHN,KAAAA;AAyBA,WAAA,eAAA;AArCF,GAAA;;AAwCA,SAAA,sBAAA;AA3CF,CAAA","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport { Renderer, RendererParam } from '@fluentui/react-bindings';\nimport { TRuleType } from 'fela-utils';\n\n/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\nconst isValidCssValue = (value: any) => {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  const openingBrackets = '({[';\n  const closingBrackets = ')}]';\n\n  const openingBracketsStack: string[] = [];\n\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n  for (let i = 0; i < value.length; ++i) {\n    const currentCharacter = value[i];\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      const lastOpeningBracket = openingBracketsStack.pop();\n      if (\n        lastOpeningBracket &&\n        openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nexport default (config?: { skip?: string[] }) => {\n  const cssPropertiesToSkip = [...((config && config.skip) || [])];\n\n  const sanitizeCssStyleObject = (\n    styles: ICSSInJSStyle,\n    type: TRuleType,\n    renderer: Renderer,\n    params: RendererParam,\n  ) => {\n    if (!params.sanitizeCss) {\n      return styles;\n    }\n\n    const processedStyles = Array.isArray(styles) ? [] : {};\n\n    Object.keys(styles).forEach(cssPropertyNameOrIndex => {\n      const cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n      if (typeof cssPropertyValue === 'object') {\n        processedStyles[cssPropertyNameOrIndex] = sanitizeCssStyleObject(cssPropertyValue, type, renderer, params);\n        return;\n      }\n\n      const isPropertyToSkip = cssPropertiesToSkip.some(propToExclude => propToExclude === cssPropertyNameOrIndex);\n\n      if (isPropertyToSkip) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n        return;\n      }\n\n      if (isValidCssValue(cssPropertyValue)) {\n        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      } else if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `fela-sanitize-css: An invalid value \"${cssPropertyValue}\" was passed to property \"${cssPropertyNameOrIndex}\"`,\n        );\n      }\n    });\n\n    return processedStyles;\n  };\n\n  return sanitizeCssStyleObject;\n};\n"]},"metadata":{},"sourceType":"module"}