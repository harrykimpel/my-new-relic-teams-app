{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport { splitButtonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { withSafeTypeForAs } from '../../types';\nimport { isFromKeyboard as checkIsFromKeyboard, commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';\nimport SplitButtonToggle from './SplitButtonToggle';\nimport Button from '../Button/Button';\nimport MenuButton from '../MenuButton/MenuButton';\nimport { Ref } from '@fluentui/react-component-ref'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { useTelemetry, useAutoControlled, useAccessibility, getElementType, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var splitButtonClassName = 'ui-splitbutton';\nexport var SplitButton = function SplitButton(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(SplitButton.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var button = props.button,\n      disabled = props.disabled,\n      menu = props.menu,\n      primary = props.primary,\n      secondary = props.secondary,\n      toggleButton = props.toggleButton,\n      size = props.size,\n      position = props.position,\n      align = props.align,\n      flipBoundary = props.flipBoundary,\n      overflowBoundary = props.overflowBoundary,\n      positionFixed = props.positionFixed,\n      offset = props.offset,\n      unstable_pinned = props.unstable_pinned,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      accessibility = props.accessibility,\n      variables = props.variables;\n  var targetRef = React.useRef();\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(SplitButton.handledProps, props);\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      open = _useAutoControlled2[0],\n      setOpen = _useAutoControlled2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFromKeyboard = _React$useState2[0],\n      setIsFromKeyboard = _React$useState2[1];\n\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: SplitButton.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        open: open\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(SplitButton.displayName, {\n    className: splitButtonClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        isFromKeyboard: isFromKeyboard,\n        size: size\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleMenuButtonOverrides = function handleMenuButtonOverrides(predefinedProps) {\n    return {\n      onMenuItemClick: function onMenuItemClick(e, menuItemProps) {\n        setOpen(false);\n\n        _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n          open: false\n        }));\n\n        _invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n\n        _invoke(props, 'onMenuItemClick', e, menuItemProps);\n      },\n      onOpenChange: function onOpenChange(e, popupProps) {\n        e.stopPropagation();\n        setOpen(popupProps.open);\n\n        _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n          open: popupProps.open\n        }));\n      }\n    };\n  };\n\n  var handleMenuButtonTriggerOverrides = function handleMenuButtonTriggerOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, buttonProps) {\n        _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n        _invoke(props, 'onMainButtonClick', e, buttonProps);\n      },\n      onFocus: function onFocus(e, buttonProps) {\n        _invoke(predefinedProps, 'onFocus', e, buttonProps);\n\n        setIsFromKeyboard(checkIsFromKeyboard());\n      }\n    };\n  };\n\n  var element = React.createElement(Ref, {\n    innerRef: targetRef\n  }, React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), MenuButton.create({}, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('menuButton', {\n        menu: menu,\n        on: [],\n        open: open,\n        trigger: createShorthand(Button, button, {\n          defaultProps: function defaultProps() {\n            return {\n              styles: resolvedStyles.menuButton,\n              primary: primary,\n              secondary: secondary,\n              disabled: disabled\n            };\n          },\n          overrideProps: handleMenuButtonTriggerOverrides\n        }),\n        target: targetRef.current,\n        position: position,\n        align: align,\n        flipBoundary: flipBoundary,\n        overflowBoundary: overflowBoundary,\n        positionFixed: positionFixed,\n        offset: offset,\n        unstable_pinned: unstable_pinned\n      });\n    },\n    overrideProps: handleMenuButtonOverrides\n  }), SplitButtonToggle.create(toggleButton, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('toggleButton', {\n        disabled: disabled,\n        primary: primary,\n        secondary: secondary,\n        size: size\n      });\n    },\n    overrideProps: function overrideProps(predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          setOpen(function (isOpen) {\n            var open = !isOpen;\n\n            _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n              open: open\n            }));\n\n            return open;\n          });\n        }\n      };\n    }\n  })));\n  setEnd();\n  return element;\n};\nSplitButton.displayName = 'SplitButton';\nSplitButton.Toggle = SplitButtonToggle;\nSplitButton.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  button: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),\n  onMainButtonClick: PropTypes.func,\n  onMenuItemClick: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  open: PropTypes.bool,\n  size: customPropTypes.size,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  toggleButton: customPropTypes.itemShorthand,\n  position: PropTypes.oneOf(POSITIONS),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n  unstable_pinned: PropTypes.bool\n});\nSplitButton.defaultProps = {\n  accessibility: splitButtonBehavior,\n  toggleButton: {},\n  position: 'below',\n  align: 'start'\n};\nSplitButton.handledProps = Object.keys(SplitButton.propTypes);\nSplitButton.create = createShorthandFactory({\n  Component: SplitButton\n});\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\n\nexport default withSafeTypeForAs(SplitButton);","map":{"version":3,"sources":["components/SplitButton/SplitButton.tsx"],"names":["isFromKeyboard","splitButtonClassName","SplitButton","context","React","setStart","setEnd","useTelemetry","button","disabled","menu","primary","secondary","toggleButton","size","position","align","flipBoundary","overflowBoundary","positionFixed","offset","unstable_pinned","className","design","styles","accessibility","variables","props","targetRef","ElementType","getElementType","unhandledProps","useUnhandledProps","open","setOpen","useAutoControlled","defaultValue","value","initialValue","setIsFromKeyboard","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleMenuButtonOverrides","onMenuItemClick","onOpenChange","e","popupProps","handleMenuButtonTriggerOverrides","onClick","onFocus","checkIsFromKeyboard","element","root","defaultProps","on","trigger","createShorthand","overrideProps","target","content","customPropTypes","defaultOpen","PropTypes","onMainButtonClick","bool","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, splitButtonBehavior, SplitButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ComponentEventHandler,\n  ShorthandValue,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  isFromKeyboard as checkIsFromKeyboard,\n  commonPropTypes,\n  SizeValue,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport SplitButtonToggle, { SplitButtonToggleProps } from './SplitButtonToggle';\nimport Button, { ButtonProps } from '../Button/Button';\nimport MenuButton, { MenuButtonProps } from '../MenuButton/MenuButton';\nimport { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PopupProps } from '../Popup/Popup';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { PositioningProps } from '../../utils/positioner/types';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  useTelemetry,\n  useAutoControlled,\n  useAccessibility,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<SplitButtonBehaviorProps>;\n\n  /** Shorthand for the main button. */\n  button?: ShorthandValue<ButtonProps>;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** A split button can be disabled. */\n  disabled?: boolean;\n\n  /** Shorthand for the menu. */\n  menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;\n\n  /**\n   * Called after user's click on the main button.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMainButtonClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after user's click on a menu item.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMenuItemClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<SplitButtonProps>;\n\n  /** Defines whether menu is displayed. */\n  open?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  secondary?: boolean;\n\n  /** A split button can be sized */\n  size?: SizeValue;\n\n  /** Shorthand for the toggle button. */\n  toggleButton?: ShorthandValue<SplitButtonToggleProps>;\n}\n\nexport const splitButtonClassName = 'ui-splitbutton';\n\nexport type SplitButtonStylesProps = Required<Pick<SplitButtonProps, 'size'>> & { isFromKeyboard: boolean };\n\nexport const SplitButton: React.FC<WithAsProp<SplitButtonProps>> &\n  FluentComponentStaticProps<SplitButtonProps> & {\n    Toggle: typeof SplitButtonToggle;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(SplitButton.displayName, context.telemetry);\n  setStart();\n\n  const {\n    button,\n    disabled,\n    menu,\n    primary,\n    secondary,\n    toggleButton,\n    size,\n    position,\n    align,\n    flipBoundary,\n    overflowBoundary,\n    positionFixed,\n    offset,\n    unstable_pinned,\n    className,\n    design,\n    styles,\n    accessibility,\n    variables,\n  } = props;\n\n  const targetRef = React.useRef<HTMLDivElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(SplitButton.handledProps, props);\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false,\n  });\n\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState<boolean>(false);\n\n  const getA11yProps = useAccessibility<SplitButtonBehaviorProps>(accessibility, {\n    debugName: SplitButton.displayName,\n    mapPropsToBehavior: () => ({\n      open,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<SplitButtonStylesProps>(SplitButton.displayName, {\n    className: splitButtonClassName,\n    mapPropsToStyles: () => ({\n      isFromKeyboard,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleMenuButtonOverrides = (predefinedProps: MenuButtonProps) => ({\n    onMenuItemClick: (e: React.SyntheticEvent, menuItemProps: MenuItemProps) => {\n      setOpen(false);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: false });\n\n      _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n      _.invoke(props, 'onMenuItemClick', e, menuItemProps);\n    },\n    onOpenChange: (e: React.SyntheticEvent, popupProps: PopupProps) => {\n      e.stopPropagation();\n      setOpen(popupProps.open);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: popupProps.open });\n    },\n  });\n\n  const handleMenuButtonTriggerOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(props, 'onMainButtonClick', e, buttonProps);\n    },\n    onFocus: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, buttonProps);\n      setIsFromKeyboard(checkIsFromKeyboard());\n    },\n  });\n\n  const element = (\n    <Ref innerRef={targetRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      >\n        {MenuButton.create(\n          {},\n          {\n            defaultProps: () =>\n              getA11yProps('menuButton', {\n                menu,\n                on: [],\n                open,\n                trigger: createShorthand(Button, button, {\n                  defaultProps: () => ({\n                    styles: resolvedStyles.menuButton,\n                    primary,\n                    secondary,\n                    disabled,\n                  }),\n                  overrideProps: handleMenuButtonTriggerOverrides,\n                }),\n                target: targetRef.current,\n                position,\n                align,\n                flipBoundary,\n                overflowBoundary,\n                positionFixed,\n                offset,\n                unstable_pinned,\n              }),\n            overrideProps: handleMenuButtonOverrides,\n          },\n        )}\n\n        {SplitButtonToggle.create(toggleButton, {\n          defaultProps: () =>\n            getA11yProps('toggleButton', {\n              disabled,\n              primary,\n              secondary,\n              size,\n            }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n              _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n              setOpen(isOpen => {\n                const open = !isOpen;\n                _.invoke(props, 'onOpenChange', e, { ...props, open });\n                return open;\n              });\n            },\n          }),\n        })}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n};\n\nSplitButton.displayName = 'SplitButton';\n\nSplitButton.Toggle = SplitButtonToggle;\n\nSplitButton.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  button: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  menu: PropTypes.oneOfType([\n    customPropTypes.itemShorthand,\n    PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),\n  ]),\n  onMainButtonClick: PropTypes.func,\n  onMenuItemClick: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  open: PropTypes.bool,\n  size: customPropTypes.size,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  toggleButton: customPropTypes.itemShorthand,\n  position: PropTypes.oneOf(POSITIONS),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_pinned: PropTypes.bool,\n};\n\nSplitButton.defaultProps = {\n  accessibility: splitButtonBehavior,\n  toggleButton: {},\n  position: 'below',\n  align: 'start',\n};\n\nSplitButton.handledProps = Object.keys(SplitButton.propTypes) as any;\n\nSplitButton.create = createShorthandFactory({\n  Component: SplitButton,\n});\n\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\nexport default withSafeTypeForAs<typeof SplitButton, SplitButtonProps>(SplitButton);\n"]},"metadata":{},"sourceType":"module"}