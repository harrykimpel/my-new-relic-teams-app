{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { dialogBehavior } from '@fluentui/accessibility';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as keyboardKey from 'keyboard-key';\nimport { disableBodyScroll, enableBodyScroll } from './utils';\nimport { commonPropTypes, AutoControlledComponent, doesNodeContainClick, applyAccessibilityKeyHandlers, getOrGenerateIdFromShorthand, createShorthand } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Button from '../Button/Button';\nimport ButtonGroup from '../Button/ButtonGroup';\nimport Box from '../Box/Box';\nimport Header from '../Header/Header';\nimport Portal from '../Portal/Portal';\nimport Flex from '../Flex/Flex';\nimport DialogFooter from './DialogFooter';\nvar dialogsCounterAttribute = 'fluent-dialogs-count';\nexport var dialogClassName = 'ui-dialog';\nexport var dialogSlotClassNames = {\n  header: \"\".concat(dialogClassName, \"__header\"),\n  headerAction: \"\".concat(dialogClassName, \"__headerAction\"),\n  content: \"\".concat(dialogClassName, \"__content\"),\n  overlay: \"\".concat(dialogClassName, \"__overlay\"),\n  footer: \"\".concat(dialogClassName, \"__footer\")\n};\n\nvar Dialog = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Dialog, _AutoControlledCompon);\n\n  function Dialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      closeAndFocusTrigger: function closeAndFocusTrigger(e) {\n        _this.handleDialogCancel(e);\n\n        e.stopPropagation();\n\n        _invoke(_this.triggerRef, 'current.focus');\n      },\n      close: function close(e) {\n        return _this.handleDialogCancel(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"overlayRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDialogCancel\", function (e) {\n      _invoke(_this.props, 'onCancel', e, Object.assign({}, _this.props, {\n        open: false\n      }));\n\n      _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDialogConfirm\", function (e) {\n      _invoke(_this.props, 'onConfirm', e, Object.assign({}, _this.props, {\n        open: false\n      }));\n\n      _this.setState({\n        open: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDialogOpen\", function (e) {\n      _invoke(_this.props, 'onOpen', e, Object.assign({}, _this.props, {\n        open: true\n      }));\n\n      _this.setState({\n        open: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCancelButtonOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          _this.handleDialogCancel(e);\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleConfirmButtonOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          _this.handleDialogConfirm(e);\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOverlayClick\", function (e) {\n      // Dialog has different conditions to close than Popup, so we don't need to iterate across all\n      // refs\n      var isInsideContentClick = doesNodeContainClick(_this.contentRef.current, e, _this.context.target);\n      var isInsideOverlayClick = doesNodeContainClick(_this.overlayRef.current, e, _this.context.target);\n      var shouldClose = !isInsideContentClick && isInsideOverlayClick;\n\n      if (shouldClose) {\n        _this.handleDialogCancel(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentKeydown\", function (getRefs) {\n      return function (e) {\n        // if focus was lost from Dialog, for e.g. when click on Dialog's content\n        // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus\n        var lastOverlayRef = getRefs().pop();\n        var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === _this.overlayRef.current;\n\n        if (keyboardKey.getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {\n          _this.handleDialogCancel(e);\n\n          _invoke(_this.triggerRef, 'current.focus');\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        open: false\n      };\n    }\n  }, {\n    key: \"lockBodyScroll\",\n    value: function lockBodyScroll() {\n      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;\n      this.context.target.body.setAttribute(dialogsCounterAttribute, \"\".concat(openDialogs)); // Avoid to block scroll in nested dialogs\n\n      if (openDialogs === 1) {\n        disableBodyScroll(this.context.target.body);\n      }\n    }\n  }, {\n    key: \"unlockBodyScroll\",\n    value: function unlockBodyScroll() {\n      var openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;\n      this.context.target.body.setAttribute(dialogsCounterAttribute, \"\".concat(openDialogs)); // Only enables scroll if all dialogs are closed\n\n      if (openDialogs === 0) {\n        enableBodyScroll(this.context.target.body);\n        this.context.target.body.removeAttribute(dialogsCounterAttribute);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      // Open -> Closed\n      if (prevState.open && !this.state.open) {\n        this.unlockBodyScroll();\n      } // Closed -> Open\n\n\n      if (!prevState.open && this.state.open) {\n        this.lockBodyScroll();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.state.open) {\n        this.lockBodyScroll();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.open) {\n        this.unlockBodyScroll();\n      }\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var accessibility = _ref.accessibility,\n          classes = _ref.classes,\n          ElementType = _ref.ElementType,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps,\n          rtl = _ref.rtl;\n      var _this$props = this.props,\n          actions = _this$props.actions,\n          cancelButton = _this$props.cancelButton,\n          closeOnOutsideClick = _this$props.closeOnOutsideClick,\n          confirmButton = _this$props.confirmButton,\n          content = _this$props.content,\n          header = _this$props.header,\n          headerAction = _this$props.headerAction,\n          overlay = _this$props.overlay,\n          trapFocus = _this$props.trapFocus,\n          trigger = _this$props.trigger,\n          footer = _this$props.footer;\n      var open = this.state.open;\n      var cancelElement = createShorthand(Button, cancelButton, {\n        overrideProps: this.handleCancelButtonOverrides\n      });\n      var confirmElement = createShorthand(Button, confirmButton, {\n        defaultProps: function defaultProps() {\n          return {\n            primary: true\n          };\n        },\n        overrideProps: this.handleConfirmButtonOverrides\n      });\n      var dialogActions = (cancelElement || confirmElement) && ButtonGroup.create(actions, {\n        defaultProps: function defaultProps() {\n          return {\n            styles: styles.actions\n          };\n        },\n        overrideProps: {\n          content: React.createElement(Flex, {\n            gap: \"gap.smaller\"\n          }, cancelElement, confirmElement)\n        }\n      });\n      var dialogContent = React.createElement(Ref, {\n        innerRef: this.contentRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.popup, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.popup, unhandledProps)), Header.create(header, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            as: 'h2',\n            className: dialogSlotClassNames.header,\n            styles: styles.header\n          }, accessibility.attributes.header);\n        }\n      }), createShorthand(Button, headerAction, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dialogSlotClassNames.headerAction,\n            styles: styles.headerAction,\n            text: true,\n            iconOnly: true\n          }, accessibility.attributes.headerAction);\n        }\n      }), Box.create(content, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            styles: styles.content,\n            className: dialogSlotClassNames.content\n          }, accessibility.attributes.content);\n        }\n      }), DialogFooter.create(footer, {\n        overrideProps: {\n          content: dialogActions,\n          className: dialogSlotClassNames.footer,\n          styles: styles.footer\n        }\n      })));\n      var triggerAccessibility = {\n        attributes: accessibility.attributes.trigger,\n        keyHandlers: accessibility.keyHandlers.trigger\n      };\n      return React.createElement(Portal, {\n        onTriggerClick: this.handleDialogOpen,\n        open: open,\n        trapFocus: trapFocus,\n        trigger: trigger,\n        triggerAccessibility: triggerAccessibility,\n        triggerRef: this.triggerRef\n      }, React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n        return React.createElement(React.Fragment, null, React.createElement(Ref, {\n          innerRef: function innerRef(contentNode) {\n            _this2.overlayRef.current = contentNode;\n            nestingRef.current = contentNode;\n          }\n        }, Box.create(overlay, {\n          defaultProps: function defaultProps() {\n            return {\n              className: dialogSlotClassNames.overlay,\n              styles: styles.overlay\n            };\n          },\n          overrideProps: {\n            content: dialogContent\n          }\n        })), closeOnOutsideClick && React.createElement(EventListener, {\n          listener: _this2.handleOverlayClick,\n          target: _this2.context.target,\n          type: \"click\",\n          capture: true\n        }), React.createElement(EventListener, {\n          listener: _this2.handleDocumentKeydown(getRefs),\n          target: _this2.context.target,\n          type: \"keydown\",\n          capture: true\n        }));\n      }));\n    }\n  }], [{\n    key: \"getAutoControlledStateFromProps\",\n    value: function getAutoControlledStateFromProps(props, state) {\n      return {\n        contentId: getOrGenerateIdFromShorthand('dialog-content-', props.content, state.contentId),\n        headerId: getOrGenerateIdFromShorthand('dialog-header-', props.header, state.headerId)\n      };\n    }\n  }]);\n\n  return Dialog;\n}(AutoControlledComponent);\n/**\n * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n *\n * @accessibility\n * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.\n * @accessibilityIssues\n * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)\n * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)\n * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)\n * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)\n */\n\n\n_defineProperty(Dialog, \"displayName\", 'Dialog');\n\n_defineProperty(Dialog, \"deprecated_className\", dialogClassName);\n\n_defineProperty(Dialog, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: 'shorthand'\n}), {\n  actions: customPropTypes.itemShorthand,\n  backdrop: PropTypes.bool,\n  headerAction: customPropTypes.itemShorthand,\n  cancelButton: customPropTypes.itemShorthand,\n  closeOnOutsideClick: PropTypes.bool,\n  confirmButton: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  onCancel: PropTypes.func,\n  onConfirm: PropTypes.func,\n  onOpen: PropTypes.func,\n  open: PropTypes.bool,\n  overlay: customPropTypes.itemShorthand,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  trigger: PropTypes.any\n}));\n\n_defineProperty(Dialog, \"defaultProps\", {\n  accessibility: dialogBehavior,\n  actions: {},\n  backdrop: true,\n  closeOnOutsideClick: true,\n  overlay: {},\n  footer: {},\n  trapFocus: true\n});\n\n_defineProperty(Dialog, \"autoControlledProps\", ['open']);\n\n_defineProperty(Dialog, \"Footer\", DialogFooter);\n\nexport default withSafeTypeForAs(Dialog);","map":{"version":3,"sources":["components/Dialog/Dialog.tsx"],"names":["dialogsCounterAttribute","dialogClassName","dialogSlotClassNames","header","headerAction","content","overlay","footer","Dialog","AutoControlledComponent","children","actions","customPropTypes","itemShorthand","backdrop","PropTypes","bool","cancelButton","closeOnOutsideClick","confirmButton","defaultOpen","onCancel","func","onConfirm","onOpen","open","trapFocus","trigger","any","accessibility","DialogFooter","closeAndFocusTrigger","e","close","React","props","state","contentId","getOrGenerateIdFromShorthand","headerId","onClick","isInsideContentClick","doesNodeContainClick","isInsideOverlayClick","shouldClose","lastOverlayRef","getRefs","isLastOpenedDialog","keyboardKey","openDialogs","disableBodyScroll","enableBodyScroll","_","prevState","classes","ElementType","styles","unhandledProps","rtl","cancelElement","createShorthand","overrideProps","handleCancelButtonOverrides","confirmElement","defaultProps","primary","handleConfirmButtonOverrides","dialogActions","dialogContent","contentRef","root","applyAccessibilityKeyHandlers","as","className","text","iconOnly","triggerAccessibility","attributes","keyHandlers","triggerRef","nestingRef","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, dialogBehavior } from '@fluentui/accessibility';\nimport { FocusTrapZoneProps } from '@fluentui/react-bindings';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as keyboardKey from 'keyboard-key';\nimport { disableBodyScroll, enableBodyScroll } from './utils';\n\nimport {\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  AutoControlledComponent,\n  doesNodeContainClick,\n  applyAccessibilityKeyHandlers,\n  getOrGenerateIdFromShorthand,\n  createShorthand,\n} from '../../utils';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Button, { ButtonProps } from '../Button/Button';\nimport ButtonGroup from '../Button/ButtonGroup';\nimport Box, { BoxProps } from '../Box/Box';\nimport Header, { HeaderProps } from '../Header/Header';\nimport Portal, { TriggerAccessibility } from '../Portal/Portal';\nimport Flex from '../Flex/Flex';\nimport DialogFooter, { DialogFooterProps } from './DialogFooter';\n\nexport interface DialogSlotClassNames {\n  header: string;\n  headerAction: string;\n  content: string;\n  overlay: string;\n  footer: string;\n}\n\nexport interface DialogProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** A dialog can contain actions. */\n  actions?: ShorthandValue<BoxProps>;\n\n  /** A dialog can have a backdrop on its overlay. */\n  backdrop?: boolean;\n\n  /** A dialog can contain a cancel button. */\n  cancelButton?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can be closed when a user clicks outside of it. */\n  closeOnOutsideClick?: boolean;\n\n  /** A dialog can contain a confirm button. */\n  confirmButton?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can be open by default. */\n  defaultOpen?: boolean;\n\n  /** A dialog can contain a header. */\n  header?: ShorthandValue<HeaderProps>;\n\n  /** A dialog can contain a button next to the header. */\n  headerAction?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can contain a footer. */\n  footer?: ShorthandValue<DialogFooterProps>;\n\n  /**\n   * Called after a user clicks the cancel button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onCancel?: ComponentEventHandler<DialogProps>;\n\n  /**\n   * Called after a user clicks the confirm button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onConfirm?: ComponentEventHandler<DialogProps>;\n\n  /**\n   * Called after a user opens the dialog.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onOpen?: ComponentEventHandler<DialogProps>;\n\n  /** A dialog's open state can be controlled. */\n  open?: boolean;\n\n  /** A dialog can contain a overlay. */\n  overlay?: ShorthandValue<BoxProps>;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value. */\n  trapFocus?: true | FocusTrapZoneProps;\n\n  /** Element to be rendered in-place where the dialog is defined. */\n  trigger?: JSX.Element;\n}\n\nexport interface DialogState {\n  contentId?: string;\n  headerId?: string;\n  open?: boolean;\n}\nconst dialogsCounterAttribute = 'fluent-dialogs-count';\nexport const dialogClassName = 'ui-dialog';\nexport const dialogSlotClassNames: DialogSlotClassNames = {\n  header: `${dialogClassName}__header`,\n  headerAction: `${dialogClassName}__headerAction`,\n  content: `${dialogClassName}__content`,\n  overlay: `${dialogClassName}__overlay`,\n  footer: `${dialogClassName}__footer`,\n};\n\nclass Dialog extends AutoControlledComponent<WithAsProp<DialogProps>, DialogState> {\n  static displayName = 'Dialog';\n  static deprecated_className = dialogClassName;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: 'shorthand',\n    }),\n    actions: customPropTypes.itemShorthand,\n    backdrop: PropTypes.bool,\n    headerAction: customPropTypes.itemShorthand,\n    cancelButton: customPropTypes.itemShorthand,\n    closeOnOutsideClick: PropTypes.bool,\n    confirmButton: customPropTypes.itemShorthand,\n    defaultOpen: PropTypes.bool,\n    header: customPropTypes.itemShorthand,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func,\n    onOpen: PropTypes.func,\n    open: PropTypes.bool,\n    overlay: customPropTypes.itemShorthand,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    trigger: PropTypes.any,\n  };\n\n  static defaultProps = {\n    accessibility: dialogBehavior as Accessibility,\n    actions: {},\n    backdrop: true,\n    closeOnOutsideClick: true,\n    overlay: {},\n    footer: {},\n    trapFocus: true,\n  };\n\n  static autoControlledProps = ['open'];\n  static Footer = DialogFooter;\n\n  actionHandlers = {\n    closeAndFocusTrigger: e => {\n      this.handleDialogCancel(e);\n      e.stopPropagation();\n\n      _.invoke(this.triggerRef, 'current.focus');\n    },\n    close: e => this.handleDialogCancel(e),\n  };\n  contentRef = React.createRef<HTMLElement>() as React.MutableRefObject<HTMLElement>;\n  overlayRef = React.createRef<HTMLElement>() as React.MutableRefObject<HTMLElement>;\n  triggerRef = React.createRef<HTMLElement>();\n\n  getInitialAutoControlledState(): DialogState {\n    return {\n      open: false,\n    };\n  }\n\n  static getAutoControlledStateFromProps(props: DialogProps, state: DialogState): Partial<DialogState> {\n    return {\n      contentId: getOrGenerateIdFromShorthand('dialog-content-', props.content, state.contentId),\n      headerId: getOrGenerateIdFromShorthand('dialog-header-', props.header, state.headerId),\n    };\n  }\n\n  handleDialogCancel = (e: Event | React.SyntheticEvent) => {\n    _.invoke(this.props, 'onCancel', e, { ...this.props, open: false });\n    this.setState({ open: false });\n  };\n\n  handleDialogConfirm = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onConfirm', e, { ...this.props, open: false });\n    this.setState({ open: false });\n  };\n\n  handleDialogOpen = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onOpen', e, { ...this.props, open: true });\n    this.setState({ open: true });\n  };\n\n  handleCancelButtonOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      this.handleDialogCancel(e);\n    },\n  });\n\n  handleConfirmButtonOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      this.handleDialogConfirm(e);\n    },\n  });\n\n  handleOverlayClick = (e: MouseEvent) => {\n    // Dialog has different conditions to close than Popup, so we don't need to iterate across all\n    // refs\n    const isInsideContentClick = doesNodeContainClick(this.contentRef.current, e, this.context.target);\n    const isInsideOverlayClick = doesNodeContainClick(this.overlayRef.current, e, this.context.target);\n\n    const shouldClose = !isInsideContentClick && isInsideOverlayClick;\n\n    if (shouldClose) {\n      this.handleDialogCancel(e);\n    }\n  };\n\n  handleDocumentKeydown = (getRefs: Function) => (e: KeyboardEvent) => {\n    // if focus was lost from Dialog, for e.g. when click on Dialog's content\n    // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus\n    const lastOverlayRef = getRefs().pop();\n    const isLastOpenedDialog: boolean = lastOverlayRef && lastOverlayRef.current === this.overlayRef.current;\n\n    if (keyboardKey.getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {\n      this.handleDialogCancel(e);\n      _.invoke(this.triggerRef, 'current.focus');\n    }\n  };\n\n  lockBodyScroll() {\n    const openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) + 1;\n    this.context.target.body.setAttribute(dialogsCounterAttribute, `${openDialogs}`);\n\n    // Avoid to block scroll in nested dialogs\n    if (openDialogs === 1) {\n      disableBodyScroll(this.context.target.body);\n    }\n  }\n\n  unlockBodyScroll() {\n    const openDialogs = (+this.context.target.body.getAttribute(dialogsCounterAttribute) || 0) - 1;\n    this.context.target.body.setAttribute(dialogsCounterAttribute, `${openDialogs}`);\n\n    // Only enables scroll if all dialogs are closed\n    if (openDialogs === 0) {\n      enableBodyScroll(this.context.target.body);\n      this.context.target.body.removeAttribute(dialogsCounterAttribute);\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    // Open -> Closed\n    if (prevState.open && !this.state.open) {\n      this.unlockBodyScroll();\n    }\n    // Closed -> Open\n    if (!prevState.open && this.state.open) {\n      this.lockBodyScroll();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.open) {\n      this.lockBodyScroll();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.open) {\n      this.unlockBodyScroll();\n    }\n  }\n\n  renderComponent({ accessibility, classes, ElementType, styles, unhandledProps, rtl }) {\n    const {\n      actions,\n      cancelButton,\n      closeOnOutsideClick,\n      confirmButton,\n      content,\n      header,\n      headerAction,\n      overlay,\n      trapFocus,\n      trigger,\n      footer,\n    } = this.props;\n    const { open } = this.state;\n\n    const cancelElement = createShorthand(Button, cancelButton, {\n      overrideProps: this.handleCancelButtonOverrides,\n    });\n\n    const confirmElement = createShorthand(Button, confirmButton, {\n      defaultProps: () => ({\n        primary: true,\n      }),\n      overrideProps: this.handleConfirmButtonOverrides,\n    });\n\n    const dialogActions =\n      (cancelElement || confirmElement) &&\n      ButtonGroup.create(actions, {\n        defaultProps: () => ({\n          styles: styles.actions,\n        }),\n        overrideProps: {\n          content: (\n            <Flex gap=\"gap.smaller\">\n              {cancelElement}\n              {confirmElement}\n            </Flex>\n          ),\n        },\n      });\n\n    const dialogContent = (\n      <Ref innerRef={this.contentRef}>\n        <ElementType\n          className={classes.root}\n          {...accessibility.attributes.popup}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.popup, unhandledProps)}\n        >\n          {Header.create(header, {\n            defaultProps: () => ({\n              as: 'h2',\n              className: dialogSlotClassNames.header,\n              styles: styles.header,\n              ...accessibility.attributes.header,\n            }),\n          })}\n          {createShorthand(Button, headerAction, {\n            defaultProps: () => ({\n              className: dialogSlotClassNames.headerAction,\n              styles: styles.headerAction,\n              text: true,\n              iconOnly: true,\n              ...accessibility.attributes.headerAction,\n            }),\n          })}\n          {Box.create(content, {\n            defaultProps: () => ({\n              styles: styles.content,\n              className: dialogSlotClassNames.content,\n              ...accessibility.attributes.content,\n            }),\n          })}\n          {DialogFooter.create(footer, {\n            overrideProps: {\n              content: dialogActions,\n              className: dialogSlotClassNames.footer,\n              styles: styles.footer,\n            },\n          })}\n        </ElementType>\n      </Ref>\n    );\n\n    const triggerAccessibility: TriggerAccessibility = {\n      attributes: accessibility.attributes.trigger,\n      keyHandlers: accessibility.keyHandlers.trigger,\n    };\n\n    return (\n      <Portal\n        onTriggerClick={this.handleDialogOpen}\n        open={open}\n        trapFocus={trapFocus}\n        trigger={trigger}\n        triggerAccessibility={triggerAccessibility}\n        triggerRef={this.triggerRef}\n      >\n        <Unstable_NestingAuto>\n          {(getRefs, nestingRef) => (\n            <>\n              <Ref\n                innerRef={(contentNode: HTMLElement) => {\n                  this.overlayRef.current = contentNode;\n                  nestingRef.current = contentNode;\n                }}\n              >\n                {Box.create(overlay, {\n                  defaultProps: () => ({\n                    className: dialogSlotClassNames.overlay,\n                    styles: styles.overlay,\n                  }),\n                  overrideProps: { content: dialogContent },\n                })}\n              </Ref>\n\n              {closeOnOutsideClick && (\n                <EventListener listener={this.handleOverlayClick} target={this.context.target} type=\"click\" capture />\n              )}\n              <EventListener\n                listener={this.handleDocumentKeydown(getRefs)}\n                target={this.context.target}\n                type=\"keydown\"\n                capture\n              />\n            </>\n          )}\n        </Unstable_NestingAuto>\n      </Portal>\n    );\n  }\n}\n\n/**\n * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n *\n * @accessibility\n * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.\n * @accessibilityIssues\n * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)\n * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)\n * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)\n * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)\n */\nexport default withSafeTypeForAs<typeof Dialog, DialogProps>(Dialog);\n"]},"metadata":{},"sourceType":"module"}