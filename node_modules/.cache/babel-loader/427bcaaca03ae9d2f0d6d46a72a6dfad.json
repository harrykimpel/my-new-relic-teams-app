{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\nimport gridCellBehavior from './gridCellBehavior';\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in horizontal direction.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridCellBehavior' for 'cell' child component.\n */\n\nvar gridRowNestedBehavior = function gridRowNestedBehavior(props) {\n  var _root;\n\n  return {\n    attributes: {\n      root: (_root = {}, _defineProperty(_root, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_root, \"role\", 'row'), _defineProperty(_root, 'aria-selected', props.selected), _root)\n    },\n    focusZone: {\n      props: {\n        shouldEnterInnerZone: function shouldEnterInnerZone(event) {\n          return keyboardKey.getCode(event) === keyboardKey.Enter;\n        },\n        direction: FocusZoneDirection.horizontal\n      }\n    },\n    keyActions: {\n      root: {\n        unsetRowTabbable: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Tab,\n            shiftKey: true\n          }]\n        },\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: keyboardKey.Spacebar\n          }]\n        }\n      }\n    },\n    childBehaviors: {\n      cell: gridCellBehavior\n    }\n  };\n};\n\nexport default gridRowNestedBehavior;","map":{"version":3,"sources":["behaviors/Table/gridRowNestedBehavior.ts"],"names":["gridRowNestedBehavior","attributes","root","props","focusZone","shouldEnterInnerZone","keyboardKey","direction","FocusZoneDirection","horizontal","keyActions","unsetRowTabbable","keyCombinations","keyCode","shiftKey","performClick","Enter","Spacebar","childBehaviors","cell","gridCellBehavior"],"mappings":";AACA,SAAA,sBAAA,QAAA,kBAAA;AACA,SAAA,kBAAA,QAAA,uBAAA;AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;AAGA;;;;;;;;;;;;AAWA,IAAMA,qBAA0D,GAAG,SAA7DA,qBAA6D,CAAA,KAAA,EAAK;AAAA,MAAA,KAAA;;AAAA,SAAK;AAC3EC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,GAAA,KAAA,GAAA,EAAA,EAAA,eAAA,CAAA,KAAA,EAAA,sBAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,eAAA,EAGeC,KAAK,CAHpB,QAAA,CAAA,EAAA,KAAA;AADM,KAD+D;AAQ3EC,IAAAA,SAAS,EAAE;AACTD,MAAAA,KAAK,EAAE;AACLE,QAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,KAAA,EAAK;AAAA,iBAAIC,WAAW,CAAXA,OAAAA,CAAAA,KAAAA,MAA+BA,WAAW,CAA9C,KAAA;AADtB,SAAA;AAELC,QAAAA,SAAS,EAAEC,kBAAkB,CAACC;AAFzB;AADE,KARgE;AAc3EC,IAAAA,UAAU,EAAE;AACVR,MAAAA,IAAI,EAAE;AACJS,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEP,WAAW,CAAtB,GAAA;AAA4BQ,YAAAA,QAAQ,EAAE;AAAtC,WAAD;AADD,SADd;AAIJC,QAAAA,YAAY,EAAE;AACZH,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEP,WAAW,CAACU;AAAvB,WAAD,EAAiC;AAAEH,YAAAA,OAAO,EAAEP,WAAW,CAACW;AAAvB,WAAjC;AADL;AAJV;AADI,KAd+D;AAwB3EC,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAEC;AADQ;AAxB2D,GAAL;AAAxE,CAAA;;AA6BA,eAAA,qBAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\nimport gridCellBehavior from './gridCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in horizontal direction.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridCellBehavior' for 'cell' child component.\n */\nconst gridRowNestedBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n      'aria-selected': props.selected,\n    },\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => keyboardKey.getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.horizontal,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridCellBehavior,\n  },\n});\n\nexport default gridRowNestedBehavior;\n"]},"metadata":{},"sourceType":"module"}