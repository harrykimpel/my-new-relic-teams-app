{"ast":null,"code":"import * as keyboardKey from 'keyboard-key';\n/**\n * @description\n * Adds accessibility attributed to implement the Accordion design pattern.\n * Adds 'aria-disabled' to the 'content' slot with a value based on disabled, active and canBeCollapsed props.\n * Adds role='heading' and aria-level='3' if the element type is not a header.\n *\n * @specification\n * Adds attribute 'role=button' to 'content' slot.\n * Adds attribute 'tabIndex=0' to 'content' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'active' to 'content' slot.\n * Adds attribute 'aria-controls=content-id' based on the property 'accordionContentId' to 'content' slot.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'content'.\n */\n\nvar accordionTitleBehavior = function accordionTitleBehavior(props) {\n  var isHeading = /(h\\d{1})$/.test(props.as);\n  var forcedOpen = props.active && !props.canBeCollapsed;\n  return {\n    attributes: {\n      root: {\n        role: isHeading ? undefined : 'heading',\n        'aria-level': isHeading ? undefined : 3\n      },\n      content: {\n        'aria-expanded': !!props.active,\n        'aria-disabled': !!(forcedOpen || props.disabled),\n        'aria-controls': props.accordionContentId,\n        role: 'button',\n        tabIndex: 0\n      }\n    },\n    keyActions: {\n      content: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: keyboardKey.Spacebar\n          }]\n        }\n      }\n    }\n  };\n};\n\nexport default accordionTitleBehavior;","map":{"version":3,"sources":["behaviors/Accordion/accordionTitleBehavior.ts"],"names":["accordionTitleBehavior","isHeading","props","forcedOpen","attributes","root","role","content","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","Spacebar"],"mappings":"AAAA,OAAO,KAAP,WAAA,MAAA,cAAA;AAGA;;;;;;;;;;;;;;AAaA,IAAMA,sBAAkE,GAAG,SAArEA,sBAAqE,CAAA,KAAA,EAAS;AAClF,MAAMC,SAAS,GAAG,YAAA,IAAA,CAAiBC,KAAK,CAAxC,EAAkB,CAAlB;AACA,MAAMC,UAAU,GAAGD,KAAK,CAALA,MAAAA,IAAgB,CAACA,KAAK,CAAzC,cAAA;AACA,SAAO;AACLE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEL,SAAS,GAAA,SAAA,GADX,SAAA;AAEJ,sBAAcA,SAAS,GAAA,SAAA,GAAe;AAFlC,OADI;AAKVM,MAAAA,OAAO,EAAE;AACP,yBAAiB,CAAC,CAACL,KAAK,CADjB,MAAA;AAEP,yBAAiB,CAAC,EAAEC,UAAU,IAAID,KAAK,CAFhC,QAEW,CAFX;AAGP,yBAAiBA,KAAK,CAHf,kBAAA;AAIPI,QAAAA,IAAI,EAJG,QAAA;AAKPE,QAAAA,QAAQ,EAAE;AALH;AALC,KADP;AAcLC,IAAAA,UAAU,EAAE;AACVF,MAAAA,OAAO,EAAE;AACPG,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEC,WAAW,CAACE;AAAvB,WAAjC;AADL;AADP;AADC;AAdP,GAAP;AAHF,CAAA;;AA2BA,eAAA,sBAAA","sourcesContent":["import * as keyboardKey from 'keyboard-key';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds accessibility attributed to implement the Accordion design pattern.\n * Adds 'aria-disabled' to the 'content' slot with a value based on disabled, active and canBeCollapsed props.\n * Adds role='heading' and aria-level='3' if the element type is not a header.\n *\n * @specification\n * Adds attribute 'role=button' to 'content' slot.\n * Adds attribute 'tabIndex=0' to 'content' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'active' to 'content' slot.\n * Adds attribute 'aria-controls=content-id' based on the property 'accordionContentId' to 'content' slot.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'content'.\n */\nconst accordionTitleBehavior: Accessibility<AccordionTitleBehaviorProps> = props => {\n  const isHeading = /(h\\d{1})$/.test(props.as);\n  const forcedOpen = props.active && !props.canBeCollapsed;\n  return {\n    attributes: {\n      root: {\n        role: isHeading ? undefined : 'heading',\n        'aria-level': isHeading ? undefined : 3,\n      },\n      content: {\n        'aria-expanded': !!props.active,\n        'aria-disabled': !!(forcedOpen || props.disabled),\n        'aria-controls': props.accordionContentId,\n        role: 'button',\n        tabIndex: 0,\n      },\n    },\n    keyActions: {\n      content: {\n        performClick: {\n          keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n        },\n      },\n    },\n  };\n};\n\nexport default accordionTitleBehavior;\n\nexport type AccordionTitleBehaviorProps = {\n  /** Element type. */\n  as?: string;\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n};\n"]},"metadata":{},"sourceType":"module"}