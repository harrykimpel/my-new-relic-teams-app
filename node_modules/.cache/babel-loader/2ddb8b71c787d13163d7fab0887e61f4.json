{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { tabBehavior } from '@fluentui/accessibility';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport { useTelemetry, getElementType, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var carouselNavigationItemClassName = 'ui-carousel__navigationitem';\nexport var carouselNavigationItemSlotClassNames = {\n  indicator: \"\".concat(carouselNavigationItemClassName, \"__indicator\"),\n  content: \"\".concat(carouselNavigationItemClassName, \"__content\")\n};\nexport var CarouselNavigationItem = function CarouselNavigationItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CarouselNavigationItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      thumbnails = props.thumbnails,\n      vertical = props.vertical,\n      active = props.active,\n      content = props.content,\n      iconOnly = props.iconOnly,\n      primary = props.primary,\n      indicator = props.indicator,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(CarouselNavigationItem.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CarouselNavigationItem.displayName,\n    actionHandlers: {\n      performClick: function performClick(event) {\n        return !event.defaultPrevented && handleClick(event);\n      }\n    }\n  });\n\n  var _useStyles = useStyles(CarouselNavigationItem.displayName, {\n    className: carouselNavigationItemClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        thumbnails: thumbnails,\n        vertical: vertical,\n        active: active,\n        hasContent: !!content,\n        iconOnly: iconOnly,\n        primary: primary,\n        hasIndicator: !!indicator\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var renderContent = function renderContent() {\n    return content ? Box.create(content, {\n      defaultProps: function defaultProps() {\n        return {\n          as: 'span',\n          className: carouselNavigationItemSlotClassNames.content,\n          styles: resolvedStyles.content\n        };\n      }\n    }) : Box.create(indicator, {\n      defaultProps: function defaultProps() {\n        return {\n          className: carouselNavigationItemSlotClassNames.indicator,\n          styles: resolvedStyles.indicator\n        };\n      }\n    });\n  };\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var handleBlur = function handleBlur(e) {\n    _invoke(props, 'onBlur', e, props);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    _invoke(props, 'onFocus', e, props);\n  };\n\n  var element = React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onClick: handleClick\n  }, unhandledProps)), rtlTextContainer.getAttributes({\n    forElements: [children]\n  })), childrenExist(children) ? children : renderContent());\n  setEnd();\n  return element;\n};\nCarouselNavigationItem.displayName = 'CarouselNavigationItem';\nCarouselNavigationItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  active: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  iconOnly: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  vertical: PropTypes.bool,\n  thumbnails: PropTypes.bool\n});\nCarouselNavigationItem.handledProps = Object.keys(CarouselNavigationItem.propTypes);\nCarouselNavigationItem.defaultProps = {\n  accessibility: tabBehavior,\n  as: 'li',\n  indicator: {}\n};\nCarouselNavigationItem.create = createShorthandFactory({\n  Component: CarouselNavigationItem,\n  mappedArrayProp: 'content'\n});\n/**\n * A CarouselItem is an actionable item within a Carousel.\n */\n\nexport default withSafeTypeForAs(CarouselNavigationItem);","map":{"version":3,"sources":["components/Carousel/CarouselNavigationItem.tsx"],"names":["carouselNavigationItemClassName","carouselNavigationItemSlotClassNames","indicator","content","CarouselNavigationItem","context","React","setStart","setEnd","useTelemetry","children","thumbnails","vertical","active","iconOnly","primary","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","event","handleClick","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","hasIndicator","mapPropsToInlineStyles","rtl","renderContent","defaultProps","as","handleBlur","handleFocus","element","onBlur","onFocus","onClick","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","index","secondary","bool","Object","accessibility","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport { Accessibility, tabBehavior } from '@fluentui/accessibility';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  withSafeTypeForAs,\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport { useTelemetry, getElementType, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\n\nexport interface CarouselNavigationItemSlotClassNames {\n  indicator: string;\n  content: string;\n}\n\nexport interface CarouselNavigationItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A menu item can be active. */\n  active?: boolean;\n\n  /** Indicator for the Carousel Navigation Item. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A Carousel Navigation may have just icons. */\n  iconOnly?: boolean;\n\n  /** CarouselNavigationIntem index inside CarouselNavigation. */\n  index?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick?: ComponentEventHandler<CarouselNavigationItemProps>;\n\n  /** The carousel navigation item can have primary type. */\n  primary?: boolean;\n\n  /** The carousel navigation item can have secondary type. */\n  secondary?: boolean;\n\n  /** A vertical carousel navigation displays elements vertically. */\n  vertical?: boolean;\n\n  thumbnails?: boolean;\n}\n\nexport type CarouselNavigationItemStylesProps = Required<\n  Pick<CarouselNavigationItemProps, 'thumbnails' | 'vertical' | 'active' | 'iconOnly' | 'primary'>\n> & {\n  hasContent: boolean;\n  hasIndicator: boolean;\n};\n\nexport const carouselNavigationItemClassName = 'ui-carousel__navigationitem';\nexport const carouselNavigationItemSlotClassNames: CarouselNavigationItemSlotClassNames = {\n  indicator: `${carouselNavigationItemClassName}__indicator`,\n  content: `${carouselNavigationItemClassName}__content`,\n};\n\nexport const CarouselNavigationItem: React.FC<WithAsProp<CarouselNavigationItemProps>> &\n  FluentComponentStaticProps<CarouselNavigationItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CarouselNavigationItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    thumbnails,\n    vertical,\n    active,\n    content,\n    iconOnly,\n    primary,\n    indicator,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CarouselNavigationItem.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CarouselNavigationItem.displayName,\n    actionHandlers: {\n      performClick: event => !event.defaultPrevented && handleClick(event),\n    },\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<CarouselNavigationItemStylesProps>(\n    CarouselNavigationItem.displayName,\n    {\n      className: carouselNavigationItemClassName,\n      mapPropsToStyles: () => ({\n        thumbnails,\n        vertical,\n        active,\n        hasContent: !!content,\n        iconOnly,\n        primary,\n        hasIndicator: !!indicator,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n  const renderContent = () => {\n    return content\n      ? Box.create(content, {\n          defaultProps: () => ({\n            as: 'span',\n            className: carouselNavigationItemSlotClassNames.content,\n            styles: resolvedStyles.content,\n          }),\n        })\n      : Box.create(indicator, {\n          defaultProps: () => ({\n            className: carouselNavigationItemSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n        });\n  };\n\n  const handleClick = (e: Event | React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselNavigationItem.displayName = 'CarouselNavigationItem';\n\nCarouselNavigationItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  iconOnly: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  vertical: PropTypes.bool,\n  thumbnails: PropTypes.bool,\n};\n\nCarouselNavigationItem.handledProps = Object.keys(CarouselNavigationItem.propTypes) as any;\n\nCarouselNavigationItem.defaultProps = {\n  accessibility: tabBehavior as Accessibility,\n  as: 'li',\n  indicator: {},\n};\n\nCarouselNavigationItem.create = createShorthandFactory({\n  Component: CarouselNavigationItem,\n  mappedArrayProp: 'content',\n});\n\n/**\n * A CarouselItem is an actionable item within a Carousel.\n */\nexport default withSafeTypeForAs<typeof CarouselNavigationItem, CarouselNavigationItemProps, 'li'>(\n  CarouselNavigationItem,\n);\n"]},"metadata":{},"sourceType":"module"}