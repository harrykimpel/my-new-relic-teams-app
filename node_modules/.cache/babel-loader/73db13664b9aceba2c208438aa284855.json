{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _get from \"lodash/get\";\nimport { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport FlexItem from './FlexItem';\nexport var flexClassName = 'ui-flex';\n\nvar Flex = function Flex(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Flex.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      className = props.className,\n      column = props.column,\n      debug = props.debug,\n      design = props.design,\n      fill = props.fill,\n      gap = props.gap,\n      hAlign = props.hAlign,\n      inline = props.inline,\n      padding = props.padding,\n      space = props.space,\n      styles = props.styles,\n      variables = props.variables,\n      vAlign = props.vAlign,\n      wrap = props.wrap;\n\n  var _useStyles = useStyles(Flex.displayName, {\n    className: flexClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        column: column,\n        debug: debug,\n        fill: fill,\n        gap: gap,\n        hAlign: hAlign,\n        inline: inline,\n        padding: padding,\n        space: space,\n        vAlign: vAlign,\n        wrap: wrap\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Flex.handledProps, props);\n  var content = React.Children.map(children, function (child) {\n    var isFlexItemElement = _get(child, 'type.__isFlexItem');\n\n    return isFlexItemElement ? React.cloneElement(child, {\n      flexDirection: column ? 'column' : 'row'\n    }) : child;\n  });\n  var element = React.createElement(ElementType, _extends({\n    className: classes.root\n  }, unhandledProps), content);\n  setEnd();\n  return element;\n};\n\nFlex.displayName = 'Flex';\nFlex.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  content: false\n}), {\n  inline: PropTypes.bool,\n  column: PropTypes.bool,\n  wrap: PropTypes.bool,\n  hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n  vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n  space: PropTypes.oneOf(['around', 'between', 'evenly']),\n  gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']),\n  padding: PropTypes.oneOf(['padding.medium']),\n  fill: PropTypes.bool,\n  debug: PropTypes.bool\n});\nFlex.handledProps = Object.keys(Flex.propTypes);\nFlex.Item = FlexItem;\n/**\n * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).\n */\n\nexport default withSafeTypeForAs(Flex);","map":{"version":3,"sources":["components/Flex/Flex.tsx"],"names":["flexClassName","Flex","context","React","setStart","setEnd","useTelemetry","children","className","column","debug","design","fill","gap","hAlign","inline","padding","space","styles","variables","vAlign","wrap","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","useUnhandledProps","content","isFlexItemElement","flexDirection","element","root","accessibility","PropTypes","bool","Object","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport { ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport FlexItem from './FlexItem';\n\nexport interface FlexProps extends UIComponentProps, ChildrenComponentProps {\n  /** Defines if container should be inline element. */\n  inline?: boolean;\n\n  /** Sets vertical flow direction. */\n  column?: boolean;\n\n  /** Allows overflow items to wrap on the next container's line. */\n  wrap?: boolean;\n\n  /** Controls items alignment in horizontal direction. */\n  hAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Controls items alignment in vertical direction. */\n  vAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Defines strategy for distributing remaining space between items. */\n  space?: 'around' | 'between' | 'evenly';\n\n  /** Defines gap between each two adjacent child items. */\n  gap?: 'gap.smaller' | 'gap.small' | 'gap.medium' | 'gap.large';\n\n  /** Defines container's padding. */\n  padding?: 'padding.medium';\n\n  /** Enables debug mode. */\n  debug?: boolean;\n\n  /** Orders container to fill all parent's space available. */\n  fill?: boolean;\n}\n\nexport type FlexStylesProps = Pick<\n  FlexProps,\n  'column' | 'debug' | 'fill' | 'gap' | 'hAlign' | 'inline' | 'padding' | 'space' | 'vAlign' | 'wrap'\n>;\nexport const flexClassName = 'ui-flex';\n\nconst Flex: React.FC<WithAsProp<FlexProps>> & {\n  handledProps: (keyof FlexProps)[];\n  Item: typeof FlexItem;\n} = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Flex.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    className,\n    column,\n    debug,\n    design,\n    fill,\n    gap,\n    hAlign,\n    inline,\n    padding,\n    space,\n    styles,\n    variables,\n    vAlign,\n    wrap,\n  } = props;\n\n  const { classes } = useStyles<FlexStylesProps>(Flex.displayName, {\n    className: flexClassName,\n    mapPropsToStyles: () => ({\n      column,\n      debug,\n      fill,\n      gap,\n      hAlign,\n      inline,\n      padding,\n      space,\n      vAlign,\n      wrap,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Flex.handledProps, props);\n\n  const content = React.Children.map(children, child => {\n    const isFlexItemElement: boolean = _.get(child, 'type.__isFlexItem');\n\n    return isFlexItemElement\n      ? React.cloneElement(child as React.ReactElement, {\n          flexDirection: column ? 'column' : 'row',\n        })\n      : child;\n  });\n  const element = (\n    <ElementType className={classes.root} {...unhandledProps}>\n      {content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nFlex.displayName = 'Flex';\n\nFlex.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    content: false,\n  }),\n\n  inline: PropTypes.bool,\n\n  column: PropTypes.bool,\n\n  wrap: PropTypes.bool,\n\n  hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n  vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n\n  space: PropTypes.oneOf(['around', 'between', 'evenly']),\n\n  gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']),\n\n  padding: PropTypes.oneOf(['padding.medium']),\n  fill: PropTypes.bool,\n\n  debug: PropTypes.bool,\n};\nFlex.handledProps = Object.keys(Flex.propTypes) as any;\n\nFlex.Item = FlexItem;\n\n/**\n * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).\n */\nexport default withSafeTypeForAs<typeof Flex, FlexProps>(Flex);\n"]},"metadata":{},"sourceType":"module"}