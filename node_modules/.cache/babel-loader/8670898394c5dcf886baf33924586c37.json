{"ast":null,"code":"import * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var cardColumnClassName = 'ui-card__column';\n\nvar CardColumn = function CardColumn(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CardColumn.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(CardColumn.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardColumn.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(CardColumn.displayName, {\n    className: cardColumnClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), children);\n  setEnd();\n  return element;\n};\n\nCardColumn.displayName = 'CardColumn';\nCardColumn.propTypes = Object.assign({}, commonPropTypes.createCommon());\nCardColumn.handledProps = Object.keys(CardColumn.propTypes);\nCardColumn.create = createShorthandFactory({\n  Component: CardColumn\n});\n/**\n * A CardColumn is used to display content in card as column\n */\n\nexport default withSafeTypeForAs(CardColumn);","map":{"version":3,"sources":["components/Card/CardColumn.tsx"],"names":["cardColumnClassName","CardColumn","context","React","setStart","setEnd","useTelemetry","className","design","styles","variables","children","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","element","root","commonPropTypes","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,QAAA,aAAA;AAEA,SAAA,eAAA,EAAA,sBAAA,QAAA,aAAA;AACA,SAAA,YAAA,EAAA,SAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,QAAA,0BAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAUA,OAAO,IAAMA,mBAAmB,GAAzB,iBAAA;;AAEP,IAAMC,UAA+F,GAAG,SAAlGA,UAAkG,CAAA,KAAA,EAAS;AAC/G,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD+G,MAAA,aAAA,GAElFG,YAAY,CAACL,UAAU,CAAX,WAAA,EAAyBC,OAAO,CAFsC,SAEtE,CAFsE;AAAA,MAEvGE,QAFuG,GAAA,aAAA,CAAA,QAAA;AAAA,MAE7FC,MAF6F,GAAA,aAAA,CAAA,MAAA;;AAG/GD,EAAAA,QAAQ;AAHuG,MAKvGG,SALuG,GAKpDK,KALoD,CAAA,SAAA;AAAA,MAK5FJ,MAL4F,GAKpDI,KALoD,CAAA,MAAA;AAAA,MAKpFH,MALoF,GAKpDG,KALoD,CAAA,MAAA;AAAA,MAK5EF,SAL4E,GAKpDE,KALoD,CAAA,SAAA;AAAA,MAKjED,QALiE,GAKpDC,KALoD,CAAA,QAAA;AAM/G,MAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACf,UAAU,CAAX,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMgB,YAAY,GAAGC,gBAAgB,CAACN,KAAK,CAAN,aAAA,EAAsB;AACzDO,IAAAA,SAAS,EAAElB,UAAU,CADoC,WAAA;AAEzDmB,IAAAA,GAAG,EAAElB,OAAO,CAACkB;AAF4C,GAAtB,CAArC;;AAR+G,MAAA,UAAA,GAa3FE,SAAS,CAAwBrB,UAAU,CAAlC,WAAA,EAAgD;AAC3EM,IAAAA,SAAS,EADkE,mBAAA;AAE3EgB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BhB,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAFmD,KAAA;AAQ3EU,IAAAA,GAAG,EAAElB,OAAO,CAACkB;AAR8D,GAAhD,CAbkF;AAAA,MAavGC,OAbuG,GAAA,UAAA,CAAA,OAAA;;AAwB/G,MAAMG,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMP,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdV,IAAAA,SAAS,EAAEc,OAAO,CAACI;AADL,GAAA,EADlB,cACkB,CAAA,CADlB,EADF,QACE,CADF;AAUApB,EAAAA,MAAM;AACN,SAAA,OAAA;AAnCF,CAAA;;AAsCAJ,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AAEAA,UAAU,CAAVA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKyB,eAAe,CADpBzB,YACKyB,EADLzB,CAAAA;AAIAA,UAAU,CAAVA,YAAAA,GAA0B0B,MAAM,CAANA,IAAAA,CAAY1B,UAAU,CAAhDA,SAA0B0B,CAA1B1B;AAEAA,UAAU,CAAVA,MAAAA,GAAoB2B,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAE5B;AAAb,CAAD,CAA1CA;AAEA;;;;AAGA,eAAe6B,iBAAiB,CAAhC,UAAgC,CAAhC","sourcesContent":["import * as React from 'react';\nimport { WithAsProp, withSafeTypeForAs, FluentComponentStaticProps, ProviderContextPrepared } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface CardColumnProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type CardColumnStylesProps = never;\nexport const cardColumnClassName = 'ui-card__column';\n\nconst CardColumn: React.FC<WithAsProp<CardColumnProps>> & FluentComponentStaticProps<CardColumnProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardColumn.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardColumn.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardColumn.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardColumnStylesProps>(CardColumn.displayName, {\n    className: cardColumnClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardColumn.displayName = 'CardColumn';\n\nCardColumn.propTypes = {\n  ...commonPropTypes.createCommon(),\n};\n\nCardColumn.handledProps = Object.keys(CardColumn.propTypes) as any;\n\nCardColumn.create = createShorthandFactory({ Component: CardColumn });\n\n/**\n * A CardColumn is used to display content in card as column\n */\nexport default withSafeTypeForAs<typeof CardColumn, CardColumnProps, 'div'>(CardColumn);\n"]},"metadata":{},"sourceType":"module"}