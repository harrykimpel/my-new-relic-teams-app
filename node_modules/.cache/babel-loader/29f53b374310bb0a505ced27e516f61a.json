{"ast":null,"code":"import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport isBrowser from '../../utils/isBrowser';\nexport var PortalBoxContext = React.createContext(null);\n\nvar usePortalBox = function usePortalBox(options) {\n  var className = options.className,\n      rtl = options.rtl,\n      target = options.target;\n  var element = React.useMemo(function () {\n    var newElement = isBrowser() ? target.createElement('div') : null; // Element should be attached to DOM during render to make elements that will be rendered\n    // inside accessible in effects of child components\n\n    if (newElement) {\n      target.body.appendChild(newElement);\n    }\n\n    return newElement;\n  }, [target]);\n  useIsomorphicLayoutEffect(function () {\n    if (element) {\n      element.setAttribute('class', className);\n\n      if (rtl) {\n        element.setAttribute('dir', 'rtl');\n      } else {\n        element.removeAttribute('dir');\n      }\n    }\n  }, [className, element, rtl]); // This effect should always last as it removes element from HTML tree\n\n  useIsomorphicLayoutEffect(function () {\n    return function () {\n      if (element) {\n        target.body.removeChild(element);\n      }\n    };\n  }, [element, target]);\n  return element;\n};\n\nexport default usePortalBox;","map":{"version":3,"sources":["components/Provider/usePortalBox.ts"],"names":["PortalBoxContext","React","usePortalBox","className","rtl","target","options","element","newElement","isBrowser","useIsomorphicLayoutEffect"],"mappings":"AAAA,SAAA,yBAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,SAAA,MAAA,uBAAA;AAQA,OAAO,IAAMA,gBAAgB,GAAGC,KAAK,CAALA,aAAAA,CAAzB,IAAyBA,CAAzB;;AAEP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,OAAA,EAAkD;AAAA,MAC7DC,SAD6D,GAClCG,OADkC,CAAA,SAAA;AAAA,MAClDF,GADkD,GAClCE,OADkC,CAAA,GAAA;AAAA,MAC7CD,MAD6C,GAClCC,OADkC,CAAA,MAAA;AAGrE,MAAMC,OAA8B,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;AACzD,QAAMC,UAAU,GAAGC,SAAS,KAAKJ,MAAM,CAANA,aAAAA,CAAL,KAAKA,CAAL,GAD6B,IACzD,CADyD,CAGzD;AACA;;AACA,QAAA,UAAA,EAAgB;AACdA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,WAAAA,CAAAA,UAAAA;AACD;;AAED,WAAA,UAAA;AATqC,GAAA,EAUpC,CAVH,MAUG,CAVoC,CAAvC;AAYAK,EAAAA,yBAAyB,CAAC,YAAM;AAC9B,QAAA,OAAA,EAAa;AACXH,MAAAA,OAAO,CAAPA,YAAAA,CAAAA,OAAAA,EAAAA,SAAAA;;AAEA,UAAA,GAAA,EAAS;AACPA,QAAAA,OAAO,CAAPA,YAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,OAAO,CAAPA,eAAAA,CAAAA,KAAAA;AACD;AACF;AATsB,GAAA,EAUtB,CAAA,SAAA,EAAA,OAAA,EAzBkE,GAyBlE,CAVsB,CAAzBG,CAfqE,CA2BrE;;AACAA,EAAAA,yBAAyB,CAAC,YAAM;AAC9B,WAAO,YAAM;AACX,UAAA,OAAA,EAAa;AACXL,QAAAA,MAAM,CAANA,IAAAA,CAAAA,WAAAA,CAAAA,OAAAA;AACD;AAHH,KAAA;AADuB,GAAA,EAMtB,CAAA,OAAA,EANHK,MAMG,CANsB,CAAzBA;AAQA,SAAA,OAAA;AApCF,CAAA;;AAuCA,eAAA,YAAA","sourcesContent":["import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport isBrowser from '../../utils/isBrowser';\n\ntype UsePortalBoxOptions = {\n  className: string;\n  rtl: boolean;\n  target: Document;\n};\n\nexport const PortalBoxContext = React.createContext<HTMLDivElement>(null);\n\nconst usePortalBox = (options: UsePortalBoxOptions): HTMLDivElement => {\n  const { className, rtl, target } = options;\n\n  const element: HTMLDivElement | null = React.useMemo(() => {\n    const newElement = isBrowser() ? target.createElement('div') : null;\n\n    // Element should be attached to DOM during render to make elements that will be rendered\n    // inside accessible in effects of child components\n    if (newElement) {\n      target.body.appendChild(newElement);\n    }\n\n    return newElement;\n  }, [target]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (element) {\n      element.setAttribute('class', className);\n\n      if (rtl) {\n        element.setAttribute('dir', 'rtl');\n      } else {\n        element.removeAttribute('dir');\n      }\n    }\n  }, [className, element, rtl]);\n\n  // This effect should always last as it removes element from HTML tree\n  useIsomorphicLayoutEffect(() => {\n    return () => {\n      if (element) {\n        target.body.removeChild(element);\n      }\n    };\n  }, [element, target]);\n\n  return element;\n};\n\nexport default usePortalBox;\n"]},"metadata":{},"sourceType":"module"}