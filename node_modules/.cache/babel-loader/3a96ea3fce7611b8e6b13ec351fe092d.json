{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _some from \"lodash/some\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarItemBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { createShorthandFactory, doesNodeContainClick, commonPropTypes, childrenExist } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getPopperPropsFromShorthand, Popper } from '../../utils/positioner';\nimport ToolbarMenu from './ToolbarMenu';\nimport Box from '../Box/Box';\nimport Popup from '../Popup/Popup';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarItemClassName = 'ui-toolbar__item';\nexport var toolbarItemSlotClassNames = {\n  wrapper: \"\".concat(toolbarItemClassName, \"__wrapper\")\n};\n\nvar ToolbarItem = function ToolbarItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      active = props.active,\n      className = props.className,\n      design = props.design,\n      icon = props.icon,\n      children = props.children,\n      disabled = props.disabled,\n      popup = props.popup,\n      menu = props.menu,\n      menuOpen = props.menuOpen,\n      wrapper = props.wrapper,\n      styles = props.styles,\n      variables = props.variables;\n  var itemRef = React.useRef();\n  var menuRef = React.useRef();\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var mergedVariables = mergeComponentVariables(parentVariables, variables);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarItem.displayName,\n    actionHandlers: {\n      performClick: function performClick(event) {\n        event.preventDefault();\n        handleClick(event);\n      },\n      performWrapperClick: function performWrapperClick(event) {\n        handleWrapperClick(event);\n      },\n      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {\n        trySetMenuOpen(false, event);\n\n        _invoke(itemRef.current, 'focus');\n      },\n      doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {\n        event.stopPropagation();\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        as: String(props.as),\n        disabled: disabled,\n        hasMenu: !!menu,\n        hasPopup: !!popup,\n        menuOpen: menuOpen,\n        active: active\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarItem.displayName, {\n    className: toolbarItemClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        active: active,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergedVariables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleBlur = function handleBlur(e) {\n    _invoke(props, 'onBlur', e, props);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    _invoke(props, 'onFocus', e, props);\n  };\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (menu) {\n      trySetMenuOpen(!menuOpen, e);\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var handleWrapperClick = function handleWrapperClick(e) {\n    if (menu) {\n      if (doesNodeContainClick(menuRef.current, e.nativeEvent, context.target)) {\n        trySetMenuOpen(false, e);\n      }\n    }\n  };\n\n  var handleOutsideClick = function handleOutsideClick(getRefs) {\n    return function (e) {\n      var isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n\n      var isNestedClick = _some(getRefs(), function (childRef) {\n        return doesNodeContainClick(childRef.current, e, context.target);\n      });\n\n      var isInside = isItemClick || isNestedClick;\n\n      if (!isInside) {\n        trySetMenuOpen(false, e);\n      }\n    };\n  };\n\n  var trySetMenuOpen = function trySetMenuOpen(newValue, e) {\n    _invoke(props, 'onMenuOpenChange', e, Object.assign({}, props, {\n      menuOpen: newValue\n    }));\n  };\n\n  var handleMenuOverrides = function handleMenuOverrides(getRefs) {\n    return function (predefinedProps) {\n      return {\n        onBlur: function onBlur(e) {\n          var isInsideOrMenuTrigger = _some(getRefs(), function (childRef) {\n            return childRef.current.contains(e.relatedTarget) || itemRef.current.contains(e.relatedTarget);\n          });\n\n          if (!isInsideOrMenuTrigger) {\n            trySetMenuOpen(false, e);\n          }\n        },\n        onItemClick: function onItemClick(e, itemProps) {\n          var popup = itemProps.popup,\n              menuOpen = itemProps.menuOpen;\n\n          _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n          if (popup) {\n            return;\n          } // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?\n\n\n          trySetMenuOpen(menuOpen, e);\n        }\n      };\n    };\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarItem.handledProps, props);\n  var itemElement = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    disabled: disabled,\n    className: classes.root,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onClick: handleClick\n  })), childrenExist(children) ? children : Box.create(icon));\n  var submenuElement = menuOpen ? React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n    return React.createElement(React.Fragment, null, React.createElement(Ref, {\n      innerRef: function innerRef(node) {\n        nestingRef.current = node;\n        menuRef.current = node;\n      }\n    }, React.createElement(Popper, _extends({\n      align: \"start\",\n      position: \"above\",\n      targetRef: itemRef\n    }, getPopperPropsFromShorthand(menu)), React.createElement(ToolbarVariablesProvider, {\n      value: mergedVariables\n    }, ToolbarMenu.create(menu, {\n      overrideProps: handleMenuOverrides(getRefs)\n    })))), React.createElement(EventListener, {\n      listener: handleOutsideClick(getRefs),\n      target: context.target,\n      type: \"click\",\n      capture: true\n    }));\n  }) : null;\n\n  if (popup) {\n    var popupElement = Popup.create(popup, {\n      defaultProps: function defaultProps() {\n        return {\n          trapFocus: true\n        };\n      },\n      overrideProps: {\n        trigger: itemElement,\n        children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`\n\n      }\n    });\n    setEnd();\n    return popupElement;\n  } // wrap the item if it has menu (even if it is closed = not rendered)\n\n\n  if (menu) {\n    var contentElement = React.createElement(React.Fragment, null, React.createElement(Ref, {\n      innerRef: itemRef\n    }, itemElement), submenuElement);\n\n    if (wrapper) {\n      var wrapperElement = Box.create(wrapper, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('wrapper', {\n            className: cx(toolbarItemSlotClassNames.wrapper, classes.wrapper)\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            children: contentElement,\n            onClick: function onClick(e) {\n              handleWrapperClick(e);\n\n              _invoke(predefinedProps, 'onClick', e);\n            }\n          };\n        }\n      });\n      setEnd();\n      return wrapperElement;\n    }\n\n    setEnd();\n    return contentElement;\n  }\n\n  var refElement = React.createElement(Ref, {\n    innerRef: itemRef\n  }, itemElement);\n  setEnd();\n  return refElement;\n};\n\nToolbarItem.displayName = 'ToolbarItem';\nToolbarItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarItemBehavior,\n  wrapper: {}\n};\nToolbarItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  menu: PropTypes.oneOfType([customPropTypes.shorthandAllowingChildren, PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren)]),\n  menuOpen: PropTypes.bool,\n  onMenuOpenChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {\n    trigger: customPropTypes.never,\n    children: customPropTypes.never\n  })), PropTypes.string]),\n  wrapper: customPropTypes.shorthandAllowingChildren\n});\nToolbarItem.handledProps = Object.keys(ToolbarItem.propTypes);\nToolbarItem.create = createShorthandFactory({\n  Component: ToolbarItem,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarItem renders Toolbar item as a button with an icon.\n */\n\nexport default withSafeTypeForAs(ToolbarItem);","map":{"version":3,"sources":["components/Toolbar/ToolbarItem.tsx"],"names":["toolbarItemClassName","toolbarItemSlotClassNames","wrapper","ToolbarItem","context","React","setStart","setEnd","useTelemetry","accessibility","active","className","design","icon","children","disabled","popup","menu","menuOpen","styles","variables","props","itemRef","menuRef","parentVariables","mergedVariables","mergeComponentVariables","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","event","handleClick","performWrapperClick","handleWrapperClick","closeMenuAndFocusTrigger","trySetMenuOpen","doNotNavigateNextToolbarItem","mapPropsToBehavior","as","String","hasMenu","hasPopup","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleBlur","handleFocus","e","doesNodeContainClick","handleOutsideClick","isItemClick","isNestedClick","getRefs","childRef","isInside","newValue","handleMenuOverrides","onBlur","isInsideOrMenuTrigger","onItemClick","itemProps","ElementType","getElementType","unhandledProps","useUnhandledProps","itemElement","onFocus","onClick","childrenExist","Box","submenuElement","nestingRef","getPopperPropsFromShorthand","overrideProps","popupElement","defaultProps","trapFocus","trigger","contentElement","wrapperElement","cx","refElement","commonPropTypes","PropTypes","customPropTypes","onMenuOpenChange","Popup","never","shorthandAllowingChildren","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, toolbarItemBehavior, ToolbarItemBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { GetRefs, NodeRef, Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  createShorthandFactory,\n  doesNodeContainClick,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  childrenExist,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  WithAsProp,\n  withSafeTypeForAs,\n  Omit,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { getPopperPropsFromShorthand, Popper, PopperShorthandProps } from '../../utils/positioner';\n\nimport ToolbarMenu, { ToolbarMenuProps } from './ToolbarMenu';\nimport Box, { BoxProps } from '../Box/Box';\nimport Popup, { PopupProps } from '../Popup/Popup';\nimport { ToolbarMenuItemProps } from '../Toolbar/ToolbarMenuItem';\nimport { ToolbarItemShorthandKinds } from './Toolbar';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport interface ToolbarItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ToolbarItemBehaviorProps>;\n\n  /** A toolbar item can be active. */\n  active?: boolean;\n\n  /** A toolbar item can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Name or shorthand for Toolbar Item Icon */\n  icon?: ShorthandValue<BoxProps>;\n\n  /**\n   * Shorthand for the submenu.\n   * If submenu is specified, the item is wrapped to group the item and the menu elements together.\n   */\n  menu?:\n    | ShorthandValue<ToolbarMenuProps & { popper?: PopperShorthandProps }>\n    | ShorthandCollection<ToolbarMenuItemProps, ToolbarItemShorthandKinds>;\n\n  /** Indicates if the menu inside the item is open. */\n  menuOpen?: boolean;\n\n  /**\n   * Event for request to change 'menuOpen' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onMenuOpenChange?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called after item blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Attaches a `Popup` component to the ToolbarItem.\n   * Accepts all props as a `Popup`, except `trigger` and `children`.\n   * Traps focus by default.\n   * @see PopupProps\n   */\n  popup?: Omit<PopupProps, 'trigger' | 'children'> | string;\n\n  /** Shorthand for the wrapper component. The item is wrapped only if it contains a menu! */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarItemStylesProps = Required<Pick<ToolbarItemProps, 'active' | 'disabled'>>;\n\nexport interface ToolbarItemSlotClassNames {\n  wrapper: string;\n}\n\nexport const toolbarItemClassName = 'ui-toolbar__item';\nexport const toolbarItemSlotClassNames: ToolbarItemSlotClassNames = {\n  wrapper: `${toolbarItemClassName}__wrapper`,\n};\n\nconst ToolbarItem: React.FC<WithAsProp<ToolbarItemProps>> & FluentComponentStaticProps<ToolbarItemProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    active,\n    className,\n    design,\n    icon,\n    children,\n    disabled,\n    popup,\n    menu,\n    menuOpen,\n    wrapper,\n    styles,\n    variables,\n  } = props;\n\n  const itemRef = React.useRef<HTMLElement>();\n  const menuRef = React.useRef<HTMLElement>();\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarItem.displayName,\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n      performWrapperClick: event => {\n        handleWrapperClick(event);\n      },\n      closeMenuAndFocusTrigger: event => {\n        trySetMenuOpen(false, event);\n        _.invoke(itemRef.current, 'focus');\n      },\n      doNotNavigateNextToolbarItem: event => {\n        event.stopPropagation();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      as: String(props.as),\n      disabled,\n      hasMenu: !!menu,\n      hasPopup: !!popup,\n      menuOpen,\n      active,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarItemStylesProps>(ToolbarItem.displayName, {\n    className: toolbarItemClassName,\n    mapPropsToStyles: () => ({ active, disabled }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergedVariables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (menu) {\n      trySetMenuOpen(!menuOpen, e);\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleWrapperClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (menu) {\n      if (doesNodeContainClick(menuRef.current, e.nativeEvent as MouseEvent, context.target)) {\n        trySetMenuOpen(false, e);\n      }\n    }\n  };\n\n  const handleOutsideClick = (getRefs: GetRefs) => (e: MouseEvent) => {\n    const isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n    const isNestedClick = _.some(getRefs(), (childRef: NodeRef) => {\n      return doesNodeContainClick(childRef.current as HTMLElement, e, context.target);\n    });\n    const isInside = isItemClick || isNestedClick;\n\n    if (!isInside) {\n      trySetMenuOpen(false, e);\n    }\n  };\n\n  const trySetMenuOpen = (newValue: boolean, e: Event | React.SyntheticEvent) => {\n    _.invoke(props, 'onMenuOpenChange', e, { ...props, menuOpen: newValue });\n  };\n\n  const handleMenuOverrides = (getRefs: GetRefs) => (predefinedProps: ToolbarMenuProps) => ({\n    onBlur: (e: React.FocusEvent) => {\n      const isInsideOrMenuTrigger = _.some(getRefs(), (childRef: NodeRef) => {\n        return (\n          childRef.current.contains(e.relatedTarget as HTMLElement) ||\n          itemRef.current.contains(e.relatedTarget as HTMLElement)\n        );\n      });\n\n      if (!isInsideOrMenuTrigger) {\n        trySetMenuOpen(false, e);\n      }\n    },\n    onItemClick: (e, itemProps: ToolbarMenuItemProps) => {\n      const { popup, menuOpen } = itemProps;\n      _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n      if (popup) {\n        return;\n      }\n      // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?\n      trySetMenuOpen(menuOpen, e);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarItem.handledProps, props);\n\n  const itemElement = (\n    <ElementType\n      {...getA11yProps('root', {\n        ...unhandledProps,\n        disabled,\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onClick: handleClick,\n      })}\n    >\n      {childrenExist(children) ? children : Box.create(icon)}\n    </ElementType>\n  );\n\n  const submenuElement = menuOpen ? (\n    <Unstable_NestingAuto>\n      {(getRefs, nestingRef) => (\n        <>\n          <Ref\n            innerRef={(node: HTMLElement) => {\n              nestingRef.current = node;\n              menuRef.current = node;\n            }}\n          >\n            <Popper align=\"start\" position=\"above\" targetRef={itemRef} {...getPopperPropsFromShorthand(menu)}>\n              <ToolbarVariablesProvider value={mergedVariables}>\n                {ToolbarMenu.create(menu, {\n                  overrideProps: handleMenuOverrides(getRefs),\n                })}\n              </ToolbarVariablesProvider>\n            </Popper>\n          </Ref>\n          <EventListener listener={handleOutsideClick(getRefs)} target={context.target} type=\"click\" capture />\n        </>\n      )}\n    </Unstable_NestingAuto>\n  ) : null;\n\n  if (popup) {\n    const popupElement = Popup.create(popup, {\n      defaultProps: () => ({\n        trapFocus: true,\n      }),\n      overrideProps: {\n        trigger: itemElement,\n        children: undefined, // force-reset `children` defined for `Popup` as it collides with the `trigger`\n      },\n    });\n    setEnd();\n\n    return popupElement;\n  }\n\n  // wrap the item if it has menu (even if it is closed = not rendered)\n  if (menu) {\n    const contentElement = (\n      <>\n        <Ref innerRef={itemRef}>{itemElement}</Ref>\n        {submenuElement}\n      </>\n    );\n\n    if (wrapper) {\n      const wrapperElement = Box.create(wrapper, {\n        defaultProps: () =>\n          getA11yProps('wrapper', {\n            className: cx(toolbarItemSlotClassNames.wrapper, classes.wrapper),\n          }),\n        overrideProps: predefinedProps => ({\n          children: contentElement,\n          onClick: e => {\n            handleWrapperClick(e);\n            _.invoke(predefinedProps, 'onClick', e);\n          },\n        }),\n      });\n      setEnd();\n\n      return wrapperElement;\n    }\n\n    setEnd();\n    return contentElement;\n  }\n\n  const refElement = <Ref innerRef={itemRef}>{itemElement}</Ref>;\n  setEnd();\n\n  return refElement;\n};\n\nToolbarItem.displayName = 'ToolbarItem';\n\nToolbarItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarItemBehavior,\n  wrapper: {},\n};\nToolbarItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  menu: PropTypes.oneOfType([\n    customPropTypes.shorthandAllowingChildren,\n    PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren),\n  ]),\n  menuOpen: PropTypes.bool,\n  onMenuOpenChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  popup: PropTypes.oneOfType([\n    PropTypes.shape({\n      ...Popup.propTypes,\n      trigger: customPropTypes.never,\n      children: customPropTypes.never,\n    }),\n    PropTypes.string,\n  ]),\n  wrapper: customPropTypes.shorthandAllowingChildren,\n};\nToolbarItem.handledProps = Object.keys(ToolbarItem.propTypes) as any;\n\nToolbarItem.create = createShorthandFactory({ Component: ToolbarItem, mappedProp: 'content' });\n\n/**\n * A ToolbarItem renders Toolbar item as a button with an icon.\n */\nexport default withSafeTypeForAs<typeof ToolbarItem, ToolbarItemProps, 'button'>(ToolbarItem);\n"]},"metadata":{},"sourceType":"module"}