{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, compose } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\nexport var toolbarDividerClassName = 'ui-toolbar__divider';\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\n\nvar ToolbarDivider = compose(function (props, ref, composeOptions) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: composeOptions.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(composeOptions.displayName, {\n    className: composeOptions.className,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergeComponentVariables(parentVariables, variables)\n      };\n    },\n    rtl: context.rtl,\n    composeOptions: composeOptions,\n    unstable_props: props\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    ref: ref\n  }, unhandledProps, {\n    className: classes.root\n  })));\n  setEnd();\n  return element;\n}, {\n  displayName: 'ToolbarDivider',\n  className: toolbarDividerClassName,\n  handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design']\n});\nToolbarDivider.propTypes = commonPropTypes.createCommon();\nToolbarDivider.create = createShorthandFactory({\n  Component: ToolbarDivider,\n  mappedProp: 'content'\n});\nToolbarDivider.shorthandConfig = {\n  mappedProp: 'content'\n};\nexport default ToolbarDivider;","map":{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["toolbarDividerClassName","ToolbarDivider","compose","context","React","setStart","setEnd","useTelemetry","composeOptions","accessibility","className","design","styles","variables","props","parentVariables","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","mergeComponentVariables","unstable_props","ElementType","getElementType","unhandledProps","useUnhandledProps","element","ref","root","displayName","handledProps","commonPropTypes","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { ProviderContextPrepared } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n  ShorthandConfig,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\nexport const toolbarDividerClassName = 'ui-toolbar__divider';\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nconst ToolbarDivider = compose<'div', ToolbarDividerProps, ToolbarDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeComponentVariables(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ref, ...unhandledProps, className: classes.root })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    displayName: 'ToolbarDivider',\n    className: toolbarDividerClassName,\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'styles', 'variables', 'design'],\n  },\n) as ComponentWithAs<'div', ToolbarDividerProps> & {\n  create: ShorthandFactory<ToolbarDividerProps>;\n  shorthandConfig: ShorthandConfig<ToolbarDividerProps>;\n};\nToolbarDivider.propTypes = commonPropTypes.createCommon();\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\nToolbarDivider.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nexport default ToolbarDivider;\n"]},"metadata":{},"sourceType":"module"}