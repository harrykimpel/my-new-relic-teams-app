{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport handleRef from './handleRef';\nimport { refPropType } from './types';\n\nvar RefFindNode = /*#__PURE__*/function (_React$Component) {\n  _inherits(RefFindNode, _React$Component);\n\n  function RefFindNode() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RefFindNode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RefFindNode)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"prevNode\", null);\n\n    return _this;\n  }\n\n  _createClass(RefFindNode, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.prevNode = ReactDOM.findDOMNode(this);\n      handleRef(this.props.innerRef, this.prevNode);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var currentNode = ReactDOM.findDOMNode(this);\n\n      if (this.prevNode !== currentNode) {\n        this.prevNode = currentNode;\n        handleRef(this.props.innerRef, currentNode);\n      }\n\n      if (prevProps.innerRef !== this.props.innerRef) {\n        handleRef(this.props.innerRef, currentNode);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      handleRef(this.props.innerRef, null);\n      delete this.prevNode;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return children;\n    }\n  }]);\n\n  return RefFindNode;\n}(React.Component);\n\n_defineProperty(RefFindNode, \"displayName\", 'RefFindNode');\n\n_defineProperty(RefFindNode, \"propTypes\", process.env.NODE_ENV !== 'production' ? {\n  children: PropTypes.element.isRequired,\n  innerRef: refPropType.isRequired\n} : {});\n\nexport { RefFindNode as default };","map":{"version":3,"sources":["RefFindNode.tsx"],"names":["RefFindNode","React","Component","children","PropTypes","innerRef","refPropType","isRequired","ReactDOM","handleRef","prevProps","currentNode"],"mappings":";;;;;;;AAAA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,QAAA,MAAA,WAAA;AAEA,OAAA,SAAA,MAAA,aAAA;AACA,SAAA,WAAA,QAAA,SAAA;;IAEqBA,W;;;;;;;;;;;;;;;;+DAYK,I;;;;;;;wCAEJ;AAClB,WAAA,QAAA,GAAgBQ,QAAQ,CAARA,WAAAA,CAAhB,IAAgBA,CAAhB;AAEAC,MAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAAsB,KAA/BA,QAAS,CAATA;AACD;;;uCAEkBC,S,EAAqB;AACtC,UAAMC,WAAW,GAAGH,QAAQ,CAARA,WAAAA,CAApB,IAAoBA,CAApB;;AAEA,UAAI,KAAA,QAAA,KAAJ,WAAA,EAAmC;AACjC,aAAA,QAAA,GAAA,WAAA;AACAC,QAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,WAAS,CAATA;AACD;;AAED,UAAIC,SAAS,CAATA,QAAAA,KAAuB,KAAA,KAAA,CAA3B,QAAA,EAAgD;AAC9CD,QAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,WAAS,CAATA;AACD;AACF;;;2CAEsB;AACrBA,MAAAA,SAAS,CAAC,KAAA,KAAA,CAAD,QAAA,EAATA,IAAS,CAATA;AAEA,aAAO,KAAP,QAAA;AACD;;;6BAEQ;AAAA,UACCN,QADD,GACc,KADd,KACc,CADd,QAAA;AAGP,aAAA,QAAA;AACD;;;;EA3CsCF,KAAK,CAACC,S;;gBAA1BF,W,iBACE,a;;gBADFA,W,eAKjB,OAAO,CAAP,GAAA,CAAA,QAAA,KAAA,YAAA,GACI;AACEG,EAAAA,QAAQ,EAAEC,SAAS,CAATA,OAAAA,CADZ,UAAA;AAEEC,EAAAA,QAAQ,EAAEC,WAAW,CAACC;AAFxB,CADJ,GAKI,E;;SAVaP,W","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport handleRef from './handleRef';\nimport { RefProps, refPropType } from './types';\n\nexport default class RefFindNode extends React.Component<RefProps> {\n  static displayName = 'RefFindNode';\n\n  // TODO: use Babel plugin for this\n  static propTypes =\n    process.env.NODE_ENV !== 'production'\n      ? {\n          children: PropTypes.element.isRequired,\n          innerRef: refPropType.isRequired,\n        }\n      : {};\n\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    this.prevNode = ReactDOM.findDOMNode(this);\n\n    handleRef(this.props.innerRef, this.prevNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    const currentNode = ReactDOM.findDOMNode(this);\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}