{"ast":null,"code":"export var getTelemetry = function getTelemetry(displayName, telemetry) {\n  var start = -1;\n  var end = -1;\n\n  var setStart = function setStart() {\n    start = telemetry && telemetry.enabled ? performance.now() : -1;\n  };\n\n  var setEnd = function setEnd() {\n    if (telemetry && telemetry.enabled && start !== -1) {\n      end = performance.now();\n      var duration = end - start;\n\n      if (telemetry.performance[displayName]) {\n        telemetry.performance[displayName].count++;\n        telemetry.performance[displayName].msTotal += duration;\n        telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);\n        telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);\n      } else {\n        telemetry.performance[displayName] = {\n          count: 1,\n          msTotal: duration,\n          msMin: duration,\n          msMax: duration\n        };\n      }\n    }\n  };\n\n  return {\n    setStart: setStart,\n    setEnd: setEnd\n  };\n};\n\nvar useTelemetry = function useTelemetry(displayName, telemetry) {\n  return getTelemetry(displayName, telemetry);\n};\n\nexport default useTelemetry;","map":{"version":3,"sources":["telemetry/useTelemetry.ts"],"names":["getTelemetry","start","end","setStart","telemetry","performance","setEnd","duration","Math","count","msTotal","msMin","msMax","useTelemetry"],"mappings":"AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,WAAA,EAAA,SAAA,EAA+E;AACzG,MAAIC,KAAa,GAAG,CAApB,CAAA;AACA,MAAIC,GAAW,GAAG,CAAlB,CAAA;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBF,IAAAA,KAAK,GAAGG,SAAS,IAAIA,SAAS,CAAtBA,OAAAA,GAAiCC,WAAW,CAA5CD,GAAiCC,EAAjCD,GAAqD,CAA7DH,CAAAA;AADF,GAAA;;AAIA,MAAMK,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAIF,SAAS,IAAIA,SAAS,CAAtBA,OAAAA,IAAkCH,KAAK,KAAK,CAAhD,CAAA,EAAoD;AAClDC,MAAAA,GAAG,GAAGG,WAAW,CAAjBH,GAAMG,EAANH;AACA,UAAMK,QAAQ,GAAGL,GAAG,GAApB,KAAA;;AACA,UAAIE,SAAS,CAATA,WAAAA,CAAJ,WAAIA,CAAJ,EAAwC;AACtCA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,KAAAA;AACAA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,OAAAA,IAAAA,QAAAA;AACAA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,KAAAA,GAA2CI,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmBJ,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAA9DA,KAA2CI,CAA3CJ;AACAA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,KAAAA,GAA2CI,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmBJ,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAA9DA,KAA2CI,CAA3CJ;AAJF,OAAA,MAKO;AACLA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,IAAqC;AACnCK,UAAAA,KAAK,EAD8B,CAAA;AAEnCC,UAAAA,OAAO,EAF4B,QAAA;AAGnCC,UAAAA,KAAK,EAH8B,QAAA;AAInCC,UAAAA,KAAK,EAAEL;AAJ4B,SAArCH;AAMD;AACF;AAjBH,GAAA;;AAoBA,SAAO;AAAED,IAAAA,QAAQ,EAAV,QAAA;AAAYG,IAAAA,MAAM,EAANA;AAAZ,GAAP;AA5BK,CAAA;;AA+BP,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAA,WAAA,EAAA,SAAA,EAA+E;AAClG,SAAOb,YAAY,CAAA,WAAA,EAAnB,SAAmB,CAAnB;AADF,CAAA;;AAIA,eAAA,YAAA","sourcesContent":["import { Telemetry, UseTelemetryResult } from './types';\n\nexport const getTelemetry = (displayName: string, telemetry: Telemetry | undefined): UseTelemetryResult => {\n  let start: number = -1;\n  let end: number = -1;\n\n  const setStart = () => {\n    start = telemetry && telemetry.enabled ? performance.now() : -1;\n  };\n\n  const setEnd = () => {\n    if (telemetry && telemetry.enabled && start !== -1) {\n      end = performance.now();\n      const duration = end - start;\n      if (telemetry.performance[displayName]) {\n        telemetry.performance[displayName].count++;\n        telemetry.performance[displayName].msTotal += duration;\n        telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);\n        telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);\n      } else {\n        telemetry.performance[displayName] = {\n          count: 1,\n          msTotal: duration,\n          msMin: duration,\n          msMax: duration,\n        };\n      }\n    }\n  };\n\n  return { setStart, setEnd };\n};\n\nconst useTelemetry = (displayName: string, telemetry: Telemetry | undefined): UseTelemetryResult => {\n  return getTelemetry(displayName, telemetry);\n};\n\nexport default useTelemetry;\n"]},"metadata":{},"sourceType":"module"}