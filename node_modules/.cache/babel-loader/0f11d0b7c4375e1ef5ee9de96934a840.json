{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport { embedBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport Image from '../Image/Image';\nimport Video from '../Video/Video';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { getElementType, useUnhandledProps, useAutoControlled, useAccessibility, useTelemetry, useStyles } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var embedClassName = 'ui-embed';\nexport var embedSlotClassNames = {\n  control: \"\".concat(embedClassName, \"__control\")\n};\nexport var Embed = function Embed(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Embed.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var alt = props.alt,\n      title = props.title,\n      control = props.control,\n      iframe = props.iframe,\n      placeholder = props.placeholder,\n      video = props.video,\n      variables = props.variables,\n      styles = props.styles,\n      className = props.className,\n      design = props.design;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Embed.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Embed.displayName,\n    actionHandlers: {\n      performClick: function performClick(event) {\n        return handleClick(event);\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        alt: alt,\n        title: title\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultActive,\n    value: props.active,\n    initialValue: false\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      active = _useAutoControlled2[0],\n      setACtive = _useAutoControlled2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      iframeLoaded = _React$useState2[0],\n      setIframeLoaded = _React$useState2[1];\n\n  var frameRef = React.useRef();\n\n  var handleClick = function handleClick(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    var iframeNil = _isNil(props.iframe);\n\n    var newActive = !active;\n\n    if (iframeNil || !iframeNil && newActive) {\n      setACtive(newActive);\n\n      _invoke(props, 'onActiveChange', e, Object.assign({}, props, {\n        active: newActive\n      }));\n    }\n\n    _invoke(props, 'onClick', e, Object.assign({}, props, {\n      active: newActive\n    }));\n  };\n\n  var handleFrameOverrides = function handleFrameOverrides(predefinedProps) {\n    return {\n      onLoad: function onLoad(e) {\n        _invoke(predefinedProps, 'onLoad', e);\n\n        setIframeLoaded(true);\n        frameRef.current.contentWindow.focus();\n      }\n    };\n  };\n\n  var _useStyles = useStyles(Embed.displayName, {\n    className: embedClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        iframeLoaded: iframeLoaded,\n        active: active\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var placeholderElement = placeholder ? React.createElement(Image, {\n    src: placeholder,\n    styles: resolvedStyles.image,\n    variables: {\n      width: variables.width,\n      height: variables.height\n    }\n  }) : null;\n  var hasIframe = !_isNil(iframe);\n  var hasVideo = !_isNil(video);\n  var controlVisible = !active || hasVideo;\n  var placeholderVisible = !active || hasIframe && active && !iframeLoaded;\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), active && React.createElement(React.Fragment, null, Video.create(video, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('video', {\n        autoPlay: true,\n        controls: false,\n        loop: true,\n        muted: true,\n        poster: placeholder,\n        styles: resolvedStyles.video,\n        variables: {\n          width: variables.width,\n          height: variables.height\n        }\n      });\n    }\n  }), iframe && React.createElement(Ref, {\n    innerRef: frameRef\n  }, Box.create(iframe, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('iframe', {\n        as: 'iframe',\n        styles: resolvedStyles.iframe\n      });\n    },\n    overrideProps: handleFrameOverrides\n  }))), placeholderVisible && placeholderElement, controlVisible && Box.create(control, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('control', {\n        className: embedSlotClassNames.control,\n        styles: resolvedStyles.control\n      });\n    }\n  }));\n  setEnd();\n  return element;\n};\nEmbed.displayName = 'Embed';\nEmbed.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  active: PropTypes.bool,\n  defaultActive: PropTypes.bool,\n  control: customPropTypes.itemShorthand,\n  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n  onActiveChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand])\n});\nEmbed.defaultProps = {\n  as: 'span',\n  accessibility: embedBehavior,\n  control: {}\n};\nEmbed.handledProps = Object.keys(Embed.propTypes);\nEmbed.create = createShorthandFactory({\n  Component: Embed\n});\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\n\nexport default withSafeTypeForAs(Embed);","map":{"version":3,"sources":["components/Embed/Embed.tsx"],"names":["embedClassName","embedSlotClassNames","control","Embed","context","React","setStart","setEnd","useTelemetry","alt","title","iframe","placeholder","video","variables","styles","className","design","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","handleClick","mapPropsToBehavior","rtl","active","setACtive","useAutoControlled","defaultValue","value","initialValue","iframeLoaded","setIframeLoaded","frameRef","e","iframeNil","newActive","handleFrameOverrides","onLoad","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","placeholderElement","width","height","hasIframe","hasVideo","controlVisible","placeholderVisible","element","onClick","defaultProps","autoPlay","controls","loop","muted","poster","as","overrideProps","children","content","PropTypes","defaultActive","customPropTypes","onActiveChange","accessibility","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, embedBehavior, EmbedBehaviorProps } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport Image from '../Image/Image';\nimport Video, { VideoProps } from '../Video/Video';\nimport Box, { BoxProps } from '../Box/Box';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useStyles,\n} from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface EmbedSlotClassNames {\n  control: string;\n}\n\nexport interface EmbedProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<EmbedBehaviorProps>;\n\n  /** Alternative text. */\n  alt?: string;\n\n  /** Corresponds to HTML title attribute. */\n  title?: string;\n\n  /** Whether the embedded object should be active. */\n  active?: boolean;\n\n  /** Whether the embedded object should start active. */\n  defaultActive?: boolean;\n\n  /** Shorthand for an control. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for an embedded iframe. */\n  iframe?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'active' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveChange?: ComponentEventHandler<EmbedProps>;\n\n  /**\n   * Called when is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onClick?: ComponentEventHandler<EmbedProps>;\n\n  /** Image source URL for when video isn't playing. */\n  placeholder?: string;\n\n  /** Shorthand for an embedded video. */\n  video?: ShorthandValue<VideoProps>;\n}\n\nexport const embedClassName = 'ui-embed';\nexport const embedSlotClassNames: EmbedSlotClassNames = {\n  control: `${embedClassName}__control`,\n};\n\nexport type EmbedStylesProps = Required<Pick<EmbedProps, 'active'>> & { iframeLoaded: boolean };\n\nexport const Embed: React.FC<WithAsProp<EmbedProps>> & FluentComponentStaticProps<EmbedProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Embed.displayName, context.telemetry);\n  setStart();\n  const { alt, title, control, iframe, placeholder, video, variables, styles, className, design } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Embed.handledProps, props);\n\n  const getA11yProps = useAccessibility<EmbedBehaviorProps>(props.accessibility, {\n    debugName: Embed.displayName,\n    actionHandlers: {\n      performClick: event => handleClick(event),\n    },\n    mapPropsToBehavior: () => ({\n      alt,\n      title,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [active, setACtive] = useAutoControlled({\n    defaultValue: props.defaultActive,\n    value: props.active,\n    initialValue: false,\n  });\n\n  const [iframeLoaded, setIframeLoaded] = React.useState(false);\n  const frameRef = React.useRef<HTMLFrameElement>();\n\n  const handleClick = e => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const iframeNil = _.isNil(props.iframe);\n    const newActive = !active;\n\n    if (iframeNil || (!iframeNil && newActive)) {\n      setACtive(newActive);\n      _.invoke(props, 'onActiveChange', e, { ...props, active: newActive });\n    }\n\n    _.invoke(props, 'onClick', e, { ...props, active: newActive });\n  };\n\n  const handleFrameOverrides = predefinedProps => ({\n    onLoad: (e: React.SyntheticEvent) => {\n      _.invoke(predefinedProps, 'onLoad', e);\n      setIframeLoaded(true);\n      frameRef.current.contentWindow.focus();\n    },\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<EmbedStylesProps>(Embed.displayName, {\n    className: embedClassName,\n    mapPropsToStyles: () => ({\n      iframeLoaded,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const placeholderElement = placeholder ? (\n    <Image\n      src={placeholder}\n      styles={resolvedStyles.image}\n      variables={{ width: variables.width, height: variables.height }}\n    />\n  ) : null;\n\n  const hasIframe = !_.isNil(iframe);\n  const hasVideo = !_.isNil(video);\n  const controlVisible = !active || hasVideo;\n  const placeholderVisible = !active || (hasIframe && active && !iframeLoaded);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n    >\n      {active && (\n        <>\n          {Video.create(video, {\n            defaultProps: () =>\n              getA11yProps('video', {\n                autoPlay: true,\n                controls: false,\n                loop: true,\n                muted: true,\n                poster: placeholder,\n                styles: resolvedStyles.video,\n                variables: {\n                  width: variables.width,\n                  height: variables.height,\n                },\n              }),\n          })}\n          {iframe && (\n            <Ref innerRef={frameRef}>\n              {Box.create(iframe, {\n                defaultProps: () =>\n                  getA11yProps('iframe', {\n                    as: 'iframe',\n                    styles: resolvedStyles.iframe,\n                  }),\n                overrideProps: handleFrameOverrides,\n              })}\n            </Ref>\n          )}\n        </>\n      )}\n\n      {placeholderVisible && placeholderElement}\n      {controlVisible &&\n        Box.create(control, {\n          defaultProps: () =>\n            getA11yProps('control', {\n              className: embedSlotClassNames.control,\n              styles: resolvedStyles.control,\n            }),\n        })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nEmbed.displayName = 'Embed';\n\nEmbed.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  active: PropTypes.bool,\n  defaultActive: PropTypes.bool,\n  control: customPropTypes.itemShorthand,\n  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n  onActiveChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]),\n};\n\nEmbed.defaultProps = {\n  as: 'span',\n  accessibility: embedBehavior,\n  control: {},\n};\n\nEmbed.handledProps = Object.keys(Embed.propTypes) as any;\n\nEmbed.create = createShorthandFactory({ Component: Embed });\n\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\nexport default withSafeTypeForAs<typeof Embed, EmbedProps, 'span'>(Embed);\n"]},"metadata":{},"sourceType":"module"}