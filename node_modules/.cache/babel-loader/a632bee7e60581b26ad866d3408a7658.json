{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\nvar SplitButtonToggle = function SplitButtonToggle(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(SplitButtonToggle.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      as = props.as,\n      children = props.children,\n      content = props.content,\n      disabled = props.disabled,\n      primary = props.primary,\n      className = props.className,\n      size = props.size,\n      styles = props.styles,\n      variables = props.variables,\n      design = props.design;\n  var hasChildren = childrenExist(children);\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        as: as,\n        disabled: disabled\n      };\n    },\n    actionHandlers: {\n      performClick: function performClick(event) {\n        event.preventDefault();\n        handleClick(event);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        primary: primary,\n        disabled: disabled,\n        size: size\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  var ElementType = getElementType(props);\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var result = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), getA11Props('root', Object.assign({\n    onClick: handleClick,\n    disabled: disabled,\n    className: classes.root\n  }, unhandledProps))), hasChildren ? children : content);\n  setEnd();\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior\n};\nSplitButtonToggle.displayName = 'SplitButtonToggle';\nSplitButtonToggle.propTypes = Object.assign({}, commonPropTypes.createCommon({}), {\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size\n});\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes);\nSplitButtonToggle.create = createShorthandFactory({\n  Component: SplitButtonToggle,\n  mappedProp: 'content'\n});\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport default withSafeTypeForAs(SplitButtonToggle);","map":{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["splitButtonToggleClassName","SplitButtonToggle","context","React","setStart","setEnd","useTelemetry","accessibility","as","children","content","disabled","primary","className","size","styles","variables","design","props","hasChildren","childrenExist","getA11Props","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","event","handleClick","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","e","result","forElements","onClick","root","buttonBehavior","commonPropTypes","PropTypes","customPropTypes","secondary","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;AAAA,SAAA,cAAA,QAAA,yBAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,SAAA,aAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAWA,SAAA,iBAAA,QAAA,aAAA;AAOA,SAAA,cAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,EAAA,iBAAA,QAAA,0BAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AA2BA,OAAO,IAAMA,0BAA0B,GAAhC,wBAAA;;AAEP,IAAMC,iBAC8C,GAAG,SADjDA,iBACiD,CAAA,KAAA,EAAS;AAC9D,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD8D,MAAA,aAAA,GAEjCG,YAAY,CAACL,iBAAiB,CAAlB,WAAA,EAAgCC,OAAO,CAFlB,SAErB,CAFqB;AAAA,MAEtDE,QAFsD,GAAA,aAAA,CAAA,QAAA;AAAA,MAE5CC,MAF4C,GAAA,aAAA,CAAA,MAAA;;AAG9DD,EAAAA,QAAQ;AAHsD,MAKtDG,aALsD,GAKkDW,KALlD,CAAA,aAAA;AAAA,MAKvCV,EALuC,GAKkDU,KALlD,CAAA,EAAA;AAAA,MAKnCT,QALmC,GAKkDS,KALlD,CAAA,QAAA;AAAA,MAKzBR,OALyB,GAKkDQ,KALlD,CAAA,OAAA;AAAA,MAKhBP,QALgB,GAKkDO,KALlD,CAAA,QAAA;AAAA,MAKNN,OALM,GAKkDM,KALlD,CAAA,OAAA;AAAA,MAKGL,SALH,GAKkDK,KALlD,CAAA,SAAA;AAAA,MAKcJ,IALd,GAKkDI,KALlD,CAAA,IAAA;AAAA,MAKoBH,MALpB,GAKkDG,KALlD,CAAA,MAAA;AAAA,MAK4BF,SAL5B,GAKkDE,KALlD,CAAA,SAAA;AAAA,MAKuCD,MALvC,GAKkDC,KALlD,CAAA,MAAA;AAO9D,MAAMC,WAAW,GAAGC,aAAa,CAAjC,QAAiC,CAAjC;AAEA,MAAMC,WAAW,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AAClDC,IAAAA,SAAS,EAAEtB,iBAAiB,CADsB,WAAA;AAElDuB,IAAAA,kBAAkB,EAAE,SAAA,kBAAA,GAAA;AAAA,aAAO;AACzBhB,QAAAA,EAAE,EADuB,EAAA;AAEzBG,QAAAA,QAAQ,EAARA;AAFyB,OAAP;AAF8B,KAAA;AAMlDc,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,KAAA,EAAS;AACrBC,QAAAA,KAAK,CAALA,cAAAA;AACAC,QAAAA,WAAW,CAAXA,KAAW,CAAXA;AACD;AAJa,KANkC;AAYlDC,IAAAA,GAAG,EAAE3B,OAAO,CAAC2B;AAZqC,GAAhB,CAApC;;AAT8D,MAAA,UAAA,GAuB1CE,SAAS,CAA+B9B,iBAAiB,CAAhD,WAAA,EAA8D;AACzFY,IAAAA,SAAS,EADgF,0BAAA;AAEzFmB,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AACvBpB,QAAAA,OAAO,EADgB,OAAA;AAEvBD,QAAAA,QAAQ,EAFe,QAAA;AAGvBG,QAAAA,IAAI,EAAJA;AAHuB,OAAP;AAFuE,KAAA;AAOzFmB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BpB,QAAAA,SAAS,EADoB,SAAA;AAE7BI,QAAAA,MAAM,EAFuB,MAAA;AAG7BF,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAPiE,KAAA;AAazFa,IAAAA,GAAG,EAAE3B,OAAO,CAAC2B;AAb4E,GAA9D,CAvBiC;AAAA,MAuBtDC,OAvBsD,GAAA,UAAA,CAAA,OAAA;;AAuC9D,MAAMI,cAAc,GAAGC,iBAAiB,CAAClC,iBAAiB,CAAlB,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMmC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;;AAEA,MAAMT,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA6B;AAC/C,QAAA,QAAA,EAAc;AACZU,MAAAA,CAAC,CAADA,cAAAA;AACA;AACD;;AAED,IAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AANF,GAAA;;AASA,MAAMC,MAAM,GACV,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,GAA/B,CADN,EAEMnB,WAAW,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACboB,IAAAA,OAAO,EADM,WAAA;AAEb9B,IAAAA,QAAQ,EAFK,QAAA;AAGbE,IAAAA,SAAS,EAAEiB,OAAO,CAACY;AAHN,GAAA,EAFjB,cAEiB,CAAA,CAFjB,CAAA,EASGvB,WAAW,GAAA,QAAA,GAVhB,OACE,CADF;AAcAd,EAAAA,MAAM;AAEN,SAAA,MAAA;AApEF,CAAA;;AAuEAJ,iBAAiB,CAAjBA,YAAAA,GAAiC;AAC/BO,EAAAA,EAAE,EAD6B,QAAA;AAE/BD,EAAAA,aAAa,EAAEoC;AAFgB,CAAjC1C;AAKAA,iBAAiB,CAAjBA,WAAAA,GAAAA,mBAAAA;AAEAA,iBAAiB,CAAjBA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK2C,eAAe,CAAfA,YAAAA,CADL3C,EACK2C,CADL3C,EAAAA;AAEEU,EAAAA,QAAQ,EAAEkC,SAAS,CAFrB5C,IAAAA;AAGEwC,EAAAA,OAAO,EAAEI,SAAS,CAHpB5C,IAAAA;AAIEW,EAAAA,OAAO,EAAEkC,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,WAA0B,CAAzBA,CAAD,EAA0CD,SAAS,CAJpF5C,IAIiC,CAAtB6C,CAJX7C;AAKE8C,EAAAA,SAAS,EAAED,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,SAA0B,CAAzBA,CAAD,EAAwCD,SAAS,CALpF5C,IAKmC,CAAtB6C,CALb7C;AAMEa,EAAAA,IAAI,EAAEgC,eAAe,CAAChC;AANxBb,CAAAA,CAAAA;AASAA,iBAAiB,CAAjBA,YAAAA,GAAiC+C,MAAM,CAANA,IAAAA,CAAY/C,iBAAiB,CAA9DA,SAAiC+C,CAAjC/C;AAEAA,iBAAiB,CAAjBA,MAAAA,GAA2BgD,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,iBAAA;AAAgCC,EAAAA,UAAU,EAAE;AAA5C,CAAD,CAAjDlD;AAEA;;;;;;;AAMA,eAAemD,iBAAiB,CAAhC,iBAAgC,CAAhC","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\nconst SplitButtonToggle: React.FC<WithAsProp<SplitButtonToggleProps>> &\n  FluentComponentStaticProps<SplitButtonToggleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, as, children, content, disabled, primary, className, size, styles, variables, design } = props;\n\n  const hasChildren = childrenExist(children);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: () => ({\n      as,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: () => ({\n      primary,\n      disabled,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport default withSafeTypeForAs<typeof SplitButtonToggle, SplitButtonToggleProps, 'button'>(SplitButtonToggle);\n"]},"metadata":{},"sourceType":"module"}