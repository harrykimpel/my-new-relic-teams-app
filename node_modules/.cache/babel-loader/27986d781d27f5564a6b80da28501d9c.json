{"ast":null,"code":"import _has from \"lodash/has\";\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport Image from '../Image/Image';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nexport var labelClassName = 'ui-label';\n\nvar Label = function Label(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Label.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      circular = props.circular,\n      color = props.color,\n      content = props.content,\n      icon = props.icon,\n      iconPosition = props.iconPosition,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      image = props.image,\n      imagePosition = props.imagePosition;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Label.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Label.displayName, {\n    className: labelClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        hasActionableIcon: _has(icon, 'onClick'),\n        hasImage: !!image,\n        hasIcon: !!icon,\n        circular: circular,\n        color: color,\n        imagePosition: imagePosition,\n        iconPosition: iconPosition\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Label.handledProps, props);\n\n  if (childrenExist(children)) {\n    var _element = React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), {}, unhandledProps)), children);\n\n    setEnd();\n    return _element;\n  }\n\n  var imageElement = Image.create(image, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.image\n      };\n    }\n  });\n  var iconElement = Box.create(icon, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.icon\n      };\n    }\n  });\n  var contentElement = Box.create(content, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.content\n      };\n    }\n  });\n  var startImage = imagePosition === 'start' && imageElement;\n  var startIcon = iconPosition === 'start' && iconElement;\n  var endIcon = iconPosition === 'end' && iconElement;\n  var endImage = imagePosition === 'end' && imageElement;\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), startImage, startIcon, contentElement, endIcon, endImage);\n  setEnd();\n  return element;\n};\n\nLabel.displayName = 'Label';\nLabel.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  color: true,\n  content: 'shorthand'\n}), {\n  circular: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  image: customPropTypes.itemShorthandWithoutJSX,\n  imagePosition: PropTypes.oneOf(['start', 'end']),\n  fluid: PropTypes.bool\n});\nLabel.handledProps = Object.keys(Label.propTypes);\nLabel.defaultProps = {\n  as: 'span',\n  imagePosition: 'start',\n  iconPosition: 'end'\n};\nLabel.create = createShorthandFactory({\n  Component: Label,\n  mappedProp: 'content'\n});\n/**\n * A Label allows user to classify content.\n */\n\nexport default withSafeTypeForAs(Label);","map":{"version":3,"sources":["components/Label/Label.tsx"],"names":["labelClassName","Label","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","circular","color","content","icon","iconPosition","design","styles","variables","image","imagePosition","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasActionableIcon","hasImage","hasIcon","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","childrenExist","element","root","forElements","imageElement","defaultProps","iconElement","contentElement","startImage","startIcon","endIcon","endImage","PropTypes","customPropTypes","fluid","bool","Object","as","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  ColorComponentProps,\n  rtlTextContainer,\n} from '../../utils';\n\nimport Image, { ImageProps } from '../Image/Image';\nimport Box, { BoxProps } from '../Box/Box';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface LabelProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ColorComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A Label can be circular. */\n  circular?: boolean;\n\n  /** A Label can take up the width of its container. */\n  fluid?: boolean;\n\n  /** A Label can have an icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** A Label can position its Icon at the start or end of the layout. */\n  iconPosition?: 'start' | 'end';\n\n  /** A Label can contain an image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** A Label can position its image at the start or end of the layout. */\n  imagePosition?: 'start' | 'end';\n}\n\nexport type LabelStylesProps = Pick<LabelProps, 'circular' | 'color' | 'imagePosition' | 'iconPosition'> & {\n  hasImage: boolean;\n  hasIcon: boolean;\n  hasActionableIcon: boolean;\n};\nexport const labelClassName = 'ui-label';\n\nconst Label: React.FC<WithAsProp<LabelProps>> & FluentComponentStaticProps = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Label.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    circular,\n    color,\n    content,\n    icon,\n    iconPosition,\n    design,\n    styles,\n    variables,\n    image,\n    imagePosition,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Label.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<LabelStylesProps>(Label.displayName, {\n    className: labelClassName,\n    mapPropsToStyles: () => ({\n      hasActionableIcon: _.has(icon, 'onClick'),\n      hasImage: !!image,\n      hasIcon: !!icon,\n      circular,\n      color,\n      imagePosition,\n      iconPosition,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Label.handledProps, props);\n\n  if (childrenExist(children)) {\n    const element = (\n      <ElementType\n        {...getA11Props('root', {\n          className: classes.root,\n          ...rtlTextContainer.getAttributes({ forElements: [children] }),\n          ...unhandledProps,\n        })}\n      >\n        {children}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  }\n\n  const imageElement = Image.create(image, {\n    defaultProps: () => ({\n      styles: resolvedStyles.image,\n    }),\n  });\n  const iconElement = Box.create(icon, {\n    defaultProps: () => ({\n      styles: resolvedStyles.icon,\n    }),\n  });\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const startImage = imagePosition === 'start' && imageElement;\n  const startIcon = iconPosition === 'start' && iconElement;\n  const endIcon = iconPosition === 'end' && iconElement;\n  const endImage = imagePosition === 'end' && imageElement;\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {startImage}\n      {startIcon}\n      {contentElement}\n      {endIcon}\n      {endImage}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nLabel.displayName = 'Label';\n\nLabel.propTypes = {\n  ...commonPropTypes.createCommon({ color: true, content: 'shorthand' }),\n  circular: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  image: customPropTypes.itemShorthandWithoutJSX,\n  imagePosition: PropTypes.oneOf(['start', 'end']),\n  fluid: PropTypes.bool,\n};\nLabel.handledProps = Object.keys(Label.propTypes) as any;\n\nLabel.defaultProps = {\n  as: 'span',\n  imagePosition: 'start',\n  iconPosition: 'end',\n};\n\nLabel.create = createShorthandFactory({ Component: Label, mappedProp: 'content' });\n\n/**\n * A Label allows user to classify content.\n */\nexport default withSafeTypeForAs<typeof Label, LabelProps, 'span'>(Label);\n"]},"metadata":{},"sourceType":"module"}