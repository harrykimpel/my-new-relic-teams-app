{"ast":null,"code":"import { compose, getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nexport var boxClassName = 'ui-box';\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\n\nvar Box = compose(function (props, ref, composeOptions) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      content = props.content;\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: composeOptions.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(composeOptions.displayName, {\n    className: composeOptions.className,\n    composeOptions: composeOptions,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl,\n    unstable_props: props\n  }),\n      classes = _useStyles.classes;\n\n  var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n  var ElementType = getElementType(props);\n  var result = React.createElement(ElementType, getA11yProps('root', Object.assign({}, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {\n    className: classes.root,\n    ref: ref\n  }, unhandledProps)), childrenExist(children) ? children : content);\n  setEnd();\n  return result;\n}, {\n  className: boxClassName,\n  displayName: 'Box',\n  handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables']\n});\nBox.propTypes = commonPropTypes.createCommon();\nBox.create = createShorthandFactory({\n  Component: Box\n});\nexport default Box;","map":{"version":3,"sources":["components/Box/Box.tsx"],"names":["boxClassName","Box","compose","context","React","setStart","setEnd","useTelemetry","composeOptions","accessibility","className","design","styles","variables","children","content","props","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","unstable_props","unhandledProps","useUnhandledProps","ElementType","getElementType","result","forElements","ref","childrenExist","displayName","handledProps","commonPropTypes","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  UIComponentProps,\n  ShorthandFactory,\n} from '../../utils';\nimport { ProviderContextPrepared } from '../../types';\n\nexport interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\nexport type BoxStylesProps = never;\n\nexport const boxClassName = 'ui-box';\n\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\nconst Box = compose<'div', BoxProps, BoxStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context: ProviderContextPrepared = React.useContext(ThemeContext);\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables, children, content } = props;\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<BoxStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const result = (\n      <ElementType\n        {...getA11yProps('root', {\n          ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: boxClassName,\n    displayName: 'Box',\n    handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'div', BoxProps> & { create: ShorthandFactory<BoxProps> };\n\nBox.propTypes = commonPropTypes.createCommon();\nBox.create = createShorthandFactory({ Component: Box });\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}