{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { tableCellBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nexport var tableCellClassName = 'ui-table__cell';\nexport var tableCellSlotClassNames = {\n  content: \"\".concat(tableCellClassName, \"__content\")\n};\n\nvar TableCell = function TableCell(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TableCell.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var cellRef = React.useRef();\n  var children = props.children,\n      content = props.content,\n      truncateContent = props.truncateContent,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var hasChildren = childrenExist(children);\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: function focusCell(e) {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: function performClick(e) {\n        handleClick(e);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        truncateContent: truncateContent\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleClick = function handleClick(e) {\n    if (e.currentTarget === e.target) {\n      _invoke(props, 'onClick', e, props);\n\n      e.preventDefault();\n    }\n  };\n\n  var element = React.createElement(Ref, {\n    innerRef: cellRef\n  }, getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), hasChildren ? children : Box.create(content, {\n    defaultProps: function defaultProps() {\n      return {\n        className: tableCellSlotClassNames.content,\n        styles: resolvedStyles.content\n      };\n    }\n  }))));\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\nTableCell.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),\n  truncateContent: PropTypes.bool\n});\nTableCell.handledProps = Object.keys(TableCell.propTypes);\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior\n};\nTableCell.create = createShorthandFactory({\n  Component: TableCell,\n  mappedProp: 'content'\n});\n/**\n * Component represents a table cell\n */\n\nexport default withSafeTypeForAs(TableCell);","map":{"version":3,"sources":["components/Table/TableCell.tsx"],"names":["tableCellClassName","tableCellSlotClassNames","content","TableCell","context","React","setStart","setEnd","useTelemetry","cellRef","children","truncateContent","className","design","styles","variables","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","focusCell","e","performClick","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","onClick","defaultProps","customPropTypes","PropTypes","bool","Object","accessibility","tableCellBehavior","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport Box, { BoxProps } from '../Box/Box';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nexport const tableCellClassName = 'ui-table__cell';\nexport const tableCellSlotClassNames: TableCellSlotClassNames = {\n  content: `${tableCellClassName}__content`,\n};\n\nconst TableCell: React.FC<WithAsProp<TableCellProps>> & FluentComponentStaticProps<TableCellProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ className: tableCellSlotClassNames.content, styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n\n/**\n * Component represents a table cell\n */\nexport default withSafeTypeForAs<typeof TableCell, TableCellProps, 'div'>(TableCell);\n"]},"metadata":{},"sourceType":"module"}