{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport Box from '../Box/Box';\nimport Image from '../Image/Image';\nimport Label from '../Label/Label';\nimport Status from '../Status/Status';\nimport { withSafeTypeForAs } from '../../types';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nexport var avatarClassName = 'ui-avatar';\n\nvar Avatar = function Avatar(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Avatar.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      getInitials = props.getInitials,\n      label = props.label,\n      icon = props.icon,\n      image = props.image,\n      name = props.name,\n      square = props.square,\n      size = props.size,\n      status = props.status,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Avatar.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Avatar.displayName, {\n    className: avatarClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        size: size,\n        square: square\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    }\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n  var imageElement = Image.create(image, {\n    defaultProps: function defaultProps() {\n      return getA11Props('image', {\n        fluid: true,\n        avatar: !square,\n        title: name,\n        styles: resolvedStyles.image\n      });\n    }\n  });\n  var iconElement = Box.create(icon, {\n    defaultProps: function defaultProps() {\n      return getA11Props('icon', {\n        title: name,\n        styles: resolvedStyles.icon\n      });\n    }\n  });\n  var labelElement = Label.create(label || {}, {\n    defaultProps: function defaultProps() {\n      return getA11Props('label', {\n        content: getInitials(name),\n        circular: !square,\n        title: name,\n        styles: resolvedStyles.label\n      });\n    }\n  });\n  var hasGlyph = !!image || !!icon;\n  var result = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), hasGlyph && (imageElement || iconElement), !hasGlyph && labelElement, Status.create(status, {\n    defaultProps: function defaultProps() {\n      return getA11Props('status', {\n        size: size,\n        styles: resolvedStyles.status\n      });\n    }\n  }));\n  setEnd();\n  return result;\n};\n\nAvatar.displayName = 'Avatar';\nAvatar.defaultProps = {\n  size: 'medium',\n  getInitials: function getInitials(name) {\n    if (!name) {\n      return '';\n    }\n\n    var reducedName = name.replace(/\\s*\\(.*?\\)\\s*/g, ' ').replace(/\\s*{.*?}\\s*/g, ' ').replace(/\\s*\\[.*?]\\s*/g, ' ');\n    var initials = reducedName.split(' ').filter(function (item) {\n      return item !== '';\n    }).map(function (item) {\n      return item.charAt(0);\n    }).reduce(function (accumulator, currentValue) {\n      return accumulator + currentValue;\n    });\n\n    if (initials.length > 2) {\n      return initials.charAt(0) + initials.charAt(initials.length - 1);\n    }\n\n    return initials;\n  }\n};\nAvatar.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  name: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  label: customPropTypes.itemShorthand,\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  status: customPropTypes.itemShorthand,\n  getInitials: PropTypes.func\n});\nAvatar.handledProps = Object.keys(Avatar.propTypes);\nAvatar.create = createShorthandFactory({\n  Component: Avatar,\n  mappedProp: 'name'\n});\n/**\n * An Avatar is a graphical representation of a user.\n */\n\nexport default withSafeTypeForAs(Avatar);","map":{"version":3,"sources":["components/Avatar/Avatar.tsx"],"names":["avatarClassName","Avatar","context","React","setStart","setEnd","useTelemetry","accessibility","className","design","getInitials","label","icon","image","name","square","size","status","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","imageElement","defaultProps","fluid","avatar","title","iconElement","labelElement","content","circular","hasGlyph","result","root","reducedName","initials","item","accumulator","children","PropTypes","customPropTypes","func","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport Box, { BoxProps } from '../Box/Box';\nimport Image, { ImageProps } from '../Image/Image';\nimport Label, { LabelProps } from '../Label/Label';\nimport Status, { StatusProps } from '../Status/Status';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\n\nexport interface AvatarProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Avatar can contain icon. It will be rendered only if the image is not present. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for the image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Shorthand for the label. */\n  label?: ShorthandValue<LabelProps>;\n\n  /** The name used for displaying the initials of the avatar if the image is not provided. */\n  name?: string;\n\n  /** The avatar can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n\n  /** Shorthand for the status of the user. */\n  status?: ShorthandValue<StatusProps>;\n\n  /** Custom method for generating the initials from the name property, which is shown if no image is provided. */\n  getInitials?: (name: string) => string;\n}\n\nexport type AvatarStylesProps = Pick<AvatarProps, 'size' | 'square'>;\nexport const avatarClassName = 'ui-avatar';\n\nconst Avatar: React.FC<WithAsProp<AvatarProps>> & FluentComponentStaticProps<AvatarProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Avatar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    className,\n    design,\n    getInitials,\n    label,\n    icon,\n    image,\n    name,\n    square,\n    size,\n    status,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Avatar.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles(Avatar.displayName, {\n    className: avatarClassName,\n    mapPropsToStyles: () => ({ size, square }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11Props('image', {\n        fluid: true,\n        avatar: !square,\n        title: name,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        title: name,\n        styles: resolvedStyles.icon,\n      }),\n  });\n\n  const labelElement = Label.create(label || {}, {\n    defaultProps: () =>\n      getA11Props('label', {\n        content: getInitials(name),\n        circular: !square,\n        title: name,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const hasGlyph = !!image || !!icon;\n\n  const result = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {hasGlyph && (imageElement || iconElement)}\n      {!hasGlyph && labelElement}\n      {Status.create(status, {\n        defaultProps: () =>\n          getA11Props('status', {\n            size,\n            styles: resolvedStyles.status,\n          }),\n      })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAvatar.displayName = 'Avatar';\n\nAvatar.defaultProps = {\n  size: 'medium',\n  getInitials(name: string) {\n    if (!name) {\n      return '';\n    }\n\n    const reducedName = name\n      .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n      .replace(/\\s*{.*?}\\s*/g, ' ')\n      .replace(/\\s*\\[.*?]\\s*/g, ' ');\n\n    const initials = reducedName\n      .split(' ')\n      .filter(item => item !== '')\n      .map(item => item.charAt(0))\n      .reduce((accumulator, currentValue) => accumulator + currentValue);\n\n    if (initials.length > 2) {\n      return initials.charAt(0) + initials.charAt(initials.length - 1);\n    }\n    return initials;\n  },\n};\n\nAvatar.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  name: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  label: customPropTypes.itemShorthand,\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  status: customPropTypes.itemShorthand,\n  getInitials: PropTypes.func,\n};\nAvatar.handledProps = Object.keys(Avatar.propTypes) as any;\n\nAvatar.create = createShorthandFactory({ Component: Avatar, mappedProp: 'name' });\n\n/**\n * An Avatar is a graphical representation of a user.\n */\nexport default withSafeTypeForAs<typeof Avatar, AvatarProps>(Avatar);\n"]},"metadata":{},"sourceType":"module"}