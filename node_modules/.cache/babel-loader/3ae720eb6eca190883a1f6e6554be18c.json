{"ast":null,"code":"import _round from \"lodash/round\";\nimport isBrowser from './isBrowser';\nvar DEFAULT_REM_SIZE_IN_PX = 16;\nvar _documentRemSize = null;\n\nvar getDocumentRemSize = function getDocumentRemSize() {\n  return isBrowser() ? // eslint-disable-next-line no-undef\n  getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX : DEFAULT_REM_SIZE_IN_PX;\n};\n\nvar getFontSizeValue = function getFontSizeValue(size) {\n  return size && parseFloat(size) || null;\n};\n/**\n * Converts the provided px size to rem based on the default font size of 16px unless\n * the HTML font size has been previously defined with setHTMLFontSize().\n * @param valueInPx - The px value to convert to rem.\n * @param baseRemSize - Rem size to use for conversions. Optional - document's font size will be taken otherwise.\n * @example\n * ```\n * // Returns '1rem' for default document font size (16px).\n * pxToRem(16)\n *\n * // Returns '2rem'.\n * pxToRem(32, 16)\n * ```\n * @returns The value converted to the rem.\n */\n\n\nexport var pxToRem = function pxToRem(valueInPx, baseRemSize) {\n  if (!baseRemSize && !_documentRemSize) {\n    // there is no way how to reset the cached value\n    // invalidating the cache is not possible as resetting cached value won't trigger recalculation of site variables,\n    // for which originally computed values will stay unchanged\n    _documentRemSize = getDocumentRemSize();\n  }\n\n  var remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;\n  var convertedValueInRems = valueInPx / remSize;\n  return \"\".concat(_round(convertedValueInRems, 4), \"rem\");\n};","map":{"version":3,"sources":["utils/fontSizeUtility.ts"],"names":["DEFAULT_REM_SIZE_IN_PX","_documentRemSize","getDocumentRemSize","isBrowser","getFontSizeValue","getComputedStyle","document","size","parseFloat","pxToRem","remSize","baseRemSize","convertedValueInRems","valueInPx"],"mappings":";AACA,OAAA,SAAA,MAAA,aAAA;AAEA,IAAMA,sBAAsB,GAA5B,EAAA;AAEA,IAAIC,gBAA+B,GAAnC,IAAA;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAc;AACvC,SAAOC,SAAS,KACZ;AACAC,EAAAA,gBAAgB,CAACC,gBAAgB,CAACC,QAAQ,CAAzBD,eAAgB,CAAhBA,CAAjBD,QAAgB,CAAhBA,IAFY,sBAAA,GAAhB,sBAAA;AADF,CAAA;;AAOA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAyC;AAChE,SAAQG,IAAI,IAAIC,UAAU,CAAnB,IAAmB,CAAlBD,IAAR,IAAA;AADF,CAAA;AAIA;;;;;;;;;;;;;;;;;AAeA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAA,SAAA,EAAA,WAAA,EAAqD;AAC1E,MAAI,CAAA,WAAA,IAAgB,CAApB,gBAAA,EAAuC;AACrC;AACA;AACA;AACAR,IAAAA,gBAAgB,GAAGC,kBAAnBD,EAAAA;AACD;;AAED,MAAMS,OAAO,GAAGC,WAAW,IAAXA,gBAAAA,IAAhB,sBAAA;AACA,MAAMC,oBAAoB,GAAGC,SAAS,GAAtC,OAAA;AAEA,SAAA,GAAA,MAAA,CAAU,MAAA,CAAA,oBAAA,EAAV,CAAU,CAAV,EAAA,KAAA,CAAA;AAXK,CAAA","sourcesContent":["import * as _ from 'lodash';\nimport isBrowser from './isBrowser';\n\nconst DEFAULT_REM_SIZE_IN_PX = 16;\n\nlet _documentRemSize: number | null = null;\n\nconst getDocumentRemSize = (): number => {\n  return isBrowser()\n    ? // eslint-disable-next-line no-undef\n      getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX\n    : DEFAULT_REM_SIZE_IN_PX;\n};\n\nconst getFontSizeValue = (size?: string | null): number | null => {\n  return (size && parseFloat(size)) || null;\n};\n\n/**\n * Converts the provided px size to rem based on the default font size of 16px unless\n * the HTML font size has been previously defined with setHTMLFontSize().\n * @param valueInPx - The px value to convert to rem.\n * @param baseRemSize - Rem size to use for conversions. Optional - document's font size will be taken otherwise.\n * @example\n * ```\n * // Returns '1rem' for default document font size (16px).\n * pxToRem(16)\n *\n * // Returns '2rem'.\n * pxToRem(32, 16)\n * ```\n * @returns The value converted to the rem.\n */\nexport const pxToRem = (valueInPx: number, baseRemSize?: number): string => {\n  if (!baseRemSize && !_documentRemSize) {\n    // there is no way how to reset the cached value\n    // invalidating the cache is not possible as resetting cached value won't trigger recalculation of site variables,\n    // for which originally computed values will stay unchanged\n    _documentRemSize = getDocumentRemSize();\n  }\n\n  const remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;\n  const convertedValueInRems = valueInPx / remSize;\n\n  return `${_.round(convertedValueInRems, 4)}rem`;\n};\n"]},"metadata":{},"sourceType":"module"}