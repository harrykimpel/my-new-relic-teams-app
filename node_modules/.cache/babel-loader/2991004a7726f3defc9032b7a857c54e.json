{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as keyboardKey from 'keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @description\n * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.\n * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.\n * Adds 'tabIndex' as '-1' if the item is not a leaf.\n *\n * @specification\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\n\nvar hierarchicalTreeItemBehavior = function hierarchicalTreeItemBehavior(props) {\n  var _ref;\n\n  return {\n    attributes: {\n      root: Object.assign({\n        role: 'none'\n      }, props.items && props.items.length && (_ref = {\n        'aria-expanded': props.open,\n        tabIndex: -1\n      }, _defineProperty(_ref, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_ref, \"role\", 'treeitem'), _ref))\n    },\n    keyActions: {\n      root: Object.assign({\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: keyboardKey.Spacebar\n          }]\n        }\n      }, isSubtreeOpen(props) && {\n        receiveFocus: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        collapse: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        focusSubtree: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        }\n      }, {}, !isSubtreeOpen(props) && {\n        expand: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        }\n      })\n    }\n  };\n};\n/** Checks if current tree item has a subtree and it is opened */\n\n\nvar isSubtreeOpen = function isSubtreeOpen(props) {\n  var items = props.items,\n      open = props.open;\n  return !!(items && items.length && open);\n};\n\nexport default hierarchicalTreeItemBehavior;","map":{"version":3,"sources":["behaviors/HierarchicalTree/hierarchicalTreeItemBehavior.ts"],"names":["hierarchicalTreeItemBehavior","attributes","root","role","props","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","Spacebar","isSubtreeOpen","receiveFocus","ArrowLeft","collapse","focusSubtree","ArrowRight","expand","items","open"],"mappings":";AAAA,OAAO,KAAP,WAAA,MAAA,cAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;;AAaA,IAAMA,4BAAkE,GAAG,SAArEA,4BAAqE,CAAA,KAAA,EAAK;AAAA,MAAA,IAAA;;AAAA,SAAK;AACnFC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACFC,QAAAA,IAAI,EAAE;AADJ,OAAA,EAEE,KAAK,CAAL,KAAA,IACFC,KAAK,CAALA,KAAAA,CADE,MAAA,KAAA,IAAA,GAAA;AAEA,yBAAiBA,KAAK,CAFtB,IAAA;AAGAC,QAAAA,QAAQ,EAAE,CAAC;AAHX,OAAA,EAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAFF,IAEE,CAFF;AADM,KADuE;AAanFC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACFK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEC,WAAW,CAACE;AAAvB,WAAjC;AADL;AADZ,OAAA,EAIEC,aAAa,CAAbA,KAAa,CAAbA,IAAwB;AAC1BC,QAAAA,YAAY,EAAE;AACZN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADL,SADY;AAI1BC,QAAAA,QAAQ,EAAE;AACRR,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADT,SAJgB;AAO1BE,QAAAA,YAAY,EAAE;AACZT,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACQ;AAAvB,WAAD;AADL;AAPY,OAJ1B,EAAA,EAAA,EAeE,CAACL,aAAa,CAAd,KAAc,CAAd,IAAyB;AAC3BM,QAAAA,MAAM,EAAE;AACNX,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACQ;AAAvB,WAAD;AADX;AADmB,OAf3B;AADM;AAbuE,GAAL;AAAhF,CAAA;AA6CA;;;AACA,IAAML,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAA2C;AAAA,MACvDO,KADuD,GACvChB,KADuC,CAAA,KAAA;AAAA,MAChDiB,IADgD,GACvCjB,KADuC,CAAA,IAAA;AAE/D,SAAO,CAAC,EAAEgB,KAAK,IAAIA,KAAK,CAAdA,MAAAA,IAAV,IAAQ,CAAR;AAFF,CAAA;;AAKA,eAAA,4BAAA","sourcesContent":["import * as keyboardKey from 'keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.\n * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.\n * Adds 'tabIndex' as '-1' if the item is not a leaf.\n *\n * @specification\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nconst hierarchicalTreeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'none',\n      ...(props.items &&\n        props.items.length && {\n          'aria-expanded': props.open,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem',\n        }),\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],\n      },\n      ...(isSubtreeOpen(props) && {\n        receiveFocus: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        collapse: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        focusSubtree: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n      ...(!isSubtreeOpen(props) && {\n        expand: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n    },\n  },\n});\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it contains items. */\n  items?: object[];\n  /** If item is a subtree, it indicates if it's open. */\n  open?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is opened */\nconst isSubtreeOpen = (props: TreeItemBehaviorProps): boolean => {\n  const { items, open } = props;\n  return !!(items && items.length && open);\n};\n\nexport default hierarchicalTreeItemBehavior;\n"]},"metadata":{},"sourceType":"module"}