{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { loaderBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponent, createShorthandFactory, commonPropTypes, getOrGenerateIdFromShorthand } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\nimport Text from '../Text/Text';\nexport var loaderClassName = 'ui-loader';\nexport var loaderSlotClassNames = {\n  indicator: \"\".concat(loaderClassName, \"__indicator\"),\n  label: \"\".concat(loaderClassName, \"__label\"),\n  svg: \"\".concat(loaderClassName, \"__svg\")\n};\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n */\n\nvar Loader = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Loader, _UIComponent);\n\n  function Loader(props, context) {\n    var _this;\n\n    _classCallCheck(this, Loader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Loader).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"delayTimer\", void 0);\n\n    _this.state = {\n      visible: _this.props.delay === 0,\n      labelId: ''\n    };\n    return _this;\n  }\n\n  _createClass(Loader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var delay = this.props.delay;\n\n      if (delay > 0) {\n        // @ts-ignore We have a collision between types from DOM and @types/node\n        this.delayTimer = setTimeout(function () {\n          _this2.setState({\n            visible: true\n          });\n        }, delay);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.delayTimer);\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          variables = _ref.variables,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          indicator = _this$props.indicator,\n          label = _this$props.label,\n          svg = _this$props.svg;\n      var _this$state = this.state,\n          visible = _this$state.visible,\n          labelId = _this$state.labelId;\n      var svgElement = Box.create(svg, {\n        defaultProps: function defaultProps() {\n          return {\n            className: loaderSlotClassNames.svg,\n            styles: styles.svg\n          };\n        }\n      });\n      return visible && React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, unhandledProps), Box.create(indicator, {\n        defaultProps: function defaultProps() {\n          return {\n            children: svgElement,\n            className: loaderSlotClassNames.indicator,\n            styles: styles.indicator\n          };\n        }\n      }), Text.create(label, {\n        defaultProps: function defaultProps() {\n          return {\n            className: loaderSlotClassNames.label,\n            styles: styles.label,\n            id: labelId\n          };\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      return {\n        labelId: getOrGenerateIdFromShorthand('loader-label-', props.label, state.labelId)\n      };\n    }\n  }]);\n\n  return Loader;\n}(UIComponent);\n\n_defineProperty(Loader, \"create\", void 0);\n\n_defineProperty(Loader, \"displayName\", 'Loader');\n\n_defineProperty(Loader, \"deprecated_className\", loaderClassName);\n\n_defineProperty(Loader, \"shorthandConfig\", void 0);\n\n_defineProperty(Loader, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  delay: PropTypes.number,\n  indicator: customPropTypes.itemShorthand,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n  size: customPropTypes.size,\n  svg: customPropTypes.itemShorthand\n}));\n\n_defineProperty(Loader, \"defaultProps\", {\n  accessibility: loaderBehavior,\n  delay: 0,\n  indicator: {},\n  labelPosition: 'below',\n  svg: '',\n  size: 'medium'\n});\n\nLoader.create = createShorthandFactory({\n  Component: Loader,\n  mappedProp: 'label'\n});\nLoader.shorthandConfig = {\n  mappedProp: 'label'\n};\n/**\n * A Loader alerts a user to wait for an activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\n\nexport default withSafeTypeForAs(Loader);","map":{"version":3,"sources":["components/Loader/Loader.tsx"],"names":["loaderClassName","loaderSlotClassNames","indicator","label","svg","Loader","UIComponent","children","content","delay","PropTypes","number","customPropTypes","itemShorthand","inline","bool","labelPosition","size","accessibility","visible","labelId","props","state","getOrGenerateIdFromShorthand","setTimeout","clearTimeout","ElementType","classes","variables","styles","unhandledProps","svgElement","defaultProps","className","root","id","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, loaderBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  SizeValue,\n  ShorthandFactory,\n  getOrGenerateIdFromShorthand,\n  ShorthandConfig,\n} from '../../utils';\nimport { WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\n\nexport interface LoaderSlotClassNames {\n  indicator: string;\n  label: string;\n  svg: string;\n}\n\nexport interface LoaderProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Time in milliseconds after component mount before spinner is visible. */\n  delay?: number;\n\n  /** A loader can contain an indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** Loaders can appear inline with content. */\n  inline?: boolean;\n\n  /** A loader can contain a label. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A label in the loader can have different positions. */\n  labelPosition?: 'above' | 'below' | 'start' | 'end';\n\n  /** A size of the loader. */\n  size?: SizeValue;\n\n  /** A loader can contain a custom svg element. */\n  svg?: ShorthandValue<BoxProps>;\n}\n\nexport interface LoaderState {\n  visible: boolean;\n  labelId: string;\n}\n\nexport const loaderClassName = 'ui-loader';\nexport const loaderSlotClassNames: LoaderSlotClassNames = {\n  indicator: `${loaderClassName}__indicator`,\n  label: `${loaderClassName}__label`,\n  svg: `${loaderClassName}__svg`,\n};\n\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n */\nclass Loader extends UIComponent<WithAsProp<LoaderProps>, LoaderState> {\n  static create: ShorthandFactory<LoaderProps>;\n  static displayName = 'Loader';\n  static deprecated_className = loaderClassName;\n  static shorthandConfig: ShorthandConfig<LoaderProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    delay: PropTypes.number,\n    indicator: customPropTypes.itemShorthand,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n    size: customPropTypes.size,\n    svg: customPropTypes.itemShorthand,\n  };\n\n  static defaultProps = {\n    accessibility: loaderBehavior,\n    delay: 0,\n    indicator: {},\n    labelPosition: 'below',\n    svg: '',\n    size: 'medium',\n  };\n\n  delayTimer: number;\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      visible: this.props.delay === 0,\n      labelId: '',\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      labelId: getOrGenerateIdFromShorthand('loader-label-', props.label, state.labelId),\n    };\n  }\n\n  componentDidMount() {\n    const { delay } = this.props;\n\n    if (delay > 0) {\n      // @ts-ignore We have a collision between types from DOM and @types/node\n      this.delayTimer = setTimeout(() => {\n        this.setState({ visible: true });\n      }, delay);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.delayTimer);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, variables, styles, unhandledProps }) {\n    const { indicator, label, svg } = this.props;\n    const { visible, labelId } = this.state;\n\n    const svgElement = Box.create(svg, {\n      defaultProps: () => ({ className: loaderSlotClassNames.svg, styles: styles.svg }),\n    });\n\n    return (\n      visible && (\n        <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n          {Box.create(indicator, {\n            defaultProps: () => ({\n              children: svgElement,\n              className: loaderSlotClassNames.indicator,\n              styles: styles.indicator,\n            }),\n          })}\n          {Text.create(label, {\n            defaultProps: () => ({\n              className: loaderSlotClassNames.label,\n              styles: styles.label,\n              id: labelId,\n            }),\n          })}\n        </ElementType>\n      )\n    );\n  }\n}\n\nLoader.create = createShorthandFactory({ Component: Loader, mappedProp: 'label' });\nLoader.shorthandConfig = { mappedProp: 'label' };\n\n/**\n * A Loader alerts a user to wait for an activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\nexport default withSafeTypeForAs<typeof Loader, LoaderProps>(Loader);\n"]},"metadata":{},"sourceType":"module"}