{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _map from \"lodash/map\";\nimport { tableBehavior } from '@fluentui/accessibility';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, childrenExist, createShorthandFactory } from '../../utils';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport TableRow from './TableRow';\nimport TableCell from './TableCell'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\n\nvar handleVariablesOverrides = function handleVariablesOverrides(variables) {\n  return function (predefinedProps) {\n    return {\n      variables: mergeComponentVariables(variables, predefinedProps.variables)\n    };\n  };\n};\n\nexport var tableClassName = 'ui-table';\nexport var tableSlotClassNames = {\n  header: \"\".concat(tableClassName, \"__header\")\n};\nexport var Table = function Table(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Table.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      rows = props.rows,\n      header = props.header,\n      compact = props.compact,\n      accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var hasChildren = childrenExist(children);\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Table.handledProps, props);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: Table.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Table.displayName, {\n    className: tableClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var renderRows = function renderRows() {\n    return _map(rows, function (row, index) {\n      var props = {\n        compact: compact,\n        onClick: function onClick(e, props) {\n          _invoke(row, 'onClick', e, props);\n        }\n      };\n      var overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(row, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('row', Object.assign({}, props));\n        },\n        overrideProps: overrideProps\n      });\n    });\n  };\n\n  var renderHeader = function renderHeader() {\n    if (!header) {\n      return null;\n    }\n\n    var headerRowProps = {\n      header: true,\n      compact: compact,\n      className: tableSlotClassNames.header\n    };\n    var overrideProps = handleVariablesOverrides(variables);\n    return TableRow.create(header, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('row', Object.assign({}, headerRowProps));\n      },\n      overrideProps: overrideProps\n    });\n  };\n\n  var element = getA11yProps.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), hasChildren && children, !hasChildren && renderHeader(), !hasChildren && renderRows()));\n  setEnd();\n  return element;\n};\nTable.displayName = 'Table';\nTable.Cell = TableCell;\nTable.Row = TableRow;\nTable.create = createShorthandFactory({\n  Component: Table\n});\nTable.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool\n});\nTable.handledProps = Object.keys(Table.propTypes);\nTable.defaultProps = {\n  as: 'div',\n  accessibility: tableBehavior\n};\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\n\nexport default withSafeTypeForAs(Table);","map":{"version":3,"sources":["components/Table/Table.tsx"],"names":["handleVariablesOverrides","variables","mergeComponentVariables","predefinedProps","tableClassName","tableSlotClassNames","header","Table","context","React","setStart","setEnd","useTelemetry","children","rows","compact","accessibility","className","design","styles","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","renderRows","onClick","overrideProps","defaultProps","renderHeader","headerRowProps","element","root","createShorthandFactory","Component","content","customPropTypes","PropTypes","bool","Object","as","tableBehavior","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, tableBehavior, TableBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useTelemetry, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  childrenExist,\n  createShorthandFactory,\n} from '../../utils';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport TableRow, { TableRowProps } from './TableRow';\nimport TableCell from './TableCell';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport {\n  WithAsProp,\n  ShorthandCollection,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<TableBehaviorProps>;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nexport const tableClassName = 'ui-table';\nexport const tableSlotClassNames: TableSlotClassNames = {\n  header: `${tableClassName}__header`,\n};\n\nexport type TableStylesProps = never;\n\nexport const Table: React.FC<WithAsProp<TableProps>> &\n  FluentComponentStaticProps<TableProps> & {\n    Cell: typeof TableCell;\n    Row: typeof TableRow;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Table.displayName, context.telemetry);\n  setStart();\n  const { children, rows, header, compact, accessibility, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Table.handledProps, props);\n\n  const getA11yProps = useAccessibility<TableBehaviorProps>(accessibility, {\n    debugName: Table.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableStylesProps>(Table.displayName, {\n    className: tableClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderRows = () => {\n    return _.map(rows, (row: TableRowProps, index: number) => {\n      const props = {\n        compact,\n        onClick: (e, props) => {\n          _.invoke(row, 'onClick', e, props);\n        },\n      } as TableRowProps;\n      const overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(row, {\n        defaultProps: () =>\n          getA11yProps('row', {\n            ...props,\n          }),\n        overrideProps,\n      });\n    });\n  };\n\n  const renderHeader = () => {\n    if (!header) {\n      return null;\n    }\n\n    const headerRowProps = {\n      header: true,\n      compact,\n      className: tableSlotClassNames.header,\n    } as TableRowProps;\n\n    const overrideProps = handleVariablesOverrides(variables);\n\n    return TableRow.create(header, {\n      defaultProps: () =>\n        getA11yProps('row', {\n          ...headerRowProps,\n        }),\n      overrideProps,\n    });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren && children}\n      {/* <thead> */}\n      {!hasChildren && renderHeader()}\n      {/* </thead> */}\n      {/* <tbody> */}\n      {!hasChildren && renderRows()}\n      {/* </tbody> */}\n    </ElementType>,\n  );\n  setEnd();\n  return element;\n};\n\nTable.displayName = 'Table';\n\nTable.Cell = TableCell;\n\nTable.Row = TableRow;\n\nTable.create = createShorthandFactory({\n  Component: Table,\n});\n\nTable.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool,\n};\n\nTable.handledProps = Object.keys(Table.propTypes) as any;\n\nTable.defaultProps = {\n  as: 'div',\n  accessibility: tableBehavior as Accessibility,\n};\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport default withSafeTypeForAs<typeof Table, TableProps, 'div'>(Table);\n"]},"metadata":{},"sourceType":"module"}