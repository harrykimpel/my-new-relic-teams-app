{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\n\nvar handleRef = function handleRef(ref, node) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error('We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.');\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && _typeof(ref) === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    ref.current = node;\n  }\n};\n\nexport default handleRef;","map":{"version":3,"sources":["handleRef.ts"],"names":["handleRef","process","ref"],"mappings":";AAEA;;;;;;;AAMA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAA,IAAA,EAA+C;AAC/D,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,QAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,YAAM,IAAA,KAAA,CAAN,iIAAM,CAAN;AAGD;AACF;;AAED,MAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BC,IAAAA,GAAG,CAAHA,IAAG,CAAHA;AACA;AACD;;AAED,MAAIA,GAAG,KAAHA,IAAAA,IAAgB,OAAA,CAAA,GAAA,CAAA,KAApB,QAAA,EAA6C;AAC3C;AACA;AACCA,IAAAA,GAAD,CAAA,OAACA,GAAD,IAACA;AACF;AAlBH,CAAA;;AAqBA,eAAA,SAAA","sourcesContent":["import * as React from 'react';\n\n/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nconst handleRef = <N>(ref: React.Ref<N> | undefined, node: N) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error(\n        'We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.',\n      );\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    (ref as React.MutableRefObject<N>).current = node;\n  }\n};\n\nexport default handleRef;\n"]},"metadata":{},"sourceType":"module"}