{"ast":null,"code":"import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var textClassName = 'ui-text';\n\nvar Text = function Text(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Text.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      align = props.align,\n      atMention = props.atMention,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      design = props.design,\n      disabled = props.disabled,\n      error = props.error,\n      important = props.important,\n      size = props.size,\n      styles = props.styles,\n      success = props.success,\n      timestamp = props.timestamp,\n      truncated = props.truncated,\n      temporary = props.temporary,\n      variables = props.variables,\n      weight = props.weight;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Text.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Text.displayName, {\n    className: textClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        atMention: atMention,\n        color: color,\n        important: important,\n        timestamp: timestamp,\n        truncated: truncated,\n        disabled: disabled,\n        error: error,\n        success: success,\n        temporary: temporary,\n        align: align,\n        weight: weight,\n        size: size\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var unhandledProps = useUnhandledProps(Text.handledProps, props);\n  var ElementType = getElementType(props);\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps)), childrenExist(children) ? children : content);\n  setEnd();\n  return element;\n};\n\nText.displayName = 'Text';\nText.defaultProps = {\n  as: 'span'\n};\nText.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  color: true\n}), {\n  atMention: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['me'])]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  important: PropTypes.bool,\n  size: customPropTypes.size,\n  weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']),\n  success: PropTypes.bool,\n  temporary: PropTypes.bool,\n  align: customPropTypes.align,\n  timestamp: PropTypes.bool,\n  truncated: PropTypes.bool\n});\nText.handledProps = Object.keys(Text.propTypes);\nText.create = createShorthandFactory({\n  Component: Text,\n  mappedProp: 'content'\n});\n/**\n * A Text consistently styles and formats occurrences of text.\n */\n\nexport default withSafeTypeForAs(Text);","map":{"version":3,"sources":["components/Text/Text.tsx"],"names":["textClassName","Text","context","React","setStart","setEnd","useTelemetry","accessibility","align","atMention","children","className","color","content","design","disabled","error","important","size","styles","success","timestamp","truncated","temporary","variables","weight","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","element","root","forElements","childrenExist","as","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ColorComponentProps,\n  rtlTextContainer,\n  SizeValue,\n  AlignValue,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface TextProps\n  extends UIComponentProps,\n    ContentComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** At mentions can be formatted to draw users' attention. Mentions for \"me\" can be formatted to appear differently. */\n  atMention?: boolean | 'me';\n\n  /** Set as disabled Text component */\n  disabled?: boolean;\n\n  /** Set as error Text component */\n  error?: boolean;\n\n  /** The text can appear more important and draw user's attention */\n  important?: boolean;\n\n  /** The size for the Text component */\n  size?: SizeValue;\n\n  /** The weight for the Text component */\n  weight?: 'light' | 'semilight' | 'regular' | 'semibold' | 'bold';\n\n  /** Set as success Text component */\n  success?: boolean;\n\n  /** The text can signify a temporary state */\n  temporary?: boolean;\n\n  /** Align text content. */\n  align?: AlignValue;\n\n  /** Set as timestamp Text component */\n  timestamp?: boolean;\n\n  /** Truncates text as needed */\n  truncated?: boolean;\n}\n\nexport type TextStylesProps = Pick<\n  TextProps,\n  | 'atMention'\n  | 'color'\n  | 'important'\n  | 'timestamp'\n  | 'truncated'\n  | 'disabled'\n  | 'error'\n  | 'success'\n  | 'temporary'\n  | 'align'\n  | 'weight'\n  | 'size'\n>;\n\nexport const textClassName = 'ui-text';\n\nconst Text: React.FC<WithAsProp<TextProps>> & FluentComponentStaticProps<TextProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Text.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    align,\n    atMention,\n    children,\n    className,\n    color,\n    content,\n    design,\n    disabled,\n    error,\n    important,\n    size,\n    styles,\n    success,\n    timestamp,\n    truncated,\n    temporary,\n    variables,\n    weight,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Text.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TextStylesProps>(Text.displayName, {\n    className: textClassName,\n    mapPropsToStyles: () => ({\n      atMention,\n      color,\n      important,\n      timestamp,\n      truncated,\n      disabled,\n      error,\n      success,\n      temporary,\n      align,\n      weight,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(Text.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nText.displayName = 'Text';\n\nText.defaultProps = {\n  as: 'span',\n};\nText.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  atMention: PropTypes.oneOfType<any>([PropTypes.bool, PropTypes.oneOf(['me'])]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  important: PropTypes.bool,\n  size: customPropTypes.size,\n  weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']),\n  success: PropTypes.bool,\n  temporary: PropTypes.bool,\n  align: customPropTypes.align,\n  timestamp: PropTypes.bool,\n  truncated: PropTypes.bool,\n};\nText.handledProps = Object.keys(Text.propTypes) as any;\n\nText.create = createShorthandFactory({ Component: Text, mappedProp: 'content' });\n\n/**\n * A Text consistently styles and formats occurrences of text.\n */\nexport default withSafeTypeForAs<typeof Text, TextProps, 'span'>(Text);\n"]},"metadata":{},"sourceType":"module"}