{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nexport var cardTopControlsClassName = 'ui-card__topcontrols';\n\nvar CardTopControls = function CardTopControls(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CardTopControls.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(CardTopControls.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardTopControls.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(CardTopControls.displayName, {\n    className: cardTopControlsClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), children);\n  setEnd();\n  return element;\n};\n\nCardTopControls.displayName = 'CardTopControls';\nCardTopControls.propTypes = Object.assign({}, commonPropTypes.createCommon());\nCardTopControls.handledProps = Object.keys(CardTopControls.propTypes);\nCardTopControls.create = createShorthandFactory({\n  Component: CardTopControls\n});\n/**\n * A CardTopControls is used to render control elements in the top of a Card component.\n */\n\nexport default withSafeTypeForAs(CardTopControls);","map":{"version":3,"sources":["components/Card/CardTopControls.tsx"],"names":["cardTopControlsClassName","CardTopControls","context","React","setStart","setEnd","useTelemetry","className","design","styles","variables","children","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","element","root","commonPropTypes","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"AACA,SAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AACA,SAAA,iBAAA,QAAA,aAAA;AACA,SAAA,eAAA,EAAA,sBAAA,QAAA,aAAA;AAUA,OAAO,IAAMA,wBAAwB,GAA9B,sBAAA;;AAEP,IAAMC,eAC4C,GAAG,SAD/CA,eAC+C,CAAA,KAAA,EAAS;AAC5D,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD4D,MAAA,aAAA,GAE/BG,YAAY,CAACL,eAAe,CAAhB,WAAA,EAA8BC,OAAO,CAFlB,SAEnB,CAFmB;AAAA,MAEpDE,QAFoD,GAAA,aAAA,CAAA,QAAA;AAAA,MAE1CC,MAF0C,GAAA,aAAA,CAAA,MAAA;;AAG5DD,EAAAA,QAAQ;AAHoD,MAKpDG,SALoD,GAKDK,KALC,CAAA,SAAA;AAAA,MAKzCJ,MALyC,GAKDI,KALC,CAAA,MAAA;AAAA,MAKjCH,MALiC,GAKDG,KALC,CAAA,MAAA;AAAA,MAKzBF,SALyB,GAKDE,KALC,CAAA,SAAA;AAAA,MAKdD,QALc,GAKDC,KALC,CAAA,QAAA;AAM5D,MAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACf,eAAe,CAAhB,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMgB,YAAY,GAAGC,gBAAgB,CAACN,KAAK,CAAN,aAAA,EAAsB;AACzDO,IAAAA,SAAS,EAAElB,eAAe,CAD+B,WAAA;AAEzDmB,IAAAA,GAAG,EAAElB,OAAO,CAACkB;AAF4C,GAAtB,CAArC;;AAR4D,MAAA,UAAA,GAaxCE,SAAS,CAA6BrB,eAAe,CAA5C,WAAA,EAA0D;AACrFM,IAAAA,SAAS,EAD4E,wBAAA;AAErFgB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BhB,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAF6D,KAAA;AAQrFU,IAAAA,GAAG,EAAElB,OAAO,CAACkB;AARwE,GAA1D,CAb+B;AAAA,MAapDC,OAboD,GAAA,UAAA,CAAA,OAAA;;AAwB5D,MAAMG,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMP,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdV,IAAAA,SAAS,EAAEc,OAAO,CAACI;AADL,GAAA,EADlB,cACkB,CAAA,CADlB,EADF,QACE,CADF;AAUApB,EAAAA,MAAM;AACN,SAAA,OAAA;AApCF,CAAA;;AAuCAJ,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA;AAEAA,eAAe,CAAfA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKyB,eAAe,CADpBzB,YACKyB,EADLzB,CAAAA;AAIAA,eAAe,CAAfA,YAAAA,GAA+B0B,MAAM,CAANA,IAAAA,CAAY1B,eAAe,CAA1DA,SAA+B0B,CAA/B1B;AAEAA,eAAe,CAAfA,MAAAA,GAAyB2B,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAE5B;AAAb,CAAD,CAA/CA;AAEA;;;;AAGA,eAAe6B,iBAAiB,CAAhC,eAAgC,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardTopControlsProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type CardTopControlsStylesProps = never;\nexport const cardTopControlsClassName = 'ui-card__topcontrols';\n\nconst CardTopControls: React.FC<WithAsProp<CardTopControlsProps>> &\n  FluentComponentStaticProps<CardTopControlsProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardTopControls.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardTopControls.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardTopControls.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardTopControlsStylesProps>(CardTopControls.displayName, {\n    className: cardTopControlsClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardTopControls.displayName = 'CardTopControls';\n\nCardTopControls.propTypes = {\n  ...commonPropTypes.createCommon(),\n};\n\nCardTopControls.handledProps = Object.keys(CardTopControls.propTypes) as any;\n\nCardTopControls.create = createShorthandFactory({ Component: CardTopControls });\n\n/**\n * A CardTopControls is used to render control elements in the top of a Card component.\n */\nexport default withSafeTypeForAs<typeof CardTopControls, CardTopControlsProps, 'div'>(CardTopControls);\n"]},"metadata":{},"sourceType":"module"}