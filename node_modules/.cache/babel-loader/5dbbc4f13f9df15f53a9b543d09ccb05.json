{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nexport var cardPreviewClassName = 'ui-card__preview';\n\nvar CardPreview = function CardPreview(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(CardPreview.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      horizontal = props.horizontal,\n      fitted = props.fitted;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(CardPreview.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardPreview.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(CardPreview.displayName, {\n    className: cardPreviewClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        horizontal: horizontal,\n        fitted: fitted\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), children);\n  setEnd();\n  return element;\n};\n\nCardPreview.displayName = 'CardPreview';\nCardPreview.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  horizontal: PropTypes.bool,\n  fitted: PropTypes.bool\n});\nCardPreview.handledProps = Object.keys(CardPreview.propTypes);\nCardPreview.create = createShorthandFactory({\n  Component: CardPreview\n});\n/**\n * A CardPreview is used to display data Card preview.\n */\n\nexport default withSafeTypeForAs(CardPreview);","map":{"version":3,"sources":["components/Card/CardPreview.tsx"],"names":["cardPreviewClassName","CardPreview","context","React","setStart","setEnd","useTelemetry","className","design","styles","variables","children","horizontal","fitted","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","commonPropTypes","PropTypes","bool","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardPreviewProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** If preview is in horizontal card. */\n  horizontal?: boolean;\n\n  /** A preview can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardPreviewStylesProps = Pick<CardPreviewProps, 'horizontal' | 'fitted'>;\nexport const cardPreviewClassName = 'ui-card__preview';\n\nconst CardPreview: React.FC<WithAsProp<CardPreviewProps>> & FluentComponentStaticProps<CardPreviewProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(CardPreview.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, horizontal, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardPreview.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardPreview.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardPreviewStylesProps>(CardPreview.displayName, {\n    className: cardPreviewClassName,\n    mapPropsToStyles: () => ({ horizontal, fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardPreview.displayName = 'CardPreview';\n\nCardPreview.propTypes = {\n  ...commonPropTypes.createCommon(),\n  horizontal: PropTypes.bool,\n  fitted: PropTypes.bool,\n};\n\nCardPreview.handledProps = Object.keys(CardPreview.propTypes) as any;\n\nCardPreview.create = createShorthandFactory({ Component: CardPreview });\n\n/**\n * A CardPreview is used to display data Card preview.\n */\nexport default withSafeTypeForAs<typeof CardPreview, CardPreviewProps, 'div'>(CardPreview);\n"]},"metadata":{},"sourceType":"module"}