{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './utils';\n/**\n * This hook returns context selected value by selector.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\n\nvar useContextSelector = function useContextSelector(context, selector) {\n  var _React$useContext = React.useContext(context),\n      subscribe = _React$useContext.subscribe,\n      value = _React$useContext.value;\n\n  var _ref = React.useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      _ref2 = _slicedToArray(_ref, 2),\n      forceUpdate = _ref2[1];\n\n  var ref = React.useRef();\n  var selected = selector(value);\n  useIsomorphicLayoutEffect(function () {\n    ref.current = {\n      selector: selector,\n      value: value,\n      selected: selected\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    var callback = function callback(nextState) {\n      try {\n        var reference = ref.current;\n\n        if (reference.value === nextState || Object.is(reference.selected, reference.selector(nextState))) {\n          // not changed\n          return;\n        }\n      } catch (e) {// ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n  return selected;\n};\n\nexport default useContextSelector;","map":{"version":3,"sources":["useContextSelector.ts"],"names":["useContextSelector","subscribe","value","React","forceUpdate","c","ref","selected","selector","useIsomorphicLayoutEffect","callback","reference","Object"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,SAAA,yBAAA,QAAA,SAAA;AAQA;;;;;;AAKA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,OAAA,EAAA,QAAA,EAGP;AAAA,MAAA,iBAAA,GACWG,KAAK,CAALA,UAAAA,CADX,OACWA,CADX;AAAA,MACVF,SADU,GAAA,iBAAA,CAAA,SAAA;AAAA,MACCC,KADD,GAAA,iBAAA,CAAA,KAAA;;AAAA,MAAA,IAAA,GAEM,KAAK,CAAL,UAAA,CAAiB,UAAA,CAAA,EAAA;AAAA,WAAeG,CAAC,GAAhB,CAAA;AAAjB,GAAA,EAFN,CAEM,CAFN;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,MAETD,WAFS,GAAA,KAAA,CAAA,CAAA,CAAA;;AAIlB,MAAME,GAAG,GAAGH,KAAK,CAAjB,MAAYA,EAAZ;AACA,MAAMI,QAAQ,GAAGC,QAAQ,CAAzB,KAAyB,CAAzB;AAEAC,EAAAA,yBAAyB,CAAC,YAAM;AAC9BH,IAAAA,GAAG,CAAHA,OAAAA,GAAc;AACZE,MAAAA,QAAQ,EADI,QAAA;AAEZN,MAAAA,KAAK,EAFO,KAAA;AAGZK,MAAAA,QAAQ,EAARA;AAHY,KAAdD;AADFG,GAAyB,CAAzBA;AAOAA,EAAAA,yBAAyB,CAAC,YAAM;AAC9B,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,SAAA,EAAsB;AACrC,UAAI;AACF,YAAMC,SAA+C,GAAGL,GAAG,CAA3D,OAAA;;AAIA,YAAIK,SAAS,CAATA,KAAAA,KAAAA,SAAAA,IAAiCC,MAAM,CAANA,EAAAA,CAAUD,SAAS,CAAnBC,QAAAA,EAA8BD,SAAS,CAATA,QAAAA,CAAnE,SAAmEA,CAA9BC,CAArC,EAAmG;AACjG;AACA;AACD;AARH,OAAA,CASE,OAAA,CAAA,EAAU,CACV;AACD;;AAEDR,MAAAA,WAAW;AAdb,KAAA;;AAiBA,WAAOH,SAAS,CAAhB,QAAgB,CAAhB;AAlBuB,GAAA,EAmBtB,CAnBHQ,SAmBG,CAnBsB,CAAzBA;AAqBA,SAAA,QAAA;AAtCF,CAAA;;AAyCA,eAAA,kBAAA","sourcesContent":["import * as React from 'react';\n\nimport { Context, ContextSelector, ContextValue } from './types';\nimport { useIsomorphicLayoutEffect } from './utils';\n\ntype UseSelectorRef<Value, SelectedValue> = {\n  selector: ContextSelector<Value, SelectedValue>;\n  selected: SelectedValue;\n  value: Value;\n};\n\n/**\n * This hook returns context selected value by selector.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\nconst useContextSelector = <Value, SelectedValue>(\n  context: Context<Value>,\n  selector: ContextSelector<Value, SelectedValue>,\n): SelectedValue => {\n  const { subscribe, value } = React.useContext((context as unknown) as Context<ContextValue<Value>>);\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  const ref = React.useRef<UseSelectorRef<Value, SelectedValue>>();\n  const selected = selector(value);\n\n  useIsomorphicLayoutEffect(() => {\n    ref.current = {\n      selector,\n      value,\n      selected,\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    const callback = (nextState: Value) => {\n      try {\n        const reference: UseSelectorRef<Value, SelectedValue> = ref.current as NonNullable<\n          UseSelectorRef<Value, SelectedValue>\n        >;\n\n        if (reference.value === nextState || Object.is(reference.selected, reference.selector(nextState))) {\n          // not changed\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n\n  return selected;\n};\n\nexport default useContextSelector;\n"]},"metadata":{},"sourceType":"module"}