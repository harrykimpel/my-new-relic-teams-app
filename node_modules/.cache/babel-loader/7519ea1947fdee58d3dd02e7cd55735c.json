{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport _findIndex from \"lodash/findIndex\"; // TODO:\n// vertical - padding variable?\n\nimport { radioGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { AutoControlledComponent, childrenExist, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';\nimport RadioGroupItem from './RadioGroupItem';\nimport { withSafeTypeForAs } from '../../types';\nexport var radioGroupClassName = 'ui-radiogroup';\n\nvar RadioGroup = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(RadioGroup, _AutoControlledCompon);\n\n  function RadioGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RadioGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      nextItem: function nextItem(event) {\n        return _this.setCheckedItem(event, 1);\n      },\n      prevItem: function prevItem(event) {\n        return _this.setCheckedItem(event, -1);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getItemProps\", function (item) {\n      return item.props || item;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCheckedItem\", function (event, direction) {\n      var nextItem = _this.findNextEnabledCheckedItem(direction);\n\n      if (nextItem) {\n        _this.setCheckedValue({\n          checkedValue: nextItem.value,\n          shouldFocus: true,\n          event: event,\n          props: nextItem\n        });\n      }\n\n      event.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"findNextEnabledCheckedItem\", function (direction) {\n      if (!_this.props.items || !_this.props.items.length) {\n        return undefined;\n      }\n\n      var currentIndex = // if none of the values selected, set current index to the first item\n      _this.state.checkedValue !== undefined ? _findIndex(_this.props.items, function (item) {\n        return _this.getItemProps(item).value === _this.state.checkedValue;\n      }) : 0;\n\n      for (var newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n        if (newIndex < 0) {\n          newIndex = _this.props.items.length - 1;\n        } else if (newIndex >= _this.props.items.length) {\n          newIndex = 0;\n        }\n\n        if (newIndex === currentIndex) {\n          return undefined;\n        }\n\n        var itemProps = _this.getItemProps(_this.props.items[newIndex]);\n\n        if (!itemProps.disabled) {\n          return itemProps;\n        }\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleItemOverrides\", function (predefinedProps) {\n      return {\n        checked: typeof _this.state.checkedValue !== 'undefined' && _this.state.checkedValue === predefinedProps.value,\n        onClick: function onClick(event, itemProps) {\n          var value = itemProps.value,\n              disabled = itemProps.disabled;\n\n          if (!disabled && value !== _this.state.checkedValue) {\n            _this.setCheckedValue({\n              checkedValue: value,\n              shouldFocus: false,\n              event: event,\n              props: itemProps\n            });\n          }\n\n          _invoke(predefinedProps, 'onClick', event, itemProps);\n        },\n        shouldFocus: _this.state.shouldFocus\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderItems\", function (vertical) {\n      var items = _this.props.items;\n      var isNoneValueSelected = _this.state.checkedValue === undefined;\n      return _map(items, function (item, index) {\n        return RadioGroupItem.create(item, {\n          defaultProps: function defaultProps() {\n            return Object.assign({\n              vertical: vertical\n            }, index === 0 && isNoneValueSelected && {\n              tabIndex: 0\n            });\n          },\n          overrideProps: _this.handleItemOverrides\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(RadioGroup, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          vertical = _this$props.vertical;\n      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {\n        className: classes.root\n      }), childrenExist(children) ? children : this.renderItems(vertical));\n    }\n  }, {\n    key: \"setCheckedValue\",\n    value: function setCheckedValue(_ref2) {\n      var checkedValue = _ref2.checkedValue,\n          shouldFocus = _ref2.shouldFocus,\n          event = _ref2.event,\n          props = _ref2.props;\n      this.setState({\n        checkedValue: checkedValue,\n        shouldFocus: shouldFocus\n      });\n\n      _invoke(this.props, 'onCheckedValueChange', event, props);\n    }\n  }]);\n\n  return RadioGroup;\n}(AutoControlledComponent);\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n */\n\n\n_defineProperty(RadioGroup, \"displayName\", 'RadioGroup');\n\n_defineProperty(RadioGroup, \"deprecated_className\", radioGroupClassName);\n\n_defineProperty(RadioGroup, \"create\", void 0);\n\n_defineProperty(RadioGroup, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  items: customPropTypes.collectionShorthand,\n  onCheckedValueChange: PropTypes.func,\n  vertical: PropTypes.bool\n}));\n\n_defineProperty(RadioGroup, \"defaultProps\", {\n  as: 'div',\n  accessibility: radioGroupBehavior\n});\n\n_defineProperty(RadioGroup, \"autoControlledProps\", ['checkedValue']);\n\n_defineProperty(RadioGroup, \"Item\", RadioGroupItem);\n\nexport default withSafeTypeForAs(RadioGroup);","map":{"version":3,"sources":["components/RadioGroup/RadioGroup.tsx"],"names":["radioGroupClassName","RadioGroup","AutoControlledComponent","content","checkedValue","PropTypes","defaultCheckedValue","items","customPropTypes","collectionShorthand","onCheckedValueChange","func","vertical","bool","as","accessibility","radioGroupBehavior","RadioGroupItem","ElementType","classes","unhandledProps","children","forElements","applyAccessibilityKeyHandlers","root","childrenExist","nextItem","prevItem","item","shouldFocus","event","props","currentIndex","newIndex","itemProps","checked","predefinedProps","onClick","value","disabled","isNoneValueSelected","defaultProps","index","tabIndex","overrideProps","handleItemOverrides","withSafeTypeForAs"],"mappings":"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","sourcesContent":["// TODO:\n// vertical - padding variable?\nimport { Accessibility, radioGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport RadioGroupItem, { RadioGroupItemProps } from './RadioGroupItem';\nimport { WithAsProp, ComponentEventHandler, withSafeTypeForAs, ShorthandCollection } from '../../types';\n\nexport interface RadioGroupProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Value of the currently checked radio item. */\n  checkedValue?: number | string;\n\n  /**\n   * Called after radio group value is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All value props.\n   */\n  onCheckedValueChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Initial checkedValue value. */\n  defaultCheckedValue?: number | string;\n\n  /** Shorthand array of props for RadioGroup. */\n  items?: ShorthandCollection<RadioGroupItemProps>;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupClassName = 'ui-radiogroup';\n\nclass RadioGroup extends AutoControlledComponent<WithAsProp<RadioGroupProps>, any> {\n  static displayName = 'RadioGroup';\n\n  static deprecated_className = radioGroupClassName;\n\n  static create: ShorthandFactory<RadioGroupProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    items: customPropTypes.collectionShorthand,\n    onCheckedValueChange: PropTypes.func,\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: radioGroupBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['checkedValue'];\n\n  static Item = RadioGroupItem;\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, vertical } = this.props;\n    return (\n      <ElementType\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : this.renderItems(vertical)}\n      </ElementType>\n    );\n  }\n\n  actionHandlers = {\n    nextItem: event => this.setCheckedItem(event, 1),\n    prevItem: event => this.setCheckedItem(event, -1),\n  };\n\n  getItemProps = (item): RadioGroupItemProps => {\n    return (item as React.ReactElement<RadioGroupItemProps>).props || item;\n  };\n\n  setCheckedItem = (event, direction) => {\n    const nextItem = this.findNextEnabledCheckedItem(direction);\n\n    if (nextItem) {\n      this.setCheckedValue({\n        checkedValue: nextItem.value,\n        shouldFocus: true,\n        event,\n        props: nextItem,\n      });\n    }\n    event.preventDefault();\n  };\n\n  findNextEnabledCheckedItem = (direction): RadioGroupItemProps => {\n    if (!this.props.items || !this.props.items.length) {\n      return undefined;\n    }\n\n    const currentIndex =\n      // if none of the values selected, set current index to the first item\n      this.state.checkedValue !== undefined\n        ? _.findIndex(this.props.items, item => this.getItemProps(item).value === this.state.checkedValue)\n        : 0;\n\n    for (let newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n      if (newIndex < 0) {\n        newIndex = this.props.items.length - 1;\n      } else if (newIndex >= this.props.items.length) {\n        newIndex = 0;\n      }\n\n      if (newIndex === currentIndex) {\n        return undefined;\n      }\n\n      const itemProps = this.getItemProps(this.props.items[newIndex]);\n      if (!itemProps.disabled) {\n        return itemProps;\n      }\n    }\n    return undefined;\n  };\n\n  handleItemOverrides = predefinedProps => ({\n    checked: typeof this.state.checkedValue !== 'undefined' && this.state.checkedValue === predefinedProps.value,\n    onClick: (event, itemProps) => {\n      const { value, disabled } = itemProps;\n      if (!disabled && value !== this.state.checkedValue) {\n        this.setCheckedValue({ checkedValue: value, shouldFocus: false, event, props: itemProps });\n      }\n      _.invoke(predefinedProps, 'onClick', event, itemProps);\n    },\n    shouldFocus: this.state.shouldFocus,\n  });\n\n  renderItems = (vertical: boolean) => {\n    const { items } = this.props;\n    const isNoneValueSelected = this.state.checkedValue === undefined;\n\n    return _.map(items, (item, index) =>\n      RadioGroupItem.create(item, {\n        defaultProps: () => ({\n          vertical,\n          ...(index === 0 && isNoneValueSelected && { tabIndex: 0 }),\n        }),\n        overrideProps: this.handleItemOverrides,\n      }),\n    );\n  };\n\n  setCheckedValue({\n    checkedValue,\n    shouldFocus,\n    event,\n    props,\n  }: {\n    checkedValue: number | string;\n    shouldFocus: boolean;\n    event: React.SyntheticEvent;\n    props: RadioGroupItemProps;\n  }) {\n    this.setState({ checkedValue, shouldFocus });\n    _.invoke(this.props, 'onCheckedValueChange', event, props);\n  }\n}\n\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n */\nexport default withSafeTypeForAs<typeof RadioGroup, RadioGroupProps>(RadioGroup);\n"]},"metadata":{},"sourceType":"module"}