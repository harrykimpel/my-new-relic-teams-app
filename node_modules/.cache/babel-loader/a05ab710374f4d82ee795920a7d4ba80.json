{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getBasePlacement } from '../../utils/positioner';\nimport { withSafeTypeForAs } from '../../types';\nexport var tooltipContentClassName = 'ui-tooltip__content';\n\nvar TooltipContent = function TooltipContent(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TooltipContent.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      open = props.open,\n      placement = props.placement,\n      pointing = props.pointing,\n      pointerRef = props.pointerRef,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        basePlacement: getBasePlacement(placement, context.rtl),\n        open: open,\n        pointing: pointing\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps)), open && pointing && React.createElement(\"div\", {\n    className: classes.pointer,\n    ref: pointerRef\n  }), React.createElement(\"div\", getA11Props('content', {\n    className: classes.content\n  }), childrenExist(children) ? children : content));\n  setEnd();\n  return element;\n};\n\nTooltipContent.displayName = 'TooltipContent';\nTooltipContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref\n});\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes);\nTooltipContent.create = createShorthandFactory({\n  Component: TooltipContent,\n  mappedProp: 'content'\n});\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\n\nexport default withSafeTypeForAs(TooltipContent);","map":{"version":3,"sources":["components/Tooltip/TooltipContent.tsx"],"names":["tooltipContentClassName","TooltipContent","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","open","placement","pointing","pointerRef","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","basePlacement","getBasePlacement","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","ref","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n}\n\nexport type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const tooltipContentClassName = 'ui-tooltip__content';\n\nconst TooltipContent: React.FC<WithAsProp<TooltipContentProps>> &\n  FluentComponentStaticProps<TooltipContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TooltipContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    open,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TooltipContentStylesProps>(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      open,\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {open && pointing && <div className={classes.pointer} ref={pointerRef} />}\n\n      <div {...getA11Props('content', { className: classes.content })}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltipContent.displayName = 'TooltipContent';\n\nTooltipContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref,\n};\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes) as any;\n\nTooltipContent.create = createShorthandFactory({ Component: TooltipContent, mappedProp: 'content' });\n\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\nexport default withSafeTypeForAs<typeof TooltipContent, TooltipContentProps>(TooltipContent);\n"]},"metadata":{},"sourceType":"module"}