{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { accordionContentBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { useTelemetry, getElementType, useAccessibility, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var accordionContentClassName = 'ui-accordion__content';\nexport var AccordionContent = function AccordionContent(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(AccordionContent.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var children = props.children,\n      content = props.content,\n      accordionTitleId = props.accordionTitleId,\n      active = props.active,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        accordionTitleId: accordionTitleId\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var _useStyles = useStyles(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        active: active\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var element = React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  })), childrenExist(children) ? children : content);\n  setEnd();\n  return element;\n};\nAccordionContent.displayName = 'AccordionContent';\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content'\n};\nAccordionContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n});\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'dd'\n};\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes);\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content'\n});\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\n\nexport default withSafeTypeForAs(AccordionContent);","map":{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["accordionContentClassName","AccordionContent","context","React","setStart","setEnd","useTelemetry","children","content","accordionTitleId","active","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","handleClick","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","onClick","forElements","childrenExist","mappedProp","commonPropTypes","PropTypes","func","accessibility","as","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { accordionContentBehavior, Accessibility, AccordionContentBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { useTelemetry, getElementType, useAccessibility, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionContentBehaviorProps>;\n\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nexport const accordionContentClassName = 'ui-accordion__content';\n\nexport type AccordionContentStylesProps = Required<Pick<AccordionContentProps, 'active'>>;\n\nexport const AccordionContent: React.FC<WithAsProp<AccordionContentProps>> &\n  FluentComponentStaticProps<AccordionContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(AccordionContent.displayName, context.telemetry);\n\n  setStart();\n  const { children, content, accordionTitleId, active, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: () => ({\n      accordionTitleId,\n    }),\n    rtl: context.rtl,\n  });\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const { classes } = useStyles<AccordionContentStylesProps>(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: () => ({\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordionContent.displayName = 'AccordionContent';\n\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'dd',\n};\n\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes) as any;\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport default withSafeTypeForAs<typeof AccordionContent, AccordionContentProps>(AccordionContent);\n"]},"metadata":{},"sourceType":"module"}