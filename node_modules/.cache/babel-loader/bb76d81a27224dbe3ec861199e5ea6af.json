{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _each from \"lodash/each\";\nimport _invoke from \"lodash/invoke\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { accordionBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthand, createShorthandFactory } from '../../utils';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionContent from './AccordionContent';\nimport { withSafeTypeForAs } from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport { useAutoControlled, useAccessibility, useTelemetry, useUnhandledProps, getElementType, useStyles } from '@fluentui/react-bindings'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nexport var accordionClassName = 'ui-accordion';\nexport var accordionSlotClassNames = {\n  content: \"\".concat(accordionClassName, \"__content\"),\n  title: \"\".concat(accordionClassName, \"__title\")\n};\nexport var Accordion = function Accordion(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Accordion.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var expanded = props.expanded,\n      exclusive = props.exclusive,\n      accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      panels = props.panels,\n      renderPanelContent = props.renderPanelContent,\n      renderPanelTitle = props.renderPanelTitle;\n  var alwaysActiveIndex = expanded ? 0 : -1;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      activeIndex = _useAutoControlled2[0],\n      setActiveIndex = _useAutoControlled2[1];\n\n  var actionHandlers = {\n    moveNext: function moveNext(e) {\n      e.preventDefault();\n      focusHandler.moveNext();\n    },\n    movePrevious: function movePrevious(e) {\n      e.preventDefault();\n      focusHandler.movePrevious();\n    },\n    moveFirst: function moveFirst(e) {\n      e.preventDefault();\n      focusHandler.moveFirst();\n    },\n    moveLast: function moveLast(e) {\n      e.preventDefault();\n      focusHandler.moveLast();\n    }\n  };\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: Accordion.displayName,\n    actionHandlers: actionHandlers,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Accordion.displayName, {\n    className: accordionClassName,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedIndex = _React$useState2[0],\n      setfocusedIndex = _React$useState2[1];\n\n  var handleNavigationFocus = function handleNavigationFocus(index) {\n    setfocusedIndex(index);\n  };\n\n  React.useEffect(function () {\n    var targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    targetComponent && targetComponent.focus();\n  }, [focusedIndex]);\n\n  var getNavigationItemsSize = function getNavigationItemsSize() {\n    return props.panels.length;\n  };\n\n  var unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n  var ElementType = getElementType(props);\n  var focusHandler = new ContainerFocusHandler(getNavigationItemsSize, handleNavigationFocus, true);\n  var itemRefs = React.useMemo(function () {\n    return Array.from({\n      length: panels === null || panels === void 0 ? void 0 : panels.length\n    }, function () {\n      return React.createRef();\n    });\n  }, [panels === null || panels === void 0 ? void 0 : panels.length]);\n  var defaultAccordionTitleId = React.useMemo(function () {\n    return _uniqueId('accordion-title-');\n  }, []);\n  var defaultAccordionContentId = React.useMemo(function () {\n    return _uniqueId('accordion-content-');\n  }, []);\n\n  var computeNewIndex = function computeNewIndex(index) {\n    if (!isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it\n\n    return _includes(activeIndex, index) ? _without(activeIndex, index) : [].concat(_toConsumableArray(activeIndex), [index]);\n  };\n\n  var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {\n    return {\n      onClick: function onClick(e, titleProps) {\n        var index = titleProps.index;\n        var activeIndex = computeNewIndex(index);\n        setActiveIndex(activeIndex);\n        setfocusedIndex(index);\n\n        _invoke(props, 'onActiveIndexChange', e, Object.assign({}, props, {\n          activeIndex: activeIndex\n        }));\n\n        _invoke(predefinedProps, 'onClick', e, titleProps);\n\n        _invoke(props, 'onTitleClick', e, titleProps);\n      },\n      onFocus: function onFocus(e, titleProps) {\n        _invoke(predefinedProps, 'onFocus', e, titleProps);\n\n        setfocusedIndex(predefinedProps.index);\n      }\n    };\n  };\n\n  var isIndexActive = function isIndexActive(index) {\n    return exclusive ? activeIndex === index : _includes(activeIndex, index);\n  };\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n\n\n  var isIndexActionable = function isIndexActionable(index) {\n    if (!isIndexActive(index)) {\n      return true;\n    }\n\n    return !expanded || !exclusive && activeIndex.length > 1;\n  };\n\n  var renderPanels = function renderPanels() {\n    var children = [];\n    focusHandler.syncFocusedIndex(focusedIndex);\n\n    _each(panels, function (panel, index) {\n      var content = panel.content,\n          title = panel.title;\n      var active = isIndexActive(+index);\n      var canBeCollapsed = isIndexActionable(+index);\n      var titleId = title['id'] || \"\".concat(defaultAccordionTitleId).concat(index);\n      var contentId = content['id'] || \"\".concat(defaultAccordionContentId).concat(index);\n      var contentRef = itemRefs[index];\n      children.push(createShorthand(AccordionTitle, title, {\n        defaultProps: function defaultProps() {\n          return {\n            className: accordionSlotClassNames.title,\n            active: active,\n            index: +index,\n            contentRef: contentRef,\n            canBeCollapsed: canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId\n          };\n        },\n        overrideProps: handleTitleOverrides,\n        render: renderPanelTitle\n      }));\n      children.push(createShorthand(AccordionContent, content, {\n        defaultProps: function defaultProps() {\n          return {\n            className: accordionSlotClassNames.content,\n            active: active,\n            id: contentId,\n            accordionTitleId: titleId\n          };\n        },\n        render: renderPanelContent\n      }));\n    });\n\n    return children;\n  };\n\n  var element = React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n    className: classes.root\n  }, unhandledProps)), rtlTextContainer.getAttributes({\n    forElements: [children]\n  })), childrenExist(children) ? children : renderPanels());\n  setEnd();\n  return element;\n};\nAccordion.displayName = 'Accordion';\nAccordion.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({\n    content: customPropTypes.itemShorthand,\n    title: customPropTypes.itemShorthand\n  }))]),\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func\n});\nAccordion.defaultProps = {\n  accessibility: accordionBehavior,\n  as: 'dl'\n};\nAccordion.handledProps = Object.keys(Accordion.propTypes);\nAccordion.Title = AccordionTitle;\nAccordion.Content = AccordionContent;\nAccordion.create = createShorthandFactory({\n  Component: Accordion\n});\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\n\nexport default withSafeTypeForAs(Accordion);","map":{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["accordionClassName","accordionSlotClassNames","content","title","Accordion","context","React","setStart","setEnd","useTelemetry","expanded","exclusive","accessibility","children","className","design","styles","variables","panels","renderPanelContent","renderPanelTitle","props","alwaysActiveIndex","activeIndex","setActiveIndex","useAutoControlled","defaultValue","value","initialValue","actionHandlers","moveNext","e","focusHandler","movePrevious","moveFirst","moveLast","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","focusedIndex","setfocusedIndex","handleNavigationFocus","targetComponent","itemRefs","getNavigationItemsSize","unhandledProps","useUnhandledProps","ElementType","getElementType","length","defaultAccordionTitleId","defaultAccordionContentId","computeNewIndex","isIndexActionable","index","handleTitleOverrides","onClick","titleProps","onFocus","predefinedProps","isIndexActive","renderPanels","panel","active","canBeCollapsed","titleId","contentId","contentRef","createShorthand","defaultProps","id","accordionContentId","overrideProps","render","accordionTitleId","element","root","forElements","childrenExist","customPropTypes","PropTypes","defaultActiveIndex","onTitleClick","onActiveIndexChange","itemShorthand","func","as","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, accordionBehavior, AccordionBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport AccordionTitle, { AccordionTitleProps } from './AccordionTitle';\nimport AccordionContent, { AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport {\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useUnhandledProps,\n  getElementType,\n  useStyles,\n} from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionBehaviorProps>;\n}\n\nexport type AccordionStylesProps = never;\nexport const accordionClassName = 'ui-accordion';\nexport const accordionSlotClassNames: AccordionSlotClassNames = {\n  content: `${accordionClassName}__content`,\n  title: `${accordionClassName}__title`,\n};\n\nexport const Accordion: React.FC<WithAsProp<AccordionProps>> &\n  FluentComponentStaticProps<AccordionProps> & {\n    Title: typeof AccordionTitle;\n    Content: typeof AccordionContent;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Accordion.displayName, context.telemetry);\n  setStart();\n  const {\n    expanded,\n    exclusive,\n    accessibility,\n    children,\n    className,\n    design,\n    styles,\n    variables,\n    panels,\n    renderPanelContent,\n    renderPanelTitle,\n  } = props;\n  const alwaysActiveIndex = expanded ? 0 : -1;\n\n  const [activeIndex, setActiveIndex] = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex],\n  });\n\n  const actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      focusHandler.moveLast();\n    },\n  };\n\n  const getA11yProps = useAccessibility<AccordionBehaviorProps>(accessibility, {\n    debugName: Accordion.displayName,\n    actionHandlers,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AccordionStylesProps>(Accordion.displayName, {\n    className: accordionClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [focusedIndex, setfocusedIndex] = React.useState<number>();\n\n  const handleNavigationFocus = (index: number) => {\n    setfocusedIndex(index);\n  };\n\n  React.useEffect(() => {\n    const targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    targetComponent && targetComponent.focus();\n  }, [focusedIndex]);\n\n  const getNavigationItemsSize = () => props.panels.length;\n  const unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const focusHandler: ContainerFocusHandler = new ContainerFocusHandler(\n    getNavigationItemsSize,\n    handleNavigationFocus,\n    true,\n  );\n\n  const itemRefs = React.useMemo<React.RefObject<HTMLElement>[]>(\n    () => Array.from({ length: panels?.length }, () => React.createRef()),\n    [panels?.length],\n  );\n\n  const defaultAccordionTitleId = React.useMemo(() => _.uniqueId('accordion-title-'), []);\n  const defaultAccordionContentId = React.useMemo(() => _.uniqueId('accordion-content-'), []);\n\n  const computeNewIndex = (index: number): number | number[] => {\n    if (!isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  const handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = computeNewIndex(index);\n      setActiveIndex(activeIndex);\n      setfocusedIndex(index);\n\n      _.invoke(props, 'onActiveIndexChange', e, { ...props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      setfocusedIndex(predefinedProps.index);\n    },\n  });\n\n  const isIndexActive = (index: number): boolean => {\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  const isIndexActionable = (index: number): boolean => {\n    if (!isIndexActive(index)) {\n      return true;\n    }\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  const renderPanels = () => {\n    const children: any[] = [];\n    focusHandler.syncFocusedIndex(focusedIndex);\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = isIndexActive(+index);\n      const canBeCollapsed = isIndexActionable(+index);\n      const titleId = title['id'] || `${defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${defaultAccordionContentId}${index}`;\n      const contentRef = itemRefs[index];\n\n      children.push(\n        createShorthand(AccordionTitle, title, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.title,\n            active,\n            index: +index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      children.push(\n        createShorthand(AccordionContent, content, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.content,\n            active,\n            id: contentId,\n            accordionTitleId: titleId,\n          }),\n          render: renderPanelContent,\n        }),\n      );\n    });\n    return children;\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderPanels()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordion.displayName = 'Accordion';\n\nAccordion.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  defaultActiveIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        content: customPropTypes.itemShorthand,\n        title: customPropTypes.itemShorthand,\n      }),\n    ),\n  ]),\n\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func,\n};\n\nAccordion.defaultProps = {\n  accessibility: accordionBehavior,\n  as: 'dl',\n};\nAccordion.handledProps = Object.keys(Accordion.propTypes) as any;\nAccordion.Title = AccordionTitle;\nAccordion.Content = AccordionContent;\nAccordion.create = createShorthandFactory({\n  Component: Accordion,\n});\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport default withSafeTypeForAs<typeof Accordion, AccordionProps>(Accordion);\n"]},"metadata":{},"sourceType":"module"}